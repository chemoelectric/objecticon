#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui


############################################################################
#
# Class for representing a Sizer on the canvas.
#
class CanvasSizer(CanvasComponent,Sizer)
   #
   # Overrides CanvasComponent.min_height()
   #
   public override min_height()
      return scale(3)
   end

   #
   # Overrides CanvasComponent.min_width()
   #
   public override min_width()
      return scale(3)
   end

   #
   # Generate code into Code object c.
   #
   public override gen_code(c)
      local s
      CanvasComponent.gen_code(c)
      if \self.lo | \self.hi then {
         s := "set_range(" || (\self.lo|"&null") || ", " ||
            (\self.hi|"&null") || ")" 
         c.chain(s)
      }
      if \self.is_horizontal_flag then
         c.chain("set_is_horizontal(&yes)")
   end

   #
   # Duplicate object.
   #
   public override dup()
      local c
      c := CanvasSizer()
      CanvasComponent.dup_fields(c)
      c.is_horizontal_flag := self.is_horizontal_flag
      c.lo := self.lo
      c.hi := self.hi
      return c
   end

   #
   # Return the I/O template.
   #
   public override get_template()
      suspend CanvasComponent.get_template() |
          ["Lo", "lo"] |
          ["Hi", "hi"] |
          ["Is horizontal flag", "is_horizontal_flag"]
   end

   #
   # Open the configuration dialog box.
   #
   public override dialog()
      return CanvasSizerDialog(self)
   end

   public override allows_null_width()
      return /self.is_horizontal_flag
   end

   public override allows_null_height()
      return \self.is_horizontal_flag
   end

   public override new()
      Sizer.new()
      CanvasComponent.new()
      self.class_name := "Sizer"
      self.import_name := "gui"
      self.name := "sizer"
      return
   end
end

