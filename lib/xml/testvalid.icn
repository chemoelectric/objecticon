#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import xml, ipl.options, io

procedure main(a)
   local fmt, p, s, d, t, x, opt, ss
   fmt := CanonicalXmlFormatter(ss := RamStream())
   p := XmlParser().set_preserve_insignificant_whitespace(&yes).set_do_namespaces(&no)

   opt := options(a, [Opt("u",, "Ucs input")], "Usage: testvalid SOURCE [OUTPUT]")
   *a > 0 | help_stop("Need a parameter")

   s := Files.file_to_string(a[1]) | stop("Couldn't open ", a[1], ": ", &why)
   if \opt["u"] then
      s := ucs(s) | stop("Invalid UTF-8 in valid case ", a[1])

   if d := p.parse(s) then {
      if d.validity_errors > 0 then {
         write("Testcase : ", a[1], " unexpectedly gave validity errors")
         write(s)
         write("Failure")
         write("End===============================================================")
         exit(1)
      }

      if *a = 1 then 
         exit(0)

      t := Files.file_to_string(a[2]) | stop("Couldn't open ", a[2], ": ", &why)

      fmt.format(d)
      x := ss.done()
      if x == t then
         exit(0)

      write("Testcase : ", a[1])
      write("Parsed:")
      write(image(x))
      write("Test:")
      write(image(t))
      write("Failure")
      write("End===============================================================")
      exit(1)
   } else {
      write("Couldn't parse case ", a[1], ":")
      write(s)
      write("Failure")
      write("End===============================================================")
      exit(1)
   }
end
