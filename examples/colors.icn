import
   gui, graphics, ipl.graphics

class ColorRectangle(Component)
   private c

   public override display()
      self.cbwin.set_fg(c)
      self.cbwin.fill_rectangle(self.x, self.y, self.w, self.h)
   end

   public set_color(c)
      self.c := c
      invalidate()
   end
end

class Untitled(Dialog)
   private
      blue,
      red,
      green,
      panel_1,
      rgb_label,
      label_1,
      border_content_1,
      border_1,
      label_2,
      hue,
      light,
      hls_label,
      border_2,
      saturation,
      border_content_2,
      custom_1,
      text_button_1,
      colr,
      panel_2

   public override component_setup()
      self.setup()
      rgb_label.set_menu_on_rpress(&yes)
      update_rgb()
   end

   public override end_dialog()
   end

   public override init_dialog()
   end

   public override new()
      Dialog.new()
      return
   end

   private update_rgb()
      local c, hls
      c := red.get_value() || "," || green.get_value() || "," || blue.get_value()
      colr.set_color(c)
      rgb_label.set_label(c)
      hls := rgb2hls(color2rgb(c))
      hue.set_value(integer(hls.h))
      light.set_value(integer(hls.l * 100))
      saturation.set_value(integer(hls.s * 100))
      hls_label.set_label(hue.get_value() || ":" || light.get_value() || ":" || saturation.get_value())
   end

   private update_hls()
      local rgb, l
      hls_label.set_label(hue.get_value() || ":" || light.get_value() || ":" || saturation.get_value())
      rgb := rgb2color(hls2rgb(hls(hue.get_value(), light.get_value()/100.0, saturation.get_value()/100.0)))
      colr.set_color(rgb)
      l := Window.parse_color(rgb)
      rgb_label.set_label(l.red || "," || l.green || "," || l.blue)
      red.set_value(l.red)
      green.set_value(l.green)
      blue.set_value(l.blue)
   end

   private on_blue(ev)
      update_rgb()   
   end

   private on_green(ev)
      update_rgb()   
   end

   private on_red(ev)
      update_rgb()   
   end

   private on_hue(ev)
      update_hls()
   end

   private on_light(ev)
      update_hls()
   end

   private on_saturation(ev)
      update_hls()
   end

   private setup()
      local paint_2, layout_4, paint_4, layout_1, paint_1, layout_3, paint_3, layout_5, paint_5, layout_2
      self.set_size(scale(397), scale(320))
      paint_2 := TextPaint("RGB")
      label_1 := Label().
         set_pos(scale(286), scale(248)).
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_paint(paint_2)
      red := Slider().
         set_size(scale(169), scale(20)).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         connect(self.on_red, Event.VALUE_CHANGED).
         set_range(0, 65535).
         set_value(0).
         set_increment_size(1024).
         set_is_horizontal(&yes)
      green := Slider().
         set_size(scale(169), scale(20)).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         connect(self.on_green, Event.VALUE_CHANGED).
         set_range(0, 65535).
         set_value(0).
         set_increment_size(1024).
         set_is_horizontal(&yes)
      blue := Slider().
         set_size(scale(169), scale(20)).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         connect(self.on_blue, Event.VALUE_CHANGED).
         set_range(0, 65535).
         set_value(0).
         set_increment_size(1024).
         set_is_horizontal(&yes)
      paint_1 := TextPaint("Label")
      rgb_label := Label().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_paint(paint_1)
      layout_1 := GridLayout().
         set_extra("cells")
      border_content_1 := Component().
         clear_constraints().
         set_layout(layout_1).
         add(red).
         add(green).
         add(blue).
         add(rgb_label)
      border_1 := Border().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_title(label_1).
         set_content(border_content_1)
      paint_4 := TextPaint("HLS")
      label_2 := Label().
         set_pos(scale(406), scale(228)).
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_paint(paint_4)
      hue := Slider().
         set_size(scale(169)).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         connect(self.on_hue, Event.VALUE_CHANGED).
         set_range(0, 360).
         set_value(0).
         set_increment_size(10).
         set_is_horizontal(&yes)
      light := Slider().
         set_size(scale(100)).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         connect(self.on_light, Event.VALUE_CHANGED).
         set_range(0, 100).
         set_value(0).
         set_increment_size(5).
         set_is_horizontal(&yes)
      saturation := Slider().
         set_size(scale(100)).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         connect(self.on_saturation, Event.VALUE_CHANGED).
         set_range(0, 100).
         set_value(0).
         set_increment_size(1).
         set_is_horizontal(&yes)
      paint_3 := TextPaint("Label")
      hls_label := Label().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_paint(paint_3)
      layout_2 := GridLayout().
         set_extra("cells")
      border_content_2 := Component().
         clear_constraints().
         set_layout(layout_2).
         add(hue).
         add(light).
         add(saturation).
         add(hls_label)
      border_2 := Border().
         clear_constraints().
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_title(label_2).
         set_content(border_content_2)
      layout_5 := GridLayout().
         set_doi(scale(0)).
         set_extra("cells")
      panel_2 := Panel().
         clear_constraints().
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_layout(layout_5).
         add(border_1).
         add(border_2)
      self.add(panel_2)
      colr := ColorRectangle().
         set_size(scale(136), scale(134)).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0)
      paint_5 := TextPaint("Quit")
      text_button_1 := TextButton().
         clear_constraints().
         connect(self.dispose, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_5)
      layout_4 := GridLayout().
         set_doi(scale(0)).
         set_extra("cells")
      panel_1 := Panel().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_layout(layout_4).
         add(colr).
         add(text_button_1)
      self.add(panel_1)
      self.connect(self.dispose, Event.WINDOW_CLOSE_BUTTON)
      layout_3 := GridLayout().
         set_extra("cells")
      self.set_layout(layout_3)
   end
end

procedure main()
   local d
   d := Untitled()
   d.show_modal()
end

### Ivib-v2 layout: layouts/$.layout
