package gui

import ipl.pdco

#
# A class for wrapping a transient popup editor.
#
class PopupEditor(Component)
   private old_focus, editor

   public popup(comp, ev)
      # Copy attribs of the parent component
      set_all_wattribs(comp.get_effective_wattribs())
      comp.parent_dialog.add(self)
      initially()
      resize()
      old_focus := parent_dialog.focus
      parent_dialog.set_focus(editor.find_focus())
      parent_dialog.connect(dialog_event, Event.ICON)
      invalidate()
      return self
   end

   public layout()
      editor.x := self.x
      editor.y := self.y
      editor.w := self.w
      editor.h := self.h
      editor.layout()
   end

   public close_all()
      if \parent_dialog.focus === Seq{traverse_components_postorder()} then
         parent_dialog.set_focus(old_focus)
      invalidate()
      finally()
   end

   public finally()
      parent_dialog.disconnect_object(self)
      parent.remove(self)
      cast(self,Component).finally()
   end

   public dialog_event(e)
      # Close on escape being pressed.
      if /e.release & (e.code === "\e") then 
         close_all()
   end

   public new(editor)
      cast(self,Component).new()
      self.editor := editor
      editor.connect(close_all, Event.ACTION)
      self.add(editor)
      return
   end
end
