############################################################################
#
#	File:     patterns.icn
#
#	Subject:  Procedures for SNOBOL4-style pattern matching
#
#	Author:   Ralph E. Griswold
#
#	Date:     June 10, 1988
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#  
#  These procedures provide procedural equivalents for most SNOBOL4
#  patterns and some extensions. 
#
#  Procedures and their pattern equivalents are:
#  
#       Any(s)         ANY(S)
#  
#       Arb()          ARB
#  
#       Arbno(p)       ARBNO(P)
#  
#       Arbx(i)        ARB(I)
#  
#       Bal()          BAL
#  
#       Break(s)       BREAK(S)
#  
#       Breakx(s)      BREAKX(S)
#  
#       Cat(p1,p2)     P1 P2
#  
#       Discard(p)     /P
#  
#       Exog(s)        \S
#  
#       Find(s)        FIND(S)
#  
#       Len(i)         LEN(I)
#  
#       Limit(p,i)     P \ i
#  
#       Locate(p)      LOCATE(P)
#  
#       Marb()         longest-first ARB
#  
#       Notany(s)      NOTANY(S)
#  
#       Pos(i)         POS(I)
#  
#       Replace(p,s)   P = S
#  
#       Rpos(i)        RPOS(I)
#  
#       Rtab(i)        RTAB(I)
#  
#       Span(s)        SPAN(S)
#  
#       String(s)      S
#  
#       Succeed()      SUCCEED
#  
#       Tab(i)         TAB(I)
#  
#       Xform(f,p)     F(P)
#  
#     The following procedures relate to the application and control
#  of pattern matching:
#  
#       Apply(s,p)     S ? P
#  
#       Mode()         anchored or unanchored matching (see Anchor
#                      and Float)
#  
#       Anchor()       &ANCHOR = 1  if Mode := Anchor
#  
#       Float()        &ANCHOR = 0  if Mode := Float
#  
#  In addition to the procedures above, the following expressions
#  can be used:
#  
#       p1() | p2()    P1 | P2
#  
#       v <- p()       P . V  (approximate)
#  
#       v := p()       P $ V  (approximate)
#  
#       fail           FAIL
#  
#       =s             S  (in place of String(s))
#  
#       p1() || p2()   P1 P2  (in place of Cat(p1,p2))
#  
#  Using this system, most SNOBOL4 patterns can be satisfactorily
#  transliterated into Icon procedures and expressions. For example,
#  the pattern
#  
#          SPAN("0123456789") $ N "H" LEN(*N) $ LIT
#  
#  can be transliterated into
#  
#          (n <- Span('0123456789')) || ="H" ||
#             (lit <- Len(n))
#  
#  Concatenation of components is necessary to preserve the
#  pattern-matching properties of SNOBOL4.
#  
#  Caveats: Simulating SNOBOL4 pattern matching using the procedures
#  above is inefficient.
#  
############################################################################

package ipl.patterns

global Mode, Float

# &ANCHOR = 1
procedure Anchor()			
   suspend ""
end

# ANY(S)
procedure Any(s)			
   suspend tab(any(s))
end

# S ? P
procedure Apply(s,p)			
   local tsubject, tpos, value
   initial {
      Float := Arb
      /Mode := Float			#  &ANCHOR = 0 if not already set
      }
   suspend (
      (tsubject := &subject) &
      (tpos := &pos) &
      (&subject <- s) &
      (&pos <- 1) &
      (Mode() & (value := p())) &
      (&pos <- tpos) &			# to restore on backtracking
      (&subject <- tsubject) &		# note this sets &pos
      (&pos <- tpos) &			# to restore on evaluation
      value
      )
end

# ARB
procedure Arb()				
   suspend tab(&pos to *&subject + 1)
end

# ARBNO(P)
procedure Arbno(p)			
   suspend "" | (p() || Arbno(p))
end

# ARB(I)
procedure Arbx(i)			
   suspend tab(&pos to *&subject + 1 by i)
end

# BAL
procedure Bal()				
   suspend Bbal() || Arbno(Bbal)
end

# used by Bal()
procedure Bbal()			
   suspend (="(" || Arbno(Bbal) || =")") | Notany("()")
end

# BREAK(S)
procedure Break(s)			
   suspend tab(upto(s) \ 1)
end

# BREAKX(S)
procedure Breakx(s)			
   suspend tab(upto(s))
end

# P1 P2
procedure Cat(p1,p2)			
   suspend p1() || p2()
end

# /P
procedure Discard(p)			
   suspend p() & ""
end

# \S
procedure Exog(s)			
   suspend s
end

# FIND(S)
procedure Find(s)			
   suspend tab(find(s) + 1)
end

# LEN(I)
procedure Len(i)			
   suspend move(i)
end

# P \ i
procedure Limit(p,i)			
   local j
   j := &pos
   suspend p() \ i
   &pos := j
end

# LOCATE(P)
procedure Locate(p)			
   suspend tab(&pos to *&subject + 1) & p()
end

# max-first ARB
procedure Marb()			
   suspend tab(*&subject + 1 to &pos by -1)
end

# NOTANY(S)
procedure Notany(s)			
   suspend tab(any(~s))
end

# POS(I)
procedure Pos(i)			
   suspend pos(i + 1) & ""
end

# P = S
procedure Replace(p,s)			
   suspend p() & s
end

# RPOS(I)
procedure Rpos(i)			
   suspend pos(-i) & ""
end

# RTAB(I)
procedure Rtab(i)			
   suspend tab(-i)
end

# SPAN(S)
procedure Span(s)			
   suspend tab(many(s))
end

# S
procedure String(s)			
   suspend =s
end

# SUCCEED
procedure Succeed()			
   suspend |""
end

# TAB(I)
procedure Tab(i)			
   suspend tab(i + 1)
end

# F(P)
procedure Xform(f,p)			
   suspend f(p())
end
