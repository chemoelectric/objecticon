#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package util

import lang, ipl.scan(max_many), ipl.strings(replace)

final abstract class Format()
   public static const
      SIG_DIGITS,
      DECIMAL_POINT,
      THOUSANDS_SEPARATOR

   private static init()
      # Max number of significant digits output by numeric_to_string
      SIG_DIGITS := 14
      DECIMAL_POINT := env_string("OI_FORMAT_DECIMAL_POINT") | "."
      THOUSANDS_SEPARATOR := env_string("OI_FORMAT_THOUSANDS_SEPARATOR") | ","
   end

   #
   # Convert a string to an integer.  Unlike the idiomatic
   # `integer("16r" || s)` technique, this does not create a temporary
   # string.  It is therefore suitable for use in loops which build up
   # a lengthy concatenated string result.
   #
   # :Parameters :
   # :  `s` - The input string
   # :  `base` - The desired base of the result, default 16
   # 
   public static string_to_int(s, base)
      local r, c, d, neg
      static dig
      initial {
         dig := table()
         every c := !"0123456789abcdefABCDEF" do
            dig[c] := integer("16r" || c)
      }
      s := need_string(s)
      base := need_integer(\base, 2, 16) | 16
      if s[1] == "-" then {
         s := s[2:0]
         neg := &yes
      }
      r := 0
      every c := !s do {
         d := (base > member(dig, c)) | fail
         r := r * base + d
      }
      return if /neg then r else -r
   end
      
   #
   # Convert an integer to a string.
   #
   # :Parameters :
   # :  `base` - The desired base of the result, default 16
   # :  `p` - The minimum width of the result, padding with zeroes
   #               if necessary.
   #
   public static int_to_string(subject, base, p)
      local s, n, digs, neg
      s := ""
      base := need_integer(\base, 2, 16) | 16
      p := need_integer(\p, 0) | 1
      n := need_integer(subject)
      if n < 0 then {
         n := -n
         neg := &yes
      }
      digs := "0123456789ABCDEF"[1:base + 1]
      while n > 0 do {
         s := digs[n % base + 1] || s
         n /:= base
      }

      if p > *s then
         s := repl("0", p - *s) || s

      if \neg then
         s := "-" || s

      return s
   end

   #
   # Convert a numeric to a string.
   #
   # :Parameters :
   # :  `p` - The number of decimal places to produce (default 4).
   # :  `f` -  A cset of flags.  If c contains 'e' then the output is
   #           in scientific notation.  'E' is the same, but uses a
   #           a capital "E" in the result. If c contains ',' then commas
   #           are introduced into the non-fractional part of the number;
   #           if c contains '+' then a leading + is added to positive
   #           numbers.  If c contains 's' then trailing fractional
   #           zeroes are replaced with spaces, whilst 'z' means drop
   #           such zeroes altogether.
   #
   public static numeric_to_string(subject, p, f)
      local neg, s, t, lim, d, zs, dig, i, n, ec

      f := need_cset(\f) | ''
      n := need_numeric(subject)
      p := need_integer(\p, 0) | 4

      if n < 0 then {
         n := -n
         neg := &yes
      }
      any(f, ec <- "e"|"E")
      if /ec & type(n) == "integer" then 
         s := string(n) || repl("0", p)
      else {
         t := norm(n)
         lim := if \ec then p else p + t[2]
         if lim >= -1 then {
            s := ""
            d := t[1]
            if lim > SIG_DIGITS then {
               zs := repl("0", lim - SIG_DIGITS)
               lim := SIG_DIGITS
            }
            every 0 to lim do {
               s ||:= dig := integer(d)
               d := (d - dig) * 10.0
            }
            if integer(d) >= 5 then {
               (every i := *s to 1 by -1 do
                if s[i] := 10 > s[i] + 1 then break
                else s[i] := 0
                ) | {          # need to add 1 to left of s
                   s := "1" || s
                   if \ec then {
                      s[-1] := ""
                      t[2] +:= 1
                   }
                }
            }
            s ||:= \zs
            s := repl("0", 0 < p + 1 - *s) || s
         } 
         else s := repl("0", p + 1)
      }

      if any(f, ",") then
         every s[*s - p - 3 to 1 by -3] ||:= THOUSANDS_SEPARATOR

      if p > 0 then {
         s[-p - 1] ||:= DECIMAL_POINT
         if any(f, "s"| "z") then {
            "0" ~== s[i := *s to *s - p + 1 by -1]         
            s[i + 1 : 0] := if any(f, "s") then
               repl(" ", *s - i)
            else ""
         }
      }
      if \neg then
         s := "-" || s
      else if any(f, "+") then 
         s := "+" || s

      return if \ec then
         s || ec || (if t[2] < 0 then "-" else "+") || abs(t[2])
      else s   
   end

   private static norm(n)
      local m, e, ve, s
      static pwr
      initial pwr := [1e1, 1e2, 1e4, 1e8, 1e16, 1e32]

      # Do integers separately so that we don't have any problems with
      # large integers outside of the range of reals.
      #
      if type(n) == "integer" then {
         s := string(n)
         e := *s - 1
         s[1] ||:= "."
         return [real(s), e]
      }

      if n = 0.0 then
         return [0.0, 0]

      m := if n < 1.0 then 1.0 / n else n
      e := 0

      if not(pwr[1 + (ve := 1 to *pwr)] > m) then {
         while m /:= (m >= pwr[ve]) do
            e +:= 2 ^ (ve - 1)
         ve -:= 1
      }

      # invariant : 1 <= m < pwr[1 + ve] & m * 10 ^ e = m0 
      while m >= 10.0 do {
         if m /:= (m >= pwr[ve]) then
            e +:= 2 ^ (ve - 1)
         ve -:= 1
      }

      if n < 1.0 then {
         e := -e
         if m := 10.0 / (1.0 ~= m) then 
            e -:= 1
      }
      return [m, e]
   end

   private static unescape_char()
      local ch
      return case string(ch := esc1()) of {
         "n": "\n"
         "l": "\l"
         "b": "\b"
         "d": "\d"
         "e": "\e"
         "r": "\r"
         "t": "\t"
         "v": "\v"
         "f": "\f"
         default:  ch
      }
   end

   private static hex_dig(n)
      local i
      i := string_to_int(tab(max_many('0-9a-fA-F', n))) | 
         return error("Missing hex digits after escape")
      return (16r10FFFF >= i) | error("Code point out of range")
   end

   private static oct_dig()
      local i
      # Assume we're at a digit, so the following must succeed.
      i := string_to_int(tab(max_many('0-7', 3)), 8)
      return (255 >= i) | error("Octal escape out of range")
   end

   private static unescape_ctl()
      return iand(ord(esc1()), 8r37)
   end

   private static esc1()
      return move(1) | error("Incomplete escape")
   end

   #
   # Remove escape sequences from `s`.
   #
   public static unescape(s)
      local res
      s := need_text(s)
      s ? {
         # Shortcut for common case
         upto('\\') | return s
         res := ""
         repeat {
            res ||:= string(tab(upto('\\') | 0))
            move(1) | break
            res ||:= (if any('0-7') then
                    char(oct_dig())
                 else if ="x" then
                    char(hex_dig(2))
                 else if ="N" then
                    "\N"
                 else if ="u" then
                    Text.utf8_seq(hex_dig(4))
                 else if ="U" then
                    Text.utf8_seq(hex_dig(6))
                 else if ="^" then
                    char(unescape_ctl())
                 else 
                    string(unescape_char())) | fail
         }
         return if type(s) == "ucs" then ucs(res) | error("Invalid UTF-8 escape sequence") else res
      }
   end

   #
   # Remove escape sequences from `s`, but return the corresponding cset rather than
   # a string.
   #
   public static cset_unescape(s)
      local l, state, c, prev, esc_flag
      s := need_text(s)
      state := 0
      l := []
      s ? until pos(0) do {
         if ="\\" then {
            esc_flag := &yes
            c := (if any('0-7') then
                     oct_dig()
                  else if ="x" then
                     hex_dig(2)
                  else if ="u" then
                     hex_dig(4)
                  else if ="U" then
                     hex_dig(6)
                  else if ="^" then
                     unescape_ctl()
                  else 
                     ord(unescape_char())) | fail
         } else {
            esc_flag := &no
            c := ord(move(1))
         }

         case state of {
            0: {
               prev := c
               state := 1
            }
            1 : {
               if /esc_flag & (c = 45) then
                  state := 2
               else {
                  put(l, prev)
                  put(l, prev)
                  prev := c
               }                     
            }
            2 : {
               put(l, prev)
               put(l, c)
               state := 0
            }
         }
      }
      if state = 1 then {
         put(l, prev)
         put(l, prev)
      }
      else if state = 2 then
         return error("Incomplete cset range");
      return Text.create_cset(l)
   end

   # Convert a string into shell format by escaping certain special
   # shell characters.
   #
   public static shell_escape(s)
      local t, ch
      s := need_text(s)
      if *s = 0 then
         return s || "$''"
      t := ""
      s ? {
         while t ||:= string(tab(upto('\0-\x1f\x7f|\\*;?@+&#()<>~[]{}!$`\'\" '))) do {
            t ||:= case ch := string(move(1)) of {
               "\x07": "$'\\a'"
               "\b" : "$'\\b'"
               "\e" : "$'\\e'"
               "\f" : "$'\\f'"
               "\n" : "$'\\n'"
               "\r" : "$'\\r'"
               "\t" : "$'\\t'"
               "\v" : "$'\\v'"
               !'\0-\x1f\x7f' : "$'\\x" || int_to_string(ord(ch),,2) || "'"
               default : "\\" || ch
            }
         }
         return t || tab(0)
      }
   end

   # Convert a string into rc shell format by enclosing in single quotes
   #
   public static rc_escape(s)
      return if *s = 0 then
         s || "''"
      else if upto('=^|*?&#()<>[]{}$`\' ', s) then
         "'" || replace(s, "'", "''") || "'"
      else
         s
   end

   #
   # Convert the subject integer into words, eg 231 to "Two Hundred and Thirty-One"
   #
   public static int_to_words(subject)
      local n, s, i, m
      static small, tens, pwr10, pwr10num

      initial {
         small := ["One", "Two", "Three", "Four", "Five", "Six",
                   "Seven", "Eight", "Nine", "Ten", "Eleven", 
                   "Twelve", "Thirteen", "Fourteen", "Fifteen",
                   "Sixteen", "Seventeen", "Eighteen", "Nineteen"]

         tens := ["Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty",
                  "Seventy", "Eighty", "Ninety"]

         pwr10 := ["Million", "Thousand", "Hundred"]

         pwr10num := [1000000, 1000, 100]
      }

      n := need_integer(subject)

      s := ""

      every i := 1 to *pwr10num do
         if (m := n / pwr10num[i]) > 0 then {
            if *s > 0 then
               s ||:= " "

            s ||:= int_to_words(m) || " " || pwr10[i]

            n %:= pwr10num[i]
         }

      if n = 0 then {
         if *s = 0 then
            s := "Zero"
      } else {
         if *s > 0 then
            s ||:= " and "

         if n < 20 then
            s ||:= small[n]
         else {
            s ||:= tens[n / 10]
            if n % 10 > 0 then
               s ||:= "-" || small[n % 10]
         }
      }

      return s
   end
end
