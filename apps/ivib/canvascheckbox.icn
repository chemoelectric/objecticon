#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui


############################################################################
#
# Class for representing a CheckBox on the canvas.
#
class CanvasCheckBox(CanvasButton,CheckBox)
   public set_parent_check_box_group(x)
      #
      # Set the images to the standard ones, unless custom images already set.
      #  
      if \x then
         self.set_box_paint(ImagePaint().set_cache("gui.DIAMOND_UP"), ImagePaint().set_cache("gui.DIAMOND_DOWN"))
      else
         self.set_box_paint(ImagePaint().set_cache("gui.BOX_UP"), ImagePaint().set_cache("gui.BOX_DOWN"))
      CheckBox.set_parent_check_box_group(x)
      return self
   end

   #
   # Generate code into Code object c.
   #
   public gen_code(c)
      self.paint.gen_code(c)
      CanvasButton.gen_code(c)
      c.chain("set_paint(" || self.paint.name || ")")
   end

   #
   # Return the I/O template.
   #
   public static get_template()
      suspend CanvasButton.get_template() |
         ["Paint", "paint"]
   end

   #
   # Duplicate object.
   #
   public dup(pc)
      local c
      c := CanvasCheckBox()
      CanvasButton.dup_fields(c)
      c.set_paint(self.paint.dup(c))
      return c
   end

   #
   # Open the configuration dialog box.
   #
   public dialog()
      return CanvasCheckBoxDialog(self)
   end

   public gen_cos()
      suspend CanvasComponent.gen_cos() | self.paint
   end

   public new()
      CheckBox.new()
      CanvasButton.new()
      self.class_name := "CheckBox"
      self.import_name := "gui"
      self.name := "check_box"
      return
   end
end


