#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

#
# An instance of this class is a small button with a label
# which is either in an on or off state.  The button is an
# Icon image, which may be specified by the user if desired.
#
# The images will default to appropriate values if not specified.
#
# The size will also default if not specified.  The methods
# used to control the images, label and check the status are
# inherited from the superclasses `Button` and `Toggle`.
#
# Example :-
# ~
#   c := CheckBox()
#   c.set_pos(200, 100)
#   c.set_label("Checkbox")
#   self.add(c)
# ~
class CheckBox(Button)
   public
      unchecked_paint,
      checked_paint,
      tx, 
      tw, 
      paint

   #
   # Set the up/down icons to the given (distinct) `Paint` instances.
   # The two images must have the same dimensions.
   # :Parameters :
   # :  `x` - The up image
   # :  `y` - The down image
   #
   public set_box_paint(x, y)
      if is_initialized() then {
         (\self.unchecked_paint).finally()
         (\self.checked_paint).finally()
         self.unchecked_paint := x
         self.checked_paint := y
         self.unchecked_paint.initially(self)
         self.checked_paint.initially(self)
         self.invalidate()
         unchecked_paint.w = checked_paint.h | runerr("Image widths differ")
         unchecked_paint.h = checked_paint.h | runerr("Image heights differ")
      } else {
         self.unchecked_paint := x
         self.checked_paint := y
      }
      link
   end

   #
   # Set the label.
   # :Parameters :
   # :  `x` - The label.
   #
   public set_label(x)
      return set_paint(paint_for_string(x))
   end

   public set_paint(p)
      if is_initialized() then {
         (\self.paint).finally()
         self.paint := p
         self.paint.initially(self, self.accel)
         self.invalidate()
      } else
         self.paint := p
      link
   end

   public override initially()
      #
      # Set the icons if necessary
      #
      if /self.unchecked_paint then {
         if /self.parent_check_box_group then
            self.set_box_paint(ImagePaint().set_cache("gui.BOX_UP"), ImagePaint().set_cache("gui.BOX_DOWN"))
         else
            self.set_box_paint(ImagePaint().set_cache("gui.DIAMOND_UP"), ImagePaint().set_cache("gui.DIAMOND_DOWN"))
      }
      \self.paint | runerr("No label specified")
      Component.initially()
      self.paint.initially(self, self.accel)
      self.unchecked_paint.initially(self)
      self.checked_paint.initially(self)
      unchecked_paint.w = checked_paint.h | runerr("Image widths differ")
      unchecked_paint.h = checked_paint.h | runerr("Image heights differ")
   end

   public override finally()
      Component.finally()
      paint.finally()
      unchecked_paint.finally()
      checked_paint.finally()
   end

   public override get_default_width()
      #
      # We give extra border space; this looks better with the focus rectangle.
      #
      return paint.w + self.unchecked_paint.w + Gui.X_INSET + Gui.TEXT_INSET
   end

   public override get_default_height()
      return max(paint.h, unchecked_paint.h)
   end

   public override layout()
      self.tx := self.x + self.unchecked_paint.w + Gui.X_INSET
      self.tw := self.w - self.unchecked_paint.w - Gui.X_INSET - Gui.TEXT_INSET
   end

   public override shift(dx, dy)
      Button.shift(dx, dy)
      tx +:= dx
   end

   public override visualize_action(e)
      # For a checkbox, visualizing a keyboard action introduces a
      # slight delay and has no real advantage; so we just call
      # on_action directly.
      if /self.is_down then
         on_action(e)
   end

   public override display()
      local i

      if \self.is_down then
         i := if /self.is_checked_flag then checked_paint else unchecked_paint
      else
         i := if \self.is_checked_flag then checked_paint else unchecked_paint

      #
      # Draw image and string centred vertically; image has unchecked_paint.w pixel to its right
      #
      i.draw(self.cbwin, self.x, self.y + (self.h - unchecked_paint.h) / 2)
      paint.draw(self.cbwin, self.tx, self.y + (self.h - paint.h) / 2)

      if should_draw_focus() then
         Gui.style.draw_focus_rectangle(self.cbwin,
                                        self.tx - Gui.TEXT_INSET, self.y, 
                                        self.tw + 2 * Gui.TEXT_INSET, self.h)
   end

   public override new()
      Button.new()
      self.toggles_flag := &yes
      self.set_constraint("x_align", Align.L)
      return
   end
end
