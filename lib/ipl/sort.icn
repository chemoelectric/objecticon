###########################################################################
#
#	File:     sort.icn
#
#	Subject:  Procedures for sorting
#
#	Authors:  Bob Alexander, Richard L. Goerwitz, and Ralph E. Griswold
#
#	Date:     September 10, 1998
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################

package ipl.sort

import lang(Class,Prog,Internal), util(cvslice_def),
   datastruct(Entry), ipl.tables(inserts)


#
#  Customizable sort procedure for inclusion in Icon programs.
#  ~
#       isort(x,keyproc,y)
#  ~
#  Argument x can be any Icon data type that is divisible into elements
#  by the unary element generation (!) operator.  The result is a list
#  of the objects in sorted order.
#
#  The default is to sort elements in their natural, Icon-defined order.
#  However, an optional parameter (keyproc) allows a sort key to be
#  derived from each element, rather than the default of using the
#  element itself as the key.  Keyproc can be a procedure provided by
#  the caller, in which case the first argument to the key procedure is
#  the item for which the key is to be computed, and the second argument
#  is isort's argument y, passed unchanged.  The keyproc must produce
#  the extracted key.  Alternatively, the keyproc argument can be an
#  integer, in which case it specifies a subscript to be applied to each
#  item to produce a key.  Keyproc will be called once for each element
#  of structure x.
#
procedure isort(x,keyproc,y)
   local items,item,key,result
   if y := integer(keyproc) then
	 keyproc := Prog.get_operator("[]",2)
   else /keyproc := 1
   items := table()
   every item := !x do {
      key := keyproc(item,y)
      inserts(items, key, item)
      }
   items := sort(items,3)
   result := []
   while get(items) do every put(result,!get(items))
   return result
end

# ~
# sortff:  structure [x integer [x integer...]] -> structure
#          (L, fields...) -> new_L
# ~
# Sort on multiple fields, where L is any subscriptable structure, and
# fields are any number of integer subscripts in any desired order.
# Returns a copy of structure L with its elements sorted on fields[1],
# and, for those elements having an identical fields[1], sub- sorted
# on field[2], etc.
#
procedure sortff(L, fields[])		
    *L <= 1 & { return copy(L) }
    return sortff_1(L, fields, 1, [])
end

package procedure sortff_1(L, fields, k, uniqueObject)

    local sortField, cachedKeyValue, i, startOfRun, thisKey

    sortField := fields[k]
    L := sortf(L, sortField)	# initial sort using fields[k]
    #
    #  If more than one sort field is given, use each field successively
    #  as the current key, and, where members in L have the same value for
    #  this key, do a subsort using fields[k+1].
    #
    if fields[k +:= 1] then {
        #
        #  Set the equal-key-run pointer to the start of the list and
        #  save the value of the first key in the run.
        #
	startOfRun := 1
	cachedKeyValue := L[startOfRun][sortField] | uniqueObject
	every i := 2 to *L do {
	    thisKey := L[i][sortField] | uniqueObject
	    if not (thisKey === cachedKeyValue) then {
	        #
	        # We have an element with a sort key different from the
	        # previous.  If there's a run of more than one equal keys,
	        # sort the sublist.
	        #
		if i - startOfRun > 1 then {
		    L := L[1:startOfRun] |||
			 sortff_1(L[startOfRun:i], fields, k, uniqueObject) |||
			 L[i:0]
		}
	        # Reset the equal-key-run pointer to this key and cache.
		startOfRun := i
		cachedKeyValue := L[startOfRun][sortField] | uniqueObject
            }
	}
	#
	#  Sort a final run if it exists.
	#
	if i - startOfRun > 0 then {
	    L := L[1:startOfRun] |||
		 sortff_1(L[startOfRun:0], fields, k, uniqueObject)
	}
    }

    return L

end

#
# sortgen(T, m)
# generates sorted output in a manner specified by m:
#
#			"k+"	sort by key in ascending order
#			"k-"	sort by key in descending order
#			"v+"	sort by value in ascending order
#			"v-"	sort by value in descending order
procedure sortgen(T, m)		
   local L

   L := sort(T, case m of {
      "k+" | "k-":  1
      "v+" | "v-":  2
      })

   case m of {
      "k+" | "v+":  suspend !L
      "k-" | "v-":  suspend L[*L to 1 by -1]
      }

end


# Like sort(T, i) but produces a list of two-element records instead
# of a list of two-element lists.  The elements returned are `Entry`
# records.
#
procedure sortt(T, i)		
   local result, k

   if not(integer(i) = (1 | 2)) then runerr(205, i)

   result := []

   every put(result, Entry(k := key(T), T[k]))

   return sortf(result, i)

end

# This is a comparison function that just reverses the order of the
# `Internal.compare` function.
#
procedure rev_internal_cmp(a, b)
   return Internal.compare(b, a)
end

# Implementation class for `combine_cmp`.
package class CombineCmp()
   private const
      f, g

   public call(a, b)
      local i
      i := f(a, b)
      if i = 0 then
         i := g(a, b)
      return i
   end

   public new(f, g)
      self.f := f
      self.g := g
      return
   end
end

#
# Return a compare function which combines two other compare functions
# in such a way that the second, `g`, is only called if the first,
# `f`, produces a tie for a particular pair (ie returns 0).
#
# For example :-
# ~
#    l := ["ABC",u"Abc",u"def",u"DEF",u"ABC","def",u"DEf","ABc"]
#    mergesort(l, combine_cmp(convert_cmp(string,Text.caseless_compare),
#                             type_cmp))
# ~
# gives
# ~
#    ["ABC","ABc",u"Abc",u"ABC","def",u"def",u"DEF",u"DEf"]
# ~
procedure combine_cmp(f, g)
   return CombineCmp(f, g).call
end

# Implementation class for `index_cmp`.
package class IndexCmp()
   private const
      f, i

   public call(a, b)
      return f(a[i], b[i]) | runerr("Invalid index given to index_cmp")
   end

   public new(i, f)
      self.i := i
      /f := Internal.compare
      self.f := f
      return
   end
end

#
# Return a compare function which applies the comparator function `f` to the
# `i`th field of each item.  `f` defaults to `Internal.compare`.
#
# For example :-
# ~
#     l := [ [1,54,2], [4,56,23], [4325,1,23], [123,4576,23]]
#     # sort by the middle element of each item
#     qsort(l, index_cmp(2))
# ~
procedure index_cmp(i, f)
   return IndexCmp(i, f).call
end

# Implementation class for `field_cmp`.
package class FieldCmp()
   private const
      f, q

   public call(a, b)
      return f(Class.get(a, q), Class.get(b, q))
   end

   public new(q, f)
      self.q := q
      /f := Internal.compare
      self.f := f
      return
   end
end

#
# Return a compare function which applies the comparator function `f` to the
# field named `q` in each item.  `f` defaults to `Internal.compare`.
#
# For example :-
# ~
#     l := [Point(1,2),Point(34,4),Point(3,56),Point(23,55)]
#     # sort by the x element of each item
#     qsort(l, field_cmp("x"))
# ~
procedure field_cmp(q, f)
   return FieldCmp(q, f).call
end

#
# A compare function that compares solely by type, using the same
# ordering as the internal sorting functions.
#
procedure type_cmp(a, b)
   return Internal.compare(Internal.order(a), Internal.order(b))
end

# A numeric comparison function; unlike `Internal.compare`, reals and
# integers are sorted in their natural sort order.
#
procedure num_cmp(x, y)
   return if x < y then
      -1
   else if x > y then
      1
   else
      0
end

# Implementation class for `convert_cmp`.
package class ConvertCmp()
   private const
      f, cnv

   public call(a, b)
      a := cnv(a)
      b := cnv(b)
      return f(a, b)
   end

   public new(cnv, f)
      self.cnv := cnv
      /f := Internal.compare
      self.f := f
      return
   end
end

#
# Return a compare function which first applies the conversion
# function `cnv` to the two arguments given to it, and then returns
# the result of applying the compare function `f`, which defaults to
# `Internal.compare`.
#
# For example :-
# ~
#     l := ["abc", "def",  u"abc",  u"xyz"]
#     qsort(l, convert_cmp(string))
# ~
# leaves l as
# ~
#     [u"abc", "abc", "def", u"xyz"]
# ~
# whilst
# ~
#     l := [2, 1, 1.5, 4.0, 1.2, 4]
#     qsort(l, convert_cmp(real))
# ~
# leaves l as
# ~
#     [1, 1.2, 1.5, 2, 4, 4.0]
# ~
#
# Tip: If cnv is an expensive function, consider using
# `ipl.functional.memoize1` so that it is only called once
# for each item; for example :-
# ~
# procedure expensive_key(x)
#   return ... expensive computation on x
# end
#
# ...
#       qsort(big_list, convert_cmp(memoize1(expensive_key)))
# 
# ~
procedure convert_cmp(cnv, f)
   return ConvertCmp(cnv, f).call
end

#
# The classic quick sort procedure.  The given list is sorted
# in-place, and returned.  If pos1 and pos2 are given, then only
# the sublist l[pos1:pos2] is sorted.
#
# :Parameters :
# :  `l` - the list to sort
# :  `cmp` - a comparator function, default `Internal.compare`
# :  `pos1` - the first slice index, default 1
# :  `pos2` - the second slice index, default 0
#
procedure qsort(l, cmp, pos1, pos2)
   local s
   s := cvslice_def(pos1, pos2, *l) | fail
   /cmp := Internal.compare
   return qsort1(l, cmp, s.lo, s.hi - 1)
end

package procedure qsort1(l, cmp, first, last)
   local i, j, pivot
   if last <= first then
      return l
   i := first
   j := last
   pivot := l[(i + j) / 2]
   repeat {
      while cmp(l[i], pivot) < 0 do i +:= 1
      while cmp(l[j], pivot) > 0 do j -:= 1
      if i <= j then {
         l[i] :=: l[j]
         i +:= 1
         j -:= 1
      }
      if i > j then
         break
   }
   if first < j then
      qsort1(l, cmp, first, j)
   if i < last then
      qsort1(l, cmp, i, last)
   return l
end

# A binary search algorithm.  If pos1 and pos2 are given, then only
# the sublist l[pos1:pos2] is searched.
#
# If the `iflag` parameter is set, and the value is not found, then a
# valid insert position is returned which, when inserting val, would
# keep the list in order.  If `iflag` is not set, then the procedure
# simply fails.
#
# :Parameters :
# :  `l` - the list to search
# :  `val` - the value to search for
# :  `cmp` - a comparator function, default `Internal.compare`
# :  `pos1` - the first slice index, default 1
# :  `pos2` - the second slice index, default 0
# :  `iflag` - a flag requesting an insert position if val is not
#        found.
#
procedure bsearch(l, val, cmp, pos1, pos2, iflag)
   local s, m, c, first, last
   s := cvslice_def(pos1, pos2, *l) | fail
   /cmp := Internal.compare
   first := s.lo
   last := s.hi - 1
   while first <= last do {
      m := (first + last) / 2
      c := cmp(val, l[m])
      if c = 0 then
         return m
      if c > 0 then
         first := m + 1
      else # c < 0
         last := m - 1
   }
   if \iflag then
      return first
end

# A merge sort implementation.  Unlike `qsort`, this returns a sorted
# copy, leaving the original unchanged.  If pos1 and pos2 are given,
# then only the sublist l[pos1:pos2] is sorted, and that sublist is
# returned.
#
# :Parameters :
# :  `l` - the list to sort
# :  `cmp` - a comparator function, default `Internal.compare`
# :  `pos1` - the first slice index, default 1
# :  `pos2` - the second slice index, default 0
#
procedure mergesort(l, cmp, pos1, pos2)
   local s
   s := cvslice_def(pos1, pos2, *l) | fail
   /cmp := Internal.compare
   return mergesort1(l, cmp, s.lo, s.hi - 1)
end

package procedure mergesort1(l, cmp, first, last)
   local l1, l2, l3, m, v1
   if last <= first then
      return l[first:last + 1]
   m := (first + last) / 2
   l1 := mergesort1(l, cmp, first, m)
   l2 := mergesort1(l, cmp, m + 1, last)
   l3 := []
   every v1 := !l1 do {
      while cmp(v1, l2[1]) > 0 do
         put(l3, get(l2))
      put(l3, v1)
   }
   every put(l3, !l2)
   return l3
end

package record Item(last, e)

# This procedure takes a list of co-expressions and a comparator
# function, and generates the results of the co-expressions in order,
# according to the comparator.  Each co-expression must generate its
# results in the order indicated by the comparator.
#
# For example :-
# ~
#  sort_seq( [ create 5 to 20 by 5,
#              create 11 | 200,
#              create 11 | 99 ] )
# ~
# generates :-
# ~
#          5  10  11  11  15  20  99  200
# ~
#
# :Parameters :
# :  `el` - the list of co-expressions
# :  `cmp` - a comparator function, default `Internal.compare`
#
procedure sort_seq(el, cmp)
   local l, cmp_item, e, i

   /cmp := Internal.compare

   # Create the initial list of Items, excluding those expressions
   # that fail to produce a result.  The first element of the list
   # will always give us the next result.
   l := []
   every e := !el do
      put(l, Item(@e, e))

   # Sort on the 1st field of Item (last).
   cmp_item := index_cmp(1, cmp)
   qsort(l, cmp_item)

   while i := pop(l) do {
      suspend i.last
      if i.last := @i.e then
         # Re-insert Item i into the list, keeping it in sorted order.
         insert(l, bsearch(l, i, cmp_item,,, &yes), i)
   }
end
