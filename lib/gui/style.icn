package gui

import ipl.graphics, util

class Style()
   #
   # Draw a raised rectangle.
   #
   public draw_raised_rectangle(W, x, y, w, h, width)
      return BevelRectangle(W, x, y, w, h, width)
   end

   #
   # Draw a sunken rectangle.
   #
   public draw_sunken_rectangle(W, x, y, w, h, width)
      return BevelRectangle(W, x, y, w, h, -width)
   end

   public get_hilite_clone(W)
      return W.clone().set_fg(get_hilite_color(W))
   end

   public get_shadow_clone(W)
      return W.clone().set_fg(get_shadow_color(W))
   end

   public get_focus_clone(W)
      return W.clone().set_fg("red").set_masked_pattern("gray")
   end

   public get_dashed_clone(W)
      return get_shadow_clone(W).set_masked_pattern("gray")
   end

   public get_highlight_clone(W)
      return W.clone().set_fg("blue").set_masked_pattern("gray")
   end

   public get_cursor_clone(W)
      return W.clone().set_fg("red")
   end

   public get_down_clone(W)
      return W.clone().set_fg("black 20%")
   end

   public get_selection_clone(W)
      return W.clone().set_fg("blue 30%")
   end

   public get_hilite_color(W)
      return GetHiliteColor(W)
   end

   public get_shadow_color(W)
      return GetShadowColor(W)
   end

   public shade_rectangle(W, x, y, w, h)
      return W.filter(x, y, w, h, "shade,4,5000,40000")
   end

   public fill_down_rectangle(W, x, y, w, h)
      local cw
      return use {
         cw := get_down_clone(W),
         cw.fill_rectangle(x, y, w, h)
      }
   end

   public fill_selection_rectangle(W, x, y, w, h)
      local cw
      return use {
         cw := get_selection_clone(W),
         cw.fill_rectangle(x, y, w, h)
      }
   end

   public fill_hilite_rectangle(W, x, y, w, h)
      local cw
      return use {
         cw := get_hilite_clone(W),
         cw.fill_rectangle(x, y, w, h)
      }
   end

   public fill_shadow_rectangle(W, x, y, w, h)
      local cw
      return use {
         cw := get_shadow_clone(W),
         cw.fill_rectangle(x, y, w, h)
      }
   end

   public draw_dashed_rectangle(W, x, y, w, h)
      local cw
      return use {
         cw := get_dashed_clone(W),
         cw.draw_rectangle(x, y, w, h)
      }
   end

   public draw_focus_rectangle(W, x, y, w, h)
      local cw
      return use {
         cw := get_focus_clone(W),
         cw.draw_rectangle(x, y, w, h)
      }
   end

   public draw_highlight_rectangle(W, x, y, w, h)
      local cw
      return use {
         cw := get_highlight_clone(W),
         cw.draw_rectangle(x, y, w, h)
      }
   end

   public draw_shadow_text_cursor(W, x, y, h)
      local cw
      return use {
         cw := get_shadow_clone(W),
         cw.fill_rectangle(x - 1, y, 2, h)
      }
   end

   public draw_text_cursor(W, x, y, h)
      local cw
      return use {
         cw := get_cursor_clone(W),
         cw.fill_rectangle(x - 1, y, 2, h)
      }
   end

   public create_tooltip_label()
      return Label().
         set_bg("pale yellow").
         set_font("sans,10").
         set_fg("black").
         set_border(CompoundBorder().
                      set_outer(PlainBorder().set_line_width(1)).
                      set_inner(EmptyBorder().set_insets(3,3,2,2)))
   end

   public polish(obj)
   end

   public allow_popup(obj)
$ifdef _X_WINDOW_SYSTEM
      return
$endif
   end

   public distance2ticker_rate(d)
      local r
      r := 200 - 6*d
      r <:= 20
      r >:= 200
      return r
   end
end


