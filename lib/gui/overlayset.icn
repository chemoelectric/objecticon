#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import util

#
# This class provides a container which contains several `OverlayItems`, only one
# of which is visible at a time.
#
class OverlaySet(Component)
   public 
      remember_focus_flag,
      which_one

   #
   # If set, then a item remembers if it had focus when it was
   # deselected, and restores it when it is reselected.
   #
   public set_remember_focus(s)
      self.remember_focus_flag := need_flag(s)
      link
   end

   public override display()
      #
      # Display contents of current tab into buffer
      #
      display_child(which_one)
   end

   public maybe_remember_focus()
      local f
      \remember_focus_flag | fail
      which_one.remembered_focus := &null
      f := parent_dialog.get_focus() | fail
      if f.gen_parents() === which_one then
         which_one.remembered_focus := f
   end

   public maybe_restore_focus()
      local f
      \remember_focus_flag | fail
      f := \which_one.remembered_focus | fail
      if f.is_live() then
         f.grab_focus()
   end

   #
   # Set which OverlayItem is currently displayed.  The default is
   # the first which was added.
   # :Parameters :
   # :  `dont_restore_flag` - if set, then the item's remembered focus will not be
   #         restored (only relevant if remember_focus is on).
   #
   public set_which_one(x, dont_restore_flag)
      if which_one === x then
         link
      if is_initialized() then {
         maybe_remember_focus()
         which_one := x
         set_hidden_flags()
         if /dont_restore_flag then
            maybe_restore_focus()
         invalidate()
      } else
         which_one := x
      link
   end

   public set_hidden_flags()
      local c
      every c := !self.children do {
         if c === self.which_one then
            c.set_is_hidden(&no)
         else
            c.set_is_hidden(&yes)
      }
      link
   end

   public override initially()
      if *self.children = 0 then
         runerr("No OverlayItems in OverlaySet")
      /self.which_one := self.children[1]
      set_hidden_flags()
      Component.initially()
   end

   public override get_default_width()
      local c, mw
      mw := 0
      every c := !children do
         mw <:= c.get_preferred_width()
      return mw
   end

   public override get_default_height(dw)
      local c, mh
      mh := 0
      every c := !children do
         mh <:= c.get_preferred_height(dw)
      return mh
   end

   public override layout()
      local c
      every c := !self.children do {
         c.x := self.x
         c.y := self.y
         c.w := self.w
         c.h := self.h
         c.layout()
      }
   end

   #
   # Return the currently selected item
   #
   public get_which_one()
      return self.which_one
   end

   public override new()
      Component.new()
      self.set_constraint("x_fill", &yes)
      self.set_constraint("y_fill", &yes)
      self.set_constraint("x_weight", 1.0)
      self.set_constraint("y_weight",  1.0)
      return
   end
end

