import io, lang

procedure mkstr(n, l)
   local s, i
   s := ""
   /l := [10,20,100,120,200,220,300,400,500,1000,2000,3000,4000,5000,10000]
   every 1 to ?n do {
      i := ?l
      s ||:= string(uchar(i))
   }
   return ucs(s)
end

procedure trans(u)
   local s, i
   static map
   initial {
      map := table()
      map[300] := "A"
      map[400] := "B"
      map[500] := "C"
      map[1000] := "D"
      map[2000] := "E"
      map[3000] := "F"
      map[4000] := "G"
      map[5000] := "H"
      map[10000] := "I"
   }
   s := ""
   every i := ord(!u) do {
      if i < 256 then {
         if Text.has_ord('A-I', i) then
            stop("illegal char:",i)
         s ||:= char(i)
      } else
         s ||:= \map[i] | stop("illegal char:",i)
   }
   return s
end

procedure test_lrc()
   local s1, s2, n

   s1 := ucs("The quick brown fox")
   s2 := ucs("<>")
   cmp_seq{"left",trans(left(s1,0,s2)), left(trans(s1),0,trans(s2))}
   cmp_seq{"right",trans(right(s1,0,s2)), right(trans(s1),0,trans(s2))}
   cmp_seq{"center",trans(center(s1,0,s2)), center(trans(s1),0,trans(s2))}
   cmp_seq{"left",trans(left(s1,1,s2)), left(trans(s1),1,trans(s2))}
   cmp_seq{"right",trans(right(s1,1,s2)), right(trans(s1),1,trans(s2))}
   cmp_seq{"center",trans(center(s1,1,s2)), center(trans(s1),1,trans(s2))}
   cmp_seq{"left",trans(left(s1,50)), left(trans(s1),50,)}
   cmp_seq{"right",trans(right(s1,50)), right(trans(s1),50,)}
   cmp_seq{"center",trans(center(s1,50)), center(trans(s1),50,)}

   every 1 to 200 do {
      s1 := mkstr(32)
      s2 := mkstr(10)
      n := ?100
      cmp_seq{"left",trans(left(s1,n,s2)), left(trans(s1),n,trans(s2))}
      cmp_seq{"right",trans(right(s1,n,s2)), right(trans(s1),n,trans(s2))}
      cmp_seq{"center",trans(center(s1,n,s2)), center(trans(s1),n,trans(s2))}
   }
end

procedure test_entab()
   local l, s
   l := [10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
         100,120,200,220,300,400,500,1000,2000,3000,4000,5000,10000]
   every 1 to 200 do {
      s := mkstr(100,l)
      cmp_seq{"entab1",trans(entab(s)), entab(trans(s))}
      cmp_seq{"entab2",trans(entab(s,2,6,9,11,13)), entab(trans(s),2,6,9,11,13)}
   }
end

procedure test_detab()
   local l, s
   l := [10,32,32,32,32,32,32,32,32,32,32,
         9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
         100,120,200,220,300,400,500,1000,2000,3000,4000,5000,10000]
   every 1 to 200 do {
      s := mkstr(100,l)
      cmp_seq{"detab1",trans(detab(s)), detab(trans(s))}
      cmp_seq{"detab2",trans(detab(s,2,6,9,11,13)), detab(trans(s),2,6,9,11,13)}
   }
end

procedure test_repl()
   local s, n
   s := ucs("")
   cmp_seq{"repl",trans(repl(s,10)), repl(trans(s),10)}
   s := ucs("abcdef")
   cmp_seq{"repl",trans(repl(s,0)), repl(trans(s),0)}
   every 1 to 50 do {
      s := mkstr(32)
      n := ?100
      cmp_seq{"repl",trans(repl(s,n)), repl(trans(s),n)}
   }
end

procedure test_reverse()
   local s
   every s := ucs("") | (|mkstr(40))\100 do {
      cmp_seq{"reverse",trans(reverse(s)), reverse(trans(s))}
   }
end

procedure test_map()
   local s1, s2, s3

   every 1 to 200 do {
      s1 := mkstr(32)
      s2 := mkstr(10)
      s3 := mkstr(10)
      # Make s2,s3 same length
      if *s2 > *s3 then
         s2[*s3+1:0] := ""
      else
         s3[*s2+1:0] := ""
      cmp_seq{"map",trans(map(s1,s2,s3)), map(trans(s1),trans(s2),trans(s3))}
   }
end

procedure test_trim()
   local l, s
   l := [10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
         32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
         100,120,200,220,300,400,500,1000,2000,3000,4000,5000,10000]
   every s := ucs("") | ucs(" ") | ucs("    ") | (|mkstr(40,l))\100 do {
      cmp_seq{"trim1",trans(trim(s)), trim(trans(s))}
      cmp_seq{"trim2",trans(trim(s,,-1)), trim(trans(s),,-1)}
      cmp_seq{"trim3",trans(trim(s,,1)), trim(trans(s),,1)}
   }
end

procedure test_find()
   local s1, s2, s3, i, j

   every 1 to 200 do {
      s1 := mkstr(32)
      s2 := s1[?(*s1+1):?(*s1+1)] | stop("no sub")
      s1 := repl(s1, ?10) 
      i := ?(*s1+1)
      j := ?(*s1+1)
      s3 := mkstr(10)
      cmp_seq{"find1", find(s2,s1), find(trans(s2),trans(s1))}
      cmp_seq{"find2", find(s2,s1,i,j), find(trans(s2),trans(s1),i,j)}
      cmp_seq{"find3", find(s3,s1), find(trans(s3),trans(s1))}
   }
   s1 := mkstr(32)
   cmp_seq{"find4", find(u"",s1), find("",trans(s1))}
   cmp_seq{"find5", find(u"",u""), find("","")}
end

procedure test_any_many_upto()
   local s, c, i, j

   every 1 to 200 do {
      s := mkstr(32)
      c := mkstr(5)
      i := ?(*s+1)
      j := ?(*s+1)
      cmp_seq{"any", any(c,s,i,j), any(trans(c),trans(s),i,j)}
      cmp_seq{"many", many(c,s,i,j), many(trans(c),trans(s),i,j)}
      cmp_seq{"upto", upto(c,s,i,j), upto(trans(c),trans(s),i,j)}
   }
end

procedure test_match()
   local s1, s2, i, j

   every 1 to 200 do {
      s1 := mkstr(32)
      i := ?(*s1+1)
      j := ?(*s1+1)
      if i>j then i:=:j
      s2 := s1[i+:?5] | u""
      cmp_seq{"match1", match(s2,s1,i,j), match(trans(s2),trans(s1),i,j)}
      cmp_seq{"match2", match(u"123",s1,i,j), match("123",trans(s1),i,j)}
   }
end

procedure test_bal()
   local s, c1, c2, c3, i, j

   every 1 to 200 do {
      s := mkstr(32)
      c1 := mkstr(5)
      c2 := mkstr(5)
      c3 := mkstr(5)
      i := ?(*s+1)
      j := ?(*s+1)
      cmp_seq{"bal", bal(c1,c2,c3,s,i,j), 
                 bal(trans(c1),trans(c2),trans(c3),trans(s),i,j)}
   }
end

procedure test_tabmat()
   local s1,s2,i
   every 1 to 200 do {
      s1 := mkstr(32)
      i := ?(*s1+1)
      s2 := s1[i+:?5] | u""
      cmp_seq{"tabmat1", trans(s1?(tab(i)&=s2)), trans(s1)?(tab(i)&=trans(s2))}
   }
end

procedure test_tab_move_pos()
   local s,i,j
   every 1 to 200 do {
      s := mkstr(32)
      i := ?(*s+1)
      j := ?(*s+1)
      cmp_seq{"tab", trans(s?(tab(i)&tab(j))), trans(s)?(tab(i)&tab(j))}
      j := ?*s/2-*s
      cmp_seq{"move", trans(s?(tab(i)&move(j))), trans(s)?(tab(i)&move(j))}
      cmp_seq{"pos", s?(tab(i)&pos(i)), trans(s)?(tab(i)&pos(i))}
   }
end

procedure main()
   test_tab_move_pos()
   test_tabmat()
   test_bal()
   test_match()
   test_any_many_upto()
   test_find()
   test_trim()
   test_lrc()
   test_entab()
   test_detab()
   test_repl()
   test_reverse()
   test_map()
end
