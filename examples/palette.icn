#
# $Id: palette.icn 2617 2020-02-24 19:41:26Z rparlett $
#

import gui, util, io, graphics

#
# A custom menu item, for selecting a colour from a palette.
#
class Palette(TextMenuItem)
   public 
      colour,                 # Colour number selected
      palette,                # List of colours
      box_size

   #
   # Width of one colour cell in pixels
   #
   public static const CELL_WIDTH

   private static init()
      CELL_WIDTH := scale(50)
   end

   #
   # Get the result
   #
   public get_colour()
      return self.palette[\self.colour]
   end

   #
   # Set the palette list
   #
   public set_palette(l)
      box_size := integer(Math.sqrt(*l))
      self.palette := l
      return self
   end

   #
   # This is called by the toolkit; it is a convenient place to initialize any sizes.
   #
   public override resize()
      self.w := self.box_size * CELL_WIDTH + border.get_total_width()
      self.h := self.box_size * CELL_WIDTH + border.get_total_height()
   end

   #
   # Called to display the item.  The x, y co-ordinates have been set up for us
   # and give the top left hand corner of the display. 
   #
   public override display(w)
      local y1, e, x1, cw

      cw := w.clone()

      #
      # Clear area and border around whole
      #
      cw.erase_area(self.x, self.y, self.w, self.h)
      border.draw(cw, self.x, self.y, self.w, self.h)

      #
      # Draw the colour grid.
      #
      y1 := self.y + border.get_t_inset()
      e := create !palette
      every 1 to box_size do {
         x1 := self.x + border.get_l_inset()
         every 1 to box_size do {
            cw.set_fg(@e)
            cw.fill_rectangle(x1, y1, CELL_WIDTH, CELL_WIDTH)
            x1 +:= CELL_WIDTH
         }
         y1 +:= CELL_WIDTH
      }
      cw.close()
   end

   #
   # Test whether pointer in palette_region, and if so which cell it's in
   #
   public in_palette_region(e)
      local x1, y1
      if border.get_inner_rect(self).inside(e.x, e.y) then {
         x1 := (e.x - self.x - border.get_l_inset()) / CELL_WIDTH
         y1 := (e.y - self.y - border.get_t_inset()) / CELL_WIDTH
         return 1 + x1 + y1 * box_size
      }
   end

   #
   # Will be called if our menu is open.
   #
   public override handle_key(e)
      if e.code === ("\e" | Key.LEFT) then
         parent.set_which_highlight(self)
   end

   public handle_release(e)
      local i
      if i := self.in_palette_region(e) then {
         self.colour := i
         # This is a helper method in the superclass which closes the menu
         # system and fires an Event.ACTION
         selected(e)
      }
   end

   protected override create_proxy()
      local c
      c := SubMenuProxyComponent(self)
      every c.connect(handle_release, 
                             Event.MOUSE_LEFT_RELEASE_OVER | Event.MOUSE_MIDDLE_RELEASE_OVER | Event.MOUSE_RIGHT_RELEASE_OVER)
      c.connect(handle_key, Event.KEY_PRESS)
      return c
   end

   public override new()
      TextMenuItem.new()
      self.is_sub_menu_flag := &yes
      set_border(RaisedBorder())
      #
      # Set the image to appear on the Menu above ours.  We could design a tiny 
      # icon and use that instead of the standard arrow if we wished.
      # 
      self.set_image_right("gui.ARROW_RIGHT")
      #
      # Support the attrib style constructor.
      #
      return
   end
end


#
# Test class dialog.
#
class TestPalette(Dialog)
   public palette

   public on_palette(ev, src)
      write("Colour selected : " || src.get_colour())
   end

   public on_anything(ev)
      write("Anything item selected")
   end

   public show_popup(ev)
      local pm, palette

      palette := Palette().
         set_label("Test menu").
         set_palette(["red","green","yellow","black","white","purple","gray","blue","pink"])
      palette.connect(self.on_palette, Event.ACTION)

      pm := PopupMenu()
      pm.popup(self, palette, ev.x, ev.y)
   end

   public override component_setup()
      local menu_bar, menu, text_menu_item, close

      self.set_size(scale(400), scale(200))

      #
      # Create a MenuBar structure which includes our palette as a sub-menu
      #
      menu_bar := MenuBar().set_pos(0,0).set_size("100%")
      menu := Menu().set_label("Test")
      text_menu_item := TextMenuItem().set_label("Anything")
      text_menu_item.connect(self.on_anything, Event.ACTION)
      menu.add(text_menu_item)

      palette := Palette().
         set_label("Test menu").
         set_palette(["red","green","yellow","black","white","purple","gray","blue","pink"])

      palette.connect(self.on_palette, Event.ACTION)
      menu.add(palette)
      menu_bar.add(menu)
      add(menu_bar)

      add(Label().set_pos(scale(40),"25%").set_label("Right click for popup").connect(show_popup, Event.MOUSE_RIGHT_PRESS))

      connect(self.dispose, Event.WINDOW_CLOSE_BUTTON)

      #
      # Add a close button. 
      #
      close := TextButton().set_pos("50%","66%").set_align("c","c").set_label("Close")
      close.connect(self.dispose, Event.ACTION)
      add(close)
   end
end


#
# Main program entry point.
#
procedure main()
   local d
   d := TestPalette()
   d.show_modal()
end
