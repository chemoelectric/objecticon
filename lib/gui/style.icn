package gui

import ipl.graphics, util

class Style()
   public static const
      TOOLTIP_BG,
      TOOLTIP_FG,
      TOOLTIP_FONT,
      FOCUS_COLOR,
      FOCUS_PATTERN,
      DASHED_PATTERN,
      HIGHLIGHT_COLOR,
      HIGHLIGHT_PATTERN,
      CURSOR_COLOR,
      DOWN_COLOR,
      SELECTION_COLOR,
      OVER_COLOR,
      SHADE_FILTER,
      TICK_RATE_FACTOR,
      TICK_RATE_MAX,
      TICK_RATE_MIN

   private static init()
      TOOLTIP_BG := env_color("OI_STYLE_TOOLTIP_BG") | "pale yellow"
      TOOLTIP_FG := env_color("OI_STYLE_TOOLTIP_FG") | "black"
      TOOLTIP_FONT := env_font("OI_STYLE_TOOLTIP_FONT") | "sans,*0.85"
      FOCUS_COLOR := env_color("OI_STYLE_FOCUS_COLOR") | "red"
      FOCUS_PATTERN := env_pattern("OI_STYLE_FOCUS_PATTERN") | "gray"
      DASHED_PATTERN := env_pattern("OI_STYLE_DASHED_PATTERN") | "gray"
      HIGHLIGHT_COLOR := env_color("OI_STYLE_HIGHLIGHT_COLOR") | "blue"
      HIGHLIGHT_PATTERN := env_pattern("OI_STYLE_HIGHLIGHT_PATTERN") | "gray"
      CURSOR_COLOR := env_color("OI_STYLE_CURSOR_COLOR") | FOCUS_COLOR
      DOWN_COLOR := env_color("OI_STYLE_DOWN_COLOR") | "black 20%"
      SELECTION_COLOR := env_color("OI_STYLE_SELECTION_COLOR") | "blue 30%"
      OVER_COLOR := env_color("OI_STYLE_OVER_COLOR") | "blue 8%"
      SHADE_FILTER := env_filter("OI_STYLE_SHADE_FILTER") | "shade,4,5000,40000"
      TICK_RATE_FACTOR := env_real("OI_STYLE_TICK_RATE_FACTOR", 1.0) | 6.0
      TICK_RATE_MAX := env_int("OI_STYLE_TICK_RATE_MAX", 10) | 200
      TICK_RATE_MIN := env_int("OI_STYLE_TICK_RATE_MIN", 5) | 20
   end

   #
   # Draw a raised rectangle.
   #
   public draw_raised_rectangle(W, x, y, w, h, width)
      BevelRectangle(W, x, y, w, h, width)
      link
   end

   #
   # Draw a sunken rectangle.
   #
   public draw_sunken_rectangle(W, x, y, w, h, width)
      BevelRectangle(W, x, y, w, h, -width)
      link
   end

   public get_hilite_clone(W)
      W := W.clone()
      W.set_fg(get_hilite_color(W))
      return W
   end

   public get_shadow_clone(W)
      W := W.clone()
      W.set_fg(get_shadow_color(W))
      return W
   end

   public get_focus_clone(W)
      W := W.clone()
      W.set_fg(FOCUS_COLOR).
         set_masked_pattern(FOCUS_PATTERN)
      return W
   end

   public get_dashed_clone(W)
      W := get_shadow_clone(W)
      W.set_masked_pattern(DASHED_PATTERN)
      return W
   end

   public get_highlight_clone(W)
      W := W.clone()
      W.set_fg(HIGHLIGHT_COLOR).
         set_masked_pattern(HIGHLIGHT_PATTERN)
      return W
   end

   public get_cursor_clone(W)
      W := W.clone()
      W.set_fg(CURSOR_COLOR)
      return W
   end

   public get_down_clone(W)
      W := W.clone()
      W.set_fg(DOWN_COLOR)
      return W
   end

   public get_selection_clone(W)
      W := W.clone()
      W.set_fg(SELECTION_COLOR)
      return W
   end

   public get_over_clone(W)
      W := W.clone()
      W.set_fg(OVER_COLOR)
      return W
   end

   public get_hilite_color(W)
      return GetHiliteColor(W)
   end

   public get_shadow_color(W)
      return GetShadowColor(W)
   end

   public shade_rectangle(W, x, y, w, h)
      W.filter(x, y, w, h, SHADE_FILTER)
      link
   end

   public fill_down_rectangle(W, x, y, w, h)
      local cw
      use {
         cw := get_down_clone(W),
         cw.fill_rectangle(x, y, w, h)
      }
      link
   end

   public fill_selection_rectangle(W, x, y, w, h)
      local cw
      use {
         cw := get_selection_clone(W),
         cw.fill_rectangle(x, y, w, h)
      }
      link
   end

   public fill_over_rectangle(W, x, y, w, h)
      local cw
      use {
         cw := get_over_clone(W),
         cw.fill_rectangle(x, y, w, h)
      }
      link
   end

   public fill_hilite_rectangle(W, x, y, w, h)
      local cw
      use {
         cw := get_hilite_clone(W),
         cw.fill_rectangle(x, y, w, h)
      }
      link
   end

   public fill_shadow_rectangle(W, x, y, w, h)
      local cw
      use {
         cw := get_shadow_clone(W),
         cw.fill_rectangle(x, y, w, h)
      }
      link
   end

   public draw_dashed_rectangle(W, x, y, w, h, t)
      local cw
      /t := Gui.DASHED_WIDTH
      use {
         cw := get_dashed_clone(W),
         cw.draw_rectangle(x, y, w, h, t)
      }
      link
   end

   public draw_focus_rectangle(W, x, y, w, h, t)
      local cw
      /t := Gui.DASHED_WIDTH
      use {
         cw := get_focus_clone(W),
         cw.draw_rectangle(x, y, w, h, t)
      }
      link
   end

   public draw_highlight_rectangle(W, x, y, w, h, t)
      local cw
      /t := Gui.DASHED_WIDTH
      use {
         cw := get_highlight_clone(W),
         cw.draw_rectangle(x, y, w, h, t)
      }
      link
   end

   public fill_highlight_rectangle(W, x, y, w, h)
      local cw
      use {
         cw := get_highlight_clone(W),
         cw.fill_rectangle(x, y, w, h)
      }
      link
   end

   public draw_shadow_text_cursor(W, x, y, h)
      local cw
      use {
         cw := get_shadow_clone(W),
         cw.fill_rectangle(x - Gui.CURSOR_WIDTH / 2, y, Gui.CURSOR_WIDTH, h)
      }
      link
   end

   public draw_text_cursor(W, x, y, h)
      local cw
      use {
         cw := get_cursor_clone(W),
         cw.fill_rectangle(x - Gui.CURSOR_WIDTH / 2, y, Gui.CURSOR_WIDTH, h)
      }
      link
   end

   public create_tooltip_label()
      local l
      l := Label()
      l. set_bg(TOOLTIP_BG).
         set_font(TOOLTIP_FONT).
         set_fg(TOOLTIP_FG).
         set_border(CompoundBorder().
                      set_outer(PlainBorder().set_line_width(Gui.FINE_WIDTH)).
                      set_inner(EmptyBorder().set_insets(Gui.TEXT_INSET, Gui.TEXT_INSET, 
                                                         Gui.Y_INSET, Gui.Y_INSET)))
      return l
   end

   public polish(obj)
   end

   public distance2ticker_rate(d)
      local r
      # Awkward since we're going from scaled pixels to unit pixels
      # (rather than the other way round).
      r := TICK_RATE_MAX - integer(d * (TICK_RATE_FACTOR / Gui.SCALE))
      r <:= TICK_RATE_MIN
      r >:= TICK_RATE_MAX
      return r
   end
end
