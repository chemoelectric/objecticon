#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package util

class Timezone()
   public static const 
      KNOWN_TIMEZONES,
      SYSTEM_TIMEZONE, 
      UTC_TIMEZONE

   private readable
      offset,
      id

   private static init()
      local s, t1, pat, t2, f, t, stz
      KNOWN_TIMEZONES := table()

      UTC_TIMEZONE := Timezone(0, "UTC")
      insert(KNOWN_TIMEZONES, "GMT", Timezone(0, "GMT"))
      insert(KNOWN_TIMEZONES, "UTC", UTC_TIMEZONE)
      insert(KNOWN_TIMEZONES, "UT", Timezone(0, "UT"))
      insert(KNOWN_TIMEZONES, "BST", Timezone(3600, "BST"))
      insert(KNOWN_TIMEZONES, "EST", Timezone(-18000, "EST"))
      insert(KNOWN_TIMEZONES, "EDT", Timezone(-14400, "EDT"))
      insert(KNOWN_TIMEZONES, "CST", Timezone(-21600, "CST"))
      insert(KNOWN_TIMEZONES, "CDT", Timezone(-18000, "CDT"))
      insert(KNOWN_TIMEZONES, "MST", Timezone(-25200, "MST"))
      insert(KNOWN_TIMEZONES, "MDT", Timezone(-21600, "MDT"))
      insert(KNOWN_TIMEZONES, "PST", Timezone(-28800, "PST"))
      insert(KNOWN_TIMEZONES, "PDT", Timezone(-25200, "PDT"))

      #
      # Set the system timezone
      #
      s := gettimeofday()[1]
      t1 := Time()
      pat := "E MMM dd hh:mm:ss yyyy zzzz"
      t1.parse(ctime(s) || " +0000", pat) | stop("Couldn't parse ctime")
      t2 := Time()
      t2.parse(gtime(s) || " +0000", pat) | stop("Couldn't parse gtime")
      stz := Timezone(t1.get_seconds() - t2.get_seconds())
      # If possible, use a symbolic representation, eg "EST" instead of -0500
      if &features == "UNIX" then {
         if f := popen("date +%Z") then {
            t := read(f)
            close(f)
         }
         # Only use a known symbol, whose offset agrees with the one just calculated
         if (\KNOWN_TIMEZONES[\t]).get_offset() = stz.get_offset() then
            stz := KNOWN_TIMEZONES[t]
      }
      SYSTEM_TIMEZONE := stz
   end

   #
   # Convert a zone id into a Timezone
   #
   public static get_known_timezone(id)
      local s, sign

      if member(KNOWN_TIMEZONES, id) then
         return KNOWN_TIMEZONES[id]

      id ? {
         if any('+-') then {
            if any('-') then 
               sign := -1
            else
               sign := 1
            move(1)
            s := tab(many(&digits)) | fail
            return Timezone(sign * 3600 * integer(s[1:3]) + 60 * integer(s[3:5]), id) | fail
         }
      }
   end

   public get_id()
      return id
   end

   public get_offset()
      return offset
   end

   public new(a[])
      if *a = 0 then {
         id := "UTC"
         offset := 0
      }
      else if *a = 1 then {
         if type(a[1]) == "integer" then {
            offset := a[1]
            id := (if offset < 0 then "-" else "+") ||
               right(abs(offset) / 3600, 2, "0") || 
               right((abs(offset) % 3600) / 60, 2, "0") 
         } else {
            id := a[1]
            offset := get_known_timezone(id).get_offset() | fail
         }
      } else {
         offset := a[1]
         id := a[2]
      }
      return
   end
end
