############################################################################
#
#       File:     color.icn
#
#       Subject:  Procedures dealing with colors
#
#       Author:   Gregg M. Townsend
#
#       Date:     April 1, 1997
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#       These procedures deal with colors in various ways.
#
#       ScaleGamma(v, g)        scales a number with gamma correction.
#
#       Blend(k1, k2, ...)      generates a sequence of colors.
#
#       Contrast(k)             returns "white" or "black" contrasting with k.
#
#       RandomColor(p)          returns a randomly chosen color from a palette.
#
#       PaletteGrays(p)         returns the gray entries of a palette.
#
############################################################################
#
#  ScaleGamma(v, g) nonlinearly scales the number v (between 0.0 and 1.0)
#  to an integer between 0 and 65535 using a gamma correction factor g.
#  the default value of g is 2.5.
#
#  Blend(color1, color2, color3,...) generates ColorValue(color1), then
#  some intermediate shades, then ColorValue(color2), then some more
#  intermediate shades, and so on, finally generating the color value of
#  the last argument.  An integer argument can be interpolated at any
#  point to set the number of steps (the default is four) from one color
#  to the next.
#
#  Contrast(colr) returns either "white" or "black", depending
#  on which provides the greater contrast with the specified color.
#
#  RandomColor(palette) returns a randomly chosen color from the
#  given image palette, excluding the "extra" grays of the palette, if
#  any.  (Colors are selected from a small finite palette, rather than
#  from the entire color space, to avoid running out of colors if a
#  large number of random choices are desired.)  The default palette
#  for this procedure is "c6".
#
#  PaletteGrays(palette) is like PaletteChars but it returns only
#  the characters corresponding to shades of gray.  The characters are
#  ordered from black to white, and in all palettes the shades of gray
#  are equally spaced.
#
############################################################################
#
#  Requires:  Version 9 graphics
#
############################################################################


#   ScaleGamma(v, g) -- scale fraction to int with gamma correction.

package ipl.graphics

import
   graphics(Window)

# scale with gamma correction
procedure ScaleGamma(v, g)              
   /g := 2.5
   return integer(65535 * v ^ (1.0 / g))
end


#  Blend(color1, color2, ...) -- generate sequence of colors

# generate sequence of colors
procedure Blend(args[])                 
   local n, s, a, i, f1, f2, r1, g1, b1, r2, g2, b2, r3, g3, b3

   n := 4

   while a := get(args) do
      if integer(a) >= 0 then
         n := integer(a)
      else {
         s := Window.parse_color(a) | fail
         r2 := s.red
         g2 := s.green
         b2 := s.blue
         if /r1 then
            suspend r2 || "," || g2 || "," || b2
         else
            every i := 1 to n do {
               f2 := real(i) / real(n)
               f1 := 1.0 - f2
               r3 := integer(f1 * r1 + f2 * r2)
               g3 := integer(f1 * g1 + f2 * g2)
               b3 := integer(f1 * b1 + f2 * b2)
               suspend r3 || "," || g3 || "," || b3
               }
         r1 := r2
         g1 := g2
         b1 := b2
         }
end


#  Contrast(color) -- return "white" or "black" to maximize contrast

# choose contrasting color
procedure Contrast(color)               
   static l
   initial {
      l := ["white", "black"]
      }
       
      return l[1 + Window.palette_key("g2", color)]
end



#   RandomColor(palette) -- choose random color

# choose random color
procedure RandomColor(palette)  
   local s, n
   /palette := "c6"

   s := Window.palette_chars(palette)
   palette ?
      if ="c" & any('23456') then {
         n := integer(move(1))
         s := s[1 +: n * n * n]
         }
   return Window.palette_color(palette, ?s)

end


#  PaletteGrays(palette) -- return grayscale entries from palette.

# grayscale entries from palette
procedure PaletteGrays(palette)    
   palette := string(palette) | runerr(103, palette)

   if palette ? ="g" then
      return Window.palette_chars(palette)

   return case palette of {
      "c1":     "0123456"
      "c2":     "kxw"
      "c3":     "@abMcdZ"
      "c4":     "0$%&L*+-g/?@}"
      "c5":     "\0}~\177\200\37\201\202\203\204>\205\206\207\210]_
                  \211\212\213\214|"
      "c6":     "\0\330\331\332\333\334+\335\336\337\340\341V\342\343\344\345_
                  \346\201\347\350\351\352\353\254\354\355\356\357\360\327"
      default:  fail
      }
end

#
# Given a color {col}, return the color in "r,g,b,a" string format, with
# those values optionally edited by the given parameters.
#
procedure EditRGBA(col, r, g, b, a)
   local l
   l := Window.parse_color(col) | fail
   l.red := \r
   l.green := \g
   l.blue := \b
   l.alpha := \a
   if l.alpha = 65535 then
      return l.red || "," || l.green || "," || l.blue
   else
      return l.red || "," || l.green || "," || l.blue || "," || l.alpha
end
