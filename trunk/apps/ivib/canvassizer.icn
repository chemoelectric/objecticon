#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui


############################################################################
#
# Class for representing a Sizer on the canvas.
#
class CanvasSizer(CanvasComponent,Sizer)
   #
   # Overrides CanvasComponent.min_height()
   #
   public min_height()
      return 3
   end

   #
   # Overrides CanvasComponent.min_width()
   #
   public min_width()
      return 3
   end

   #
   # Generate code into Code object c.
   #
   public gen_code(c)
      local s
      cast(self,CanvasComponent).gen_code(c)
      if \self.lo | \self.hi then {
         s := name || ".set_range(" || (\self.lo|"&null") || ", " ||
            (\self.hi|"&null") || ")" 
         c.line(s)
      }
      if \self.is_horizontal_flag then
         c.line(name || ".set_is_horizontal(\"t\")")
   end

   #
   # Duplicate object.
   #
   public dup()
      local c
      c := CanvasSizer()
      cast(self,CanvasComponent).dup_fields(c)
      c.is_horizontal_flag := self.is_horizontal_flag
      c.lo := self.lo
      c.hi := self.hi
      return c
   end

   #
   # Return the I/O template.
   #
   public get_template()
      return cast(self,CanvasComponent).get_template() ||| 
         [
          ["Lo", "lo"],
          ["Hi", "hi"],
          ["Is horizontal flag", "is_horizontal_flag"]
          ]
   end

   #
   # Open the configuration dialog box.
   #
   public dialog()
      return CanvasSizerDialog(self)
   end

   public allows_null_width()
      return /self.is_horizontal_flag
   end

   public allows_null_height()
      return \self.is_horizontal_flag
   end

   public new()
      cast(self,Sizer).new()
      cast(self,CanvasComponent).new()
      self.class_name := "Sizer"
      self.import_name := "gui"
      self.name := "sizer"
      return
   end
end

