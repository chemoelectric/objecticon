import io

$define C create

procedure S(e)
   e := ^e
   suspend |@e
end

procedure pattern(x)
   if type(x) == "co-expression" then
      return x
   if x := string(x) then
      return C =x
   runerr("String or co-expression expected", x)
end

procedure concat(e1, e2)
   e1 := pattern(e1)
   e2 := pattern(e2)
   return C !e1 || !e2
end

procedure alt(e1, e2)
   e1 := pattern(e1)
   e2 := pattern(e2)
   return C !e1 | !e2
end

procedure arbno(e)
   local rep_e
   e := pattern(e)
   return rep_e := C "" | (!e || !rep_e)
end

procedure test(x, data)
   local s
   while s := pop(data) do {
      if s ? (!x & pos(0)) then
         write(s,":valid")
      else
         write(s,":error")
   }
   write("=========")
end

procedure test0()
   test(concat("(", concat(arbno(alt("0","1")), ")")),
         [ "(000)", "(101010)", "()", "(0)", "(1)", "{", "(", "(123)"])
end

procedure test1()
   local keys, s
   keys := C &fail
   every s := "one"|"two"|"three" do
      keys := alt(keys, s)
   test(keys, ["one","two","three","four","five"])
end

procedure test2()
   local simexpr, expr, term, factor, basic, digits, subscript,
      relation, formula

   formula :=   C !subscript || =":=" || !expr 
   expr :=      C (="if(" || !relation || =")then(" || !expr || =")else(" || !expr || =")") | !simexpr 
   relation :=  C (!expr || =("="|"<"|">"|"<="|">=") || !expr) | !simexpr 
   simexpr :=   C (!term || =("+"|"-") || !simexpr) | !term 
   term :=      C (!factor || =("*"|"/") || !term) | !factor 
   factor :=    C (=("+"|"-") || !basic) | !basic 
   basic :=     C !digits | !subscript | (="(" || !expr || =")") 
   subscript := C ="[" || !digits || ="," || !digits || ="]" 
   digits :=    C tab(many(&digits)) 

   test(formula, [ 
            "[1,2]:=100",
            "[1,2]:=[3,4]",
            "[1,2]:=if([1,5]<[3,5])then(1+2)else(3)",
            "[1,2]:=100*(2+[3,4])",
            "1:=2","1+","2//"
            ])
end

procedure main()
   test0()
   test1()
   test2()
end
