import gui,io

$load SAVE "rpp.SAVE_24.gif"
$load EXIT "rpp.EXIT_24.gif"

class EditMenu(DynamicMenu)
   private text

   public populate()
      populate_from(text.create_context_menu())
   end

   public new(text)
      DynamicMenu.new()
      self.text := text
      return
   end
end

class Editor(Dialog)
   public curr_file_name, text, open_item, quit_item,
      split_words_item,
      close_button, save_button, save_item, message_label,
      save_as_item, new_item

   private confirm_abandon()
      local d
      if text.can_undo() then {
         d := SaveChangesDialog()
         d.show_modal(self)
         case d.res of {
            "yes": return save(curr_file_name)
            "no": return
            "cancel": fail
         }
      } else
         return
   end

   private handle_quit()
      confirm_abandon() | fail
      dispose()
   end

   public load(fname)
      local s
      if Files.access(fname) then {
         if s := Files.file_to_string(fname) then {
            if s := ucs(s) then {
               msg("Loaded " || FilePath(fname).get(-1) || " (" || *s || " bytes)")
               text.set_contents_str(s)
               if is_live() then
                  text.move_cursor(1, 1)
               curr_file_name := fname
            } else
               msg("File not in utf8 format:" || &why)
         } else
            msg("Couldn't load:" || &why)
      } else {
         msg("New file")
         curr_file_name := fname
         text.set_contents([u""])
      }
   end

   private save(fname)
      local s, fd
      if /fname then {
         fd := FileDialog()
         fd.show_modal(self)
         fname := fd.get_result() | fail
      }
      s := text.get_contents_str()
      if Files.string_to_file(fname, s) then {
         msg("Saved " || FilePath(fname).get(-1) || " (" || *s || " bytes)")
         text.undo_manager.clear()
         update_grey()
         curr_file_name := fname
         return
      } else
         msg("Couldn't save:" || &why)
   end

   private handle_save_as(ev)
      save()
   end

   private handle_save(ev)
      save(curr_file_name)
   end

   private handle_new(ev)
      confirm_abandon() | fail
      msg("New file")
      text.set_contents([u""])
      curr_file_name := &null
      update_grey()
   end

   private handle_open(ev)
      local fd, s
      confirm_abandon() | fail
      fd := FileDialog()
      fd.show_modal(self)
      if s := fd.get_result() then
         load(s)
   end

   private handle_ww_off(ev)
      text.set_wrap_mode("off")
   end

   private handle_ww_width(ev)
      text.set_wrap_mode("width")
   end

   private handle_ww_40(ev)
      text.set_wrap_mode(40)
   end

   private handle_ww_80(ev)
      text.set_wrap_mode(80)
   end

   private handle_split_words()
      if split_words_item.is_checked() then
         text.set_split_words(&yes)
      else
         text.set_split_words(&no)
   end

   public init_dialog()
      set_focus(text)
   end

   private msg(s)
      message_label.set_label(s)
   end

   private clear_msg()
      msg("")
   end

   private update_grey()
      if text.can_undo() then {
         clear_msg()
         save_button.set_is_shaded(&no)
         save_item.set_is_shaded(&no)
      } else {  
         save_button.set_is_shaded(&yes)
         save_item.set_is_shaded(&yes)
      }
   end

   private setup()
      local menu_bar_1, menu_1,menu_2, cbg, menu_3, ww_off_item, 
         ww_width_item, ww_40_item, ww_80_item, tb

      self.set_label("Editor").set_resize(&yes)
      set_layout(GridLayout())
      connect(self.dispose, Event.WINDOW_CLOSE_BUTTON)
      text := EditableTextList().set_constraint("eol", &yes)
      text.set_size(scale(400), scale(300))
      text.set_contents([u""])
      text.connect(self.update_grey, Event.SELECTION_CHANGED)
      text.connect(self.update_grey, Event.CONTENT_CHANGED)

      menu_bar_1 := MenuBar().set_constraint("eol", &yes).set_constraint("x_fill", &yes).set_constraint("l_inset", 0).set_constraint("t_inset", 0).set_constraint("r_inset", 0)
      menu_1 := Menu().set_label("File").set_accel("f")
      open_item := TextMenuItem().set_label("Open").set_accel("o")
      open_item.connect(self.handle_open, Event.ACTION)
      menu_1.add(open_item)
      save_item := TextMenuItem().set_label("Save").set_accel("s")
      save_item.connect(self.handle_save, Event.ACTION)
      menu_1.add(save_item)
      save_as_item := TextMenuItem().set_label("Save as...")
      save_as_item.connect(self.handle_save_as, Event.ACTION)
      menu_1.add(save_as_item)
      new_item := TextMenuItem().set_label("New").set_accel("s")
      new_item.connect(self.handle_new, Event.ACTION)
      menu_1.add(new_item)
      quit_item := TextMenuItem().set_label("Quit").set_accel("q")
      quit_item.connect(self.handle_quit, Event.ACTION)
      menu_1.add(quit_item)
      menu_bar_1.add(menu_1)

      menu_2 := EditMenu(text).set_label("Edit").set_accel("e")
      menu_bar_1.add(menu_2)

      cbg := CheckBoxGroup()
      menu_3 := Menu().set_label("Wrap").set_accel("w")
      ww_off_item := CheckBoxMenuItem().set_label("Off")
      ww_off_item.connect(self.handle_ww_off, Event.ACTION)
      cbg.add(ww_off_item)
      menu_3.add(ww_off_item)
      ww_width_item := CheckBoxMenuItem().set_label("Width")
      ww_width_item.connect(self.handle_ww_width, Event.ACTION)
      cbg.add(ww_width_item)
      menu_3.add(ww_width_item)
      ww_40_item := CheckBoxMenuItem().set_label("40 chars")
      ww_40_item.connect(self.handle_ww_40, Event.ACTION)
      cbg.add(ww_40_item)
      menu_3.add(ww_40_item)
      ww_80_item := CheckBoxMenuItem().set_label("80 chars")
      ww_80_item.connect(self.handle_ww_80, Event.ACTION)
      cbg.add(ww_80_item)
      menu_3.add(ww_80_item)
      cbg.set_which_one(ww_off_item)
      menu_3.add(MenuSeparator())
      split_words_item := CheckBoxMenuItem().set_label("Split words")
      split_words_item.connect(self.handle_split_words, Event.ACTION)
      menu_3.add(split_words_item)

      menu_bar_1.add(menu_3)

      self.add(menu_bar_1)

      tb := Component().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_align", "l").
         set_constraint("x_weight", 1.0).
         set_layout(GridLayout().
                    set_doi(0).
                    set_dii(2).
                    set_extra("cells"))
      self.add(tb)
      close_button := IconButton().
         set_no_click_focus(&yes).
         set_tooltip("Close").
         set_accel("c").
         set_image(EXIT).
         connect(handle_quit, Event.ACTION)
      tb.add(close_button)

      save_button := IconButton().
         set_no_click_focus(&yes).
         set_tooltip("Save").
         set_accel("s").
         set_constraint("x_weight", 1.0).
         set_constraint("x_align", "l").
         set_image(SAVE).
         connect(handle_save, Event.ACTION)
      tb.add(save_button)

      theme_toolbar_button(close_button, "window-close")
      theme_toolbar_button(save_button, "document-save")

      self.add(text)

      message_label := MessageLabel().
         set_fg("red").
         set_constraint("x_fill", &yes).
         set_constraint("b_inset", 0).
         set_constraint("l_inset", 0).
         set_constraint("r_inset", 0).
         set_border(
                    CompoundBorder().
                    set_outer(SunkenBorder()).
                    set_inner(EmptyBorder().
                              set_l_inset(3)).
                              set_x_align("l"))
      self.add(message_label)

      update_grey()
   end

   public new()
      Dialog.new()
      setup()
      return
   end
end

class SaveChangesDialog(Dialog)
   private readable res

   public on_yes()
      res := "yes"
      self.dispose()
   end

   public on_no()
      res := "no"
      self.dispose()
   end

   public on_cancel()
      res := "cancel"
      self.dispose()
   end

   public new()
      local l, p, yes, no, cancel
      Dialog.new()
      self.set_label("Save changes?")

      set_layout(GridLayout())

      l := Label().set_constraint("eol", &yes).set_constraint("y_weight", 1).set_constraint("x_align", "c")
      l.set_label(".cell\nThe text has been modified.\n.br\nDo you wish to save these changes?\n.br")
      add(l)
      add(Line().set_constraint("eol", &yes).set_size(scale(100)).set_constraint("x_fill", &yes))

      p := Panel().set_constraint("y_weight", 0)
      p.set_layout(GridLayout().set_doi(0))
      yes := TextButton().set_label("Yes").set_accel(&yes)
      yes.connect(self.on_yes, Event.ACTION)
      p.add(yes)

      no := TextButton().set_label("No").set_accel(&no)
      no.connect(self.on_no, Event.ACTION)
      p.add(no)

      cancel := TextButton().set_label("Cancel").set_accel("c")
      cancel.connect(self.on_cancel, Event.ACTION)
      p.add(cancel)

      self.add(p)

      self.set_focus(yes)
      return
   end
end



procedure main(args)
   local d
   d := Editor()
   d.load(args[1])
   d.show_modal()
end
