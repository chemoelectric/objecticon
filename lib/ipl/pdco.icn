############################################################################
#
#	File:     pdco.icn
#
#	Subject:  Procedures for programmer-defined control operations
#
#	Authors:  Ralph E. Griswold and Robert J. Alexander
#
#	Date:     June 10, 2001
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################

package ipl.pdco

import
   io(RamStream),
   ipl.lists(lmap, lrotate),
   ipl.numbers(residue),
   ipl.periodic(repeater),
   datastruct(EqSet),
   numbers(Rat),
   lang(equals, Internal),
   util(save_state, HandlerState, ce_param, cvpos_item, need_integer,
        need_ucs, use, need_text, need_callable, same_string_type)

# Adds tabby to treadling sequence
procedure AddTabby(e, i)	
   /i :=  4	# number of regular treadles

   suspend Inter![e, create |((i + 1) | (i + 2))]

end

# Parallel evaluation with last result used for short sequences
procedure Allpar(L[])	
   local i, L1, done

   L1 := list(*L)

   done := list(*L,1)

   every i := 1 to *L do L1[i] := @L[i] | fail

   repeat {
      suspend L1
      every i := 1 to *L do
         if done[i] = 1 then ((L1[i] := @L[i]) | (done[i] := 0))
      if not(!done = 1) then fail
      }

end

# PDCO to model alternation
procedure Alt(e1, e2)	

   suspend |@e1
   suspend |@e2

end

# Produce sequence of approximations for the continued-fraction
# sequence e
procedure CFapprox(e)	
  local prev_n, prev_m, n, m, t

  prev_n := [1]
  prev_m := [0, 1]

  put(prev_n, (@e).d) | fail

  while t := @e do {
     n := t.d * get(prev_n) + t.n * prev_n[1]
     m := t.d * get(prev_m) + t.n * prev_m[1]
     suspend Rat(n, m)
     put(prev_n, n)
     put(prev_m, m)
     if t.d ~= 0 then {		# renormalize
        every !prev_n /:= t.d
        every !prev_m /:= t.d
        }
     }

end

# PDCO to compare result sequences of e1 and e2
procedure Compare(e1, e2)	
   local x1

   while x1 := @e1 do
      (x1 === @e2) | fail
   return not @e2

end

# This is like `Compare` above, but uses `lang.equals()`, as opposed to
# `===`, for comparison.
#
procedure CompareEq(e1, e2)	
   local x1

   while x1 := @e1 do
      equals(x1,  @e2) | fail
   return not @e2

end


# PDCO to generate integers not in sequence
procedure Complint(e)	
   local i, j			# EXPECTS MONOTONE NON-DECREASING SEQUENCE

   j := 0

   while i := @e do {
      i := need_integer(i)
      suspend j to i - 1
      j := i + 1
      }

   suspend seq(j)

end

# PDCO for generalized Lisp conditional
procedure Cond(L[])	
   local i, x

   every i := 1 to *L do
      if x := @L[i] then {
         suspend x
         suspend |@L[i]
         fail
         }

end

# PDCO to generate the cumulative sum of the terms of e
procedure Cumsum(e)		
   local i

   i := 0

   while i +:= @e do
      suspend i

end

# PDCO to produce sum
procedure Sum(e)		
   local i

   i := 0

   while i +:= @e

   return i
end

# PDCO to produce product
procedure Product(e)		
   local i

   i := 1

   while i *:= @e

   return i
end

# PDCO to generate the cumulative product of the terms of e
procedure Cumproduct(e)		
   local i

   i := 1

   while i *:= @e do
      suspend i

end

# Parallel evaluation with shorter sequences re-evaluated
procedure Cyclepar(L[])	
   local i, L1, done

   L1 := list(*L)

   done := list(*L,1)

   every i := 1 to *L do L1[i] := @L[i] | fail

   repeat {
      suspend L1
      every i := 1 to *L do {
         if not(L1[i] := @L[i]) then {
            done[i] := 0
            if !done = 1 then {
               L[i] := ^L[i]
               L1[i] := @L[i] | fail
               }
            else fail
            }
         }
      }
end

# "Decimate" e1 by deleting e2-numbered terms (e2 is assumed to be an
# increasing sequence).
procedure Decimate(e1, e2)	
   local i, j, count

   count := 0

   while j := @e2 do {
      while i := @e1 | fail do {
         count +:= 1
         if count = j then break next
         else suspend i
         }
      }

end

# Produce a decimation sequence from e1 by deleting even-valued terms
# and replacing odd-valued terms by their position.
procedure Decimation(e)	
   local i, count

   count := 0

   while i := @e do {
      count +:= 1
      if i % 2 = 1 then suspend count
      }

end

# PDCO to decollate e according to parity of i
procedure Decollate(e, i)	
   local j, x

   i := ce_param(i) | fail
   i := need_integer(\i) | 1

   i %:= 2
 
   j := 0

   while x := @e do {
      j +:= 1
      if j % 2 = i then suspend x
      }

end

# PDCO producing the difference of the values in e
procedure Delta(e)	
   local i, j

   i := @e | fail

   while j := @e do {
      suspend j - i
      i := j
      }

end

# PDCO to elevate e1 mod n to n values.
procedure Elevate(e1, m, n)	
   local shafts, i, j, k

   m := ce_param(m) | fail
   n := ce_param(n) | fail

   m := need_integer(m)
   n := need_integer(n)

   shafts := list(m)

   every !shafts := []

   every i := 1 to m do
      every put(shafts[i], i to n by m)

   while j := @e1 do {
      i := j % m + 1
      k := get(shafts[i])
      suspend k
      put(shafts[i], k)
      }

end

# PDCO to model `every e1 do e2`
procedure Every(e1, e2)	

   while @e1 do @^e2

end

# Evaluate `e1` and for each result, evaluate `e2`, failing should it
# fail.  Succeed when `e1` is exhausted (and hence each evaluation of
# `e2` succeeded).
#
# Examples :-
# ~
#    # Are the characters in string s in ascending
#    # lexicographic order?
#    if All{ i := 1 to *s - 1,
#            s[i] <<= s[i + 1] }
#    then write("Yes")
#
#    # Are all the elements of list l positive?
#    if All{ e := !l, e > 0 }
#    then write("Yes")
# ~
procedure All(e1, e2)
   while @e1 do @^e2 | fail
   return
end

# PDCO to extend `e` to `count` results
procedure ExtendSeq(e, count)	
   local fl

   count := need_integer(ce_param(count)) | fail
   if count < 1 then fail

   repeat {
      suspend |@e do {
         count -:= 1
         if count = 0 then fail
         fl := &yes
         }
      if /fl then fail
      e := ^e
      fl := &no
      }

end

# Extract results of even-numbered arguments according to odd-numbered
# values.
procedure Extract(L[])	
   local i, n, L1

   L1 := list(*L/2)

   repeat {
      i := 1
      while i < *L do {
         n := @L[i] | fail
         every 1 to n do
            L1[(i + 1)/2] := @L[i + 1] | fail
         L[i + 1] := ^L[i + 1]
         i +:= 2
         }
      suspend L1
      } 

end

# Reversal of `Lifo` evaluation
procedure Fifo(L[])	
   local L1, j

   L1 := list(*L)

   j := *L

   repeat {
      if L1[j] := @L[j] then {
         if j = 1 then
            suspend L1
         else
            j -:= 1
      } else {
         if j = *L then fail
         L[j] := ^L[j]
         j +:= 1
      }
   }
end

# PDCO for friendly sequence starting at `state` shaft mod `mod`
procedure Friendly(mod, state, e)	
   local value

   mod := ce_param(mod) | fail
   state := ce_param(state) | fail

   mod := need_integer(mod)
   state := need_integer(\state) | ?mod

   repeat {
      suspend state
      value := @e | fail
      if value % 2 = 0 then state +:= 1
      else state -:= 1
      state := residue(state, mod, 1)
      }

end

# PDCO to produces the result of concatenating the
# sequences for `L[1], L[2], ...`
procedure Galt(L[])		
   local C

   every C := !L do
      suspend |@C

end

# PDCO to model generalized conjunction: `L[1] & L[2] & ...`
procedure Gconj(L[])	
   local v, j

   j := 1

   repeat {
      if v := @L[j] then {
         if j = *L then
            suspend v
         else
            j +:= 1
      } else {
         if j = 1 then fail
         L[j] := ^L[j]
         j -:= 1
      }
   }
end

# Generates histogram for `e1`
procedure Histo(e1)		
   local results, seq

   seq := []

   while put(seq, @e1)

   results := list(max ! seq, 0)

   every results[!seq] +:= 1

   suspend !results

end


# PDCO to filter out non-increasing values in integer sequence
procedure Increasing(e)	
   local last, current

   last := @e | fail

   suspend last

   while current := @e do {
      if current <= last then next
      else {
         suspend current
         last := current
         }
      }

end

# PDCO to produce `e1`-th terms from `e2`
procedure Index(e1, e2)		
   local i, j, x

   j := @e2 | fail

   every i := seq() do {	# position
      x := @e1 | fail
      if j = i then {
         suspend x
         repeat {
            j := @e2 | fail
            if j > i then break
            }
         }
      }

end

# PDCO to produce results of `L[1], L[2], ...` alternately
procedure Inter(L[])	

   suspend |@!L

end

# PDCO to model the Lisp conditional
procedure Lcond(L[])	
   local i

   every i := 1 to *L by 2 do
      if @L[i] then {
         suspend |@L[i + 1]
         fail
         }

end

# PDCO to produce length of sequence `e`.
procedure Length(e)	
   local i

   i := 0

   while @e do i +:= 1

   return i

end

# Generate the results from the several expressions in the same
# left-to-right order as in normal icon evaluation.
# 
# For example `Lifo{1 to 3, !"ab"}` generates [1,"a"], [1,"b"], [2,
# "a"] etc.
#
# Note that the same list instance is suspended each time, and should
# not be altered.
#
procedure Lifo(L[])	
   local L1, j

   L1 := list(*L)

   j := 1

   repeat {
      if L1[j] := @L[j] then {
         if j = *L then
            suspend L1
         else
            j +:= 1
      } else {
         if j = 1 then fail
         L[j] := ^L[j]
         j -:= 1
      }
   }
end

# PDCO to model the limitation expression, `e1 \ e2`.
procedure Limit(e1, e2)	
   local i, x

   while i := @e2 do {
      every 1 to i do
         if x := @e1 then suspend x
         else break
      e1 := ^e1
      }

end

#
# Create a list from the result sequence of the given co-expression.
#
# For example :-
# ~
#     List{(e := 0 to 9, e * e)}
# ~
# produces the list
# ~
#     [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
# ~
procedure List(e)		
   local t
   t := []
   while put(t, @e)
   return t
end

#
# Create a set from the result sequence of the given co-expression.
#
# For example :-
# ~
#    Set{(e := 0 to 9, e * e)}
# ~
# produces the set
# ~
#    {0, 1, 4, 9, 16, 25, 36, 49, 64, 81}
# ~
procedure Set(e)		
   local t
   t := set()
   while insert(t, @e)
   return t
end


# Construct a table from a result sequence.  The expression `e` should
# produce 2-element lists representing key-value pairs to add to the
# table.
#
# For example :-
# ~
#    Table{(i := 1 to 4, [i, i * i])}
# ~
# produces the table
# ~
#    {1->1, 2->4, 3->9, 4->16}
# ~
procedure Table(e)
   local t, x
   t := table()
   while x := @e do
      insert(t, x[1], x[2])
   return t
end

#
# Build a string from the results of the co-expression `e`, separated
# by the string `sep` (default "").  If `sep` is ucs, or any of the
# results of `e` are `ucs`, then the result is `ucs`, otherwise it is
# a string.
#
# Note that for some use cases, `String2` below may be much faster
# than this procedure.
#
procedure String(e, sep)
   local s
   sep := ce_param(sep) | fail
   if /sep then {
      s := ""
      while s ||:= @e
   } else {
      sep := need_text(sep)
      # Ensure result is same type as sep, even if the sequence is empty.
      s := sep[1:1]
      while s ||:= @e || sep
      # Ensure that -*sep below is correct
      sep := same_string_type(sep, s)
      s[-*sep:0] := ""
   }
   return s
end

#
# This is an alternative to `String`, which may be preferable in one
# of two situations.  Firstly, if any of the elements (or the
# separator) are `ucs` strings, or secondly if generating the elements
# involves separate string allocations.  Both can lead to excessive
# allocations, and hence garbage collections.  This procedure avoids
# those allocations by using an intermediate `RamStream` buffer to
# generate the result.
#
# Note that any csets in the elements may be treated differently
# compared to `String`, since each element is converted to string,
# rather than being passed to the more sophisticated catenation
# operator.  (thus a non-8-bit cset will give a runtime error, and a
# non-ascii cset will make a string result obligatory).  Other than
# this, the result should always be the same as `String`.
#
procedure String2(e, sep)
   local t, f, rs, s
   sep := ce_param(sep) | fail
   use {
      rs := RamStream(),
      {
         if /sep then {
            while t := @e do {
               if /f & type(t) == "ucs" then f := &yes
               rs.out(t)
            }
            s := rs.str()
         } else {
            sep := need_text(sep)
            if type(sep) == "ucs" then {
               f := &yes
               sep := string(sep)
            }
            while t := @e do {
               if /f & type(t) == "ucs" then f := &yes
               rs.out(t); rs.out(sep)
            }
            s := rs.str()
            s[-*sep:0] := ""
         }
      }
   }
   return if /f then s else need_ucs(s)
end

# Lower trimming
procedure LowerTrim(e)	
   local i

   while i := @e do {
      i -:= 1
      if i ~= 0 then suspend i
      }

end

# PDCO to map values of `e1` in the order they first appear to values of `e2` (as needed)
procedure Map(e1, e2)		
   local maptbl, x

   maptbl := table()

   while x := @e1 do {
      /maptbl[x] := (@e2 | fail)
      suspend maptbl[x]
      }

end

# PDCO to force odd/even sequence
procedure OddEven(e)	
   local val, val_old

   while val := @e do {
      if val % 2 = \val_old % 2 then
         suspend val_old + 1
      suspend val
      val_old := val
      }

end

# PDCO to produce results of concatenating the sequence for `e` and
# then its reverse.
procedure Palin(e)	
   local tail, x

   tail := []

   while x := @e do {
      suspend x
      push(tail, x)
      } 

   suspend !tail

end


# Parallel evaluation terminating on shortest sequence.
procedure Parallel(L[])	
   local i, L1

   L1 := list(*L)

   repeat {
      every i := 1 to *L do
         L1[i] := @L[i] | fail
      suspend L1
      }

end

# PDCO to produce pattern palindrome
procedure PatternPalin(e)	
   local tail, x

   tail := []
   while x := @e do {
      suspend x
      push(tail, x)
   }

   get(tail)

   pull(tail)

   suspend !tail

end

# PDCO to generate the periodic part of `e`; `limit` values (default
# 300) are used to find the period.
procedure Period(e, limit)		
   local result

   limit := ce_param(limit) | fail
   limit := need_integer(\limit) | 300

   result := []

   every put(result, |@e) \ limit

   result := repeater(result)

   suspend !result[2]

end

# This PDCO permutes each n-subsequence of `e1` by the n positional
# values in lists from `e2`.  If a list does not consist of all the
# integers in the range 1 to n, "interesting" things happen (see the
# use of map() for transpositions).
#
procedure Permute(e1, e2)	
   local temp1, temp2, chunk, i

   repeat {
      temp1 := @e2 | fail
      temp2 := []
      every put(temp2, i := 1 to *temp1)
      chunk := []
      every 1 to i do
         put(chunk, @e1) | fail
      suspend !lmap(temp1, temp2, chunk)
      }

end

# PDCO to generate pivot points from `e % m`; `m` defaults to 100
procedure Pivot(e, m)		
   local current, direction, new

   m := ce_param(m) | fail
   m := need_integer(\m) | 100

   direction := "+"

   current := @e % m | fail

   suspend current

   repeat {
      new := @e % m | break
      if new = current then next
      case direction of {
         "+":  {
            if new > current then {
               current := new
               next
               }
            else {
               suspend current
               current := new
               direction := "-"
               }
            }
         "-":  {
            if new < current then {
               current := new
               next
               }
            else {
               suspend current
               current := new
               direction := "+"
               }
            }
         }

      }

   return current

end

# Generates the positions at which `v` occurs in `e`.
procedure Positions(e, v)	
   local count, x

   v := ce_param(v) | fail

   count := 0

   while x := @e do {
      count +:= 1
      if x === v then suspend count
      }

end

# PDCO to generate positions at which `e1` and `e2` differ
procedure PosDiff(e1, e2)	
   local i, x, y

   i := 0

   while x := @e1 & y := @e2 do {
      i +:= 1
      if x ~=== y then suspend i
      }

end

# PDCO to generate produces results of `L[1], L[2], ...` at random
procedure Random(L[])	
   local x

   while x := @?L do suspend x

end

# PDCO to model repeated alternation, `|e`.
procedure Repalt(e)	
   local fl
   repeat {
      suspend |@e do
         fl := &yes
      if /fl then fail
      e := ^e
      fl := &no
      }

end


# PDCO to "reduce" the sequence `e` by starting with the value `x` and
# repetitively applying binary operation `op` to the current value and
# values from `e`.
#
procedure Reduce(op, x, e)	
   local v

   op := ce_param(op) | fail
   x := ce_param(x) | fail

   op := need_callable(op, 2)

   while v := @e do
      x := op(x, v)

   return x

end

# PDCO to repeat the sequence for `e1` `e2` times
procedure Repeat(e1, e2)	
   local i

   while i := @e2 do {
      i := need_integer(i)
      every 1 to i do {
         suspend |@e1
         e1 := ^e1
         }
      }

end

# PDCO for remove duplicate adjacent values in a sequence
procedure RemoveDupl(e)	
   local old, new

   old := @e | fail
   suspend old

   repeat {
      new := @e | fail
      if new === old then next
      else {
         suspend new
         old := new
         }
      }

end

# PDCO to replicate each value in `e1` by the corresponding integer
# value in `e2`.
procedure Repl(e1, e2)	
   local x, i

   while x := @e1 do {
      i := @\e2 | 1
      suspend (1 to i) & x
      }

end

# PDCO to model limited iteration, ie
# ~
#   every e1 \ e2 do e3`
# ~
procedure Resume(e1, e2, e3)	
   local i

   while i := @e2 do {
      e1 := ^e1
      every 1 to i do if @e1 then @^e3 else break
   }

end

# PDCO to produce the results of `e` in reverse order.
procedure Reverse(e)
   local result
   result := []
   while push(result, @e)
   suspend !result
end

# PDCO to rotate the sequence for `e` left by `i`; negative
# `i` rotates to the right.
procedure Rotate(e, i)		
   local result, x

   i := need_integer(ce_param(i)) | fail

   result := []

   if i <= 0 then {		# if not to right, works for infinite sequence
      every 1 to -i do
         put(result, @e) | break
      while x := @e do
         suspend x
      suspend !result
      }

   else {
      while put(result, @e)
      suspend !lrotate(result, i)
      }

end

# PDCO to produce multiple of values in sequence, producing `e * j` copies of `e`
procedure Selfrepl(e, j)	
   local i
   j := ce_param(j) | fail
   j := need_integer(\j) | 1
   while i := @e do {
      i := need_integer(i)
      suspend (1 to i * j) & i
      }

end

# PDCO to generate the integers not in sequence `e`.
procedure Compl(e)	
   local i, j

   j := 1

   while i := @e do {
      i := need_integer(i)
      suspend j to i - 1
      j := i + 1
      }

   suspend seq(j)

end

# PDCO to generate differences in sequences 
procedure Delta2(e1, e2)	
   local C, i

   C := ^e1
   every 1 to @e2 do @C

   while i := @C - @e1 do
     suspend i

end

# Simple evaluation with only success or failure
procedure Simple(L[])	
   local i, L1

   L1 := list(*L)

   every i := 1 to *L do
      L1[i] := @L[i] | fail

   return L1

end

# PDCO to generate `e1` skipping each `e2` terms
procedure Skip(e1, e2)	
   local gap

   suspend @e1

   repeat {
      gap := @e2 | fail
      every 1 to gap do
         @e1 | fail
      suspend @e1
      }

end

# Generalized modular reduction: reduce terms in `e1` (shaft) modulus `e2`
procedure Smod(e1, e2)		
   local i, m

   while i := @e1 do {
      m := @e2 | fail
      suspend residue(i, m, 1)
      }

end

# Fill in gaps between consecutive (integer) values in `e % m`; `m`
# defaults to 100
procedure Span(e, m)		
   local i, j

   m := ce_param(m) | fail
   m := need_integer(\m) | 100

   j := @e | fail
   while i := residue(@e, m, 1) do {
      if i > j then suspend j to i - 1
      else if i < j then suspend j to i + 1 by -1
      j := i
      } 

   suspend j

end

# PDCO to produce values of `e` until their sum exceeds
# `limit`.  Values less than `min` are discarded.
procedure Sumlimit(e, limit, min) 	
   local sum, i

   limit := ce_param(limit) | fail
   min := ce_param(min) | fail

   limit := need_integer(\limit) | 2^15
   min := need_integer(\min) | 0
   sum := 0

   while i := @e do {
      if i < min then next
      if (sum + i) > limit then fail
      sum +:= i
      suspend i
      }

end

# PDCO to produce the unique results of `e` in the order they first appear.
procedure Unique(e)	
   local done, x

   done := set()

   while x := @e do
      if not member(done, x) then {
         insert(done, x)
         suspend x
         }

end

# This is like `Unique` above, but uses `lang.equals()`, as opposed to
# `===`, to determine whether or not a result has been previously
# seen.
#
procedure UniqueEq(e)	
   local done, x

   done := EqSet()

   while x := @e do
      if not done.member(x) then {
         done.insert(x)
         suspend x
         }

end


# Upper sequence trimming
procedure UpperTrim(e)	
   local done, i

   done := set()

   while i := @e do {
      if not member(done, i) then
         insert(done, i)
      else suspend i
      }

end


# PDCO to produce sequence values alternately: `e(1), e(2), e(1), e(2), e(3), e(2), ...`.
procedure Wobble(e)	
   local x, y

   x := @e | fail
   suspend x

   while y := @e do {
      suspend y | x | y
      x := y
      }

end

#
# Evaluate the given expression, suspending its results, whilst
# ignoring any non-fatal runtime errors.  After failure,
# `&errortext` can be tested to see whether or not failure was
# caused by a runtime error.
#
procedure Safe(e)
   suspend save_state(e, HandlerState(&current))
end

# A useful wrapper around `Safe`.  `Safe` is called with `e` to get
# its first result.  If no runerr occurs, then the result produced by
# `e` is returned.  If `e` fails, `&null` is returned.  If a runerr
# occurs, `errorclear` is called, `&why` is set and the procedure
# fails.
#
procedure Safe1(e)
   local v
   v := Safe(e)
   if &errortext then {
      &why := if &errornumber then
         "Runtime error " || &errornumber || ": " || &errortext
      else                                                     
         "Runtime error: " || &errortext                       
      &why ||:= "; Offending value: " || image(&errorvalue)
      errorclear()
   } else
      return v
end

# Dijkstra non-deterministic if construct
procedure If(a[])
   local x, i
   x := []
   every i := 1 to *a by 2 do 
      if @a[i] then 
         put(x, i)

   if *x = 0 then
      runerr("No guard in If succeeded")

   i := ?x + 1
   suspend |@a[i]
end

# Dijkstra non-deterministic do construct
procedure Do(a[])
   local x, i
   repeat {
      x := []
      every i := 1 to *a by 2 do
         if @^a[i] then 
            put(x, i)

      if *x = 0 then
         break

      @^a[?x + 1]
   }
end

#
# Generate the results of a co-expression as a sequence.
#
procedure Seq(e)
   suspend |@e
end

#
# Succeed (with &null) iff the given co-expression produces a result.
#
procedure Succeeds(e)
   succeed @e
end

# Evaluate each element of e, suspending all the results of the nth element.
#
procedure Each(n, e[])
   local f
   n := need_integer(ce_param(n)) | fail
   n := cvpos_item(n, *e) | fail
   every f := !e do {
      if (n -:= 1) = 0 then
         suspend |@f
      else
         @f
   }
end

#
# Generate the results of e between the elements i to j.  If j is
# &null, then there is no upper limit.  Otherwise, Icon slice index
# semantics are used (like l[i:j]), so (j - i) elements at most are
# generated.
#
procedure Subseq(e, i, j)
   i := ce_param(i) | fail
   j := ce_param(j) | fail
   i := need_integer(\i) | 1
   \j := need_integer(j)
   if i > \j then
      i :=: j
   every 2 to i do
      @e | fail
   suspend if /j then |@e else |@e \ (j - i)
end

#
# Parallel assignment to each result of e from each corresponding result of f.
#
procedure Assign(e, f)
   while @e := @f
end

#
# Parallel swap between corresponding results of e and f.
#
procedure Swap(e, f)
   while @e :=: @f
end

#
# Generate results from co-expression `e`, while function `f`, applied
# to each result, succeeds.
#
procedure TakeWhile(f, e)
   local i
   f := need_callable(ce_param(f)) | fail
   while f(i := @e) do
      suspend i
end

#
# Discard results from co-expression `e`, while function `f`, applied
# to each result, succeeds.  Then generate the remainder of the
# results from `e`.
#
procedure DropWhile(f, e)
   local i
   f := need_callable(ce_param(f)) | fail
   repeat {
      i := @e | fail
      f(i) | break
   }
   suspend i | |@e
end

#
# Generate results from co-expression `e`, filtered by function `f`.
#
procedure Filter(f, e)
   local i
   f := need_callable(ce_param(f)) | fail
   while i := @e do
      if f(i) then
         suspend i
end

#
# Apply a function, given by the first parameter, to the remaining sequences.
#
procedure Zip(ef, el[])
   local n, f, e, t
   # Allow operators if 1-3 parameters
   if 1 <= *el <= 3 then
      n := *el
   f := need_callable(@ef, n) | fail
   if *el = 0 then
      fail
   repeat {
      t := []
      every e := !el do
         put(t, @e) | fail
      suspend f!t
      if f := @ef then
         f := need_callable(f, n)
   }
end

#
# Succeed (and return &null), if the function `f` succeeds when
# applied to all the results from co-expression `e`; fail otherwise.
#
procedure AllOf(f, e)
   local i
   f := need_callable(ce_param(f)) | fail
   while i := @e do
      f(i) | fail
   return
end

package procedure MinMaxImpl(e, cmp, dir)
   local i, v
   cmp := ce_param(cmp) | fail
   cmp := need_callable(\cmp) | Internal.compare
   v := @e | fail
   while i := @e do {
      if dir * cmp(i, v) > 0 then
         v := i
   }
   return v
end

# Return the maximum element in the sequence `e`, based on the
# comparison function `cmp`, which defaults to `Internal.compare`.
#
procedure Max(e, cmp)
   return MinMaxImpl(e, cmp, 1)
end

# Return the minimum element in the sequence `e`, based on the
# comparison function `cmp`, which defaults to `Internal.compare`.
#
procedure Min(e, cmp)
   return MinMaxImpl(e, cmp, -1)
end

#
# A useful function to calculate the maximum of a sequence of
# non-negative numbers.  Unlike `Max` above, the empty sequence makes
# sense, and returns 0.  It is equivalent to :-
#
# ~~~
#   Reduce{ "<", 0, ... }
# ~~~
procedure MaxNN(e)
   local x, v
   x := 0
   while v := @e do
      x <:= v

   return x
end
