############################################################################
#
#	File:     archives.icn
#
#	Subject:  Procedures for reading files from archives
#
#	Author:   Gregg M. Townsend
#
#	Date:     March 5, 2000
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################

package ipl.archives

import
   io(BufferStream, FileOpt, FileStream, LineFilterStream,
      ProgInputStream)

# iszip(zname) succeeds if the named file appears to be a ZIP format
# archive file.
#
procedure iszip(fname)		
   local f, s
   f := FileStream.open(fname, FileOpt.RDONLY) | fail
   s := f.reads(4)
   f.close()
   return s === "PK\03\04"
end

#
# {Stream} for reading the entries in a zip archive, one per line of the stream.
#
class ZipDirStream(LineFilterStream)
   protected gen()
      local s, marker
      every 1 to 3 do
         expect_line() | fail
      marker := "---------                     -------"
      repeat {
         s := expect_line() | fail
         if s == marker then
            return
         suspend s[31:0]
      }
   end

   public new(zname)
      return cast(self,LineFilterStream).new(BufferStream(ProgInputStream("unzip", ["-l", zname])))
   end
end

# zipfile(zname, fname) returns a pipe from which the file fname
# within the ZIP archive zname can be read.  It is assumed that zname
# and fname are valid.
#
procedure zipfile(zname, fname)		
   return ProgInputStream("unzip", ["-p", zname, fname])
end

#
# {Stream} for reading the entries in a rar archive, one per line of the stream.
#
class RarDirStream(LineFilterStream)
   protected gen()
      local s, marker
      every 1 to 8 do
         expect_line() | fail
      marker := repl("-", 79)
      repeat {
         s := expect_line() | fail
         if s == marker then
            return
         suspend s[2:0]
         expect_line() | fail
      }
   end

   public new(rname)
      return cast(self,LineFilterStream).new(BufferStream(ProgInputStream("unrar", ["v", "-c-", rname])))
   end
end

# rarfile(rname, fname) returns a pipe from which the file fname
# within the rar archive rname can be read.  It is assumed that rname
# and fname are valid.
#
procedure rarfile(rname, fname)		
   return ProgInputStream("unrar", ["p", "-inul", rname, fname])
end
