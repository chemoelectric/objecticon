package parser

import util, io

final class Token()
   public const
      tok, 
      s, 
      val,
      line,
      column,
      filename

   private readable 
      chunk

   public set_chunk(chunk)
      self.chunk := chunk
      return self
   end

   public get_pad()
      if chunk[-*s:0] == s then
         return .chunk[1:-*s]
      else
         return .chunk
   end

   public str()
      return .chunk
   end

   #
   # Output this token to the given stream.
   #
   public output(f)
      return f.writes(chunk)
   end

   public new(tok, s, chunk, val, line, column, filename)
      self.tok := tok
      self.s := s
      self.val := val
      self.chunk := chunk
      self.line := line
      self.column := column
      self.filename := filename
      return
   end
end

#
# This represents a node in the parse tree.  The children are
# either other Nodes, or Token instances, which come from the lexer.
#
class Node()
   public const 
      label
   private
      children
   public static const
      EMPTY
   
   private static init()
      EMPTY := Node("Empty")
   end

   public child(i)
      return .children[i]
   end

   public gen()
      suspend .!children
   end

   public set(i, x)
      self.children[i] := x
      return self
   end

   public size()
      return *children
   end

   #
   # Return a string representation of this node.  Note - this may
   # need considerable stack space for some programs.
   #
   public str()
      local s
      s := ""
      every s ||:= (!children).str()
      return s
   end

   #
   # Output this node to the given stream.
   #
   public output(f)
      local c
      every c := !children do
         c.output(f) | fail
      return
   end

   public new(label, children[])
      self.label := label
      self.children := children
      return
   end
end

abstract class Tree()
   public const pos

   public defer get_first_token()

   public dumpw()
      Util.dumpw(pos)
   end

   package new(pos)
      self.pos := pos
      return
   end
end

abstract class List()
   public const lpos, index

   package abstract flatten()
   package abstract unflatten()
   public abstract put(o)
   public abstract push(o)

   public clear()
      lpos.set(index, Node.EMPTY)
      return self
   end

   public gen()
      suspend !flatten()
   end

   public size()
      return *flatten()
   end

   public get(i)
      return flatten()[i]
   end

   public set(i, o)
      local l
      l := flatten()
      l[i] := o
      unflatten(l)
      return self
   end

   public insert(i, o)
      local l
      l := flatten()
      default.insert(l, i, o)
      unflatten(l)
      return self
   end

   public delete(i)
      local l
      l := flatten()
      default.delete(l, i)
      unflatten(l)
      return self
   end

   package new(lpos, index)
      self.lpos := lpos
      self.index := index
      return
   end
end

#
# Left-assoc list; define put and flatten
#
abstract class LList(List)
   package unflatten(l)
      clear()
      every put(!l)
      return self
   end

   public push(o)
      local l
      l := flatten()
      default.push(l, o)
      unflatten(l)
      return self
   end
end

#
# Right-assoc list; define push and flatten
#
abstract class RList(List)
   package unflatten(l)
      clear()
      every push(back(l))
      return self
   end

   public put(s)
      local l
      l := flatten()
      default.put(l, s)
      unflatten(l)
      return self
   end
end

class Leaf(Tree)
   #
   # Return a string representation of this leaf node (typically an
   # identifier).  Note that this doesn't include the inter-token data
   # (comments and white space).  To get that, use pos.chunk or
   # pos.str().
   #
   public str()
      return pos.s
   end

   public get_first_token()
      return pos
   end
end

class Id(Tree)
   public const comma

   #
   # Return a string representation of this Id node.  Note that this
   # doesn't include the inter-token data (comments and white space).
   # To get that, use pos.str().
   #
   public str()
      return Util.dottedid2string(pos)
   end

   public get_first_token()
      return pos
   end

   package new(pos, comma)
      Tree.new(pos)
      /comma := Token(YY.COMMA, ",", ",")
      self.comma := comma
      return
   end
end

abstract class IdList(LList)
   private const lab

   package flatten()
      local l, n
      l := []
      n := lpos.child(index)
      while n ~=== Node.EMPTY do {
         if is(n, Node) & n.label == lab then {
            default.push(l, Id(n.child(3), n.child(2)))
            n := n.child(1)
         } else {
            # Leftmost token, or Node with non-matching label.
            default.push(l, Id(n))
            break
         }
      }
      return l
   end

   public put(s)
      if lpos.child(index) === Node.EMPTY then
         lpos.set(index, s.pos)
      else
         lpos.set(index, Node(lab, 
                              lpos.child(index),
                              s.comma,
                              s.pos))
      return self
   end

   package new(lpos, index, lab)
      LList.new(lpos, index)
      /lab := "idlist"
      self.lab := lab
      return
   end
end

abstract class SimpleLList(Tree, LList)
   package new(pos, index)
      Tree.new(pos)
      LList.new(pos, index)
      return
   end
end

abstract class SimpleRList(Tree, RList)
   package new(pos, index)
      Tree.new(pos)
      RList.new(pos, index)
      return
   end
end

class SimpleIdList(Tree, IdList)
   package new(pos, index, lab)
      Tree.new(pos)
      IdList.new(pos, index, lab)
      return
   end
end

class AccessList(SimpleLList)
   private const lab

   package flatten()
      local l, n
      l := []
      n := lpos.child(index)
      while n ~=== Node.EMPTY do {
         if is(n, Node) then {
            default.push(l, Leaf(n.child(2)))
            n := n.child(1)
         } else {
            default.push(l, Leaf(n))
            break
         }
      }
      return l
   end

   public put(x)
      if lpos.child(index) === Node.EMPTY then
         lpos.set(index, x.pos)
      else
         lpos.set(index, Node(lab,
                              lpos.child(index),
                              x.pos))
      return self
   end

   package new(lpos, index, lab)
      SimpleLList.new(lpos, index)
      /lab := "fieldaccess"
      self.lab := lab
      return
   end
end

class LocalsList(SimpleLList)
   package flatten()
      local l, n
      l := []
      n := lpos.child(index)
      while n ~=== Node.EMPTY do {
         default.push(l, Local(n))
         n := n.child(1)
      }
      return l
   end

   public put(x)
      lpos.set(index, Node("locals", 
                           lpos.child(index),
                           x.pos.child(2),
                           x.pos.child(3)))
      return self
   end
end

class Invocable(SimpleLList)
   public get_first_token()
      return pos.child(1)
   end

   package flatten()
      local l, n
      l := []
      n := lpos.child(index)
      while n ~=== Node.EMPTY do {
         if is(n, Node) & n.label == "invoclist" then {
            default.push(l, Id(n.child(3), n.child(2)))
            n := n.child(1)
         } else {
            default.push(l, Id(n))
            break
         }
      }
      return l
   end

   public put(x)
      if lpos.child(index) === Node.EMPTY then
         lpos.set(index, x.pos)
      else
         lpos.set(index, Node("invoclist",
                              lpos.child(index),
                              x.comma,
                              x.pos))
      return self
   end

   package new(pos)
      SimpleLList.new(pos, 2)
      return
   end
end

class Import(SimpleLList)
   public get_first_token()
      return pos.child(1)
   end

   package flatten()
      local l, n, t
      l := []
      n := lpos.child(index)
      while n ~=== Node.EMPTY do {
         if is(n, Node) & n.label == "importlist" then {
            t := n.child(3)
            if is(t, Node) & t.label == "importspec" then
               default.push(l, ImportSpec(t, n.child(2)))
            else
               default.push(l, Id(t, n.child(2)))
            n := n.child(1)
         } else {
            if is(n, Node) & n.label == "importspec" then
               default.push(l, ImportSpec(n))
            else
               default.push(l, Id(n))
            break
         }
      }
      return l
   end

   public put(x)
      if lpos.child(index) === Node.EMPTY then
         lpos.set(index, x.pos)
      else
         lpos.set(index, Node("importlist",
                              lpos.child(index),
                              x.comma,
                              x.pos))
      return self
   end

   package new(pos)
      SimpleLList.new(pos, 2)
      return
   end
end

class Imports(SimpleLList)
   package flatten()
      local l, n
      l := []
      n := pos.child(index)
      while n ~=== Node.EMPTY do {
         default.push(l, Import(n.child(2)))
         n := n.child(1)
      }
      return l
   end

   public put(x)
      pos.set(index, Node("importdecls", 
                          pos.child(index),
                          x.pos))
      return self
   end
end

class Body(SimpleLList)
   package flatten()
      local l, n, t, t2
      l := []
      n := lpos.child(index)
      while n ~=== Node.EMPTY do {
         t := n.child(2)
         default.push(l, case t.label of {
            "body" : {
               t2 := t.child(2)
               case t2.label of {
                  "record" : Record(t)
                  "class" :  Class(t)
                  "proc" :  Procedure(t)
                  "global": Global(t)
                  default: syserr("Unknown body node:" || t2.label)
               }
            }
            "invocable": Invocable(t)
            default: syserr("Unknown declaration node:" || t.label)
         })
         n := n.child(1)
      }
      return l
   end

   public put(x)
      lpos.set(index, Node("bodydecls", 
                           lpos.child(index),
                           x.pos))
      return self
   end
end

class Prog(Tree)
   private decls

   public get_package()
      return Package(Node.EMPTY ~=== decls.child(1))
   end

   public set_package(x)
      decls.set(1, x.pos)
      return self
   end

   public clear_package(x)
      decls.set(1, Node.EMPTY)
      return self
   end

   public get_imports()
      return Imports(decls, 2)
   end

   public get_body()
      return Body(decls, 3)
   end

   package new(pos)
      Tree.new(pos)
      decls := pos.child(1)
      return
   end
end

class InvocableOp(Tree)
   public const comma
   
   public get_first_token()
      return pos.child(1)
   end

   public get_op()
      return Leaf(pos.child(1))
   end

   public get_num()
      return Leaf(pos.child(3))
   end

   package new(pos, comma)
      Tree.new(pos)
      /comma := Token(YY.COMMA, ",", ",")
      self.comma := comma
      return
   end
end

class ImportSpec(SimpleIdList)
   public const comma

   public get_package()
      return Id(pos.child(1))
   end

   package new(pos, comma)
      SimpleIdList.new(pos,3)
      /comma := Token(YY.COMMA, ",", ",")
      self.comma := comma
      return
   end
end

class Util()
   public static dottedid2string(n)
      local s
      s := ""
      repeat {
         if is(n, Token) then {
            s := n.s || s
            return s
         }
         s := n.child(2).s || n.child(3).s || s
         n := n.child(1)
      }
   end

   public static first_token(n)
      local c, t
      if is(n, Token) then
         return n
      every c := n.gen() do {
         if t := first_token(c) then
            return t
      }
   end

   public static dump(n, l)
      /l := 0
      if is(n, Node) then {
         write(repl(" ", 3*l), n.label)
         every dump(n.gen(), l+1)
      }
      else # It's a Token
         write(repl(" ", 3*l), "Token ", image(n), " ", "s=", image(n.s), "c=", image(n.chunk))
   end

   public static dumpw(n)
      if is(n, Node) then
         every dumpw(n.gen())
      else # Token
         writes(n.chunk)
   end
end

class Factory()
   public static new_id(pad, s)
      /pad := ""
      return Id(Token(YY.IDENT, s, pad || s),
                Token(YY.COMMA, ",", ","))
   end

   public static new_prog()
      return Prog(Node("prog", 
                       Node("decls", Node.EMPTY, Node.EMPTY, Node.EMPTY), 
                       Token(YY.EOFX, "", "")))
   end

   public static new_access(pad, s)
      local t
      t := case s of {
         "private": YY.PRIVATE
         "public": YY.PUBLIC
         "protected": YY.PROTECTED
         "package": YY.PACKAGE
         "static": YY.STATIC
         "const": YY.CONST
         "readable": YY.READABLE
         "final": YY.FINAL
         "abstract": YY.ABSTRACT
         "native": YY.NATIVE
         "defer": YY.DEFER
         default: runerr("Bad access value", s)
      }
      return Leaf(Token(t, s, pad || s))
   end

   public static new_retention(pad, s)
      local t
      t := case s of {
         "local": YY.LOCAL
         "static": YY.STATIC
         default: runerr("Bad retention value", s)
      }
      /pad := " "
      return Leaf(Token(t, s, pad || s))
   end

   public static new_procedure(pad, name, args, epad)
      local t
      /epad := "\n"
      t := Procedure(Node("body",
                          Node.EMPTY,
                          Node("proc",
                               Token(YY.PROCEDURE, "procedure", pad || "procedure"),
                               Token(YY.IDENT, name, " " || name),
                               Token(YY.LPAREN, "(", "("),
                               Node.EMPTY,
                               Token(YY.RPAREN, ")", ")"),
                               Node.EMPTY,
                               Node.EMPTY,
                               Node.EMPTY,
                               Node.EMPTY,
                               Token(YY.END, "end", epad || "end"))))
      t.get_args().put(new_id("", pop(args)))
      every t.get_args().put(new_id(" ", !args))
      return t
   end

   public static new_class(pad, access, name, supers, epad)
      local t
      /epad := "\n"
      t := Class(Node("body",
                      Node.EMPTY,
                      Node("class",
                           Node.EMPTY,
                           Token(YY.CLASS, "class", if *access > 0 then " class" else pad || "class"),
                           Token(YY.IDENT, name, " " || name),
                           Token(YY.LPAREN, "(", "("),
                           Node.EMPTY,
                           Token(YY.RPAREN, ")", ")"),
                           Node.EMPTY,
                           Node.EMPTY,
                           Token(YY.END, "end", epad || "end"))))
      t.get_access().put(new_access(pad, pop(access)))
      every t.get_access().put(new_access(" ", !access))
      t.get_supers().put(new_id("", pop(supers)))
      every t.get_supers().put(new_id(" ", !supers))
      return t
   end

   public static new_deferred_method(pad, access, defer_type, name, args)
      local t
      t := DeferredMethod(Node("classbody",
                               Node.EMPTY,
                               Node.EMPTY,
                               Node("deferredmethod",
                                    Node.EMPTY,
                                    Token(YY.IDENT, name, " " || name),
                                    Token(YY.LPAREN, "(", "("),
                                    Node.EMPTY,
                                    Token(YY.RPAREN, ")", ")"))))
      t.get_access().put(new_access(pad, pop(access)))
      every t.get_access().put(new_access(" ", !access))

      t.get_args().put(new_id("", pop(args)))
      every t.get_args().put(new_id(" ", !args))

      t.set_defer_type(new_access(" ", defer_type))

      return t
   end

   public static new_method(pad, access, name, args, epad)
      local t
      /epad := "\n"
      t := Method(Node("classbody",
                       Node.EMPTY,
                       Node.EMPTY,
                       Node("method",
                            Token(YY.IDENT, name, " " || name),
                            Token(YY.LPAREN, "(", "("),
                            Node.EMPTY,
                            Token(YY.RPAREN, ")", ")"),
                            Node.EMPTY,
                            Node.EMPTY,
                            Node.EMPTY,
                            Node.EMPTY,
                            Token(YY.END, "end", epad || "end"))))
      t.get_access().put(new_access(pad, pop(access)))
      every t.get_access().put(new_access(" ", !access))

      t.get_args().put(new_id("", pop(args)))
      every t.get_args().put(new_id(" ", !args))

      return t
   end

   public static new_fields(pad, access, ids)
      local t
      t := FieldList(Node("classbody",
                          Node.EMPTY,
                          Node.EMPTY,
                          Node.EMPTY))
      t.get_access().put(new_access(pad, pop(access)))
      every t.get_access().put(new_access(" ", !access))
      every t.put(new_id(" ", !ids))
      return t
   end

   public static new_local(pad, ret, ids)
      local t
      t :=  Local(Node("locals", 
                        Node.EMPTY,
                        Node.EMPTY,
                        Node.EMPTY))
      t.set_retention(new_retention(pad, ret))
      every t.put(new_id(" ", !ids))
      return t
   end

   public static new_record(pad, name, fields)
      local t, l
      t := Record(Node("body",
                       Node.EMPTY,
                       Node("record",
                            Token(YY.RECORD, "record", pad || "record"),
                            Token(YY.IDENT, name, " " || name),
                            Token(YY.LPAREN, "(", "("),
                            Node.EMPTY,
                            Token(YY.RPAREN, ")", ")"))))
      l := t.get_ids()
      l.put(new_id("", pop(fields)))
      every l.put(new_id(" ", !fields))
      return t
   end

   public static new_global(pad, ids)
      local t, l
      t := Global(Node("body",
                       Node.EMPTY,
                       Node("global",
                            Node.EMPTY,
                            Token(YY.GLOBAL, "global", pad || "global"),
                            Node.EMPTY)))
      l := t.get_ids()
      every l.put(new_id(" ", !ids))
      return t
   end

   public static new_package(pad, id)
      return Package(Node("package",
                          Token(YY.PACKAGE, "package", pad || "package"),
                          Token(YY.IDENT, id, " " || id)))
   end

   public static new_import_spec(pad, pack, syms)
      local t
      t := ImportSpec(Node("importspec",
                           Token(YY.IDENT, pack, pad || pack),
                           Token(YY.LPAREN, "(", "("),
                           Node.EMPTY,
                           Token(YY.RPAREN, ")", ")")))
      t.put(new_id("", pop(syms)))
      every t.put(new_id(" ", !syms))
      return t
   end

   public static new_import(pad, packs)
      local t
      t :=  Import(Node("import",
                        Token(YY.IMPORT, "import", pad || "import"),
                        Node.EMPTY))
      every t.put(new_id(" ", !packs))
      return t
   end

   public static new_invocable(pad, ids)
      local t
      t := Invocable(Node("invocable",
                          Token(YY.INVOCABLE, "invocable", pad || "invocable"),
                          Node.EMPTY))
      every t.put(new_id(" ", !ids))
      return t
   end

   public static new_keyword(pad, id)
      /pad := ""
      return Node("keyword",
                  Token(YY.AND, "&", pad || "&"),
                  Token(YY.IDENT, id, id))
   end
end

class ClassMembers(SimpleLList)
   package flatten()
      local l, n, t
      l := []
      n := lpos.child(index)
      while n ~=== Node.EMPTY do {
         t := n.child(3)
         default.push(l, 
              if is(t, Token) | t.label == "idlist" then
                 FieldList(n)
              else if t.label == "method" then
                 Method(n)
              else
                 DeferredMethod(n))
         n := n.child(1)
      }
      return l
   end

   public put(x)
      lpos.set(index, Node("classbody", 
                           lpos.child(index),
                           x.pos.child(2),
                           x.pos.child(3)))
      return self
   end
end

abstract class GlobalObj(Tree)
   public get_package_flag()
      if pos.child(1) === Node.EMPTY then
         fail
      return Leaf(pos.child(1))
   end

   public set_package_flag(x)
      if /x then
         pos.set(1, Node.EMPTY)
      else
         pos.set(1, x.pos)
      return self
   end
end

class Class(GlobalObj)
   public get_first_token()
      return Util.first_token(pos)
   end

   public get_name()
      return Leaf(pos.child(2).child(3))
   end

   public set_name(x)
      pos.child(2).set(3, x.pos)
      return self
   end

   public get_supers()
      return SimpleIdList(pos.child(2), 5, "super")
   end

   public get_access()
      return AccessList(pos.child(2), 1, "classaccess")
   end

   public get_members()
      return ClassMembers(pos.child(2), 7)
   end
end

abstract class Function()
   public const
      fpos,
      name_index,
      arglist_index,
      locals_index

   public get_name()
      return Leaf(fpos.child(name_index))
   end

   public set_name(x)
      fpos.set(name_index, x.pos)
      return self
   end

   public has_varargs()
      local l
      l := fpos.child(arglist_index)
      return is(l, Node) & l.label == "arglist"
   end

   public set_varargs(f)
      check_flag(f)
      if \f then {
         if not has_varargs() then
            fpos.set(arglist_index, Node("arglist",
                                         fpos.child(arglist_index),
                                         Token(YY.LBRACK, "[", "["),
                                         Token(YY.RBRACK, "]", "]")))
      } else {
         if has_varargs() then
            fpos.set(arglist_index, fpos.child(arglist_index).child(1))
      }
      return self
   end

   public get_args()
      local l
      l := fpos.child(arglist_index)
      if is(l, Node) & l.label == "arglist" then
         return SimpleIdList(l, 1)
      else
         return SimpleIdList(fpos, arglist_index)
   end

   public get_locals_list()
      return LocalsList(fpos, \locals_index)
   end

   public get_initial_index()
      return \locals_index + 1
   end

   public get_body_index()
      return \locals_index + 3
   end

   public set_initial(s)
      fpos.set(\locals_index + 1, Token(YY.STRINGLIT, s, s))
      return self
   end

   public set_body(s)
      fpos.set(\locals_index + 3, Token(YY.STRINGLIT, s, s))
      return self
   end

   public get_initial_node()
      return fpos.child(\locals_index + 1)
   end

   public get_body_node()
      return fpos.child(\locals_index + 3)
   end

   public get_end_token()
      return fpos.child(\locals_index + 4)
   end

   package new(fpos, name_index, arglist_index, locals_index)
      self.fpos := fpos
      self.name_index := name_index
      self.arglist_index := arglist_index
      self.locals_index := locals_index
      return
   end
end

class Local(SimpleIdList)
   public get_first_token()
      return pos.child(2)
   end

   public get_retention()
      return Leaf(pos.child(2))
   end

   public set_retention(s)
      pos.set(2, s.pos)
      return self
   end

   package new(pos)
      SimpleIdList.new(pos, 3)
      return
   end
end

class FieldList(SimpleIdList)
   public get_first_token()
      return Util.first_token(pos.child(2))
   end

   public get_access()
      return AccessList(pos, 2)
   end

   package new(pos)
      SimpleIdList.new(pos, 3)
      return
   end
end

class Method(Tree, Function)
   public get_first_token()
      return Util.first_token(pos.child(2))
   end

   public get_access()
      return AccessList(pos, 2)
   end

   package new(pos)
      Tree.new(pos)
      Function.new(pos.child(3), 1, 3, 5)
      return
   end
end

class DeferredMethod(Tree, Function)
   public get_first_token()
      return Util.first_token(pos.child(2))
   end

   public get_access()
      return AccessList(pos, 2)
   end

   public get_defer_type()
      return Leaf(fpos.child(1))
   end

   public set_defer_type(s)
      fpos.set(1, s.pos)
      return self
   end

   package new(pos)
      Tree.new(pos)
      Function.new(pos.child(3), 2, 4)
      return
   end
end

class Procedure(GlobalObj, Function)
   public get_first_token()
      return Util.first_token(pos)
   end

   package new(pos)
      Tree.new(pos)
      Function.new(pos.child(2), 2, 4, 6)
      return
   end
end

class Record(GlobalObj)
   public get_first_token()
      return Util.first_token(pos)
   end

   public get_ids()
      return SimpleIdList(pos.child(2), 4)
   end

   public get_name()
      return Leaf(pos.child(2).child(2))
   end

   public set_name(x)
      pos.child(2).set(2, x.pos)
      return self
   end
end

class Global(GlobalObj, IdList)
   public const
      gpos

   public get_first_token()
      return Util.first_token(pos)
   end

   public get_readable_flag()
      if gpos.child(1) === Node.EMPTY then
         fail
      return Leaf(gpos.child(1))
   end

   public set_readable_flag(x)
      if /x then
         gpos.set(1, Node.EMPTY)
      else
         gpos.set(1, x.pos)
      return self
   end

   package new(pos)
      Tree.new(pos)
      gpos := pos.child(2)
      IdList.new(gpos, 3)
      return
   end
end

class Package(Tree)
   public get_first_token()
      return pos.child(1)
   end

   public get_name()
      return Id(pos.child(2))
   end

   public set_name(x)
      pos.set(2, x.pos)
      return self
   end
end

#
# Classes for handling lists in expression Nodes
#

class ExprListElement(Tree)
   public const comma

   public get_first_token()
      return Util.first_token(pos)
   end

   public new(pos, comma)
      Tree.new(pos)
      /comma := Token(YY.COMMA, ",", ",")
      self.comma := comma
      return
   end
end

#
# List for handling a "exprlist" Node
#
class ExprList(SimpleLList)
   package flatten()
      local l, n
      l := []
      n := lpos.child(index)
      if n ~=== Node.EMPTY then {
         repeat {
            if is(n, Node) & n.label == "exprlist" then {
               default.push(l, ExprListElement(n.child(3), n.child(2)))
               n := n.child(1)
            } else {
               # Leftmost token, or Node with non-matching label.
               default.push(l, ExprListElement(n))
               break
            }
         }
      }
      return l
   end

   public put(s)
      if lpos.child(index) === Node.EMPTY then
         lpos.set(index, s.pos)
      else
         lpos.set(index, Node("exprlist",
                              lpos.child(index),
                              s.comma,
                              s.pos))
      return self
   end

   public new(pos, index)
      SimpleLList.new(pos, index)
      return
   end
end

class CompoundElement(Tree)
   public const semi

   public get_first_token()
      return Util.first_token(pos)
   end

   public new(pos, semi)
      Tree.new(pos)
      /semi := Token(YY.SEMICOL, ";", ";")
      self.semi := semi
      return
   end
end

#
# List for handling a "compound" Node
#
class Compound(SimpleRList)
   package flatten()
      local l, n
      l := []
      n := lpos.child(index)
      if n ~=== Node.EMPTY then {
         repeat {
            if is(n, Node) & n.label == "compound" then {
               default.put(l, CompoundElement(n.child(1), n.child(2)))
               n := n.child(3)
            } else {
               # Rightmost token, or Node with non-matching label.
               default.put(l, CompoundElement(n))
               break
            }
         }
      }
      return l
   end

   public push(s)
      local n
      n := lpos.child(index)
      if n === Node.EMPTY then
         lpos.set(index, s.pos)
      else
         lpos.set(index, Node("compound",
                              s.pos,
                              s.semi,
                              lpos.child(index)))
      return self
   end

   public new(pos, index)
      SimpleRList.new(pos, index)
      return
   end
end

class CaseListElement(Tree)
   public const semi

   public get_first_token()
      return Util.first_token(pos)
   end

   public new(pos, semi)
      Tree.new(pos)
      /semi := Token(YY.SEMICOL, ";", ";")
      self.semi := semi
      return
   end
end

#
# List for handling a "caselist" Node
#
class CaseList(SimpleLList)
   package flatten()
      local l, n
      l := []
      n := lpos.child(index)
      if n ~=== Node.EMPTY then {
         repeat {
            if is(n, Node) & n.label == "caselist" then {
               default.push(l, CaseListElement(n.child(3), n.child(2)))
               n := n.child(1)
            } else {
               # Leftmost token, or Node with non-matching label.
               default.push(l, CaseListElement(n))
               break
            }
         }
      }
      return l
   end

   public put(s)
      if lpos.child(index) === Node.EMPTY then
         lpos.set(index, s.pos)
      else
         lpos.set(index, Node("caselist",
                              lpos.child(index),
                              s.semi,
                              s.pos))
      return self
   end

   public new(pos, index)
      SimpleLList.new(pos, index)
      return
   end
end

class DottedIdentListElement(Tree)
   public const dot

   public get_first_token()
      return Util.first_token(pos)
   end

   public new(pos, dot)
      Tree.new(pos)
      /dot := Token(YY.DOT, ".", ".")
      self.dot := dot
      return
   end
end

#
# List for handling a "dottedident" Node
#
class DottedIdentList(SimpleLList)
   package flatten()
      local l, n
      l := []
      n := lpos.child(index)
      if n ~=== Node.EMPTY then {
         repeat {
            if is(n, Node) & n.label == "dottedident" then {
               default.push(l, DottedIdentListElement(n.child(3), n.child(2)))
               n := n.child(1)
            } else {
               # Leftmost token, or Node with non-matching label.
               default.push(l, DottedIdentListElement(n))
               break
            }
         }
      }
      return l
   end

   public put(s)
      if lpos.child(index) === Node.EMPTY then
         lpos.set(index, s.pos)
      else
         lpos.set(index, Node("dottedident",
                              lpos.child(index),
                              s.dot,
                              s.pos))
      return self
   end

   public new(pos, index)
      SimpleLList.new(pos, index)
      return
   end
end
