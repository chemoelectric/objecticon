#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import util, ipl.pdco

#
# This is a Spin for numeric values, optionally within a fixed range.
#
class RangeSpin(Spin)
   public
      lo,
      hi,
      increment_size,
      last_val

   public override create_view()
      return SpinTextField()
   end

   public override initially()
      local f
      f := &digits
      if type(lo | hi | increment_size | last_val) == "real" then
         f ++:= '.'
      if /lo | /hi | (lo < 0) then
         f ++:= '\-'
      view.set_filter(f)
      Spin.initially()
   end

   public override do_increment(ev)
      assign_value(last_val + self.increment_size, ev, &yes)
   end

   public override do_decrement(ev)
      assign_value(last_val - self.increment_size, ev, &yes)
   end

   #
   # Set the range of allowed values.  The values may
   # be integer or real.
   #
   # :Parameters :
   # :  `lo` - The lower bound
   # :  `hi` - The upper bound
   #
   public set_range(lo, hi)
      self.lo := /lo | need_numeric(lo)
      self.hi := /hi | need_numeric(hi)
      link
   end

   #
   # Set the value
   #
   public set_value(x)
      x := need_numeric(x)
      x <:= \self.lo
      x >:= \self.hi
      view.set_contents(x)
      if is_live() then
         view.remove_wattrib(WAttrib.FG).reset()
      last_val := x
      link
   end

   #
   # Set the value, firing events
   #
   public assign_value(x, ev, coalesce)
      x := need_numeric(x)
      x <:= \self.lo
      x >:= \self.hi
      view.assign_contents(x,, ev, coalesce)
      link
   end

   #
   # Set the increment, ie the amount moved up/down by the buttons.
   #
   public set_increment_size(x)
      self.increment_size := need_numeric(x)
      link
   end

   public on_textfield(ev, src, type)
      if last_val := get_value() then
         view.remove_wattrib(WAttrib.FG).reset()
      else
         view.set_fg(Style.ERROR_COLOR).reset()
      # Fire the event with self as source.
      fire(type, ev)
   end

   #
   # Return the value, or fail if the value is not presently a valid
   # numeric value in the required range.
   #
   public get_value()
      local v
      v := numeric(view.get_contents()) | fail
      if (v < \self.lo) | (v > \self.hi) then
         fail
      return v
   end

   public override get_default_width()
      return border.get_total_width() +
         up.get_preferred_width() +
         # Bit difficult if we don't have a maximum...
         MaxNN{ self.cbwin.text_width((view.contents | \self.lo | \self.hi) || " ") } +
         view.border.get_total_width()
   end

   public override new()
      Spin.new()
      self.increment_size := 1
      every view.connect(self.on_textfield, Event.CONTENT_CHANGED | Event.ACTION)
      return
   end
end
