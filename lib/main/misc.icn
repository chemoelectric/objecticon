package util

#
# Delete all instances of x from the list l.
#
procedure list_del(l, x)
   local t
   t := []
   while put(t, pop(l))
   every put(l, x ~=== !t)
   return l
end

procedure list_unique(L)                    #: keep only unique list elements
   local result, culls, x

   result := []
   culls := set(L)

   every x := !L do
      if member(culls, x) then {
         delete(culls, x)
         put(result, x)
      }

   return result

end

procedure str2list(s, sep)
   local l, t
   /sep := ','
   l := []
   s ? repeat {
      t := tab(upto(sep) | 0)
      put(l, t)
      if pos(0) then
         break
      move(1)
   }
   return l
end

procedure list2str(l, sep)
   local s
   /sep := ","
   s := ""
   every s ||:= !l || sep
   s[-1] := ""
   return s
end

procedure has_feature(x)
   static s
   initial {
      s := set()
      every insert(s, &features)
   }
   return member(s, x)
end

#
# What is just ahead in the current scan?
#
procedure coming_up(i, j)
   /j := 0
   return &subject[&pos+j +: i]
end

#
# Like many, but succeeds with empty result if zero matching char. Many needs
# one or more.
#
procedure many_star(c)
   if any(c) then
      return many(c)
   else
      return &pos
end

#
# Search for a string; if found tab over it and succeed, otherwise
# fail.
#
procedure find_and_skip(s)
   return tab(find(s)) || move(*s)
end

procedure errno()
   \&why ? {
      find_and_skip("(errno=") | fail
      return integer(tab(many(&digits)))
   }
end

procedure error(s)
   &why := s
end

#
# Generate the results of a co-expression as a sequence.
#
procedure coexp_seq(e)
   suspend |@e
end
