package parser

#
# A hand-written lex compatible icon lexer.
#
import io, lang, util

class Lex(Connectable)
   #
   # the tokflags will tell you whether the token can start an expression or
   # end an expression, as well as whether a newline was seen since the last
   # token
   #
   private
      tokflags,
      yylineno, yycolno, yyfilename, yyencoding, 
      yytokval, yylinestart, yytext

   public static const
      idchars, reswords,
      Beginner, Ender, Newline

   private static init()
      Beginner := 1
      Ender := 2
      Newline := 4
      idchars := &letters ++ '_' ++ &digits
      reswords := table([Beginner+Ender, YY.IDENT])
      reswords["abstract"] := [0, YY.ABSTRACT]
      reswords["break"] := [Beginner+Ender, YY.BREAK]
      reswords["by"] := [0, YY.BY]
      reswords["case"] := [Beginner, YY.CASE]
      reswords["class"] := [0, YY.CLASS]
      reswords["const"] := [0, YY.CONST]
      reswords["create"] := [Beginner, YY.CREATE]
      reswords["default"] := [Beginner, YY.DEFAULT]
      reswords["do"] := [0, YY.DO]
      reswords["else"] := [0, YY.ELSE]
      reswords["end"] := [0, YY.END]
      reswords["every"] := [Beginner, YY.EVERY]
      reswords["fail"] := [Beginner+Ender, YY.FAIL]
      reswords["final"] := [0, YY.FINAL]
      reswords["global"] := [0, YY.GLOBAL]
      reswords["if"] := [Beginner, YY.IF]
      reswords["import"] := [0, YY.IMPORT]
      reswords["initial"] := [0, YY.INITIAL]
      reswords["invocable"] := [0, YY.INVOCABLE]
      reswords["local"] := [0, YY.LOCAL]
      reswords["native"] := [0, YY.NATIVE]
      reswords["next"] := [Beginner+Ender, YY.NEXT]
      reswords["not"] := [Beginner, YY.NOT]
      reswords["of"] := [0, YY.OF]
      reswords["optional"] := [0, YY.OPTIONAL]
      reswords["override"] := [0, YY.OVERRIDE]
      reswords["package"] := [0, YY.PACKAGE]
      reswords["private"] := [0, YY.PRIVATE]
      reswords["procedure"] := [0, YY.PROCEDURE]
      reswords["protected"] := [0, YY.PROTECTED]
      reswords["public"] := [0, YY.PUBLIC]
      reswords["readable"] := [0, YY.READABLE]
      reswords["record"] := [0, YY.RECORD]
      reswords["repeat"] := [Beginner, YY.REPEAT]
      reswords["return"] := [Beginner+Ender, YY.RETURN]
      reswords["static"] := [0, YY.STATIC]
      reswords["succeed"] := [Beginner+Ender, YY.SUCCEED]
      reswords["suspend"] := [Beginner+Ender, YY.SUSPEND]
      reswords["then"] := [0, YY.THEN]
      reswords["to"] := [0, YY.TO]
      reswords["until"] := [Beginner, YY.UNTIL]
      reswords["while"] := [Beginner, YY.WHILE]
   end

   private err(msg)
      fire("error", ErrorDetail(yyfilename, yylineno, image(yytext) || ": " || msg))
   end

   private do_encoding()
      if any(&letters) then {
         yyencoding := tab(many(&letters ++ &digits ++ '-'))
         (yyencoding == ("ASCII" | "UTF-8" |"ISO-8859-1")) | fire("error", ErrorDetail(yyfilename, yylineno, "Invalid encoding: " || yyencoding))
      }
   end

   private yylex2()
      repeat {
         tab(many(' \r\t\v\^l'))
         if pos(0) then {
            yycolno := &pos - yylinestart
            fail
         }
         if ="#" then {
            if ="line " then {
               if yylineno := integer(tab(many(&digits))) - 1 then {
                  tab(many(' \t'))
                  if ="\"" then {
                     yyfilename := FilePath(tab(find("\"" | "\n") | 0)).canonical().standard_case().str()
                     ="\""
                     tab(many(' \t'))
                     do_encoding()
                  }
               }
            }
            tab(find("\n") | 0)
            next
         }
         if ="$" then {
            # Handle $encoding if we are parsing an unpreprocessed string.
            if ="encoding" then {
               tab(many(' \t'))
               do_encoding()
            }
            tab(find("\n") | 0)
            next
         }
         if ="\n" then {
            yylineno +:= 1
            yylinestart := &pos - 1
            if tokflags < Newline then
               tokflags +:= Newline
            next
         }

         yycolno := &pos - yylinestart
         yytext := move(1)
         return case yytext of {
            "'": do_csetlit()
            "\"": do_strlit()
            "!": do_bang()
            "%": do_mod()
            "&": do_and()
            "*": do_star()
            "+": do_plus()
            "-": do_minus()
            ".": do_dot()
            "/": do_slash()
            ":": do_colon()
            "<": do_less()
            "=": do_equal()
            ">": do_greater()
            "?": do_qmark()
            "@": do_at()
            "\\": do_backslash()
            "^": do_caret()
            "|": do_or()
            "~": do_tilde()
            "(": do_lparen()
            ")": do_rparen()
            "[": do_lbrack()
            "]": do_rbrack()
            "{": do_lbrace()
            "}": do_rbrace()
            ",": do_comma()
            ";": do_semi()
            !&digits: do_digits()
            "u"|"U" : do_u()
            "_" | !&letters: do_letters()
            default: err("Token not recognized")
         }
      }
   end

   #
   # Tab to end of current str literal, setting yytext to its (unescaped)
   # value.  yytext should be set to the start of the literal, either ",
   # u" or ', depending on the type.
   #
   private get_strlit()
      local spos, cs, q, val, i, vpos
      vpos := spos := &pos
      val := ""
      # Closing quote is last char of yytext (either ' or ")
      q := cset(yytext[-1])
      cs := '\\_\n' ++ q
      repeat {
         tab(upto(cs) | 0)
         if pos(0) | any('\n') then {
            err("Unclosed quote")
            break
         }
         if any(q) then {
            val ||:= &subject[vpos:&pos]
            move(1)
            yytext ||:= &subject[spos:&pos]
            break
         }
         if any('_') then {
            if i := &pos & =("_\n" | "_\r\n") then {
               val ||:= &subject[vpos:i]
               yylineno +:= 1
               yylinestart := &pos - 1
               tab(many(' \t'))
               vpos := &pos
            } else
               move(1)
         } else {
            # Must be at a "\".  Skip that and the first char of the
            # escape; the others will be skipped by the tab at the top
            # of the loop.
            move(2 | 1)
         }
      }

      # Check encodings for valid chars
      if yyencoding == "UTF-8" then
         val := ucs(val)  | err("Invalid UTF-8 in string")
      else if yyencoding == "ASCII" then {
         if upto(~&ascii, val) then
            err("Non-ascii character in string")
      }

      return val
   end

   private do_u()
      local val, t
      if yytext ||:= ="\"" then {
         val := get_strlit()   
         if yyencoding ~== "UTF-8" then {
            # Convert val to by-codepoint ucs equivalent
            t := ""
            every t ||:= Text.utf8_seq(ord(val))
            val := ucs(t)
         }
         yytokval := Format.unescape(val) | err(&why)
         tokflags +:= Beginner + Ender
         return YY.UCSLIT
      } else {
         return do_letters()
      }
   end

   private do_strlit()
      local val, u, i
      val := get_strlit()   
      if yyencoding == "UTF-8" then {
         # Convert val to by-codepoint string equivalent
         u := ""
         every i := ord(val) do
            u ||:= char(i) | err("Code point out of range for string literal")
         val := u
      }
      yytokval := Format.unescape(val) | err(&why)
      tokflags +:= Beginner + Ender
      return YY.STRINGLIT
   end

   private do_csetlit()
      local val
      val := get_strlit()
      yytokval := Format.cset_unescape(val) | err(&why)
      tokflags +:= Beginner + Ender
      return YY.CSETLIT
   end

   private do_letters()
      local x
      yytext ||:= tab(many(idchars))
      x := reswords[yytext]
      tokflags +:= x[1]
      return x[2]
   end

   private do_digits()
      yytext ||:= tab(many(&digits))
      tokflags +:= Beginner+Ender
      if yytext ||:= ="." then {
         yytext ||:= tab(many(&digits))
         if yytext ||:= tab(any('eE')) then {
            yytext ||:= tab(any('+\-'))
            yytext ||:= tab(many(&digits))
         }
         yytokval := real(yytext) | err("Invalid real literal")
         return YY.REALLIT
      }
      else if yytext ||:= tab(any('eE')) then {
         yytext ||:= tab(any('+\-'))
         yytext ||:= tab(many(&digits))
         yytokval := real(yytext) | err("Invalid real literal")
         return YY.REALLIT
      }
      else {
         if yytext ||:= tab(any('rR')) then {
            yytext ||:= tab(many(&digits ++ &letters))
         }
         yytokval := integer(yytext) | err("Invalid integer literal")
         return YY.INTLIT
      }
   end

   private do_comma()
      return YY.COMMA
   end

   private do_lbrack()
      tokflags +:= Beginner; return YY.LBRACK
   end

   private do_rbrack()
      tokflags +:= Ender; return YY.RBRACK
   end

   private do_lbrace()
      tokflags +:= Beginner; return YY.LBRACE
   end

   private do_rbrace()
      tokflags +:= Ender; return YY.RBRACE
   end

   private do_semi()
      return YY.SEMICOL
   end

   private do_lparen()
      tokflags +:= Beginner; return YY.LPAREN
   end

   private do_rparen()
      tokflags +:= Ender; return YY.RPAREN
   end

   private do_tilde()
      if yytext ||:= ="=" then {
         if yytext ||:= ="=" then {
            if yytext ||:= ="=" then {
               if yytext ||:= =":=" then {return YY.AUGNEQUIV }
               tokflags +:= Beginner
               return YY.NEQUIV
            }
            if yytext ||:= =":=" then {return YY.AUGSNE}
            tokflags +:= Beginner
            return YY.SNE
         }
         if yytext ||:= =":=" then { return YY.AUGNMNE}
         tokflags +:= Beginner
         return YY.NMNE
      }
      tokflags +:= Beginner
      return YY.TILDE
   end

   private do_or()
      if yytext ||:= ="|" then {
         if yytext ||:= ="|" then {
            if yytext ||:= =":=" then{return YY.AUGLCONCAT}
            tokflags +:= Beginner
            return YY.LCONCAT
         }
         if yytext ||:= =":=" then { return YY.AUGCONCAT}
         tokflags +:= Beginner
         return YY.CONCAT
      }
      tokflags +:= Beginner
      return YY.BAR
   end

   private do_caret()
      if yytext ||:= =":=" then {  return YY.AUGCARET }
      tokflags +:= Beginner
      return YY.CARET
   end

   private do_backslash()
      tokflags +:= Beginner
      return YY.BACKSLASH
   end

   private do_at()
      if yytext ||:= =":=" then { return YY.AUGAT }
      tokflags +:= Beginner
      return YY.AT
   end

   private do_qmark()
      if yytext ||:= =":=" then { return YY.AUGQMARK }
      tokflags +:= Beginner
      return YY.QMARK
   end

   private do_equal()
      if yytext ||:= ="=" then {
         if yytext ||:= ="=" then {
            if yytext ||:= =":=" then{return YY.AUGEQUIV}
            tokflags +:= Beginner
            return YY.EQUIV
         }
         if yytext ||:= =":=" then { return YY.AUGSEQ }
         tokflags +:= Beginner
         return YY.SEQ
      }
      if yytext ||:= =":=" then { return YY.AUGNMEQ }
      tokflags +:= Beginner
      return YY.NMEQ
   end

   private do_greater()
      if yytext ||:= =":=" then { return YY.AUGNMGT }
      if yytext ||:= =">" then {
         if yytext ||:= =":=" then { return YY.AUGSGT }
         if yytext ||:= ="=" then {
            if yytext ||:= =":=" then {return YY.AUGSGE}
            return YY.SGE
         }
         return YY.SGT
      }
      if yytext ||:= ="=" then {
         if yytext ||:= =":=" then { return YY.AUGNMGE }
         return YY.NMGE
      }
      return YY.NMGT
   end

   private do_less()
      if yytext ||:= =":=" then { return YY.AUGNMLT }
      if yytext ||:= ="-" then {
         if yytext ||:= =">" then { return YY.REVSWAP }
         return YY.REVASSIGN
      }
      if yytext ||:= ="<" then {
         if yytext ||:= =":=" then { return YY.AUGSLT }
         if yytext ||:= ="=" then {
            if yytext ||:= =":=" then {return YY.AUGSLE}
            return YY.SLE
         }
         return YY.SLT
      }
      if yytext ||:= ="=" then {
         if yytext ||:= =":=" then { return YY.AUGNMLE }
         return YY.NMLE
      }
      return YY.NMLT
   end

   private do_colon()
      if yytext ||:= ="=" then {
         if yytext ||:= =":" then { return YY.SWAP }
         return YY.ASSIGN
      }
      return YY.COLON
   end

   private do_slash()
      if yytext ||:= =":=" then { return YY.AUGSLASH }
      tokflags +:= Beginner
      return YY.SLASH
   end

   private do_dot()
      if yytext ||:= tab(many(&digits)) then {
         if yytext ||:= tab(any('eE')) then {
            yytext ||:= tab(any('+\-'))
            yytext ||:= tab(many(&digits))
         }
         tokflags +:= Beginner+Ender
         yytokval := real(yytext) | err("Invalid real literal")
         return YY.REALLIT
      }
      else {
         tokflags +:= Beginner
         return YY.DOT
      }
   end

   private do_minus()
      if yytext ||:= =":" then {
         if yytext ||:= ="=" then { return YY.AUGMINUS}
         return YY.MCOLON
      }
      if yytext ||:= ="-" then {
         if yytext ||:= =":=" then { return YY.AUGDIFF}
         return YY.DIFF
      }
      tokflags +:= Beginner
      return YY.MINUS
   end

   private do_plus()
      if yytext ||:= =":" then {
         if yytext ||:= ="=" then { return YY.AUGPLUS }
         return YY.PCOLON
      }
      if yytext ||:= ="+" then {
         if yytext ||:= =":=" then {return YY.AUGUNION}
         return YY.UNION
      }
      tokflags +:= Beginner
      return YY.PLUS
   end

   private do_star()
      if yytext ||:= =":=" then { return YY.AUGSTAR }
      if yytext ||:= ="*" then {
         if yytext ||:= =":=" then {return YY.AUGINTER}
         return YY.INTER
      }
      tokflags +:= Beginner
      return YY.STAR
   end

   private do_and()
      if yytext ||:= =":=" then { return YY.AUGAND }
      tokflags +:= Beginner
      return YY.AND
   end

   private do_mod()
      if yytext ||:= =":=" then { return YY.AUGMOD }
      return YY.MOD
   end

   private do_bang()
      if yytext ||:= =":=" then { return YY.AUGBANG }
      tokflags +:= Beginner
      return YY.BANG
   end

   public yylex(str, filename, encoding, line)
      local rv, ender, chunk, buffer

      str := need_string(str)
      /encoding := "ASCII"
      /line := 0
      yytext := ""
      yytokval := &null
      yyencoding := encoding
      yyfilename := filename
      yylineno := line
      yylinestart := 0
      buffer := str
      tokflags := 0

      repeat {
         ender := iand(tokflags, Ender)
         tokflags := 0
         yytokval := &null
         buffer ? {
            if rv := yylex2() then {
               chunk := buffer[1:&pos]
               yylinestart -:= &pos - 1
               buffer := tab(0)
            }
            else
               return Token(YY.EOFX, "", buffer, yytokval, yylineno, yycolno, yyfilename)
         }
         if ender ~= 0 & iand(tokflags, Beginner) ~= 0 & iand(tokflags, Newline) ~= 0 then
            suspend Token(YY.SEMICOL, ";", "", &null, yylineno, yycolno, yyfilename)

         suspend Token(rv, yytext, chunk, yytokval, yylineno, yycolno, yyfilename)
      }
   end
end
