#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package util

class Timezone()
   public static const 
      KNOWN_TIMEZONES,
      SYSTEM_TIMEZONE, 
      UTC_TIMEZONE

   private readable
      offset,
      id

   private static init()
      local l, t
      KNOWN_TIMEZONES := table()
      UTC_TIMEZONE := Timezone(0, "UTC")

      every t := 
         UTC_TIMEZONE |
         Timezone(37800, "ACDT") | Timezone(34200, "ACST") | Timezone(-10800, "ADT") |
         Timezone(39600, "AEDT") | Timezone(36000, "AEST") | Timezone(-28800, "AKDT") |
         Timezone(-32400, "AKST") | Timezone(-14400, "AST") | Timezone(32400, "AWDT") |
         Timezone(28800, "AWST") | Timezone(3600, "BST") | Timezone(-18000, "CDT") |
         Timezone(7200, "CEDT") | Timezone(7200, "CEST") | Timezone(3600, "CET") |
         Timezone(-21600, "CST") | Timezone(25200, "CXT") | Timezone(-14400, "EDT") |
         Timezone(10800, "EEDT") | Timezone(10800, "EEST") | Timezone(7200, "EET") |
         Timezone(-18000, "EST") | Timezone(0, "GMT") | Timezone(-10800, "HAA") |
         Timezone(-18000, "HAC") | Timezone(-32400, "HADT") | Timezone(-14400, "HAE") |
         Timezone(-25200, "HAP") | Timezone(-21600, "HAR") | Timezone(-36000, "HAST") |
         Timezone(-9000, "HAT") | Timezone(-28800, "HAY") | Timezone(-14400, "HNA") |
         Timezone(-21600, "HNC") | Timezone(-18000, "HNE") | Timezone(-28800, "HNP") |
         Timezone(-25200, "HNR") | Timezone(-12600, "HNT") | Timezone(-32400, "HNY") |
         Timezone(3600, "IST") | Timezone(-21600, "MDT") | Timezone(7200, "MESZ") |
         Timezone(3600, "MEZ") | Timezone(14400, "MSD") | Timezone(10800, "MSK") |
         Timezone(-25200, "MST") | Timezone(-9000, "NDT") | Timezone(41400, "NFT") |
         Timezone(-12600, "NST") | Timezone(-25200, "PDT") | Timezone(-28800, "PST") |
         Timezone(0, "UT") | Timezone(32400, "WDT") | Timezone(3600, "WEDT") |
         Timezone(3600, "WEST") | Timezone(0, "WET") | Timezone(28800, "WST") do 
      {
         insert(KNOWN_TIMEZONES, t.id, t)
      }

      #
      # Set the system timezone
      #
      l := get_system_timezone()

      # If possible, use a symbolic representation, eg "EST" instead of -0500.
      # Only use a known symbol, whose offset agrees with the one just calculated
      if t := \KNOWN_TIMEZONES[l[2]] & t.get_offset() = l[1] then
         SYSTEM_TIMEZONE := t
      else
         SYSTEM_TIMEZONE := Timezone(l[1])
   end

   #
   # Returns a list in the form [offset, name] for the system
   # timezone.  The second element is optional.
   #
   private static defer get_system_timezone()

   #
   # Convert a zone id into a Timezone
   #
   public static get_known_timezone(id)
      local s, sign

      if member(KNOWN_TIMEZONES, id) then
         return KNOWN_TIMEZONES[id]

      id ? {
         if any('+\-') then {
            if any('\-') then 
               sign := -1
            else
               sign := 1
            move(1)
            s := tab(many(&digits)) | fail
            return Timezone(sign * (3600 * integer(s[1:3]) + 60 * integer(s[3:5])), id) | fail
         }
      }
   end

   public get_id()
      return .id
   end

   public get_offset()
      return .offset
   end

   public new(a[])
      if *a = 0 then {
         id := "UTC"
         offset := 0
      }
      else if *a = 1 then {
         if type(a[1]) == "integer" then {
            offset := a[1]
            id := (if offset < 0 then "-" else "+") ||
               right(abs(offset) / 3600, 2, "0") || 
               right((abs(offset) % 3600) / 60, 2, "0") 
         } else {
            id := a[1]
            offset := get_known_timezone(id).get_offset() | fail
         }
      } else {
         offset := a[1]
         id := a[2]
      }
      return
   end
end
