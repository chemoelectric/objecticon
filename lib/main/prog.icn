package lang

# In the methods below, the term "program" refers to the main
# co-expression of either the root program, or a program loaded via
# {Prog.load} below.   The parameters named {P} are always programs
# and default to the currently executing program if omitted.
#
class Prog()
   # Load and return a program from file {s}.
   #
   public static defer load(s, arglist, blocksize, stringsize)

   #
   # Generate the globals in program P
   #
   public static defer get_globals(P)

   #
   # Get the global named {s} in program P
   #
   public static defer get_global(s, P)

   #
   # Generate the global names in program P
   #
   public static defer get_global_names(P)

   #
   # Generate the global definitions with names (records, classes and procedures)
   # in program P.
   #
   public static defer get_named_globals(P)

   #
   # Get the global definition with name {s} in program P.
   #
   public static defer get_named_global(s, P)

   #
   # Generate the builtin functions.
   #
   public static defer get_functions()

   #
   # Generate the builtin operators.
   #
   public static defer get_operators()

   #
   # Generate the builtin keywords (as invocable functions).
   #
   public static defer get_keywords()

   #
   # Get the builtin function named {s}, or fail if it doesn't exist.
   #
   public static defer get_function(s)

   #
   # Get the builtin operator named {s}, with arity {n}, or fail if
   # it doesn't exist.
   #
   public static defer get_operator(s, n)

   #
   # Get the builtin keyword named {s} (as invocable functions), or fail
   # if it doesn't exist.
   #
   public static defer get_keyword(s)

   #
   # Get the location of global {s} in program P, if that data is
   # available.
   # @return a {Location} instance
   #
   public static get_global_location(s, P)
      return Location!get_global_location_impl(s, P)
   end

   private static defer get_global_location_impl(s, P)

   #
   # Return the value of the keyword {s} in program P.
   #
   public static defer eval_keyword(s, P)

   #
   # Find the variable with name s in program P and return a variable
   # descriptor which points to its value.
   #
   public static defer get_variable(s, P)

   #
   # Given a variable, return its name.  If x is an identifier or a
   # keyword that is a variable, the name of the identifier or keyword
   # is produced. If x is a record field reference, the record name
   # and field name are produced with a separating period. If x is a
   # string, the name of the string and the subscript range are
   # shown. If x is a subscripted list or table, the type name
   # followed by the subscripting expression is produced.
   #
   public static defer get_variable_name(v)

   #
   # Get the given program's event mask
   #
   public static defer get_event_mask(P)

   #
   # Set the given program's event mask
   #
   public static defer set_event_mask(cs, P)

   #
   # Get the next event from program P.
   #
   public static get_event(P)
      static res
      initial
         res := ProgEvent()
      if get_event_impl(P, res) then
         return .res
   end

   private static defer get_event_impl(P, res)

   #
   # Get the number of milliseconds since the startup time of the given
   # program.
   #
   public static defer get_runtime_millis(P)

   #
   # Get the startup time (load time) of the given program, as the
   # number of microseconds since the Unix base epoch (1 Jan 1970).
   #
   public static defer get_startup_micros(P)

   #
   # Return info about the collections in the given program.
   # @return a {CollectionInfo} object
   #
   public static get_collection_info(P)
      return CollectionInfo!get_collection_info_impl(P)
   end

   private static defer get_collection_info_impl(P)

   #
   # Return the number of collections of any type triggered by any
   # program.
   #
   public static defer get_global_collection_count()

   #
   # Return info about the allocations in the given program.
   # @return a {AllocationInfo} object
   #
   public static get_allocation_info(P)
      return AllocationInfo!get_allocation_info_impl(P)
   end

   private static defer get_allocation_info_impl(P)

   #
   # Return info about the memory regions in the given program.
   # @return a {RegionInfo} object
   #
   public static get_region_info(P)
      local t, l, m
      t := get_region_info_impl(P)
      l := []
      while put(l, Region(pop(t[1]), pop(t[1])))
      m := []
      while put(m, Region(pop(t[2]), pop(t[2])))
      return RegionInfo(l, m)
   end

   private static defer get_region_info_impl(P)

   #
   # Return the amount of stack (stack frames and local variables)
   # currently allocated by the given program.
   #
   # @return an integer
   #
   public static defer get_stack_used(P)
end

#
# This class contains some useful methods for manipulating coexpressions.
#
class Coexpression()
   #
   # Return the given coexpression's activator (ie the value of
   # {&source} when it was last active); fails if the coexpression has
   # never been activated.
   #
   # @param ce - the coexpression, by default &current
   #
   public static defer get_activator(ce)

   #
   # Return the program holding the current execution point
   # of the given co-expression.
   #
   # @param ce - the coexpression, by default &current
   #
   public static defer get_program(ce)

   #
   # Succeed iff this coexpression is the main coexpression of a
   # program.
   #
   # @param ce - the coexpression, by default &current
   #
   public static defer is_main(ce)

   #
   # Return the current procedure depth level of the given
   # coexpression (ie the value of &level for that coexpression).
   #
   # @param ce - the coexpression, by default &current
   #
   public static defer get_level(ce)

   #
   # Output (to stderr) a traceback in the same format as that produced by
   # a runtime error.
   #
   # @param ce - the coexpression, by default &current
   # @param act_chain - if non-null, show the traceback for the activator chain, otherwise
   #            just show the traceback for this coexpression.
   #
   public static defer traceback(ce, act_chain)

   #
   # Output (to stderr) a dump of the stack of the given coexpression,
   # showing the internal format of the stack.
   #
   public static defer print_stack(ce)

   #
   # Return a list containing information about the stack of frames in the given
   # co-expression.  Each element is a {FrameInfo} instance.
   #
   # @param ce - the coexpression, by default &current
   # @param lim - the maximum number of frames to put in the list, by default 
   # @            all frames
   #
   public static get_stack_info(ce, lim)
      local l
      l := []
      every put(l, FrameInfo!get_stack_info_impl(ce, lim))
      return l
   end

   private static defer get_stack_info_impl()
end

#
# Contains some information about a frame in a stack.
#
class FrameInfo()
   public const
      # The name of the procedure
      proc, 
      # The args the procedure was called with, as image strings
      args,
      # The name of the file of the current execution point
      file,
      # The line number of the current execution point
      line

   package new(proc, args, file, line)
      self.proc := proc
      self.args := args
      self.file := file
      self.line := line
      return
   end
end

#
# This class contains information about the garbage collections
# carried out by a program.
#
class CollectionInfo()
   public const
      # The number of collections requested by the {collect()} function.
      user_requests, 
      # The number of collections requested during stack allocations.
      stack_requests, 
      # The number of collections requested during string allocations.
      string_requests, 
      # The number of collections requested during block allocations.
      block_requests

   #
   # Return the total of all four types.
   #
   public get_total()
      return user_requests + stack_requests + string_requests + block_requests
   end

   package new(user_requests, stack_requests, string_requests, block_requests)
      self.user_requests := user_requests
      self.stack_requests := stack_requests
      self.string_requests := string_requests
      self.block_requests := block_requests
      return
   end
end

#
# This class returns the total amounts allocated by a program in each
# of its regions.
#
class AllocationInfo()
   public const
      # The total allocated in the string region.
      string_total,
      # The total allocated in the block region.
      block_total

   #
   # The total in all regions.
   #
   public get_total()
      return string_total + block_total
   end

   package new(string_total, block_total)
      self.string_total := string_total
      self.block_total := block_total
      return
   end
end

#
# This class contains information about a program's memory allocation
# regions.
#
class RegionInfo()
   public const
      # A list of {Region} instances, one for each string region
      # allocated.
      string_regions, 
      # A list of {Region} instances, one for each block region
      # allocated.
      block_regions

   # Return a {Region} instance representing the sum of all the string
   # regions.
   #
   public get_string_total()
      return Region.sum_list(string_regions)
   end

   # Return a {Region} instance representing the sum of all the block
   # regions.
   #
   public get_block_total()
      return Region.sum_list(block_regions)
   end

   package new(string_regions,
               block_regions)
      self.string_regions := string_regions
      self.block_regions := block_regions
      return
   end
end

#
# This class contains info about an allocated memory region.
#
class Region()
   public const 
      # The amount used
      used,
      # The size of the space
      size 

   #
   # Add up the elements in a list of {Region}s.
   #
   public static sum_list(l)
      local x, y
      x := y := 0
      every x +:= (!l).used
      every y +:= (!l).size
      return Region(x, y)
   end

   #
   # Return the amount free.
   #
   public get_free()
      return size - used
   end

   package new(used, size)
      self.used := used
      self.size := size
      return
   end
end

#
# An event from a program's event queue.
#
class ProgEvent()
   private readable
      code, value
end
