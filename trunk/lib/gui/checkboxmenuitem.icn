#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

#
# This class encapsulates a check box in a menu.
#
# Several {CheckBoxMenuItems} may be added to a {CheckBoxGroup}
# structure to give "radio buttons" within menus.
#
class CheckBoxMenuItem(Toggle,TextMenuItem)
   public 
      curr_paint,                                            
      unchecked_paint, 
      checked_paint

   #
   # Set the up and down images to x and y respectively.  The
   # default is boxes, unless the component is added to a
   # {CheckBoxGroup} in which case the default is diamonds.
   #
   public set_box_paint(x, y)
      (\self.unchecked_paint).finally()
      (\self.checked_paint).finally()
      self.unchecked_paint := x
      self.checked_paint := y
      synch_left_image()
      return self
   end

   public initially()
      #
      # Set the icons if necessary
      #
      if /self.unchecked_paint then {
         if /self.parent_check_box_group then
            self.set_box_paint(ImagePaint().set_cache("gui.BOX_UP"), ImagePaint().set_cache("gui.BOX_DOWN"))
         else
            self.set_box_paint(ImagePaint().set_cache("gui.DIAMOND_UP"), ImagePaint().set_cache("gui.DIAMOND_DOWN"))
      }
      synch_left_image()
      cast(self,TextMenuItem).initially()
   end

   public draw_label(cw, lw, mw, rw)
      synch_left_image()
      cast(self,TextMenuItem).draw_label(cw, lw, mw, rw)
   end

   #
   # Set the left image to the correct up/down icon.
   #
   public synch_left_image()
      local i
      i := if \self.is_checked_flag then
         self.checked_paint
      else 
         self.unchecked_paint
      if i ~=== curr_paint then
         set_paint_left(curr_paint := i)
   end

   public succeed(e)
      local t
      if \self.parent_check_box_group then {
         t := self.parent_check_box_group.which_one
         self.parent_check_box_group.set_which_one(self)
         if t ~=== self.parent_check_box_group.which_one then
            self.parent_check_box_group.fire(Event.SELECTION_CHANGED, e)
      } else
         self.toggle_is_checked()      
      cast(self,TextMenuItem).succeed(e)
   end
end


