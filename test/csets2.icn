import io

procedure gen_cset(n)
   local i,s
   /n := ?100
   s := ucs("")
   every i := 1 to n do
      s ||:= uchar(?500)
   return cset(s)
end

procedure check_conversions(c)
   local s,c2
   write("Check conversions")
   if *c = 0 | ords(c,-1) < 256 then {
      s := string(c) | stop("Couldn't convert to string")
      cmp_seq{"!s -v- !c", !s, !c}
   } else {
      yes_no{"String conversion of cset with wide chars", string(c)}
      s := ucs(c) | stop("Couldn't convert to ucs")
      cmp_seq{"ord(!s) -v- ord(!c)", ord(!s), ord(!c)}
   }
   c2 := cset(s)
   yes_no{"c===c2", c === c2}
   cmp_seq{"ords(c) -v- ord(!c)", ords(c), ord(!c)}
   yes_no{"s===text(c)", s === text(c)}
   yes_no{"s===c[1:0]", s === c[1:0]}
end

procedure check_build(c)
   local t,i,e,f
   t := ''
   every i := ords(c) do
      t ++:= ranges(i)
   yes_no{"Set built from ords === c", c === t}
   # check ranges don't overlap
   e := create rangesof(c)
   t := &null
   while f := @e do {
      if \t then 
         if f <= t+1 then stop("Overlapping ranges:",t,",",f)
      t := @e
      if f>t then stop("Ranges out of order")
   }
   write("Internal structure well formed")
end

procedure check_range(c,c1,i,j)
   local d,d1
   write("Check range ",i,"-",j)
   d1 := c1[i:j] | fail
   d := c[i:j] | stop("Couldn't extract range")
   cmp_seq{"ord(!d) -v- !d1", ord(!d),!d1}
   cmp_seq{"ord(!d) -v- ords(c,i,j)", ord(!d),ords(c,i,j)}
end

procedure check_ranges(c)
   local c1
   c1 := list_equiv(c)
   check_range(c,c1,1,0)
   if *c = 0 then
      return
   every 1 to 10 do
      check_range(c,c1,?*c,?(*c+1))
end

procedure check_hasord(c)
   cmp_seq{"hasord(c,ords(c)) -vs- 1 to *c", hasord(c,ords(c)), 1 to *c}
   yes_no{"hasord(c,0)", hasord(c,0)}
   yes_no{"hasord(c,ords(c,1,2)-1)", hasord(c,ords(c,1,2)-1)}
   yes_no{"hasord(c,ords(c,-1)+1)", hasord(c,ords(c,-1)+1)}
end

procedure list_equiv(c)
   local l
   l := []
   every put(l, ords(c))
   return l
end

procedure set_equiv(c)
   local s
   s := set()
   every insert(s, ords(c))
   return s
end

procedure check_sets(s, c, v)
   cmp_seq{s, ords(c), !sort(v)}
end

procedure check_setops(c,d)
   local c1,d1
   c1 := set_equiv(c)
   d1 := set_equiv(d)
   check_sets("c**d",c**d,c1**d1)
   check_sets("c++d",c++d,c1++d1)
   check_sets("c--d",c--d,c1--d1)
   check_sets("c**''",c**'',set())
   check_sets("c++''",c++'',c1)
   check_sets("c--''",c--'',c1)
   check_sets("c--&uset",c--&uset,set())
end

procedure main()
   local c,d
   every c := '' | 'a' | '\u1000' | '\U10ffff' | &lcase | &ucase | &letters | &ascii | &cset | (|gen_cset())\50 do {
      write("Subject cset:", image(c))
      check_conversions(c)
      check_build(c)
      check_ranges(c)
      check_hasord(c)
      d := gen_cset()
      write("Other op for check_setops:", image(d))
      check_setops(c,d)
      write("===========")
   }
   write("Done")
end
