#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui


############################################################################
#
# Class for representing a Image on the canvas.
#
class CanvasImage(CanvasComponent,Image)
   #
   # Generate code into Code object c.
   #
   public override gen_code(c)
      CanvasComponent.gen_code(c)
      c.chain("set_image(" || image(\self.image_str) || ")")
      c.chain("set_cache(" || image(\self.image_cache) || ")")
      c.chain("set_fill_dimensions(" || (0 < self.fill_dimensions) || ")")
   end

   #
   # Duplicate object.
   #
   public override dup()
      local c
      c := CanvasImage()
      CanvasComponent.dup_fields(c)
      c.fill_dimensions := self.fill_dimensions
      c.image_str := self.image_str
      c.image_cache := self.image_cache
      return c
   end

   #
   # Return the I/O template.
   #
   public override get_template()
      suspend CanvasComponent.get_template() |
         ["Image Str", "image_str"] |
         ["Image Cache", "image_cache"] |
         ["Fill Dimensions", "fill_dimensions"]
   end

   #
   # Overrides Image.display() 
   #
   public override display()
      if in_preview() | \win | \win_pix then
         Image.display()
      else {
         self.cbwin.draw_rectangle(self.x, self.y, self.w, self.h)
         center_string(self.cbwin, self.x + self.w / 2, self.y + 10, "<Image>")
      }
   end

   #
   # Open the configuration dialog box.
   #
   public override dialog()
      return CanvasImageDialog(self)
   end

   public override allows_null_height()
      return
   end

   public override allows_null_width()
      return
   end

   public override new()
      Image.new()
      CanvasComponent.new()
      self.class_name := "Image"
      self.import_name := "gui"
      self.name := "image"
      return
   end
end

