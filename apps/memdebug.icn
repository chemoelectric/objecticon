import io, lang, util, net, ipl.options, gui, ipl.termdialog, 
   ipl.strings, ipl.lists, ipl.pdco, xdg, ipl.functional

global prog, input, output, stopped, sched, break_proc, break_line, break_file, 
   curr_file, tmp_out, tmp_out_name, cmd_out, exited, opts, hlim, llim,
   history, hfile, slim, addrs, is_flowterm, kbreak, cmds

class MemDebug()
   public static native list(obj)
   public static native refs(obj)
   public static native dump()
   public static native globals()
   public static native nglobals()
   public static native statics(name)
   public static native prog(name)
   public static native progs()
   public static native regions()
   public static native set_program(prog)
   public static native set_output(f)
   public static native set_slim(val)
   public static native set_addrs(val)
   public static native set_flowterm(flag)

   private static init() 
      Class.load_library(Files.find_native_lib("objecticonmemdebug")) | stop("Native library not available") 
   end
end

procedure do_help()
   cmd_out.write("stop              - stop the monitored program")
   cmd_out.write("start             - restart the monitored program")
   cmd_out.write("exit              - exit immediately")
   cmd_out.write("regions           - display memory regions")
   cmd_out.write("list [-a] x       - list instances of type x, or show the structure of")
   cmd_out.write("                    a particular instance x.  For example, list SomeType")
   cmd_out.write("                    lists all instances of SomeType, whilst list SomeType#22")
   cmd_out.write("                    shows the elements of a particular instance.  -a means")
   cmd_out.write("                    include regions outside the current program's regions.")
   cmd_out.write("refs x            - show what points to the given instance, eg refs")
   cmd_out.write("                    list#21 would show what references that list.")
   cmd_out.write("dump              - show all globals, statics and structures of the")
   cmd_out.write("                    current program.")
   cmd_out.write("globals           - show the global variables of the current program.")
   cmd_out.write("nglobals          - show the named globals of the current program..")
   cmd_out.write("prog x            - set the current program, initially set to the")
   cmd_out.write("                    monitored program.  x should be an &main co-expression.")
   cmd_out.write("progs             - list all programs and show the current program.")
   cmd_out.write("statics x         - list the static variables in the given object x,")
   cmd_out.write("                    which should be a class, procedure or method name.")
   cmd_out.write("breakproc [x]     - set or clear breakpoint to stop in procedure x.")
   cmd_out.write("breakpoint [x y]  - set or clear breakpoint at file x, line y.")
   cmd_out.write("kbreak [f]        - set or toggle whether to break on &break.")
   cmd_out.write("hlim i            - set the command history limit.")
   cmd_out.write("hist [s]          - display the history, optionally filtered by s.")
   cmd_out.write("llim i            - set the history log limit in the gui.")
   cmd_out.write("slim i            - set the displayed string limit; 0 means no limit.")
   cmd_out.write("addrs i           - set the display of addresses in the regions")
   cmd_out.write("                       i=0 (no addresses),")
   cmd_out.write("                       i=1 (addresses for items with no serial number),")
   cmd_out.write("                       i=2 (show all addresses)")
   cmd_out.write("settings          - show the values of the various settings.")
   cmd_out.write("cls               - clear the screen.")
   cmd_out.write("echo a...         - echo arguments.")
   cmd_out.write("help              - show help.")
end

procedure do_stop()
   if /stopped then {
      stopped := &yes
      sched.set_poll_timeout(Gui.IDLE_SLEEP)
      output.write("Stopped")
   }
end

procedure do_start()
   if \exited then
      output.write("Can't restart exited program")
   else if \stopped then {
      stopped := &no
      sched.set_poll_timeout(0)
      output.write("Started")
   }
end

procedure do_regions()
   MemDebug.regions()
end

procedure err_msg(s)
   output.write(s)
end

procedure help_err(msg)
   output.write(msg)
   output.write("Use the -? option for more information")
end

procedure bad_params()
   return help_err("Invalid parameters")
end

procedure opt_help(msg, opts)
   local o, t
   output.write(msg)
   every o := !opts do {
      t := o.format()
      output.write(left(t.names, 20), t.help)
   }
end

procedure get_options(a, l, usage)
   /l := []
   return options(a, l, lpartial(opt_help, usage), help_err)
end

procedure do_list(a)
   local o
   o := get_options(a, [Opt("a",, "All regions")], "Usage: list [-a] object") | fail
   (*a = 1) | return bad_params()
   MemDebug.list(a[1], o["a"]) | return err_msg(&why)
end

procedure do_refs(a)
   get_options(a,, "Usage: refs object") | fail
   (*a = 1) | return bad_params()
   MemDebug.refs(a[1]) | return err_msg(&why)
end

procedure do_dump()
   MemDebug.dump() | return err_msg(&why)
end

procedure do_statics(a)
   get_options(a,, "Usage: statics name") | fail
   (*a = 1) | return bad_params()
   MemDebug.statics(a[1]) | return err_msg(&why)
end

procedure do_globals()
   MemDebug.globals() | return err_msg(&why)
end

procedure do_nglobals()
   MemDebug.nglobals() | return err_msg(&why)
end

procedure do_prog(a)
   get_options(a,, "Usage: prog name") | fail
   (*a = 1) | return bad_params()
   MemDebug.prog(a[1]) | return err_msg(&why)
end

procedure do_progs()
   MemDebug.progs()
end

procedure do_cls()
   if is(output, DescStream) then
      output.writes1("\e[2J\e[H")
   else
      output.clear_text()
end

procedure do_slim(a)
   get_options(a,, "Usage: slim length") | fail
   if *a = 1 & slim := 0 <= integer(a[1]) then {
      MemDebug.set_slim(slim)
      cmd_out.write("slim is now ", slim)
   } else
      return bad_params()
end

procedure do_hlim(a)
   get_options(a,, "Usage: hlim length (> 10)") | fail
   if *a = 1 & hlim := 10 < integer(a[1]) then {
      input.set_history_limit(hlim)
      cmd_out.write("hlim is now ", hlim)
   } else
      return bad_params()
end

procedure do_llim(a)
   get_options(a,, "Usage: llim length (> 10)") | fail
   if *a = 1 & llim := 10 < integer(a[1]) then {
      if is(input, TermDialog) then
         input.set_log_limit(llim)
      cmd_out.write("llim is now ", llim)
   } else
      return bad_params()
end

procedure do_hist(a)
   local i, e, s
   get_options(a,, "Usage: hist [s]") | fail
   (*a < 2) | return bad_params()
   s := a[1] | u""
   i := input.get_history_start_no()
   every e := !input.get_history() do {
      if find(s, map(e)) then
         cmd_out.write(right(i, 4), "  ", e)
      i +:= 1
   }
end

procedure do_addrs(a)
   local i
   get_options(a,, "Usage: addrs n with n=0, 1 or 2") | fail
   if *a = 1 & i := integer(a[1]) & 0 <= i <= 2 then {
      MemDebug.set_addrs(addrs := i)
      cmd_out.write("addrs is now ", addrs)
   } else
      return bad_params()
end

procedure do_breakproc(a)
   get_options(a,, "Usage: breakproc [procedure/method name]") | fail
   if *a = 0 then
      break_proc := &null
   else if *a = 1 then
      break_proc := a[1]
   else
      return bad_params()
   synch_mask()
   cmd_out.write(if /break_proc then "break proc cleared" else "break proc now " || break_proc)
end

procedure do_breakpoint(a)
   local i
   get_options(a,, "Usage: breakpoint [file line]") | fail
   if *a = 0 then
      break_line := break_file := &null
   else if *a = 2 & i := integer(a[2]) then {
      break_line := i
      break_file := a[1]
   } else
      return bad_params()
   synch_mask()
   cmd_out.write(if /break_file then "break point cleared" else "break now " || break_file || " at " || break_line)
end

procedure do_kbreak(a)
   local v
   get_options(a,, "Usage: kbreak [flag]") | fail
   if *a = 0 then
      kbreak := toggle_flag(kbreak)
   else if *a = 1 & v := flag(a[1]) then
      kbreak := v
   else
      return bad_params()
   synch_mask()
   cmd_out.write(if /kbreak then "&break doesn't cause a break" else "&break causes a break")
end

procedure do_exit()
   write("Exiting.")
   cleanup()
   exit(0)
end

procedure do_echo(a)
   cmd_out.write(list2str(a, " "))
end

procedure do_settings()
   cmd_out.write("slim is ", slim)
   cmd_out.write("hlim is ", hlim)
   cmd_out.write("llim is ", llim)
   cmd_out.write("addrs is ", addrs)
   cmd_out.write(if /break_proc then "break proc not set" else "break proc " || break_proc)
   cmd_out.write(if /break_file then "break point not set" else "break point " || break_file || " at " || break_line)
   cmd_out.write(if /kbreak then "&break doesn't cause a break" else "&break causes a break")
end

procedure do_line(s)
   local a, redir, mode, pipe, p, cmd, proc

   s ? {
      if s := tab(upto('|')) then {
         if is(output, TermDialog) then {
            output.write("Pipe output not allowed in graphic mode")
            fail
         }
         pipe := (move(1), tab(0))
      }
   }

   a := ipl.pdco.List{words(s)}
   if *a = 0 | a[1,1] == "#" then
      fail

   if a[-1][1] == ">" then {
      if \pipe then {
         output.write("Invalid redirection")
         fail
      }
      redir := pull(a)
      redir[1] := ""
      if redir[1] == ">" then {
         redir[1] := ""
         mode := ior(FileOpt.WRONLY, FileOpt.APPEND, FileOpt.CREAT)
      } else
         mode := ior(FileOpt.WRONLY, FileOpt.TRUNC, FileOpt.CREAT)
      cmd_out := FileStream(redir, mode) | {
         output.write("Couldn't open ", redir, ": ", &why)
         fail
      }
   } else if /pipe & is(output, DescStream) then
      cmd_out := output
   else {
      tmp_out.truncate(0).seek(1)
      cmd_out := tmp_out
   }

   MemDebug.
      set_flowterm(if \ (pipe | redir) then &no else is_flowterm).
      set_output(cmd_out)

   if cmd := pop(a) then {
      if proc := member(cmds, cmd) then
         proc(a)
      else
         output.write("Unknown command: ", cmd)
   }

   if \redir then
      cmd_out.close()
   else if cmd_out === tmp_out then {
      tmp_out.seek(1)
      if \pipe then {
         use { p := ProgOutputStream("/bin/sh", ["-c", pipe]),
            # This will ignore any SIGPIPE signals (and just fail).
            tmp_out.copy_to(p)
         }
      } else
         tmp_out.copy_to(output)
   }

   cmd_out := &null
end

procedure monitor_exit()
   if /exited then {
      do_start()
      Prog.set_event_mask('', prog)
   }
end

procedure gui_line()
   local s
   s := string(input.line)
   output.write("? ", s)
   do_line(s)
end

procedure do_gui()
   local d
   d := TermDialog().
      set_complete_function(complete).
      set_label("memdebug").
      set_log_limit(llim).
      set_history_limit(hlim).
      connect(gui_line, Event.ACTION).
      connect(monitor_exit, Event.DIALOG_DISPOSED)

   if \opts["a"] then
      d.set_popup_on_tab(&no)

   input := output := d
   sched := Dispatcher.scheduler
   sched.set_poll_timeout(0)
   d.show()
   prelim()
   repeat {
      if /stopped then {
         next_event() | break
         Dispatcher.service()
      } else
         Dispatcher.work_or_sleep()
   }
   Dispatcher.message_loop()
end

procedure complete(subj, pos)
   local l, e, s
   l := []
   s := subj[1:pos]
   every e := key(cmds) do {
      e ? if =s then
         put(l, CompleteElement(e, e || " " || subj[pos:0], *e + 2))
   }
   return l
end

procedure terminal_task(task)
   local s
   repeat {
      s := input.read_line() | stop("Failed to read input: ", &why)
      if /s then
         break
      do_line(s)
   }
   write("Reverting")
   input.close()
   monitor_exit()
   task.revert()
end

procedure do_line_editor()
   local task, f
   sched := Scheduler()
   task := Task(sched, create terminal_task(task))
   if \opts["s"] then
      f := TaskStream(FileStream.stdin, task).set_close_underlying(&no)
   input := LineEditorStream(opts["s"], f).
      set_complete_function(complete).
      set_history_limit(hlim).
      set_prompt("? ").
      set_task(task)
   output := FileStream.stdout
   task.start()
   prelim()
   repeat {
      if /stopped then {
         next_event() | break
         while sched.work()
      } else
         sched.work_or_sleep()
   }
   until sched.empty() do
      sched.work_or_sleep()
end

procedure do_file(fn)
   local f
   use {
      f := open(fn) | err_msg("Couldn't open " || fn || ": " || &why),
      every do_line(f.gen())
   }
end

procedure prelim()
   local fn
   if \opts["m"] then
      do_stop()

   fn := FilePath(BaseDir.ensure_config_home()).child("memdebug").str() | stop("Couldn't access config dir: ", &why)
   if Files.access(fn) then
      do_file(fn)

   every fn := !\opts["f"] do
      do_file(fn)

   # History is set here (rather than when input is created), so that
   # history is not truncated to the default length (hlim may be set
   # in the initialization files).
   input.set_history(history)
end

procedure next_event()
   local e
   e := Prog.get_event(prog) | {
      output.write("Monitored program exited.")
      do_stop()
      exited := &yes
      fail
   }
   case e.code of {
      MonitorCode.File : {
         curr_file := e.value
      }
      MonitorCode.Break : {
         output.write("&break evaluated")
         do_stop()
      }
      MonitorCode.Line : {
         if e.value = \break_line & curr_file == \break_file then {
            output.write("Breakpoint hit")
            do_stop()
         }
      }
      MonitorCode.Pcall : {
         if Proc.get_name(e.value) == \break_proc then {
            output.write("Procedure break hit")
            do_stop()
         }
      }
   }

   return
end

procedure synch_mask()
   local c
   c := MonitorCode.Timer ++ MonitorCode.Error ++ MonitorCode.Exit
   if \kbreak then
      c ++:= MonitorCode.Break
   if \break_line then
      c ++:= MonitorCode.File ++ MonitorCode.Line
   if \break_proc then
      c ++:= MonitorCode.Pcall
   Prog.set_event_mask(c, prog)
end

procedure cleanup()
   tmp_out.close()
   Files.remove(tmp_out_name)
   encode_to_file(hfile, input.get_history()) | ewrite("History not saved: ", &why)
end

procedure usage(opts)
   local u
   write("Usage: memdebug [OPTIONS] program [program options/arguments]")
   write("Examine program memory")
   options_help(opts)
   u := URL("http://objecticon.sourceforge.net/Memdebug.html")
   write()
   writes("For more details, visit ")
   if FileStream.stdout.is_flowterm_tty() then
      write(Files.begin_link(u), u.str(), Files.end_link())
   else
      write(u.str())
   exit(0)
end

# Used with options to ignore options after first non-flag argument
procedure non_flag(x)
   succeed any(~'\-@', x)
end

procedure main(args)
   Class.ensure_initialized(MemDebug)

   cmds := table(,
                 "stop",  do_stop,
                 "start",  do_start,
                 "exit", do_exit,
                 "regions",  do_regions,
                 "list",  do_list,
                 "refs",  do_refs,
                 "dump",  do_dump,
                 "globals",  do_globals,
                 "nglobals",  do_nglobals,
                 "prog",  do_prog,
                 "progs",  do_progs,
                 "statics",  do_statics,
                 "breakproc" ,  do_breakproc,
                 "breakpoint" ,  do_breakpoint,
                 "settings", do_settings,
                 "hlim" ,  do_hlim,
                 "llim" ,  do_llim,
                 "hist" ,  do_hist,
                 "slim" ,  do_slim,
                 "addrs" ,  do_addrs,
                 "cls" ,  do_cls,
                 "echo" ,  do_echo,
                 "help", do_help,
                 "kbreak", do_kbreak
      )

   opts := options(args, [Opt("m",, "Loaded program is initially stopped"),
                          Opt("g",, "Use a gui interface rather than the console"),
                          Opt("a",, "In gui mode, actively show completions, rather than on the tab key"),
                          Opt("s",, "Don't use console line editing (implicit on non-Unix platforms)"),
                          Opt("f",string,"FILE#Perform commands from file at startup", &yes),
                          Opt("hlim",integer_range(10),"LIM#Set the history limit for the line editor (default is 500, minimum is 10)"),
                          Opt("llim",integer_range(0),"LIM#Set the gui interface's log area line limit (default is 600)"),
                          Opt("slim",integer_range(0),"LIM#Set the string display limit (default is 64)"), 
                          Opt("addrs",integer_range(0,2),"MODE#Set the address display mode (default is 1)"),
                          Opt("nk",,"Set kbreak off initially (default is on)")],
                          usage,, ignore_after(non_flag))
   if *args = 0 then
      help_stop("Program and optional arguments expected.")

   hlim := \opts["hlim"] | 500
   llim := \opts["llim"] | 600
   slim := \opts["slim"] | 64
   addrs := \opts["addrs"] | 1
   kbreak := Yes{ /opts["nk"] }

   prog := Prog.load(Files.find_exe(args[1]), args[2:0]) | stop(&why)
   MemDebug.set_program(prog).
      set_slim(slim).
      set_addrs(addrs)
   is_flowterm := Yes{ \opts["g"] | FileStream.stdout.is_flowterm_tty() }
   Prog.set_timer_interval(100, prog)

   synch_mask()

   tmp_out_name := Files.make_temp_filename("monitor", ".txt") | stop(&why)
   tmp_out := FileStream(tmp_out_name, ior(FileOpt.RDWR, FileOpt.TRUNC, FileOpt.CREAT)) | stop(&why)

   hfile := FilePath(BaseDir.ensure_data_home()).child("memdebug").str() | stop("Couldn't access data dir: ", &why)
   history := decode_from_file(hfile) | []
   if \opts["g"] then
      do_gui()
   else
      do_line_editor()

   cleanup()

   write("Ciao")
end
