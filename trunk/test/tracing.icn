#SRC: JCON
#OPT: -fd



#  test tracing of procedure calls

procedure main()
   &trace := -1
   every recurse(0 to 3)
   every divall("" | "314" | "x" | "12x")
   varargs()
   every p()
end



#  test tracing of recursion

procedure recurse(n)
   if n > 0 then
      return recurse(n - 1) + 1
   failer()
   every genr(5, 12, 4)
   return func(3, 4)
end

procedure failer()
   fail
end

procedure func(a, b)
   return 3 * abs(a) + b
end

procedure genr(i, j, k)
   suspend i to j by k
end



#  test tracing in combination with errors
procedure divall(s)
   local e
   e := create every divide(9, !s)
   &handler := &current
   @e
   &handler := &null
end

procedure divide(a, b)
   return a / b
end



#  test vararg tracing

procedure varargs()
   local args
   every vproc()
   every vproc(1)
   every vproc(1,2)
   every vproc(1,2,3)
   every vproc(1,2,3,4)
   args := [1,2,3,4,5]
   while pull(args) do
      every vproc ! args
   return
end

procedure vproc(a, b[])
   if *b = 0 then return a
   else suspend !b
end

class SomeClass()
   public static a_static
   public x,y,z
end

record SomeRec(one,two,three)

global s1, s2

procedure p()
   local t, u, v, l
   l := list(100)
   l[10] := 199
   t := table(, 1, "one")
   u := SomeClass()
   u.x := 99
   u.y := 100
   u.z := 101
   SomeClass.a_static := 102
   v := SomeRec(1,2,3)
   s1 := "the quick brown fox jumps"
   s2 := u"over the lazy dog"
   &progname := "something"
   suspend &random|&trace|&dump|
      &progname|&why|&pos|&subject|t[1]|t[100]|SomeClass.a_static|u.x|u.y|u.z|
      v.one|v.two|v.three|l[2]|l[10]|s1[2:5]|s2[2:6]
end
