package ipl.io

import
   io(Files, FileOpt, FileStream, DirStream, ProgInputStream,
      FilterInputStream, FilePath, stop), 
   util(use),
   exception(throw)

#
# Return an open file to /dev/null.  The returned file is shared
# and so should not be closed.
#
procedure get_null()
   static nul
   initial
      nul := FileStream(Files.NULL_FILE, FileOpt.RDWR) | stop("Can't open " || Files.NULL_FILE || ": ", &why)
   return nul
end

#
# Return an open file to /dev/zero.  The returned file is shared
# and so should not be closed.
#
procedure get_zero()
   static zero
   initial
      zero := FileStream("/dev/zero", FileOpt.RDWR) | stop("Can't open /dev/zero: ", &why)
   return zero
end

#
# Set the three stdio files to the null file.
#
procedure null_stdio()
   local nul
   nul := FileStream(Files.NULL_FILE, FileOpt.RDONLY) | fail
   if nul.get_fd() > 0 then {
      nul.dup2(FileStream.stdin) | fail
      nul.close()
   }
   nul := FileStream(Files.NULL_FILE, FileOpt.WRONLY) | fail
   nul.dup2(FileStream.stdout) | fail
   nul.dup2(FileStream.stderr) | fail
   if nul.get_fd() > 2 then
      nul.close()
   return
end

package record Msg(file, revert)

package procedure dir_recurse2(s, f, revert, on_err)
   local p, f2, l
   coact(Msg(f, &current), revert)
   p := FilePath(f)
   repeat {
      l := s.read_line() | fail
      if /l then
         return
      if Files.is_relative_dir(l) then
         next
      f2 := p.child(l).str() 
      if Files.is_directory(f2) then
         dir_recurse1(f2, revert, on_err)
      else
         coact(Msg(f2, &current), revert)
   }
end

#
# Procedure to use with `dir_recurse`; it just throws an exception
# with the value set to an informative error message.
#
procedure dir_recurse_throw(f)
   throw("Failed to read dir " || f || ": " || &why)
end

package procedure dir_recurse1(f, revert, on_err)
   local s
   use {
      s := DirStream(f),
      dir_recurse2(s, f, revert, on_err)
   } | on_err(f)
end

#
# Recursively traverse directory `f`, generating all the filenames
# (including directories).  If this generator isn't used to
# exhaustion, the call must be wrapped in the `util.clean()` function,
# in order to close all outstanding files.  `on_err` is an optional
# procedure to invoke on an error reading a directory.  If it throws
# an exception, then the call to `dir_recurse` should also be enclosed
# with one of the try procedures.
#
# Example :-
# ~
#     clean{try1{{
#        every f := dir_recurse(d, dir_recurse_throw) \ 50 do
#           write("got ", f)
#     }}} | write("Problem: ", &why)
# ~
# :See also :
# :  `dir_recurse_throw()`
procedure dir_recurse(f, on_err)
   local v, here, e
   here := &current
   /on_err := 1
   e := create dir_recurse1(f, here, on_err)
   v := @e | fail
   repeat {
      suspend v.file
      v := coact(, v.revert) | fail
   }
end

#
# A simple helper to run a program `prog` with the given optional
# parameter list and environment, and capture and return its output as
# a string.  If the program exits with an error status code, then the
# procedure fails and sets `&why` appropriately.
#
# Notes :-
# * This procedure only works on UNIX platforms.
# * stdin and stderr are both set to `/dev/null`.
# * The shell isn't invoked (unlike `io.open(..., "pr")`); so
#   no shell syntax may be used.
# * The PATH is used to search for `prog`.
#
# Example :-
# ~
#    s := run_prog("ls", ["-l", "/"])
# ~
#
procedure run_prog(prog, params, env)
   local f, s
   if s := use {                         
      f := ProgInputStream(prog, params, env, get_null(), get_null()),
      f.read_all()
   } & f.succeeded() then
      return s
end                                                      

#
# This procedure is very similar to `run_prog()` above, but provides
# better error reporting, by capturing standard error output.  This
# comes at a slight setup and performance cost, however.  For example :-
#
# ~
#    s := run_prog2("ls", ["-l", "/junk"])
# ~
#
# would fail and set `&why` to something like :-
#
# ~
#   ls failed: Exited with status 2: ls: cannot access '/junk': No such file or directory
# ~
#
# whereas `run_prog()` would just report the status code.
#
procedure run_prog2(prog, params, env)
   local f, s
   if s := use {                         
      f := FilterInputStream(, prog, params, env),
      f.read_all()
   } & f.succeeded() then
      return s
end                                                      
