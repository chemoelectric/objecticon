#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import util

#
# A node in a {TreeTable}.  It provides the column data
# for the extra (non-tree) columns.  For example if
# the TreeTable's columns were named A, B, C, then a
# {TreeTableNode} might be created as follows :-
#
# @example
# @ n := TreeTableNode().
# @         set_label("Col A label").
# @         set_contents(["Col B data", "Col C data"])
#
class TreeTableNode(TreeNode)
   public contents

   #
   # Set the column data to fill the columns 2 onwards.
   #
   public set_contents(l)
      self.contents := l
      return self
   end
end

#
# This abstract class provides the table content for a {TreeTable}.
# It extends {BaseTree}, and uses that class's methods for event
# handling and drawing of the first column.
#
abstract class BaseTreeTableContent(BaseTree)
   public slice(col)
      suspend (\(!contents).contents)[col - 1]
   end

   public get_cell(row, col)
      return (\contents[row].contents)[col - 1]
   end

   public get_column(n)
      return parent.table_header.children[n]
   end

   public on_hsb()
      BaseTree.on_hsb()
      synch_header()
   end

   public handle_key_right(e)
      BaseTree.handle_key_right(e)
      synch_header()
   end

   public handle_key_left(e)
      BaseTree.handle_key_left(e)
      synch_header()
   end

   public synch_header()
      parent.table_header.synch_with_content()
   end

   public draw()
      local xp, yp, i, j, info, h, lh, r, cols, col, cc, W

      r := view.get_cbwin_clip()

      info := get_line_info(r) | fail
      h := get_line_height()

      cols := parent.table_header.children

      # First (tree) column
      #
      col := cols[1]
      # If the column is visible
      if cc := view.cbwin.drawable(col.x, r.y, col.w, r.h) then {
         # Clip on the column.  We must clip directly on view.cbwin
         # since we borrow Tree's draw_line()
         view.cbwin.clip!cc
         yp := r.y - info.offset
         xp := col.x
         # Write each line in this column
         every i := info.first to info.last do {
            lh := integer(h) | h[i]
            BaseTree.draw_line(xp, yp, lh, i)
            yp +:= lh
         }
         # Reset the clip.
         view.cbwin.clip(r.x, r.y, r.w, r.h)
      }

      # Other columns
      #
      use {
         W := view.cbwin.clone(), 
         {
            every j := 2 to *cols do {
               col := cols[j]
               # If the column is visible
               if cc := view.cbwin.drawable(col.x, r.y, col.w, r.h) then {
                  # Clip on the column.
                  W.clip!cc
                  yp := r.y - info.offset
                  # Write each line in this column
                  every i := info.first to info.last do {
                     lh := integer(h) | h[i]
                     col.draw_cell(W, 
                                   (\self.contents[i].contents)[j - 1], i, j, yp, lh)
                     yp +:= lh
                  }
               }
            }
         }
      }
      # Call the superclass draw to do the selection, highlight etc.
      SelectableScrollArea.draw()
   end

   # Override draw_line so that call to SelectableScrollArea.draw() above draws
   # the selections etc (rather than displaying the tree column again).
   public draw_line(xp, yp, lh, i, sel, cur, hi, ov)
      draw_line_sel_cur(self.view.x, yp, self.view.w, lh, sel, cur, hi, ov)
   end

   public calculate_line_height()
      local t, m, h, r, e, i, j, cols
      t := []
      m := 0
      cols := parent.table_header.children
      every j := 1 to *cols do {
         h := if j = 1 then
            calculate_tree_line_height()
         else
            cols[j].calculate_line_height(self.cbwin)
         if integer(h) then
            m <:= h
         else
            put(t, h)
      }
      #
      # Easy case, all columns report fixed row heights, so the row height for the
      # table is the maximum.
      if *t = 0 then
         return m

      r := list(*t[1], m)
      every e := !t do {
         *e = *r | syserr("Inconsistent table column row height list sizes returned")
         every i := 1 to *r do
            r[i] <:= e[i]
      }

      return r
   end

   public calculate_subject_width()
      return parent.get_total_column_width()
   end

   protected abstract calculate_tree_line_height()
end

# The basic content implementation, which displays simple textual node
# data in the tree column.
#
class TreeTableContent(BaseTreeTableContent,Tree)
   protected calculate_tree_line_height()
      return Tree.calculate_line_height()
   end
end

#
# A {TreeTable} is a {Table} where the first column is
# a Tree.  The data for the component is provided as
# a tree of {TreeTableNode}s.
#
# See the example program ttexplorer.icn for one in use.
#
class TreeTable(Table)
   public create_table_content()
      return TreeTableContent()
   end
end

#
# A content implementation which delegates interpretation of the tree
# node data to an `ItemPaint` instance.
#
class ItemPaintTreeTableContent(BaseTreeTableContent,ItemPaintTree)
   protected calculate_tree_line_height()
      return ItemPaintTree.calculate_line_height()
   end

   public draw_node_data(n, xp, yp, lh)
      local r, s, col
      col := parent.table_header.children[1]
      s := item_paint.get_size(view.cbwin, n.label)
      # r is the rectangle available to draw in, limited by the column width.
      r := Rect(xp, yp, col.x + col.w - xp, lh)
      item_paint.draw_rect(view.cbwin, n.label, item_border.float(r, s))
      item_border.draw_rect(view.cbwin, r)
   end
end

#
# A {TreeTable} which uses an {ItemPaint} to paint its tree column.
#
class ItemPaintTreeTable(Table)
   public create_table_content()
      return ItemPaintTreeTableContent()
   end
end
