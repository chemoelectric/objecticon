#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui

############################################################################
#
#
#
class CanvasTabSetDialog(CanvasComponentDialog)
   public 
   add_col,  
   delete,   
   edit,     
   struct,   
   up,
   down,
   which_one,
   tabs_at_bottom_cb,
   no_click_focus_cb,
   prefer_one_row_cb

   public update_grey()
      local i
      i := struct.get_selections()[1]
      if \i <= *c.children then {
         if *c.children > 1 then
            delete.set_is_shaded("f")
         edit.set_is_shaded("f")
         which_one.set_is_shaded("f")
         if i > 1 then
            up.set_is_shaded("f")
         else
            up.set_is_shaded("t")
         if i < *c.children then
            down.set_is_shaded("f")
         else
            down.set_is_shaded("t")
      } else {
         edit.set_is_shaded("t")
         delete.set_is_shaded("t")
         which_one.set_is_shaded("t")
         up.set_is_shaded("t")
         down.set_is_shaded("t")
      }

      # Enable the default width/height if applicable; our children may change this
      # during editing.
      if c.allows_null_width() then
         set_w_default.set_is_shaded("f")
      if c.allows_null_height() then 
         set_h_default.set_is_shaded("f")
   end

   public on_add_col()
      local new, l, nl
      new := CanvasTabItem()
      new.set_paint(CanvasTextPaint("Edit me"))
      new.change_canvas(c.parent_Canvas)
      new.rename()
      l := struct.get_selections()
      nl := l[1] | (*c.children + 1)
      c.add(new, nl)
      new.initially()
      struct.set_contents(c.string_rep())      
      struct.ensure_line_visible(nl)
      struct.set_selections([nl])
      struct.set_cursor(nl)
      update_grey()
   end

   public on_edit()
      local obj, i, d, cp
      i := struct.get_selections()[1]
      # The child dialog needs to know if we have a width/height set or not - if not then it
      # mandates a layout manager in the child.
      c.w_spec := if w_spec_list.is_shaded() then &null else w_spec_list.get_contents()
      c.h_spec := if h_spec_list.is_shaded() then &null else h_spec_list.get_contents()
      obj := c.children[i]
      cp := obj.dup()
      d := obj.dialog()
      d.show_modal(self)
      if \d.get_okay_result() then {
         struct.set_contents(c.string_rep())
         update_grey()
      } else {
         obj.finally()
         c.remove_index(i)
         cp.change_canvas(c.parent_Canvas)
         c.add(cp, i)
         cp.initially()
         if c.which_one === obj then
            c.which_one := cp
      }
   end

   public on_delete()
      local i
      i := struct.get_selections()[1]
      if c.which_one === c.children[i] then
         c.which_one := c.children[i + 1 | i - 1]
      c.children[i].finally()
      c.remove_index(i)
      struct.set_contents(c.string_rep())
      struct.clear_selections()
      update_grey()
   end

   public on_up()
      local i, t
      i := struct.get_selections()[1]
      i > 1 | fail
      t := c.children[i]
      c.remove_index(i)
      c.add(t, i - 1)
      struct.set_contents(c.string_rep())
      struct.set_selections([i - 1])
      struct.set_cursor(i - 1)
      update_grey()
   end

   public on_down()
      local i, t
      i := struct.get_selections()[1]
      i < *c.children | fail
      t := c.children[i]
      c.remove_index(i)
      c.add(t, i + 1)
      struct.set_contents(c.string_rep())
      struct.set_selections([i + 1])
      struct.set_cursor(i + 1)
      update_grey()
   end

   public on_which_one()
      c.which_one := c.children[struct.get_selections()[1]]
      struct.set_contents(c.string_rep())
   end

   public validate_input()
      # Check any null dimension is allowable - it won't be if we've added
      # a new tab.
      #
      if w_spec_list.is_shaded() & not c.allows_null_width() then
         return alert_error(self, ["Can't have a null height (some tabs",
                                   "don't have a layout manager)."])
      
      if h_spec_list.is_shaded() & not c.allows_null_height() then
         return alert_error(self, ["Can't have a null width (some tabs",
                                   "don't have a layout manager)."])

      return cast(self,CanvasComponentDialog).validate_input()
   end

   public set_vals()
      cast(self,CanvasComponentDialog).set_vals()
      # Forces use of a new line_break when the TabSet's layout() is called.  This is
      # necessary to stop it keeping the old line_break if we have only moved a tab.
      c.line_break := &null
      c.tabs_at_bottom_flag := tabs_at_bottom_cb.get_status()
      c.no_click_focus_flag := no_click_focus_cb.get_status()
      c.prefer_one_row_flag := prefer_one_row_cb.get_status()
   end

   public setup()
      local p, q

      cast(self,CanvasComponentDialog).setup()

      p := TabItem()
      p.set_layout(GridLayout())
      add_tab_at_front(p)
      p.set_label("General")

      struct := TextList()
      struct.connect(self.update_grey, Event.SELECTION_CHANGED)
      struct.set_size(175, 100)
      struct.set_select_mode(Select.ONE)
      struct.set_contents(c.string_rep())
      p.add(struct)

      q := Panel("c:x_weight=0", "c:eol")
      q.set_layout(GridLayout("doi=0"))

      add_col := TextButton("eol")
      add_col.set_label("Add")
      add_col.connect(self.on_add_col, Event.ACTION)
      q.add(add_col)

      delete := TextButton("eol")
      delete.connect(self.on_delete, Event.ACTION)
      delete.set_label("Delete")
      q.add(delete)

      edit := TextButton("eol")
      edit.connect(self.on_edit, Event.ACTION)
      edit.set_label("Edit")
      q.add(edit)

      which_one := TextButton("label=Which", "c:eol")
      which_one.connect(self.on_which_one, Event.ACTION)
      q.add(which_one)

      up := TextButton("label=Up", "c:eol")
      up.connect(self.on_up, Event.ACTION)
      q.add(up)

      down := TextButton("label=Down")
      down.connect(self.on_down, Event.ACTION)
      q.add(down)

      p.add(q)

      p := TabItem("label=Misc", "layout=",GridLayout())
      self.add_tab(p, 2)

      tabs_at_bottom_cb := CheckBox("label=Tabs at bottom", "c:eol")
      p.add(tabs_at_bottom_cb)
      if \c.tabs_at_bottom_flag then
         tabs_at_bottom_cb.set_is_checked("t")

      prefer_one_row_cb := CheckBox("label=Prefer one row of tabs", "c:eol")
      p.add(prefer_one_row_cb)
      if \c.prefer_one_row_flag then
         prefer_one_row_cb.set_is_checked("t")

      no_click_focus_cb := CheckBox("label=No click focus")
      p.add(no_click_focus_cb)
      if \c.no_click_focus_flag then
         no_click_focus_cb.set_is_checked("t")

      update_grey()
   end
end




