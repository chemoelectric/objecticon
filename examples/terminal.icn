import 
   gui,
   io,
   posix,
   graphics,
   net,
   lang,
   util,
   xdg,
   ipl.options,
   ipl.sort,
   ipl.pdco,
   ipl.wildcard,
   ipl.lists,
   ipl.functional,
   ipl.filegui,
   ipl.childwait,
   ipl.vt

global opts

$load EXIT "rpp.EXIT_24.gif"
$load SAVE "rpp.SAVE_24.gif"
$load MIXFILE "rpp.MIXFILE_24.png"
$load TERMINAL_LOGO "rpp.TERMINAL_LOGO.png"

class Runner()
   public const
      # The command to run.  Optional: either this is null, and the other
      # fields are set, or this is set and the other two are ignored.
      # At present if it is set, it is just used for a "cd" command.
      cmd, 
      # The DesktopEntry giving the command and other parameters.
      desktop_entry,
      # The string to substitute to create a command to run
      subst,
      # The link itself (a Link object).
      link

   public new(cmd, desktop_entry, link, subst)
      self.cmd := cmd
      self.desktop_entry := desktop_entry
      self.link := link
      self.subst := subst
      return
   end
end

class TerminalDialog(Dialog)
   private readable
      favourite_dirs,
      tabs

   private on_quit(ev)
      dispose()
   end

   public new_tab(url, referer_url, sel)
      local bt
      bt := Terminal().
         set_is_hidden(&yes)
      tabs.
         add(bt, 0).
         do_layout().
         invalidate()
      if \sel then {
         tabs.set_which_one(bt)
         #update_grey()
      }
      return bt
   end

   private on_new_tab(ev)
      new_tab(1)
   end

   public on_favourite_dirs(ev)
      local d
      d := FavouriteDirectoriesDialog()
      d.show_modal(self)
      \d.okay | fail
      every (!tabs.children).refresh_favourite_dirs()
   end

   public launch_prog(runner)
      local pid, nul, cmd
      pid := System.fork() | fail
      if pid > 0 then {
         # Parent
         ChildWait.add_pid(pid, on_child_exit)
         return
      }
      # Set the working directory for the child process
      Files.chdir(\runner.desktop_entry.path | Files.get_home())
      # Get the command to run.
      cmd := runner.desktop_entry.subst_file(Format.shell_escape(runner.subst), runner.link.line)
      System.setpgid()
      if nul := FileStream("/dev/null", FileOpt.RDWR) then {
         every nul.dup2(FileStream.stdin | FileStream.stdout | FileStream.stderr)
         nul.close()
      }
      System.exec("/bin/bash", ["-c", "exec " || cmd]) | stop(&why)
      syserr("Not reached")
   end

   private on_child_exit(r)
      if \opts["v"] then
         write("Child process exited: ",to_string(r))
   end

   public new()
      local quit_menu_item, menu_bar, file_menu, bt, new_tab_item, favourite_dirs_item
      Dialog.new()
      set_size(scale(1200), scale(850))
      self.set_resize(&yes)
      new_tab_item := TextMenuItem().
         connect(on_new_tab, Event.ACTION).
         set_paint_mid(TextPaint("New Tab"))
      favourite_dirs_item := TextMenuItem().
         connect(on_favourite_dirs, Event.ACTION).
         set_paint_mid(TextPaint("Favourite dirs..."))
      quit_menu_item := TextMenuItem().
         connect(on_quit, Event.ACTION).
         set_paint_mid(TextPaint("Quit"))
      file_menu := Menu().
         set_accel("f").
         set_label("File").
         add(new_tab_item).
         add(favourite_dirs_item).
         add(quit_menu_item)
      menu_bar := MenuBar().
         set_size(scale(100)).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("l_inset", 0).
         set_constraint("r_inset", 0).
         set_constraint("t_inset", 0).
         set_constraint("b_inset", 0).
         set_constraint("x_fill", &yes).
         add(file_menu)
      self.add(menu_bar)
      bt := Terminal()
      tabs := TabSet().
         clear_constraints().
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_constraint("l_inset", 0).
         set_constraint("r_inset", 0).
         set_constraint("t_inset", 0).
         set_constraint("b_inset", 0).
         add(bt).
         set_which_one(bt).
         set_remember_focus(&yes).
         set_no_click_focus(&yes)
      self.add(tabs)
      self.connect(self.on_quit, Event.WINDOW_CLOSE_BUTTON)
      self.set_layout(GridLayout().set_extra("cells"))
      self.set_focus(bt.remembered_focus)
      set_label("Terminal")
      return
   end
end

class Columns(LineBasedScrollArea)
   public
      data,
      col_w,
      n_rows,
      gutter,
      item_border,
      item_paint,
      down,
      over,
      highlight,
      last_highlight

   public initially()
      \self.item_paint | runerr("ItemPaint not set")
      LineBasedScrollArea.initially()
      self.item_paint.initially(self)
      self.item_border.initially(self)
   end

   public finally()
      LineBasedScrollArea.finally()
      self.item_paint.finally()
      self.item_border.finally()
   end

   #
   # Set a border to draw along with each item.
   #
   public set_item_border(b)
      if is_initialized() then {
         (\self.item_border).finally()
         self.item_border := b
         self.item_border.initially(self)
      } else
         self.item_border := b
      return self
   end

   public set_item_paint(r)
      if is_initialized() then {
         (\self.item_paint).finally()
         self.item_paint := r
         self.item_paint.initially(self)
      } else
         self.item_paint := r
      return self
   end

   public draw_line(xp, yp, lh, i)
      local e, j, r, s, k
      every j := 1 to *col_w do {
         k := (i - 1) * *col_w  + j
         e := data[k] | break
         s := item_paint.get_size(view.cbwin, e)
         #r := Rect(xp, yp, col_w[j], lh)
         r := Rect(xp, yp, s.w + item_border.get_total_width(), lh)
         item_paint.draw_rect(view.cbwin, e, item_border.float(r, s))
         item_border.draw_rect(view.cbwin, r)
         if k === highlight then 
            Gui.style.fill_selection_rectangle(view.cbwin, r.x, r.y, r.w, r.h)
         if k === over then 
            Gui.style.fill_over_rectangle(view.cbwin, r.x, r.y, r.w, r.h)
         if k === last_highlight then 
            Gui.style.draw_dashed_rectangle(view.cbwin, r.x, r.y, r.w, r.h)
         xp +:= col_w[j] + gutter
      }
   end

   private mk_split(n)
      local i, e
      col_w := list(n, 0)
      i := 1
      n_rows := 0
      every e := !data do {
         if i = 1 then
            n_rows +:= 1
         col_w[i] <:= item_paint.get_width(view.cbwin, e)
         i +:= 1
         if i > n then
            i := 1
      }
      every (!col_w) +:= item_border.get_total_width()
   end

   public calculate_subject_width()
      local mw, e
      mw := 0
      every e := !data do
         mw <:= item_paint.get_width(view.cbwin, e)
      return mw + item_border.get_total_width()
   end

   private invalidate_split()
      invalidate_subject_width()
      invalidate_line_count()
   end

   public layout()
      invalidate_split()
      ScrollArea.layout()
   end

   public set_internal_fields()
      local had_vsb
      had_vsb := self.vsb
      ScrollArea.set_internal_fields()
      if had_vsb ~=== self.vsb then {
         invalidate_split()
         ScrollArea.set_internal_fields()
      }
   end

   public get_default_subject_height(dw)
      mk_best_split(dw)
      return n_rows * get_line_height()
   end

   private mk_best_split(dw)
      local n, tw
      n := 1
      repeat {
         mk_split(n)
         tw := gutter * (*col_w - 1)
         every tw +:= !col_w
         if tw > dw then {
            if n > 1 then
               mk_split(n - 1)
            return
         }
         if n >= *data then
            return
         n +:= 1
      }
   end

   public calculate_line_height()
      return item_paint.get_constant_height(view.cbwin) + item_border.get_total_height() | runerr("Need a constant height")
   end

   public calculate_line_count()
      mk_best_split(predict_view_width(w, vsb))
      return n_rows
   end

   public get_element_under_pointer(e)
      local i, j, d, s, r, xp, yp, fs, k
      i := get_line_under_pointer(e) | fail
      xp := get_subject_x()
      yp := get_subject_y() + get_line_height() * (i - 1)
      every j := 1 to *col_w do {
         if xp <= e.x < xp + col_w[j] then {
            k := (i - 1) * *col_w + j
            d := data[k] | fail
            s := item_paint.get_size(view.cbwin, d)
            r := Rect(xp, yp, col_w[j], get_line_height())
            fs := item_border.float(r, s)
            if fs.inside(e.x, e.y) then
               return k
            else
               fail
         }
         xp +:= col_w[j] + gutter
      }
   end

   private handle_in_chain(e)
      local k
      *parent_dialog.held = 0 | fail
      if k := get_element_under_pointer(e) then {
         set_over(k)
         view.set_pointer("hand1")
      } else {
         set_over()
         view.set_pointer()
      }
   end

   private handle_exit(e)
      *parent_dialog.held = 0 | fail
      set_over()
   end

   private set_over(n)
      local s, url
      if n ~=== over then {
         invalidate_line(get_row_for_index(\over))
         over := n
         invalidate_line(get_row_for_index(\over))
         if /over then
            parent.parent.parent.clear_msg()
         else {
            s := FilePath(parent.parent.parent.cwd).child(data[n].name).ucs() | fail
            url := URL(u"file://" || &host || URL.percent_encode(s, URL.UNRESERVED ++ '/')) | fail
            parent.parent.parent.msg(url.ucs())
         }
      }
      return self
   end

   public handle_lmdrag(e)
      if \down = get_element_under_pointer(e) then {
         set_highlight(down)
         set_over(down)
      } else {
         set_highlight()
         set_over()
      }
   end

   public handle_lrelease(e)
      if \highlight then
         fire("lclicked", e)
      down := &null
      set_highlight()
   end

   public handle_mrelease(e)
      if \highlight then
         fire("mclicked", e)
      down := &null
      set_highlight()
   end

   public get_row_for_index(n)
      return (n - 1) / *col_w + 1
   end

   public set_last_highlight(n)
      if last_highlight ~=== n then {
         invalidate_line(get_row_for_index(\last_highlight))
         last_highlight := n
         invalidate_line(get_row_for_index(\last_highlight))
      }
      return self
   end

   public set_highlight(n)
      if highlight ~=== n then {
         set_last_highlight(\n)
         invalidate_line(get_row_for_index(\highlight))
         highlight := n
         ensure_line_visible(get_row_for_index(\highlight)) 
         invalidate_line(get_row_for_index(\highlight))
      }
      return self
   end

   public get_highlight()
      return .\highlight
   end

   public object_get_last_highlight()
      return data[.\last_highlight]
   end

   public object_set_last_highlight(o)
      return set_last_highlight(keyof(data, o))
   end
   
   public get_last_highlight()
      return .\last_highlight
   end

   public handle_lmpress(e)
      if down := get_element_under_pointer(e) then
         set_highlight(down)
      else
         set_highlight()
   end

   public constrain_last_highlight()
      if *data = 0 then
         last_highlight := &null
      else if \last_highlight then {
         last_highlight <:= 1
         last_highlight >:= *data
      }
   end

   public set_data(l)
      self.data := l
      set_over()
      invalidate_split()
      compute_and_invalidate()
      constrain_last_highlight()
      return self
   end

   public set_gutter(n)
      self.gutter := n
      return self
   end

   public new()
      LineBasedScrollArea.new()
      data := []
      gutter := scale(8)
      item_paint := TextItemPaint()
      item_border := NullBorder().set_x_align(Align.L)
      view.connect(self.handle_lmpress, Event.MOUSE_LEFT_PRESS)
      view.connect(self.handle_lmpress, Event.MOUSE_MIDDLE_PRESS)
      view.connect(self.handle_lmdrag, Event.MOUSE_LEFT_DRAG)
      view.connect(self.handle_lrelease, Event.MOUSE_LEFT_RELEASE)
      view.connect(self.handle_lmdrag, Event.MOUSE_MIDDLE_DRAG)
      view.connect(self.handle_mrelease, Event.MOUSE_MIDDLE_RELEASE)
      view.connect(self.handle_in_chain, Event.IN_POINT_CHAIN)
      view.connect(self.handle_exit, Event.MOUSE_EXIT)
      return
   end
end

class DirList(ButtonOnlyList)
   public create_button()
      local b
      b := IconButton().set_paint(ImagePaint().set_cache("gui.FAVOURITES_24"))
      theme_toolbar_button(b, "emblem-favorite")
      return b
   end

   public create_popup()
      return ItemPaintList().
         set_item_paint(StringDirItemPaint()).
         set_item_border(EmptyBorder().
                            set_insets(Gui.TEXT_INSET, Gui.TEXT_INSET, 0, 0).
                            set_x_align(Align.L))
   end
end

class HistoryList(ButtonOnlyList)
   public create_button()
      local b
      b := IconButton().set_paint(ImagePaint())
      theme_toolbar_button(b, "view-history")
      return b
   end

   public create_popup()
      return ItemPaintList().
         set_item_paint(StringDirItemPaint()).
         set_item_border(EmptyBorder().
                            set_insets(Gui.TEXT_INSET, Gui.TEXT_INSET, 0, 0).
                            set_x_align(Align.L))
   end
end

class Terminal(TabItem, VtUI)
   private
      prev_button,
      next_button,
      date_button,
      name_button,
      size_button,
      show_hidden_button,
      mix_entries_button,
      favourites_list,
      message_label,
      history_list,
      trail

   private readable
      ascending,
      sorter,
      filter,
      refresh_button,
      up_button,
      home_button,
      close_button,
      output,
      columns,
      columns_pos_table,
      history,
      history_pos,
      nav_dir,
      io_task,
      check_cwd_task,
      pid, 
      tty,
      input,
      cwd,
      cwd_mtime

   public link_left_clicked(link)
      open_link(link)
   end

   public vt_size_changed(cols, rows)
      tty.set_size(cols, rows)
   end

   public link_middle_clicked(link, ev)
      insert_link(link, ev)
   end

   public send_tty(s)
      s := string(s) | runerr(103, s)
      put(input, s)
      return self
   end

   private close_all()
      check_cwd_task.stop()
      io_task.stop()
      System.kill(pid, Signal.SIGHUP)
      tty.close()
      System.wait(pid)
   end

   public msg(s, n)
      message_label.set(s, n)
   end

   public clear_msg()
      msg()
   end

   private setup_shell()
      local env, sh
      env := []
      every put(env, System.environ())
      put(env, "TERMLINKS=1")
      put(env, "PATH=" || Files.get_home() || "/termlinks-extras/bin:" || System.getenv("PATH"))
      tty := PttyStream() | fail
      (tty.flag(FileOpt.NONBLOCK) &
       pid := System.fork()) | {
         tty.close()
         fail
      }
      if pid > 0 then {
         # Parent
         return
      } else {
         # Child
         sh := System.getpw(System.getuid()).shell | "/bin/sh"
         System.setsid() | stop(&why)
         tty.close()
         tty := tty.open_slave() | stop(&why)
         tty.dup2(FileStream.stdout) | stop(&why)
         tty.dup2(FileStream.stdin) | stop(&why)
         tty.dup2(FileStream.stderr) | stop(&why)
         System.exec(sh, [], env) | stop(&why)
         syserr("Not reached")
      }
   end

   public get_pats()
      local pat, pats
      pats := []
      filter.get_contents() ? {
         repeat {
            pat := tab(upto(';') | 0)
            put(pats, Wildcard(pat))
            move(1) | break
         }
      }
      return pats
   end

   private check_pwd()
      local s
      s := Files.readlink("/proc/" || pid || "/cwd") | fail
      if s ~== cwd then {
         set_cwd(s, if s === nav_dir then &yes else &no)
         nav_dir := &null
      }
   end

   # Avoid a little glitch which happens when a button is greyed out
   # while held down, leaving it stuck like that, since it never gets the
   # release event.
   #
   private set_is_shaded_ex(b, v)
      if \v then
         b.clear_down()
      b.set_is_shaded(v)
   end

   private update_grey()
      set_is_shaded_ex(prev_button, if history_pos < *history then &no else &yes)
      set_is_shaded_ex(next_button, if history_pos > 1 then &no else &yes)
   end

   private send_vt(s)
      output.input(s)
   end

   private check_cwd()
      local st
      repeat {
         if st := Files.stat(cwd) then {
            if st.mtime ~= cwd_mtime then
               resort_cwd()
         }
         check_cwd_task.sleep(500)
      }
   end

   private service_tty()
      local t, x, s, n
      repeat {
         x := io_task.poll([tty, Poll.IN + Poll.OUT]) | {
            err_msg(u"IO problem polling tty: " || ucs(&why))
            break
         }
         if DescStream.poll_in_test(x[1]) then {
            t := tty.in(1048576) | {
               err_msg(u"IO problem on tty: " || ucs(&why))
               break
            }
            if /t then {
               err_msg(u"EOF on tty")
               break
            }
            if \opts["v"] then
               write("In: ", image(t))
            send_vt(Text.liberal_ucs(t))
            check_pwd()
         } else if DescStream.poll_out_test(x[1]) then {
            if s := get(input) then {
               n := tty.out(s) | {
                  err_msg(u"IO problem on tty: " || ucs(&why))
                  break
               }
               if n < *s then
                  push(input, s[n + 1:0])
               if \opts["v"] then
                  write("Out: ", image(s))
            } else {
               #write("asking for input but none here...break")
               io_task.sleep(50)
            }
         }
      }
      io_task.revert()
   end

   public open_link(link)
      local r
      if link.url.scheme == u"text" then {
         write(to_string(link.url))
         send_tty(ucs(link.url.get_decoded_path()))
      } else if r := get_runner(link) then {
         if \r.cmd then
            run_prog(r.cmd)
         else
            parent_dialog.launch_prog(r)
      }
   end

   public insert_link(link, ev)
      local s, es
      if link.url.scheme == u"file" then {
         if s := ucs(link.url.get_decoded_path()) then {
            es := if /ev.ctrl & 
               link.url.host == &host &
               s[1+:*cwd] == cwd & 
               s[*cwd + 1] == u"/" then
               Format.shell_escape(s[*cwd+2:0])
            else
               Format.shell_escape(s)
            if Files.is_directory(s) then
               es ||:= u"/"
            else
               es ||:= u" "
            send_tty(es)
         }
      } else
         send_tty(link.url.ucs())
   end

   private err_msg(s)
      #output.log_str(u"\n\e[31m(Message from terminal:) " || s || u"\e[0m\n")
      msg(s, 3000)
   end

   private info_msg(s)
      #output.log_str(u"\n\e[35m(Info from terminal:) " || s || u"\e[0m\n")
      msg(s, 3000)
   end

   private static get_possible_desktop_entries(s)
      suspend Unique{Xdg.gen_desktop_entries(Xdg.alternative_mime_types(Xdg.get_mime_type_for_file(FilePath(s).get(-1))))}
   end

   private get_runner(link)
      local s, de, url
      url := link.url
      if url.scheme == u"file" then {
         (url.host == &host) | return info_msg(u"Can't run a file on another host (" || url.host || u")")
         s := ucs(url.get_decoded_path()) | return info_msg(u"URL decoded path not utf8")
         if Files.is_directory(s) then
            return Runner(u"cd " || Format.shell_escape(s))
         # Get a DesktopEntry based on the content-type if available, or the filename.
         de := get_possible_desktop_entries(s) | return info_msg(u"No matching desktop entry for this URL")
         if \opts["v"] then write("Desktop entry: ", to_string(de, 3, 1))
         return Runner(, de, link, ucs(link.url.get_decoded_path()))
      } else {
         de := Xdg.gen_desktop_entries("x-scheme-handler/" || string(url.scheme))  | return info_msg(u"No desktop entry for url scheme " || url.scheme)
         if \opts["v"] then write("Desktop entry: ", to_string(de, 3, 1))
         return Runner(, de, link, link.url.ucs())
      }
   end

   private on_columns_lclick()
      local item
      item := columns.data[columns.get_highlight()]
      open_link(item_to_link(item))
   end

   private item_to_link(item)
      local s, url
      s := FilePath(cwd).child(item.name).ucs() | fail
      url := URL(u"file://" || &host || URL.percent_encode(s, URL.UNRESERVED ++ '/')) | fail
      return Link(url)
   end

   private on_columns_mclick(ev)
      local item
      item := columns.data[columns.get_highlight()]
      insert_link(item_to_link(item), ev)
   end

   private copy_link(link)
      if link.url.scheme == (u"file" | u"text") then
         parent_dialog.own_selection(Selection.CLIPBOARD, 
                                     StaticTextSelectionOwner(Format.shell_escape(ucs(link.url.get_decoded_path()))))
   end

   private copy_link_url(link)
      parent_dialog.own_selection(Selection.CLIPBOARD,
                                  URLSelectionOwner([link.url]))
   end 

   private insert_cmd(link)
      local r, cmd
      if r := get_runner(link) then {
         cmd := \r.cmd | r.desktop_entry.subst_file(Format.shell_escape(r.subst), r.link.line)
         send_tty(cmd)
      }
   end

   private rename(link)
      local s, d
      s := ucs(link.url.get_decoded_path()) | return info_msg(u"URL decoded path not utf8")
      d := RenameDialog(s)
      d.show_modal()
      s := \d.result | fail
      msg("Renamed OK", 3000)
      if cwd == FilePath(s).parent().ucs() then
         resort_cwd()
   end

   private connect_launch(m2, runner)
      m2.connect(create parent_dialog.launch_prog(runner), Event.ACTION)
   end

   private on_paste(e)
      output.handle_paste(e)
   end

   private on_copy(e)
      output.handle_copy(e)
   end

   private on_select_all()
      output.handle_select_all()
   end

   public create_context_menu()
      local m
      Class.ensure_initialized(TextContextMenu)
      m := Menu()
      if output.get_current_text_selection() then {
         m.add(TextMenuItem().
               set_label("Copy").
               set_paint_left(ImagePaint().set_cache("txt.copy")).
               set_accel("c").
               connect(on_copy, Event.ACTION))
      }
      m.add(TextMenuItem().
            set_label("Paste").
            set_paint_left(ImagePaint().set_cache("txt.paste")).
            set_accel("p").
            connect(on_paste, Event.ACTION))
      m.add(MenuSeparator())
      m.add(TextMenuItem().
            set_label("Select all").
            set_paint_left(ImagePaint().set_cache("txt.select-all")).
            set_accel("a").
            connect(on_select_all, Event.ACTION))
      return m
   end

   public create_link_menu(link)
      local m, m1, m2, s, de
      m := Menu()
      if link.url.scheme == (u"file" | u"text") then {
         m.add(TextMenuItem().
               set_label("Copy").
               connect(create copy_link(link), Event.ACTION))
      }
      m.add(TextMenuItem().
            set_label("Copy URL").
            connect(create copy_link_url(link), Event.ACTION))
      m.add(TextMenuItem().
            set_label("Insert command").
            connect(create insert_cmd(link), Event.ACTION))

      if s := ucs(link.url.get_decoded_path()) &
         link.url.scheme == u"file" &
         not Files.is_directory(s) then
      {
         m1 := Menu().set_label("Open with")
         every de := get_possible_desktop_entries(s) do {
            m2 := TextMenuItem().
               set_label(de.name)
            m2.set_paint_left(ImagePaint().set_cache(Xdg.find_icon_and_cache(\de.icon, 12)))
            connect_launch(m2, Runner(, de, link))
            m1.add(m2)
         }
         if *m1.children > 0 then 
            m.add(m1)
      }
      if link.url.scheme == u"file" then {
         m.add(TextMenuItem().
               set_label("Rename").
               connect(create rename(link), Event.ACTION))
      }

      return m
   end

  private on_columns_rpress(e)
      local i, m, pm, item, link
      item := columns.data[i := columns.get_element_under_pointer(e)] | fail
      link := item_to_link(item) | fail
      columns.set_highlight(i)
      m := create_link_menu(link)
      pm := PopupMenu()
      pm.connect(on_popup_closed, Event.POPUP_CLOSED)
      pm.popup(parent_dialog, m, e.x, e.y)
   end

   private on_popup_closed()
      columns.set_highlight()
   end

   private run_prog(s)
      send_tty(s || u"\r")
   end

   private goto_dir(d, nav)
      nav_dir := if /nav then &null else string(d)
      run_prog(u"cd " || Format.shell_escape(ucs(d)))
   end

   private synch_paints()
      local cp, np, sp, dp, sz
      sz := Gui.TOOLBAR_ICON_SIZE
      cp := CompoundPaint().set_top(ImagePaint().set_cache(if /ascending then "gui.TINY_ARROW_DOWN" else "gui.TINY_ARROW_UP"))
      np := ImagePaint().set_cache(ImageCache.get_key_with_resize("gui.FONT_24", sz, sz))
      sp := ImagePaint().set_cache(ImageCache.get_key_with_resize("gui.FILESIZE_24", sz, sz))
      dp := ImagePaint().set_cache(ImageCache.get_key_with_resize("gui.CLOCK_24", sz, sz))
      case sorter of {
         Files.name_cmp: {
            name_button.set_paint(cp.set_bottom(np))
            date_button.set_paint(dp)
            size_button.set_paint(sp)
            columns.set_item_paint(IconFilesItemPaint())
         }
         Files.size_cmp: {
            name_button.set_paint(np)
            date_button.set_paint(dp)
            size_button.set_paint(cp.set_bottom(sp))
            columns.set_item_paint(IconFilesItemPaintSize())
         }
         Files.date_cmp: {
            name_button.set_paint(np)
            date_button.set_paint(cp.set_bottom(dp))
            size_button.set_paint(sp)
            columns.set_item_paint(IconFilesItemPaintDate())
         }
      }
   end

   private on_mix_entries_button(ev)
      resort_cwd()
   end

   private on_show_hidden_button(ev)
      resort_cwd()
   end

   private on_date_button(ev)
      if sorter === Files.date_cmp then
         ascending := toggle_flag(ascending)
      else
         sorter := Files.date_cmp
      synch_paints()
      resort_cwd()
   end

   private on_name_button(ev)
      if sorter === Files.name_cmp then
         ascending := toggle_flag(ascending)
      else
         sorter := Files.name_cmp
      synch_paints()
      resort_cwd()
   end

   private on_size_button(ev)
      if sorter === Files.size_cmp then
         ascending := toggle_flag(ascending)
      else
         sorter := Files.size_cmp
      synch_paints()
      resort_cwd()
   end

   private resort_cwd()
      local i, ino, info, vis
      if i := columns.get_row_for_index(columns.get_last_highlight()) then {
         # Set vis to &yes if the last highlight is currently visible; also get the ino of
         # the last highlight.
         info := columns.get_line_info()
         if info.first_whole <= i <= info.last_whole then
            vis := &yes
         ino := columns.object_get_last_highlight().stat.ino
      }
      load_cwd(get_pats())
      # Search for the old ino in the new data.  If found, set the highlight and if the old
      # last_highlight was visible, ensure the new one is too.
      if i := Positions{(!columns.data).stat.ino, \ino} then {
         columns.set_last_highlight(i)
         if \vis then
            columns.ensure_line_visible(columns.get_row_for_index(columns.get_last_highlight()))
      }
   end

   private load_cwd(pats)
      columns.set_data(list_cwd(pats))
      cwd_mtime := Files.stat(cwd).mtime | 0
   end

   private list_cwd(pats)
      local dirs, files, e, l, s, t, now, tf, m, z, zf
      l := Files.ucs_list(cwd) | fail
      dirs := []
      files := []
      now := Time.get_system_seconds()
      every e := !l do {
         s := e.name
         if (/pats | (!pats).match(s) = *s + 1)\1 &
            (show_hidden_button.is_checked() | not(Files.is_hidden(s))) then
         {
            t := e.lstat.mtime
            tf := if now - t > 180 * 86400 then
               Time(t + Time.SYSTEM_BASE_OFFSET).format("MMM d yyyy")
            else
               Time(t + Time.SYSTEM_BASE_OFFSET).format("MMM d HH:mm")
            tf := s || " (" || tf || ")"
            z := e.lstat.size
            zf := if z < 1024 then
               Format.numeric_to_string(z, 0, ',') || "B"
            else if z < 1024*1024 then
               Format.numeric_to_string(z/1024.0, 1, ',') || "KB"
            else
               Format.numeric_to_string(z/(1024.0*1024.0), 1, ',') || "MB"
            zf := s || " (" || zf || ")"
            m := ListEntryEx(s, e.lstat, e.stat, tf, zf)
            if e.stat.mode_str[1] == "d" then
               put(dirs, m)
            else
               put(files, m)
         }
      }
      if mix_entries_button.is_checked() then
         while put(dirs, get(files))

      qsort(dirs, if /ascending then sorter else flip(sorter))
      qsort(files, if /ascending then sorter else flip(sorter))
      return dirs ||| files
   end

   private set_cwd(s, nav)
      local ex, e, lh, t, l, i
      if \cwd then {
         lh := columns.data[columns.get_last_highlight()].name
         insert(columns_pos_table, 
                FilePath(cwd).canonical().str(), 
                FileDialogPos(lh, columns.get_area_y()))
      }
      cwd := ucs(s) | fail
      trail.set_path(cwd)
      load_cwd()
      synch_favourites_list()
      ex := table(0)
      every e := !columns.data do
         ex[Files.get_extension(e.name)] +:= 1
      l := [u"*"]
      every e := back(sort(ex, 2)) do
         put(l, u"*." || e[1])
      filter.set_selection_list(l).set_selection(1)

      if is_live() then {
         if t := member(columns_pos_table, FilePath(cwd).canonical().str()) then {
            columns.set_area_y(t.area_y).set_area_x(0)
            if i := Positions{(!columns.data).name, \t.cursor_name} then
               columns.set_last_highlight(i)
            else
               columns.set_last_highlight()
         } else {
            columns.set_area_y(0).set_area_x(0).set_last_highlight()
         }
         parent_dialog.resynch_pointer()
      }

      if /nav then {
         every 1 to history_pos - 1 do
            pop(history)
         push(history, cwd)
         history_pos := 1
         synch_history_list()
         update_grey()
      }
      set_paint(AbbreviatedTextPaint(FilePath(cwd).get(-1)))
      return self
   end

   public get_favourites_directories()
      local t
      t := []
      every put(t,
                Files.getcwd() | 
                FavouriteDirectoriesDialog.gen_directories())
      return lunique(FileDialog.ucs_list(t))
   end

   public refresh_favourite_dirs()
      favourites_list.set_selection_list(get_favourites_directories())
      synch_favourites_list()
   end

   private synch_favourites_list()
      favourites_list.object_set_selection(cwd) | favourites_list.set_selection()
   end

   private synch_history_list()
      history_list.set_selection(history_pos)
   end

   private on_trail(ev)
      goto_dir(ev)
   end

   public component_setup()
      self.setup()
      sorter := Files.name_cmp
      synch_paints()
      set_label_border(EmptyBorder().set_x_align(Align.L))
      columns.
         set_width(scale(300)).
         set_item_paint(IconFilesItemPaint()).
         set_item_border(EmptyBorder().
                             set_insets(Gui.TEXT_INSET, Gui.TEXT_INSET, 0, 0).
                             set_x_align(Align.L)).
         connect(on_columns_lclick, "lclicked").
         connect(on_columns_mclick, "mclicked").
         connect(on_columns_rpress, Event.MOUSE_RIGHT_PRESS)
      trail.
         set_size().
         set_constraint("l_inset", scale(10)).
         connect(on_trail, FileTrail.DIR_CHANGED_EVENT)

      output.
         set_ui(self)
      output.set_history_size(\opts["h"])
      if \opts["v"] then
         output.set_verbose(&yes)

      favourites_list.set_size().set_selection_list(get_favourites_directories())
      
      set_remembered_focus(output.find_focus())
      filter.set_selection_list([u"*"])
      history := []
      history_pos := 0
      history_list.set_size().set_selection_list(history)
      update_grey()
      columns_pos_table := table()
      set_cwd(Files.getcwd())
      setup_shell() | stop(&why)
      input := []
      io_task := Dispatcher.new_task{service_tty()}
      io_task.start()
      check_cwd_task := Dispatcher.new_task{check_cwd()}
      check_cwd_task.start()
      theme_toolbar_button(close_button, "window-close")
      theme_toolbar_button(prev_button, "go-previous")
      theme_toolbar_button(next_button, "go-next")
      theme_toolbar_button(up_button, "go-up")
      theme_toolbar_button(home_button, "go-home")
      theme_toolbar_button(refresh_button, "view-refresh")
      every theme_toolbar_button(show_hidden_button | mix_entries_button)
   end

   public finally()
      TabItem.finally()
      close_all()
   end

   public new()
      TabItem.new()
      component_setup()
      return
   end

   private on_favourites_list(ev)
      goto_dir(favourites_list.object_get_selection())
   end

   private on_history_list(ev)
      local s
      history_pos := history_list.get_selection()
      s := history[history_pos]
      update_grey()
      goto_dir(s, &yes)
   end

   private on_home_button(ev)
      goto_dir(Files.get_home())
   end

   private on_refresh_button(ev)
      resort_cwd()
   end

   private on_up_button(ev)
      local t
      t := FilePath(cwd).canonical()
      if t.size() > 1 then
         goto_dir(t.parent().str())
   end

   private on_close_button(ev)
      local t, i
      if *parent.children = 1 then
         parent_dialog.dispose()
      else {
         i := parent.get_index(self)
         if i > 1 then
            i -:= 1
         else
            i +:= 1
         t := parent.children[i] | syserr("Couldn't find other tab")
         parent.
            remove(self).
            set_which_one(t).
            do_layout().
            invalidate()
      }
   end

   private on_filter(ev)
      if member(EditList.NAVIGATE, ev.code) then {
         resort_cwd()
         parent_dialog.set_focus(output)
      }
   end

   private on_prev_button(ev)
      local s
      (history_pos < *history) | fail
      s := history[history_pos +:= 1]
      synch_history_list()      
      update_grey()
      goto_dir(s, &yes)
   end

   private on_next_button(ev)
      local s
      (history_pos > 1) | fail
      s := history[history_pos -:= 1]
      synch_history_list()      
      update_grey()
      goto_dir(s, &yes)
   end

   private setup()
      local paint_2, split_2, paint_14, paint_27, paint_32, paint_7, layout_4, paint_11, paint_37, panel_4, paint_29, paint_34, split_content_3, split_content_4, paint_9, layout_6, paint_13, paint_31, paint_6, layout_3, paint_10, paint_23, paint_36, paint_41, paint, paint_3, paint_28, paint_33, paint_8, border_1, layout_5, paint_12, paint_30, paint_35, paint_40
      paint_10 := ImagePaint().
         set_cache("rpp.EXIT_24")
      paint_9 := TextPaint("Close")
      close_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_9).
         set_accel("c").
         connect(self.on_close_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_10)
      paint_8 := ImagePaint().
         set_cache("gui.HOME_24")
      paint := TextPaint("Home")
      home_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint).
         connect(self.on_home_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_8)
      paint_3 := ImagePaint().
         set_cache("gui.UP_24")
      paint_2 := TextPaint("Up")
      up_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_2).
         connect(self.on_up_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_3)
      paint_7 := ImagePaint().
         set_cache("gui.REFRESH_24")
      paint_6 := TextPaint("Refresh")
      refresh_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_6).
         connect(self.on_refresh_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_7)
      paint_12 := ImagePaint().
         set_cache("gui.PREV_24")
      paint_11 := TextPaint("Prev")
      prev_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_11).
         connect(self.on_prev_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_12)
      paint_14 := ImagePaint().
         set_cache("gui.NEXT_24")
      paint_13 := TextPaint("Next")
      next_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_13).
         connect(self.on_next_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_14)
      paint_41 := TextPaint("History")
      history_list := HistoryList().
         set_size(scale(37), scale(30)).
         clear_constraints().
         set_tooltip(paint_41).
         connect(self.on_history_list, Event.SELECTION_CHANGED)
      paint_23 := TextPaint("Filter")
      filter := EditList().
         set_size(scale(150)).
         set_align(Align.L, Align.B).
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_tooltip(paint_23).
         connect(self.on_filter, Event.ACTION).
         connect(self.on_filter, Event.CONTENT_CHANGED).
         set_selection_list([""])
      paint_28 := ImagePaint().
         set_cache("gui.FONT_24")
      paint_27 := TextPaint("Sort by name")
      name_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_27).
         connect(self.on_name_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_28)
      paint_30 := ImagePaint().
         set_cache("gui.CLOCK_24")
      paint_29 := TextPaint("Sort by date")
      date_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_29).
         connect(self.on_date_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_30)
      paint_32 := ImagePaint().
         set_cache("gui.FILESIZE_24")
      paint_31 := TextPaint("Sort by size")
      size_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_31).
         connect(self.on_size_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_32)
      paint_34 := ImagePaint().
         set_cache("gui.HIDDENFILE_24")
      paint_33 := TextPaint("Hidden files")
      show_hidden_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_33).
         connect(self.on_show_hidden_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&yes).
         set_paint(paint_34)
      paint_36 := ImagePaint().
         set_cache("rpp.MIXFILE_24")
      paint_35 := TextPaint("Mix files & dirs")
      mix_entries_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_35).
         connect(self.on_mix_entries_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&yes).
         set_paint(paint_36)
      paint_37 := TextPaint("Favourite directories")
      favourites_list := DirList().
         set_size(scale(37), scale(30)).
         clear_constraints().
         set_tooltip(paint_37).
         connect(self.on_favourites_list, Event.SELECTION_CHANGED)
      trail := FileTrail().
         set_size(scale(100), scale(20)).
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0)
      layout_6 := GridLayout().
         set_doi(scale(0)).
         set_dii(scale(2)).
         set_extra("cells")
      panel_4 := Panel().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_layout(layout_6).
         add(close_button).
         add(home_button).
         add(up_button).
         add(refresh_button).
         add(prev_button).
         add(next_button).
         add(history_list).
         add(filter).
         add(name_button).
         add(date_button).
         add(size_button).
         add(show_hidden_button).
         add(mix_entries_button).
         add(favourites_list).
         add(trail)
      self.add(panel_4)
      columns := Columns().
         set_size(scale(100), scale(100)).
         clear_constraints().
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0)
      layout_5 := GridLayout().
         set_doi(scale(0)).
         set_extra("cells")
      split_content_3 := Component().
         clear_constraints().
         set_layout(layout_5).
         add(columns)
      output := Vt().
         set_size(scale(100), scale(100)).
         clear_constraints().
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0)
      layout_4 := GridLayout().
         set_doi(scale(0)).
         set_extra("cells")
      split_content_4 := Component().
         clear_constraints().
         set_layout(layout_4).
         add(output)
      split_2 := Split().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_left(split_content_3).
         set_right(split_content_4)
      self.add(split_2)
      paint_40 := TextPaint("")
      border_1 := CompoundBorder().
         set_outer(SunkenBorder()).
         set_inner(EmptyBorder().
            set_l_inset(scale(3))).
         set_x_align(Align.L)
      message_label := MessageLabel().
         set_fg("red").
         clear_constraints().
         set_constraint("b_inset", scale(0)).
         set_constraint("l_inset", scale(0)).
         set_constraint("r_inset", scale(0)).
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_border(border_1).
         set_paint(paint_40)
      self.add(message_label)
      layout_3 := GridLayout().
         set_extra("cells")
      self.set_layout(layout_3)
   end
end

procedure main(a)
   local d
   opts := options(a, "-v! -h+")
   ImageCache.
      name_image("rpp.EXIT_24", EXIT).
      name_image("rpp.SAVE_24", SAVE).
      name_image("rpp.MIXFILE_24", MIXFILE)
   insert(Dialog.ROOT_WATTRIBS, "icon", Pixels(TERMINAL_LOGO))
   d := TerminalDialog()
   d.show_modal()
   if \opts["v"] then write("Exiting")
end

### Ivib-v2 layout: layouts/$.layout
