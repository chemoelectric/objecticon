import 
   gui, 
   io,
   util,
   xml,
   graphics,
   posix,
   lang,
   http,
   net,
   ipl.options,
   ipl.browser

global opts

$load EXIT "rpp.EXIT_24.gif"
$load NEXT "rpp.NEXT_24.gif"
$load PREV "rpp.PREV_24.gif"
$load HOME "rpp.HOME_24.gif"
$load STOP "rpp.STOP_24.gif"
$load PASTE "rpp.PASTE_24.gif"
$load REFRESH "rpp.REFRESH_24.gif"

class Settings()
   public
      home_url,
      cache_size_mb,
      visited,
      visited_size

   public new()
      home_url := URL(u"config:")
      cache_size_mb := 8
      visited := []
      visited_size := 100
      return
   end
end

class VisitedEntry()
   public const
      url
   public
      last_time,
      times

   public new(url)
      self.url := url
      self.last_time := Time()
      self.times := 1
      return
   end
end

class MessageLabel(Label)
   private
      want, keep

   public set(p, n)
      local t
      want := p
      if /keep then {
         /p := TextPaint("")
         set_paint(p)
         if \n then {
            keep := 1
            t := Dispatcher.new_task{{
               t.sleep(n)
               keep := &null
               set_paint(\want)
               t.revert()
            }}
            t.start()
         }
      }
   end
end

class BrowserDialog(Dialog)
   private readable
      copy_page_url_item,
      save_page_item,
      settings,
      pool,
      tabs,
      prev_button,
      message_label,
      stop_button,
      paste_url_button,
      browser,
      refresh_button,
      close_button,
      home_button,
      search_field,
      next_button,
      file_dialog

   private on_copy_page_url_item(ev)
      own_selection(Selection.CLIPBOARD, URLSelectionOwner([tabs.which_one.browser.page_url]))
   end

   private on_save_page_item(ev)
      tabs.which_one.do_save(tabs.which_one.browser.page_name, tabs.which_one.browser.page_data)
   end

   private on_quit(ev)
      dispose()
   end

   private on_tab_changed(ev)
      update_grey()
   end

   private update_grey()
      tabs.which_one.browser.do_update_grey()
   end

   public initially()
      cast(self,Dialog).initially()
      pool.initially()
   end

   public finally()
      cast(self,Dialog).finally()
      pool.finally()
   end

   public new_tab(url)
      local bt
      bt := BrowserTab(url, pool, settings)
      tabs.
         add(bt).
         set_which_one(bt).
         do_layout().
         invalidate()
      update_grey()
   end

   private on_new_tab(ev)
      new_tab()
   end
   
   private list_visited()
      local s, e, t
      s := "<html><head><title>Visited</title></head><table>"
      s ||:= "<tr><th align=left>URL<th align=right>Times<th>&nbsp;Last visit</tr>"
      every e := !settings.visited do {
         t := e.url.str()
         if *t > 50 then
            t[48:0] := "..."
         s ||:= "<tr><td><a href=\"" || e.url.str() || "\">" || t || 
            "</a><td align=right>" || e.times || "<td>&nbsp;" || e.last_time.format("MMM'&nbsp;'dd'&nbsp;'HH:mm") || "</tr>"
      }
      s ||:= "</table></html>"
      return s
   end

   private list_all_cookies()
      local s, e
      s := "<html><head><title>Cookies</title></head>"
      every e := (!sort(browser.cookies))[1] do
         s ||:= "<a href=config:cookie?q=" || URL.cgi_encode(e) || ">" || e || "</a><br>"
      s ||:= "</html>"
      return s
   end

   private del_cookie(k, path, name)
      local t1, t2
      if t1 := member(browser.cookies, k) &
         t2 := member(t1, path) then
      {
         delete(t2, map(name))
         if *t2 = 0 then {
            delete(t1, path)
            if *t1 = 0 then
               delete(browser.cookies, k)            
         }
      }
      return list_cookie(k)
   end

   private del_cookies(k)
      delete(browser.cookies, k)            
      return list_all_cookies()
   end

   private list_cookie(k)
      local s, t, path, ck
      s := "<html><head><title>Cookies</title></head>"
      if t := member(browser.cookies, k) then {
         s ||:= "<a href=config:del_cookies?q=" || URL.cgi_encode(k) || ">Delete all</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=config:cookies>Back to list</a>"
         every path := key(t) do {
            every ck := !t[path] do {
               s ||:= "<hr><pre>" || to_string(ck, 3, 1) || 
                  "</pre><a href=config:del_cookie?" || URL.make_cgi_string(table(, 
                                                                                  "q", k,
                                                                                  "path", ck.path,
                                                                                  "name", ck.name)) || 
                  ">Delete</a>"
            }
         }
      }
      s ||:= "</html>"
      return s
   end

   private edit_settings(home, cn, vn)
      settings.home_url := URL(ucs(home))
      settings.cache_size_mb := integer(cn)
      settings.visited_size := integer(vn)
      return config_main()
   end

   private config_main()
      return "<html><head><title>Config</title></head><a href=config:cookies >Edit cookies</a><p>_
              <a href=config:visited >Visited pages</a><p>_
              <fieldset><form method=get action=submit >_
                 <legend>Edit settings</legend>_
                 <table>_
                   <tr><td>Home page:<td><input type=text name=home value=" || xml_escape(settings.home_url.str(), ~(&letters++&digits)) || " size=50 /></tr>_
                   <tr><td>Cache size (MB):<td><input type=text name=cache value=" || settings.cache_size_mb || " size=50 /></tr>_
                   <tr><td>Visited list size:<td><input type=text name=vsize value=" || settings.visited_size || " size=50 /></tr>_
                 </table>_
                 <input type=submit />_
              </form></fieldset></html>"
   end

   private config_handler(req)
      local t
      return case string(req.url.path) of {
         "": config_main()
         "visited": list_visited()
         "cookies": list_all_cookies()
         "cookie": list_cookie(member(req.url.extract_cgi_parameters(), "q")[1])
         "del_cookies": del_cookies(member(req.url.extract_cgi_parameters(), "q")[1])
         "del_cookie": {
            if t := req.url.extract_cgi_parameters() then
               del_cookie(member(t, "q")[1], member(t, "path")[1], member(t, "name")[1])
         }
         "submit": {
            if t := req.url.extract_cgi_parameters() then
               edit_settings(member(t, "home")[1], member(t, "cache")[1], member(t, "vsize")[1])
         }
      } | error("Bad config request")
   end

   private get_authentication(dom, realm)
      local d
      d := AuthenticationDialog(dom, realm)
      d.show_modal(self)
      return \d.result
   end

   public new(s, cookies, settings)
      local quit_menu_item, menu_bar, menu, bt, new_tab_item
      cast(self,Dialog).new()
      self.settings := settings
      pool := WorkerPool().
         set_cookies(cookies).
         set_cache(Cache(settings.cache_size_mb*1024*1024)).
         set_authentication_function(get_authentication).
         add_scheme_handler("config", config_handler)
      pool.set_user_agent(\opts["agent"])
      if \opts["l"] then
         pool.set_log_http(&yes)
      file_dialog := FileDialog()
      self.set_size(600, 650)
      self.set_resize(&yes)
      new_tab_item := TextMenuItem().
         connect(on_new_tab, Event.ACTION).
         set_paint_mid(TextPaint("New Tab"))
      copy_page_url_item := TextMenuItem().
         connect(on_copy_page_url_item, Event.ACTION).
         set_paint_mid(TextPaint("Copy page"))
      save_page_item := TextMenuItem().
         connect(on_save_page_item, Event.ACTION).
         set_paint_mid(TextPaint("Save page..."))
      quit_menu_item := TextMenuItem().
         connect(on_quit, Event.ACTION).
         set_paint_mid(TextPaint("Quit"))
      menu := Menu().
         set_accel("f").
         set_paint_mid(TextPaint("File")).
         add(new_tab_item).
         add(copy_page_url_item).
         add(save_page_item).
         add(quit_menu_item)
      menu_bar := MenuBar().
         set_size("100").
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("l_inset", 0).
         set_constraint("r_inset", 0).
         set_constraint("t_inset", 0).
         set_constraint("b_inset", 0).
         set_constraint("x_fill", &yes).
         add(menu)
      self.add(menu_bar)
      bt := BrowserTab(s, pool, settings)
      tabs := TabSet().
         set_size("200", "150").
         clear_constraints().
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_constraint("l_inset", 0).
         set_constraint("r_inset", 0).
         set_constraint("t_inset", 0).
         set_constraint("b_inset", 0).
         add(bt).
         set_which_one(bt).
         connect(on_tab_changed, Event.SELECTION_CHANGED).
         set_no_click_focus(1)
      self.add(tabs)
      self.connect(self.on_quit, Event.WINDOW_CLOSE_BUTTON)
      self.set_layout(GridLayout().set_extra("cells"))
      self.set_focus(bt.search_field.find_focus())
      set_label("Browser")
      return
   end
end

class BrowserTab(TabItem, BrowserUI)
   private readable
      settings,
      browser,
      prev_button,
      message_label,
      close_button,
      search_field,
      next_button,
      stop_button,
      home_button,
      paste_url_button,
      refresh_button,
      copy_page_url_item,
      save_page_item

   private on_close_button(ev)
      local t
      if *parent.children > 1 then {
         t := parent.children[parent.get_index(self) + 1 | 1]
         parent.
            remove(self).
            set_which_one(t).
            do_layout().
            invalidate()
      } else
         parent_dialog.dispose()
   end

   public get_label_width()
      return 100
   end

   private on_next(ev)
      browser.do_next()
   end

   private on_prev(ev)
      browser.do_prev()
   end

   public link_mrelease(url)
      parent_dialog.new_tab(url)
   end

   private copy_link(url)
      parent_dialog.own_selection(Selection.CLIPBOARD, URLSelectionOwner([url]))
   end

   public create_link_menu(url)
      local m
      m := Menu()
      m.add(TextMenuItem().
            set_label("Copy link").
            connect(create copy_link(url), Event.ACTION))
      return m
   end

   public create_image_menu(url, img_name, img_data, link_url)
      local m
      m := Menu()
      m.add(TextMenuItem().
            set_label("Copy image").
            connect(create copy_link(url), Event.ACTION))
      if \link_url then
         m.add(TextMenuItem().
               set_label("Copy link").
               connect(create copy_link(link_url), Event.ACTION))
      if \img_data then
         m.add(TextMenuItem().
               set_label("Save image...").
               connect(create do_save(img_name, img_data), Event.ACTION))
      return m
   end

   public update_grey(gs)
      prev_button.set_is_shaded(gs.prev)
      next_button.set_is_shaded(gs.nxt)
      refresh_button.set_is_shaded(gs.refresh)
      parent_dialog.copy_page_url_item.set_is_shaded(gs.copy_page)
      parent_dialog.save_page_item.set_is_shaded(gs.save_page)
      stop_button.set_is_shaded(gs.stop)
   end

   private on_search_field(ev)
      local s, u
      s := search_field.get_contents()
      if *s = 0 then
         fail
      if u := URL(s) then
         browser.goto(u)
      else
         msg("Invalid url")
   end

   public msg(s, n)
      message_label.set(TextPaint(s), n)
   end

   public clear_msg()
      message_label.set()
   end

   public browse_for_file()
      parent_dialog.file_dialog.show_modal(parent_dialog)
      return parent_dialog.file_dialog.get_result()
   end

   public do_save(name, data)
      local s
      parent_dialog.file_dialog.set_file(\name)
      parent_dialog.file_dialog.show_modal(parent_dialog)
      if s := parent_dialog.file_dialog.get_result() then {
         if Files.string_to_file(s, data) then
            msg("Saved OK", 3000)
         else
            msg(&why, 3000)
      }
      return self
   end

   private update_visited(url)
      local e, i 
      every i := 1 to *settings.visited do {
         e := settings.visited[i]
         if equals(url, e.url) then {
            e.last_time := Time()
            e.times +:= 1
            delete(settings.visited, i)
            push(settings.visited, e)
            return
         }
      }
      push(settings.visited, VisitedEntry(url))
      if *settings.visited > settings.visited_size then
         pull(settings.visited)
   end

   public set_url_field(url)
      update_visited(url)
      search_field.set_contents(url.str())
   end

   public set_title(s)
      /s := "Browser"
      set_paint(TextPaint(s))
   end

   private on_stop(ev)
      browser.cancel()
   end

   private on_home(ev)
      browser.goto(settings.home_url)
   end

   private handle_paste_response(target_type, data, e)
      if /data then
         fail
      data ?:= tab(upto('\r\n'))
      search_field.set_contents(data)
   end

   private on_paste_url(ev)
      parent_dialog.request_selection(Selection.CLIPBOARD, 
                        ["text/uri-list", Selection.UTF8_STRING_TARGET, Selection.STRING_TARGET], 
                        handle_paste_response, 
                        ev)
   end

   private on_refresh(ev)
      browser.do_refresh()
   end

   public new(u, pool, settings)
      cast(self,TabItem).new()
      self.settings := settings
      set_label_border(EmptyBorder().set_x_align(Align.L))
      set_title()
      setup()
      browser.set_ui(self).set_worker_pool(pool)
      if \u then {
         if is(u, URL) | (u := URL(u)) then
            browser.goto(u)
         else
            msg("Invalid url")
      } else
         on_home()
      return
   end

   private setup()
      local panel, border
      close_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(TextPaint("Close")).
         set_accel("c").
         connect(self.on_close_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(ImagePaint().set_cache("rpp.EXIT_24"))
      home_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(TextPaint("Home")).
         set_accel("n").
         connect(self.on_home, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(ImagePaint().set_cache("rpp.HOME_24"))
      refresh_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(TextPaint("Refresh")).
         connect(self.on_refresh, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(ImagePaint().set_cache("rpp.REFRESH_24"))
      prev_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(TextPaint("Prev")).
         connect(self.on_prev, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(ImagePaint().set_cache("rpp.PREV_24"))
      next_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(TextPaint("Next")).
         connect(self.on_next, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(ImagePaint().set_cache("rpp.NEXT_24"))
      stop_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(TextPaint("Stop")).
         connect(self.on_stop, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(ImagePaint().set_cache("rpp.STOP_24"))
      paste_url_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(TextPaint("Paste URL")).
         connect(self.on_paste_url, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(ImagePaint().set_cache("rpp.PASTE_24"))
      panel := Panel().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_align", Align.L).
         set_layout(GridLayout().set_doi(0).set_dii(2).set_extra("cells")).
         add(close_button).
         add(home_button).
         add(refresh_button).
         add(prev_button).
         add(next_button).
         add(stop_button).
         add(paste_url_button)
      self.add(panel)
      search_field := TextField().
         set_size("100").
         set_align(Align.C, Align.T).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         connect(self.on_search_field, Event.ACTION).
         set_contents("")
      self.add(search_field)
      browser := Browser().
         set_size("651", "337").
         set_font("sans,9").
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0)
      self.add(browser)
      border := CompoundBorder().
         set_outer(SunkenBorder()).
         set_inner(EmptyBorder().
            set_l_inset(3)).
         set_x_align(Align.L)
      message_label := MessageLabel().
         set_size("100").
         set_align(Align.L, Align.B).
         set_fg("red").
         clear_constraints().
         set_constraint("b_inset", 0).
         set_constraint("l_inset", 0).
         set_constraint("r_inset", 0).
         set_constraint("x_fill", &yes).
         set_border(border).
         set_paint(TextPaint(""))
      self.add(message_label)
      self.set_layout(GridLayout().set_extra("cells"))
   end
end

procedure main(a)
   local d, s, cookies, t, bak, settings, sf, home
   opts := options(a, "-k: -l! -agent:")
   home := FilePath(Files.get_home())
   sf := home.child(".oibrowser").str()
   cookies := \opts["k"] | System.getenv("OICOOKIES") | home.child(".oicookies").str()
   t := decode(Files.file_to_string(cookies)) | table()
   settings := decode(Files.file_to_string(sf)) | Settings()
   ImageCache.name_image("rpp.EXIT_24", EXIT)
   ImageCache.name_image("rpp.NEXT_24", NEXT)
   ImageCache.name_image("rpp.PREV_24", PREV)
   ImageCache.name_image("rpp.HOME_24", HOME)
   ImageCache.name_image("rpp.REFRESH_24", REFRESH)
   ImageCache.name_image("rpp.PASTE_24", PASTE)
   ImageCache.name_image("rpp.STOP_24", STOP)
   s := ucs(a[1])
   d := BrowserDialog(s, t, settings)
   d.show_modal()
   # Save cookies
   bak := cookies || ".bak"
   Files.string_to_file(bak, encode(Cookie.expire_cookies(t))) | 
      stop("Couldn't encode to temp cookie file ", bak, ": ", &why)
   # Use rename not move to ensure it's atomic
   Files.rename(bak, cookies) | stop("Couldn't rename cookie file ", bak, ": ", &why)
   # Save settings
   Files.string_to_file(sf, encode(settings))
end
