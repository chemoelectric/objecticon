import io, lang, util, ipl.options, ipl.lists, ipl.streams

procedure create_prog(imps, links)
   local tf, prog

   imps ++:= set("ipl.ieval")  # Avoid changing imps parameter
   prog := ""
   every prog ||:= "import " || !imps || "\n"
   prog ||:= "invocable all\n_
procedure main(imports, files, opts)\n_
    ipl.ieval.main_impl(imports, files, opts)\n_
end\n"
   return use {
      tf := Files.make_temp_filename("ieval"),
      compile(prog, tf, links),
      save_var{Files.remove(tf), &why}
   }
end

procedure compile(prog, tf, links)
   local p, ss
   ss := StringStream()
   use {
      p := FilterOutputStream(ss, "oit", ["-s", "-l", "2", "-o", tf, "-"] ||| links,, ss),
      p.write(prog)
   } | fail
   return if p.get_exit_info().param = 0 then
      lang.Prog.load(tf)
   else
      error(trim_stderr(ss.str()))
end

procedure main(a)
   local opts, prog, imports, links
   opts := options(a, "-i:*-l:*-w!-s!")
   imports := set()
   every insert(imports, !str2list(!\opts["i"]))
   links := \opts["l"] | []
   prog := create_prog(imports, links) | stop(&why)
   Prog.get_global("main", prog)(imports, a, opts)
end
