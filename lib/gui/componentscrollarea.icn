#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import util

class ComponentScrollAreaView(Component)
   public
      inner, 
      inner_w,
      inner_h

   public initially()
      \self.inner | runerr("no inner component specified")
      Component.initially()
   end

   public scrolled()
      inner.shift(self.x - parent.get_area_x() - inner.x,
                  self.y - parent.get_area_y() - inner.y)
   end

   public layout()
      inner.x := self.x - parent.get_area_x()
      inner.y := self.y - parent.get_area_y()
      inner.w := inner_w
      inner.h := inner_h
      inner.layout()
   end

   public size_inner()
      inner_w := max(inner.get_preferred_width(), parent.predict_view_width(parent.w, parent.vsb))
      inner_h := max(inner.get_preferred_height(inner_w), parent.predict_view_height(parent.h, parent.hsb))
   end

   public set_inner(inner)
      remove(\self.inner)
      self.inner := inner
      add(inner)
      return self
   end
end


#
# This class allows an arbitrary Component to be placed within 
# the ScrollArea.  The component is set with the {set_inner()}
# method.
#
class ComponentScrollArea(ScrollArea)
   private readable
      reset_layouts_on_size_inner_flag
      
   public set_inner(inner)
      view.set_inner(inner)
      return self
   end

   # This resets the layouts when the view's {size_inner} is called by
   # {layout}.  This is useful if some of the inner components alter
   # their preferred size when the surrounding component's size
   # changes (eg {TextDisplay} with "width" line splitting).  By
   # resetting the layout, the preferred widths are recalculated
   # before {inner} is laid out.
   #
   public set_reset_layouts_on_size_inner(s)
      self.reset_layouts_on_size_inner_flag := check_flag(s)
      return self
   end

   public layout()
      local i, t1, t2
      every i := 0 to 3 do {
         t1 := self.hsb
         t2 := self.vsb
         if \reset_layouts_on_size_inner_flag then
            reset_all_layouts()
         view.size_inner()
         invalidate_subject_width()
         invalidate_subject_height()
         ScrollArea.layout()
         if i > 0 & ((self.hsb === t1 & self.vsb === t2) | (\self.hsb & \self.vsb)) then
            break
      }
   end

   public get_default_subject_height(dw)
      return view.inner.get_preferred_height(dw)
   end

   public get_default_subject_width()
      return view.inner.get_preferred_width()
   end

   public calculate_subject_width()
      return view.inner_w 
   end

   public calculate_subject_height()
      return view.inner_h
   end

   public get_default_vertical_increment()
      return scale(10)
   end

   public get_default_horizontal_increment()
      return scale(10)
   end

   public refresh()
      view.scrolled()
      view.invalidate()
   end

   public ensure_visible(c)
      local x0, y0
      y0 := c.y - view.inner.y
      x0 := c.x - view.inner.x

      if y0 + c.h > get_area_y() + view.h then
         set_area_y(min(y0, y0 + c.h - view.h))
      else if y0 < get_area_y() then
         set_area_y(y0)

      if x0 + c.w > get_area_x() + view.w then
         set_area_x(min(x0, x0 + c.w - view.w))
      else if x0 < get_area_x() then
         set_area_x(x0)

      return self
   end

   public create_view()
      return ComponentScrollAreaView()
   end
end

