#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

$define LIB "objecticonmysqllib.so"

package mysql

import lang, util

#
# This class provides a wrapper around an MYSQL_RES object.
#
class MySqlRes(NoCopy)
   private
      ptr,
      fields

   #
   # Invoke mysql_num_fields() for the current connection.
   #
   public defer get_num_fields()

   #
   # Invoke mysql_fetch_field() for the current connection.
   #
   # @return an {MySqlField} instance
   #
   public fetch_field()
      return MySqlField!fetch_field_impl()
   end

   private defer fetch_field_impl()

   #
   # Invoke mysql_fetch_field_direct() for the current connection.
   #
   # @return an {MySqlField} instance
   #
   public fetch_field_direct(fieldnr)
      return MySqlField!fetch_field_direct_impl(fieldnr)
   end

   private defer fetch_field_direct_impl(fieldnr)

   #
   # Invoke mysql_fetch_fields() for the current connection.
   #
   # @return a list of {MySqlField} instances
   #
   public fetch_fields()
      local l, res
      l := fetch_fields_impl()
      res := []
      every put(res, MySqlField!(!l))
      return res
   end

   private defer fetch_fields_impl()

   #
   # Invoke mysql_field_seek() for the current connection.
   #
   public defer field_seek(offset)

   #
   # Invoke mysql_field_tell() for the current connection.
   #
   public defer field_tell(offset)

   #
   # Invoke mysql_fetch_lengths() for the current connection.
   #
   public defer fetch_lengths()

   #
   # Invoke mysql_fetch_row() for the current connection.
   #
   public defer fetch_row()

   #
   # Invoke mysql_row_seek() for the current connection.
   #
   public defer row_seek(offset)

   #
   # Invoke mysql_row_tell() for the current connection.
   #
   public defer row_tell(offset)

   #
   # Invoke mysql_data_seek() for the current connection.
   #
   public defer data_seek(offset)

   #
   # Invoke mysql_free_result() for the current connection.
   #
   public defer free()

   #
   # Invoke mysql_num_rows() for the current connection.
   #
   public defer get_num_rows()

   #
   # This uses {fetch_row()} and {fetch_fields()} together to provide a rather more
   # intelligent version of {fetch_row()}.   The column types are examined and the
   # strings are converted to appropriate Icon objects: integer for the integer types,
   # real for the floating point types, {Time} for the date/time types, and string for
   # the char/blob types.
   #
   public get_row()
      local row, res, f, t, o

      /fields := fetch_fields() | fail
      row := fetch_row() | fail

      res := []
      every f := !fields do {
         o := pop(row)
         if /o then 
            put(res)
         else {
            case f.get_type() of {
               MySql.FIELD_TYPE_LONGLONG |
                  MySql.FIELD_TYPE_INT24 |
                  MySql.FIELD_TYPE_YEAR |
                  MySql.FIELD_TYPE_TINY |
                  MySql.FIELD_TYPE_SHORT |
                  MySql.FIELD_TYPE_LONG :
                  put(res, integer(o)) | runerr("mysql client: expected integer type:", o)
               
               MySql.FIELD_TYPE_DECIMAL |
                  MySql.FIELD_TYPE_FLOAT |
                  MySql.FIELD_TYPE_DOUBLE :
                  put(res, real(o)) | runerr("mysql client: expected real:", o)
               
               MySql.FIELD_TYPE_NULL :
                  put(res)

               MySql.FIELD_TYPE_DATE : {
                  t := Time.parse(o, "yyyy-MM-dd") | runerr("mysql client: expected date:", o)
                  put(res, t)
               }
               
               MySql.FIELD_TYPE_TIME: {
                  t := Time.parse(o, "HH:mm:ss") | runerr("mysql client: expected time:", o)
                  put(res, t)
               }

               MySql.FIELD_TYPE_DATETIME |
                  MySql.FIELD_TYPE_TIMESTAMP: {
                  # Expect a string in a local timezone (may or may not be dst).
                  t := Time.parse(o, "yyyy-MM-dd HH:mm:ss") | runerr("mysql client: expected datetime:", o)
                  # Guess the timezone
                  t := Time(t.year, t.month, t.mday, t.hour, t.min, t.sec, Time(t.seconds).zone)
                  put(res, t)
               }

               MySql.FIELD_TYPE_ENUM |
                  MySql.FIELD_TYPE_SET |
                  MySql.FIELD_TYPE_TINY_BLOB |
                  MySql.FIELD_TYPE_MEDIUM_BLOB |
                  MySql.FIELD_TYPE_LONG_BLOB |
                  MySql.FIELD_TYPE_BLOB |
                  MySql.FIELD_TYPE_VAR_STRING |
                  MySql.FIELD_TYPE_STRING :
                  put(res, o)

               default:
                  runerr("mysql client: unknown coltype:", f.get_type())
            }
         }
      }

      return res
   end

   private static init()
      Class.load_library(LIB) | runerr("Couldn't load dynamic library " || &why)
   end

   package new(ptr)
      self.ptr := ptr
      return
   end
end


