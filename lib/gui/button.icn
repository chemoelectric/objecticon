#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import 
   graphics,
   util,
   lang

#
# This is the parent class of the button classes, including
# checkboxes.
#
# A {Button} produces a {Event.BUTTON_PRESS} when the button is
# depressed, and code {Event.BUTTON_RELEASE} when it is released,
# as well as an {Event.ACTION}.
# 
# By default, when a button holds the keyboard focus a dashed
# line appears just within the button.  Then, when return is
# pressed an {Event.ACTION} is generated.  The method
# {Dialog.set_initial_focus()} can be used to have the button
# have the focus when the dialog is first displayed.
#
# Buttons also repeatedly produce a {Event.BUTTON_HELD} whilst they
# are held down, rather like a repeating keyboard press.  The
# delay between the initial repeat event and subsequent repeat
# events is set in the {Style} object.
#
abstract class Button(Toggle,Component)
   public 
      is_down,
      parent_button_group,
      repeat_delay,
      no_click_focus_flag,
      toggles_flag,
      repeat_ticker,
      held_event

   public set_parent_button_group(x)
      self.parent_button_group := x
      return self
   end

   #
   # Set the no-click-focus behaviour.  If set, the component will
   # not get the focus on a left click.
   #
   public set_no_click_focus(s)
      self.no_click_focus_flag := check_flag(s)
      return self
   end

   public finally()
      stop_held()
      Component.finally()
   end

   public repeat_tick()
      repeat {
         # Note that repeat_delay can be null here: if we press and
         # hold over a greyed-out button, then the button is enabled,
         # and then we drag, we get the drag events (which start this
         # ticker), but not the original press, which would set
         # repeat_delay.
         if Prog.get_runtime_millis() > \repeat_delay then
            fire(Event.BUTTON_HELD, held_event)
         repeat_ticker.sleep(Gui.REPEAT_RATE)
      }
   end

   public start_held(ev)
      held_event := ev
      repeat_ticker.start()
   end

   public stop_held()
      repeat_ticker.stop()
   end

   public handle_lpress(e)
      local b
      if /self.is_down then {
         self.is_down := 1
         start_held(e)
         self.repeat_delay := Prog.get_runtime_millis() + Gui.REPEAT_DELAY
         every b := !(\self.parent_button_group).buttons do {
            if b.is_unhidden() & b.is_unshaded() then {
               parent_dialog.hold(b, e.code)
               b.repeat_delay := self.repeat_delay
            }
         }
         self.invalidate()
         fire(Event.BUTTON_PRESS, e)
      }
   end

   public handle_ldrag(e)
      #
      # Button held down; toggle on/off as it goes over the button 
      #
      if self.in_region(e) then {
         if /self.is_down then {
            self.is_down := 1
            start_held(e)
            invalidate()
         }
      } else
         clear_down()
   end

   public handle_lrelease(e)
      if \self.is_down then {
         clear_down()
         fire(Event.BUTTON_RELEASE, e)
         on_action(e)
      }
      repeat_delay := &null
   end

   public clear_down()
      if \self.is_down then {
         self.is_down := &null
         stop_held()
         invalidate()
      }
      return self
   end

   public on_action(e)
      if \self.toggles_flag then
         toggle_action(e)
      fire(Event.ACTION, e)
   end

   public on_interrupted()
      # Avoid a little glitch which happens when a button is greyed out
      # while held down, leaving it stuck like that, since it never gets the
      # release event.
      clear_down()
   end
   
   #
   # Visualize the given (keyboard) event, by making the button go down
   # for a short time (50ms), before making it go up again, and then
   # calling {on_action}
   #
   public visualize_action(e)
      local t
      if /self.is_down then {
         self.is_down := 1
         self.invalidate()
         t := Dispatcher.new_task{{
            t.sleep(50)
            clear_down()
            on_action(e)
            t.revert()
         }}
         t.start()
      }
      return self
   end

   public handle_accel(e)
      if /self.no_click_focus_flag then
         grab_focus(e)
      visualize_action(e)
   end

   public handle_key(e)
      if e.code === ("\r"|"\l"|" ") then
         visualize_action(e)
   end

   #
   # Set the checked status according to the given flag.
   #
   public set_is_checked(s)
      check_flag(s)
      if s ~=== self.is_checked_flag then {
         Toggle.set_is_checked(s)
         self.invalidate()
      }
      return self
   end

   public accepts_focus(e)
      if (\e).code === Mouse.LEFT_PRESS & \self.no_click_focus_flag then
         fail
      return Component.accepts_focus(e)
   end

   #
   # Set the button so that when it is pressed, it toggles
   # between two states, as indicated by the is_checked
   # flag.
   #
   # Instances of Checkbox have this flag on by default, but 
   # TextButton and IconButton do not.  When the flag is on,
   # the latter classes indicate their checked status by
   # showing the button as being "down".
   #
   public set_toggles(s)
      self.toggles_flag := check_flag(s)
      return self
   end

   public new()
      Component.new()
      repeat_ticker := Dispatcher.new_task{repeat_tick()}
      self.accepts_focus_flag := &yes
      connect(handle_lpress, Event.MOUSE_LEFT_PRESS)
      connect(handle_ldrag, Event.MOUSE_LEFT_DRAG)
      connect(handle_lrelease, Event.MOUSE_LEFT_RELEASE)
      connect(handle_key, Event.KEY_PRESS)
      connect(on_interrupted, Event.INTERRUPTED)
      return
   end
end
