package ipl.math

#-------------------------------------------------------------------------------
# Name:        integral.icn
# Purpose:     Numerical integration library
#
# Author:      Oleg Baharew aka ArqricCat (IDP Team)
#
# Created:     01.08.2013
# Copyright:   (c) IDP Team, 2013
# Licence:     MIT License

# Class summary:

#  Integral - a class that provides a set of numerical integration methods that are 
#  implemented as static methods of this class.

#  Methods defined in this class:
#     * left_rect(f,a,b,n) - method of left rectangles
#     * right_rect(f,a,b,n) - method of right rectangles
#     * middle_rect(f,a,b,n) - method of middle rectangles
#     * trap_meth(f,a,b,n) - trapezoidal method
#     * simpson(f,a,b,n) - simpson method
#     * three(f,a,b,n) - Newton-Cotes 3rd method
#     * gauss2(f,a,b,n) - Gauss two-point method
#     * auto(f,a,b,n) - integration with automatic step selection

import 
   util(Math)

class Integral()
   public static left_rect(f,a,b,n)
   local s,h,i,x
   s := 0.0
   h := (b-a)/n
   i := 0
   while i <= n do {
      x := a + i * h
      s +:= f(x)
      i +:= 1
   }
   return s * h
   end

   public static right_rect(f,a,b,n)
   local s,h,i,x
   s := 0.0
   h := (b-a)/n
   i := 1
   while i <= n do {
      x := a + i * h
      s +:= f(x)
      i +:= 1
   }
   return s * h
   end

   public static middle_rect(f,a,b,n)
   local s,h,i,x
   s := 0.0
   h := (b-a)/n
   i := 1
   while i <= n do {
      x := a + i * h - 0.5 * h
      s +:= f(x)
      i +:= 1
   }
   return s * h
   end

   public static trap_meth(f,a,b,n)
   local s,h,i,x
   s := (f(a)+f(b))/2.0
   h := (b-a)/n
   i := 1
   while i < n do {
      x := a + i * h
      s +:= f(x)
      i +:= 1
   }
   return s * h
   end

   public static simpson(f,a,b,n)
   local s,h,i,x
   s := 0
   n := 2 * n
   h := (b-a)/n
   i := 0
   while i <= n do {
      x := a + h * i
      if i = 0 | i = n then s +:= f(x) else {
         if i%2 = 0 then s +:= 2*f(x) else s +:= 4*f(x)     
     }
     i +:= 1
   }
   return s*(h/3.0)
   end

   public static three(f,a,b,n)
   local s,h,i,x
   s := 0
   h := (b-a)/n
   i := 0
   while i <= n do {
      x := a + h * i
      if i = 0 | i = n then s +:= f(x) else {
         if i%3 = 0 then s +:= 2*f(x) else s +:= 3*f(x)     
     }
     i +:= 1
   }
   return (3.0/8.0) * s * h
   end

   public static gauss2(f,a,b,n)
   local s,h,c,d,x,i
   s := 0.0
   h := (b - a) / n
   c := h / Math.sqrt(3.0)
   d := h - c
   x := 0.5 * (a + d)
   i := 1
   while i <= n do {
      s +:= f(x)
      x +:= c
      s +:= f(x)
      x +:= d
      i +:= 1 
   }
   return 0.5 * s * h
   end

   public static auto(f,a,b,eps)
   local s1,s2,n
   n := 2
   s1 := trap_meth(f,a,b,n)
   s2 := simpson(f,a,b,n)
   while abs(s1-s2) >= eps do {
      s1 := trap_meth(f,a,b,n)
      s2 := simpson(f,a,b,n)
      n *:= 2
   }
   return (s2 + 2*s1)/ 3.0
   end
end
