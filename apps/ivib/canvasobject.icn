import lang, util

class CanvasObject(SelectiveObjectCodec)
   public 
      parent_Canvas,           # Link to owning Canvas object
      name,                    # Object name
      class_name,              # Class name of object
      import_name,             # Name of import file
      class_variable

   #
   # Set the object's name.
   #
   public set_name(x)
      self.name := x
   end

   #
   # Get the object's name
   #
   public get_name()
      return self.name
   end

   #
   # Set the object's class name.
   #
   public set_class_name(x)
      self.class_name := x
   end

   #
   # Get the object's class name; avoid clash with lang's method name.
   #
   public get_the_class_name()
      return self.class_name
   end

   #
   # Set the object's import name.
   #
   public set_import_name(x)
      self.import_name := x
   end

   #
   # Get the object's import name
   #
   public get_import_name()
      return self.import_name
   end

   #
   # Set the class_variable flag; 1 if it is a class variable, &null if not
   #
   public set_class_variable(s)
      self.class_variable := to_flag(s)
   end

   #
   # Get the class_variable flag; 1 if it is a class variable, &null if not
   #
   public get_class_variable()
      return self.class_variable
   end

   #
   # Set the parent canvas.
   #
   public set_parent_Canvas(p)
      self.parent_Canvas := p
   end

   public gen_code(c)
      c.add_var(self.name, class_variable)
      c.line(self.name || " := " || self.class_name || "()")
      c.add_import(self.import_name, self.class_name)
   end      

   # Generate any other CanvasObjects below this one.
   public gen_cos()
   end

   public defer dup()

   # Duplicate and put in the given new Canvas.
   public dup_to(nc)
      local i
      i := dup()
      i.change_canvas(nc)
      return i
   end

   public unique_name()
      if self.parent_Canvas.find_name(self.name) ~=== self then
         self.name := self.parent_Canvas.get_new_name(self.name)
      every gen_cos().unique_name()
   end

   public rename()
      self.name := self.parent_Canvas.get_new_name(self.name)
      every gen_cos().rename()
   end

   public change_canvas(nc)
      self.parent_Canvas := nc
      every gen_cos().change_canvas(nc)
   end

   public dup_fields(c)
      c.name := self.name
      c.class_name := self.class_name
      c.import_name := self.import_name
      c.class_variable := self.class_variable
   end

   #
   # Traverse the tree of CanvasObjects rooted at this one.
   #
   public traverse_tree()
      self @ &source
      every gen_cos().traverse_tree()
   end

   public static get_template()
      suspend ["Parent Canvas", "parent_Canvas"] |
              ["Name", "name"] |
              ["Class Name", "class_name"] |
              ["Import Name", "import_name"] |
              ["Class Variable", "class_variable"]
   end
end


#
# Given a list of CanvasObjects, return a list of the objects' names.
#
procedure cos_names(l)
   local t
   t := []
   every put(t, (!l).get_name())
   return t
end

