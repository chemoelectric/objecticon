package ipl.server9p

import io, posix, ipl.options, util, gui

procedure usage_impl(s, opts)
   ewrite("Usage: ", get_progname(), s)
   if /opts then
      exit(1)
   else {
      options_help(opts)
      exit(0)
   }
end

procedure usage_0(opts)
   usage_impl(" [OPTIONS]", opts)
end

procedure usage_1(opts)
   usage_impl(" [OPTIONS] [ATTACH]", opts)
end

procedure get_progname()
   return FilePath(&progname).get(-1)
end

procedure get_optl()
   return [Opt("v",, "Verbose mode"),
           Opt("m",string, "PATH#Use PATH as the mount point, rather than the default, " || get_mountpt()),
           Opt("s",string, "FILE#Don't mount, instead post the pipe in /srv/FILE"),
           Opt("a",, "Use the MAFTER flag when mounting"),
           Opt("b",, "Use the MBEFORE flag when mounting"),
           Opt("c",, "Use the MCREATE flag when mounting"),
           Opt("C",, "Use the MCACHE flag when mounting")]
end

global opts, mountpt

procedure get_mountpt()
   local s
   if /mountpt then {
      s :=  get_progname()
      if s[-2:0] == "fs" then
         s[-2:0] := ""
      mountpt := "/n/" || s
   }
   return mountpt
end

procedure server_main_0(a, sess, sched, optl)
   /optl := get_optl()
   opts := options(a, optl, usage_0)
   server_main(, sess, sched)
end

procedure server_main_1(a, sess, sched, optl)
   local attach
   /optl := get_optl()
   opts := options(a, optl, usage_1)
   if /opts["s"] then {
      if *a = 0 then
         usage_1()
      attach := a[1]
   }
   server_main(attach, sess, sched)
end

procedure server_main(attach, sess, sched)
   local p, pid, pname, fl, s, mp
   pname := get_progname()
   p := FileStream.pipe() | stop(&why)
   pid := System.fork(ior(ForkOpt.RFPROC, ForkOpt.RFFDG, ForkOpt.RFNAMEG, ForkOpt.RFNOTEG)) | stop(&why)
   if pid = 0 then {
      p[1].close()
      if \opts["v"] then 
         sess.set_verbose(&yes)
      if /sched then
         sess.io(p[2])
      else
         async_sched_loop(sess, sched, p[2])
      p[2].close()
      if \opts["v"] then {
         sess.dump()
         system("cat /proc/" || System.getpid() || "/fd")
      }
      ewrite(pname, ": exit")
   } else {
      sess := &null
      p[2].close()
      if s := \opts["s"] then {
         Files.string_to_file("/srv/" || s, p[1].get_fd()) | stop(&why)
         ewrite(pname, ": serving on /srv/", s)
      } else {
         mp := \opts["m"] | get_mountpt()
         fl := if \opts["a"] then
            MountOpt.MAFTER
         else if \opts["b"] then
            MountOpt.MBEFORE
         else
            MountOpt.MREPL
         if \opts["c"] then
            fl := ior(fl, MountOpt.MCREATE)
         if \opts["C"] then
            fl := ior(fl, MountOpt.MCACHE)
         Files.mount(p[1], &null, mp, fl, attach) | stop(&why)
         ewrite(pname, ": mounted on ", mp)
      }
      p[1].close()
   }
   exit()
end

procedure async_sched_loop(sess, sched, f)
   local nb
   use {
      nb := NonBlockStream(f).set_close_underlying(&no),
      {
         sess.async_io(sched, nb)
         # Main loop
         until sched.empty() do
            sched.work_or_sleep()
      }
   }
end

procedure gui_main(attach, sess, async_flag, body)
   local p, pid, pname, nb, fn, fl, s, mp
   pname := get_progname()
   p := FileStream.pipe() | stop(&why)
   pid := System.fork(ior(ForkOpt.RFPROC, ForkOpt.RFFDG)) | stop(&why)
   if pid = 0 then {
      # child
      p[1].close()
      if \opts["v"] then 
         sess.set_verbose(&yes)
      use {
         nb := NonBlockStream(p[2]),
         {
            if /async_flag then
               sess.io_task(Dispatcher.scheduler, nb)
            else
               sess.async_io(Dispatcher.scheduler, nb)
            @body
         }
      }
      if \opts["v"] then {
         sess.dump()
         system("cat /proc/" || System.getpid() || "/fd")
      }
   } else {
      # parent
      p[2].close()
      if s := \opts["s"] then {
         fn := "/srv/" || s
         Files.string_to_file(fn, p[1].get_fd()) | stop(&why)
         ewrite(pname, ": serving on /srv/", s)
         System.wait(pid)
         Files.remove(fn)
      } else {
         mp := \opts["m"] | get_mountpt()
         fl := if \opts["a"] then
            MountOpt.MAFTER
         else if \opts["b"] then
            MountOpt.MBEFORE
         else
            MountOpt.MREPL
         if \opts["c"] then
            fl := ior(fl, MountOpt.MCREATE)
         if \opts["C"] then
            fl := ior(fl, MountOpt.MCACHE)
         Files.mount(p[1], &null, mp, fl, attach) | stop(&why)
         ewrite(pname, ": mounted on ", mp)
         System.wait(pid)
         Files.unmount(&null, mp)
      }
      p[1].close()
      ewrite(pname, ": exit")
   }
end
