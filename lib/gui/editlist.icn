#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

#
# This component functions in the same way as List above, but
# the item selected may be edited by the user.  An extra
# method is therefore supplied to get the content, as it may
# not correspond to an element of the list.
#
# A CONTENT_CHANGED event is generated when the value displayed in the
# field changes, either by selection from the list or user edit of the
# text.
#
class EditList(SelectionDropDown)
   public
      # The last event which changed the view via a change in selection (as opposed to editing).
      applied_event

   #
   # Set the text field's filter (see `TextField` for details).
   # :Parameters :
   # :  `c` - The filter
   #
   public set_filter(c)
      self.view.set_filter(c)
      return self
   end

   #
   # Return the contents of the selected item (which may have
   # been edited).
   #
   public get_contents()
      return self.view.get_contents()
   end

   #
   # Set the contents of the text to the given string; the
   # selection is set to any matching item in the list, or
   # left unchanged if there is no match.
   #
   public set_contents(x)
      self.view.set_contents(x)
      synch_selection()
      return self
   end

   # Set the list selection items to the list x, but then synchronize
   # the selection in the list with the view, rather than the other
   # way around (as `set_selection_list` does).
   #
   # :Parameters :
   # :  `The` - list of items
   #
   public synch_set_selection_list(x)
      self.selection_list := x
      /self.selection := 1
      constrain_selection()
      synch_selection()
      return self
   end

   public synch_selection()
      local s, i
      s := view.get_contents()
      every i := 1 to *selection_list do {
         if convert_element(selection_list[i]) == s then {
            selection := i
            return i
         }
      }
   end

   public was_applied(ev)
      succeed ev === applied_event
   end

   public apply_selection(ev)
      local s 
      s := convert_element(object_get_selection()) | view.get_contents()[1:1]
      if /ev then
         self.view.set_contents(s)
      else
         self.view.assign_contents(s,, applied_event := ev, &yes)
   end

   public on_textfield(ev, src, type)
      synch_selection()
      # Fire the event with self as source.
      fire(type, ev)
   end

   public create_view()
      return DropDownTextField()
   end

   public get_default_width()
      local t
      t := 0
      # Max string length + space for cursor (cf TextField's get_view() method)
      every t <:= self.cbwin.text_width((view.contents | convert_element(!self.selection_list)) || " ")
      return border.get_total_width() + b.get_preferred_width() + t + view.border.get_total_width()
   end

   public new()
      SelectionDropDown.new()
      every view.connect(self.on_textfield, Event.CONTENT_CHANGED | Event.ACTION)
      return
   end
end

#
# EditList in which changes/selection to the view/list are independent
#
class IndependentEditList(EditList)
   private old_selection

   # These two methods are overridden to do nothing, effectively
   # making the list and the textfield independent, so that
   # changes/selection from one don't affect the other.
   public apply_selection(ev) end
   public synch_selection() end

   public start_change(e)
      self.old_selection := self.selection
   end

   public end_change(e)
      if self.old_selection ~=== self.selection then
         fire(Event.SELECTION_CHANGED, e)
   end
end
