#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui


############################################################################
#
#
#
class CanvasRangeSpinDialog(CanvasComponentDialog)
   public 
      hi, 
      hi_flag, 
      value,
      lo, 
      lo_flag,
      increment_size

   public validate_input()
      local hi_val, lo_val, inc_val, init_val

      if hi_flag.is_checked() then 
         hi_val := numeric(hi.get_contents()) | return alert_error(self, "Hi is not numeric")

      if lo_flag.is_checked() then 
         lo_val := numeric(lo.get_contents()) | return alert_error(self, "Lo is not numeric")

      inc_val := numeric(increment_size.get_contents()) | return alert_error(self, "Increment is not numeric")
      init_val := numeric(value.get_contents()) | return alert_error(self, "Init value is not numeric")

      if init_val < \lo_val | init_val > \hi_val then
         return alert_error(self, "Init value is outside range")

      return cast(self,CanvasComponentDialog).validate_input()
   end

   public set_vals()
      local hi_val, lo_val, inc_val, init_val

      cast(self,CanvasComponentDialog).set_vals()

      if hi_flag.is_checked() then 
         hi_val := numeric(hi.get_contents())

      if lo_flag.is_checked() then 
         lo_val := numeric(lo.get_contents())

      inc_val := numeric(increment_size.get_contents())
      init_val := numeric(value.get_contents())

      c.hi := hi_val
      c.lo := lo_val
      c.increment_size := inc_val
      c.set_value(init_val)
      c.value := init_val
   end

   public on_hi_flag(ev)
      hi.toggle_is_shaded()
   end

   public on_lo_flag(ev)
      lo.toggle_is_shaded()
   end

   public setup()
      local l, l2, p

      cast(self,CanvasComponentDialog).setup()

      p := TabItem()
      p.set_layout(GridLayout("extra=borders"))
      add_tab_at_front(p)
      p.set_label("General")

      lo_flag := CheckBox()
      lo_flag.connect(self.on_lo_flag, Event.ACTION)
      lo_flag.set_label("Low")
      p.add(lo_flag)
      lo := TextField("c:eol")
      lo.set_size(100)
      lo.set_contents("")
      p.add(lo)

      hi_flag := CheckBox()
      hi_flag.connect(self.on_hi_flag, Event.ACTION)
      hi_flag.set_label("High")
      p.add(hi_flag)
      hi := TextField("c:eol")
      hi.set_size(100)
      hi.set_contents("")
      p.add(hi)

      l := Label()
      l.set_label("Value")
      p.add(l)
      value := TextField("c:eol")
      value.set_size(100)
      value.set_contents("")
      p.add(value)

      l2 := Label()
      l2.set_label("Increment")
      p.add(l2)
      increment_size := TextField("c:eol")
      increment_size.set_size(100)
      increment_size.set_contents("")
      p.add(increment_size)

      lo.set_filter(&digits ++ '.\-')
      hi.set_filter(&digits ++ '.\-')
      increment_size.set_filter(&digits ++ '.\-')
      value.set_filter(&digits ++ '.\-')

      if /c.hi then {
         hi.set_is_shaded(&yes)
      } else {
         hi_flag.set_is_checked(&yes)
         hi.set_contents(c.hi)
      }

      if /c.lo then {
         lo.set_is_shaded(&yes)
      } else {
         lo_flag.set_is_checked(&yes)
         lo.set_contents(c.lo)
      }

      value.set_contents(c.value)
      increment_size.set_contents(c.increment_size)
   end
end


