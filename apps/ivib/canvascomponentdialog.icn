#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui, lang

############################################################################
#
# Parent class for all CanvasComponent configuration dialogs.
#
class CanvasComponentDialog(Dialog)
   public 
      c,
      x_spec_list,             # EditLists for pos & size
      y_spec_list,             #              
      w_spec_list,             #              
      h_spec_list,             #              
      z_field,                 #              
      tab_field,
      set_w_default,           # CheckBoxes                     
      set_h_default,           #                     
      align_spec,              # List for align specification                 
      shaded,                  #              
      tooltip_field,           # PaintField - tooltip
      accel_flag,              # Accel on/off
      accel_tf,                # TextField - accel_tf
      pos_tab,                 # Tabs in TabSet              
      constraint_tab,
      orig_layout,
      layout_field,
      border_field,
      other_tab,               #                 
      code_tab,                #
      tabset,                  #                  
      set_x_fixed,             # CheckBoxes to fix pos/size                  
      set_y_fixed,             #                   
      set_w_fixed,             #                   
      set_h_fixed,             #                   
      has_initial_focus,       # CheckBox                        
      attrib_tab,              # Attribs tab
      event_tab,               # Event tab
      label,                   # Dialog title
      okay_result

   #
   # Get result flag
   #
   public get_okay_result()
      return self.okay_result
   end

   public on_set_w_default()
      w_spec_list.toggle_is_shaded()
   end

   public on_set_h_default()
      h_spec_list.toggle_is_shaded()
   end

   public on_accel_flag()
      accel_tf.toggle_is_shaded()
   end

   public on_cancel()
      self.dispose()
   end

   public on_okay()
      self.validate_input() | fail
      self.set_vals()
      self.okay_result := &yes
      self.dispose()
   end

   #
   # Add the tab to the TabSet
   #
   public add_tab(t, i) 
      t.label_border.x_align := Align.L
      tabset.add_tab(t, i)
   end

   #
   # Add the tab to the TabSet, as the first item
   #
   public add_tab_at_front(t) 
      t.label_border.x_align := Align.L
      tabset.add_tab(t, 1)
   end

   public on_layout_change()
      # Need to set here to update the pos settings below.
      c.set_layout(layout_field.get_contents())

      if \pos_tab then {
         if c.allows_null_width() then
            set_w_default.set_is_shaded(&no)
         else {
            set_w_default.set_is_shaded(&yes)
            set_w_default.set_is_checked(&no)
            w_spec_list.set_is_shaded(&no)
         }

         if c.allows_null_height() then 
            set_h_default.set_is_shaded(&no)
         else {
            set_h_default.set_is_shaded(&yes)
            set_h_default.set_is_checked(&no)
            h_spec_list.set_is_shaded(&no)
         }
      }
   end

   #
   # Set up the dialog fields.  This will be called from the initially method
   # of subclasses.
   #
   public setup()
      local l, oc, size_list

      set_layout(GridLayout())

      size_list := ["0", "20%", "25%", "33%", "40%", "50%", "66%", "75%", "80%", "100%"]

      Class.get_name(c) ? {
         ="Canvas"
         label := tab(0) || " Setup"
      }

      tabset := ListTabSet().set_constraint("eol", &yes)
      self.set_focus(tabset.dl)
      add(tabset)

      if c.allows_positioning() then {
         pos_tab := TabItem().set_label("Pos & Size").set_layout(GridLayout().set_extra("borders"))
         add_tab(pos_tab)

         l := Label()
         l.set_label("Alignment : ")
         pos_tab.add(l)

         align_spec := XYAlignList().set_constraint("eol", &yes)
         align_spec.set_align(c.x_align, c.y_align)
         pos_tab.add(align_spec)

         l := Label()
         l.set_label("X : ")
         pos_tab.add(l)

         x_spec_list := EditList()
         x_spec_list.set_size(scale(100))
         x_spec_list.set_selection_list(size_list)
         x_spec_list.set_contents(c.x_spec)
         pos_tab.add(x_spec_list)

         set_x_fixed := CheckBox().set_constraint("eol", &yes)
         set_x_fixed.set_label("Fix")
         if \c.x_fixed then
            set_x_fixed.set_is_checked(&yes)
         pos_tab.add(set_x_fixed)

         if /c.x_spec then {
            x_spec_list.set_is_shaded(&yes)
            set_x_fixed.set_is_shaded(&yes)
         }

         l := Label()
         l.set_label("Y : ")
         pos_tab.add(l)

         y_spec_list := EditList()
         y_spec_list.set_size(scale(100))
         y_spec_list.set_selection_list(size_list)
         y_spec_list.set_contents(c.y_spec)
         pos_tab.add(y_spec_list)

         set_y_fixed := CheckBox().set_constraint("eol", &yes)
         set_y_fixed.set_label("Fix")
         if \c.y_fixed then
            set_y_fixed.set_is_checked(&yes)
         pos_tab.add(set_y_fixed)

         if /c.y_spec then {
            y_spec_list.set_is_shaded(&yes)
            set_y_fixed.set_is_shaded(&yes)
         }

         l := Label()
         l.set_label("W : ")
         pos_tab.add(l)

         w_spec_list := EditList()
         w_spec_list.set_size(scale(100))
         w_spec_list.set_selection_list(size_list)
         pos_tab.add(w_spec_list)

         set_w_fixed := CheckBox()
         set_w_fixed.set_label("Fix")
         if \c.w_fixed then
            set_w_fixed.set_is_checked(&yes)
         pos_tab.add(set_w_fixed)

         set_w_default := CheckBox().set_constraint("eol", &yes).set_constraint("w", 2)
         set_w_default.connect(self.on_set_w_default, Event.ACTION)
         set_w_default.set_label("Default")

         if /c.w_spec then {
            set_w_default.set_is_checked(&yes)
            w_spec_list.set_is_shaded(&yes)
            w_spec_list.set_contents(c.w)
         } else {
            w_spec_list.set_contents(c.w_spec)
            c.allows_null_width() | set_w_default.set_is_shaded(&yes)
         }

         pos_tab.add(set_w_default)

         l := Label()
         l.set_label("H : ")
         pos_tab.add(l)

         h_spec_list := EditList()
         h_spec_list.set_size(scale(100))
         h_spec_list.set_selection_list(size_list)
         pos_tab.add(h_spec_list)

         set_h_fixed := CheckBox()
         set_h_fixed.set_label("Fix")
         if \c.h_fixed then
            set_h_fixed.set_is_checked(&yes)
         pos_tab.add(set_h_fixed)

         set_h_default := CheckBox().set_constraint("eol", &yes).set_constraint("w", 2)
         set_h_default.connect(self.on_set_h_default, Event.ACTION)
         set_h_default.set_label("Default")
         if /c.h_spec then {
            set_h_default.set_is_checked(&yes)
            h_spec_list.set_is_shaded(&yes)
            h_spec_list.set_contents(c.h)
         } else {
            h_spec_list.set_contents(c.h_spec)
            c.allows_null_height() | set_h_default.set_is_shaded(&yes)
         }

         pos_tab.add(set_h_default)

         l := Label()
         l.set_label("Z : ")
         pos_tab.add(l)

         z_field := TextField().set_width(scale(100)).set_filter(&digits)
         z_field.set_contents(c.z)
         pos_tab.add(z_field)
      }

      self.attrib_tab := MapTab().set_label("WAttribs").set_table(stringify_wattribs(c.wattribs))
      add_tab(self.attrib_tab)

      code_tab := CodeTab(c)
      add_tab(code_tab)

      other_tab := TabItem().set_label("Other")
      other_tab.set_layout(GridLayout())
      add_tab(other_tab)

      tooltip_field := PaintField().set_constraint("eol", &yes).set_constraint("w", 2).set_title(Label().set_label("Tooltip"))
      other_tab.add(tooltip_field)
      tooltip_field.set_contents(c.tooltip)

      accel_flag := CheckBox()
      accel_flag.connect(self.on_accel_flag, Event.ACTION)
      accel_flag.set_label("Set Accelerator")
      other_tab.add(accel_flag)

      accel_tf := TextField().set_constraint("eol", &yes)
      accel_tf.set_size(scale(125))
      other_tab.add(accel_tf)

      if /c.accel then
         accel_tf.set_is_shaded(&yes)
      else  {
         accel_flag.set_is_checked(&yes)
         accel_tf.set_contents(c.accel)
      }

      shaded := CheckBox().set_constraint("eol", &yes).set_constraint("w", 2)
      shaded.set_label("Is shaded")
      if \c.is_shaded_flag then
         shaded.set_is_checked(&yes)
      other_tab.add(shaded)

      has_initial_focus := CheckBox().set_constraint("eol", &yes).set_constraint("w", 2)
      has_initial_focus.set_label("Has initial focus")
      if c.parent_Canvas.initial_focus === c then
         has_initial_focus.set_is_checked(&yes)
      other_tab.add(has_initial_focus)

      orig_layout := c.layout_delegate
      if c.allows_add() then {
         other_tab.add(Label().set_label("Layout"))
         layout_field := LayoutField().set_constraint("eol", &yes)
         layout_field.set_contents(c.layout_delegate)
         layout_field.connect(self.on_layout_change, Event.SELECTION_CHANGED)
         other_tab.add(layout_field)
      }

      if \c.border then {
         other_tab.add(Label().set_label("Border"))
         border_field := BorderField().set_constraint("eol", &yes)
         border_field.set_contents(c.border_opts)
         other_tab.add(border_field)
      }

      other_tab.add(Label().set_label("Tab order:"))
      tab_field := TextField().set_width(scale(100)).set_filter(&digits)
      tab_field.set_contents(c.tab_ord)
      other_tab.add(tab_field)

      event_tab := EventTab(copy(c.event_handlers), code_tab.name)
      add_tab(event_tab)

      if c.allows_positioning() then {
         constraint_tab := MapTab().set_label("Constraints").set_table(stringify_constraints(c.constraints))
         add_tab(constraint_tab)
      }

      oc := OkCancel()
      oc.listen(self)
      self.add(oc)

      # Default title.
      self.set_label(label)
   end

   #
   # Validate data
   #
   public validate_input()
      util_check_attribs(self, attrib_tab.get_table(), Gui.CONTEXT_WATTRIB_SET) | fail
      if \constraint_tab then
         util_check_constraints(self, constraint_tab.get_table()) | fail

      code_tab.validate_input() | fail

      if \pos_tab then {
         if x_spec_list.is_unshaded() then
            parse_pos(0, x_spec_list.get_contents()) | return alert_error(self, "Invalid x specification")
         if y_spec_list.is_unshaded() then
            parse_pos(0, y_spec_list.get_contents()) | return alert_error(self, "Invalid y specification")
         if w_spec_list.is_unshaded() then
            parse_pos(0, w_spec_list.get_contents()) | return alert_error(self, "Invalid w specification")
         if h_spec_list.is_unshaded() then
            parse_pos(0, h_spec_list.get_contents()) | return alert_error(self, "Invalid h specification")

         if \c.parent.layout_delegate then {
            if w_spec_list.is_unshaded() & not(integer(w_spec_list.get_contents())) then
               return alert_error(self, "Can't use % width in a layout")
            if h_spec_list.is_unshaded() & not(integer(h_spec_list.get_contents())) then
               return alert_error(self, "Can't use % height in a layout")
         }
      }

      return
   end

   #
   # Copy the fields back to c
   #
   public set_vals()
      local d

      if \border_field then
         c.set_border_opts(border_field.get_contents())

      if \pos_tab then {
         c.x_spec := if x_spec_list.is_shaded() then &null else x_spec_list.get_contents()
         c.y_spec := if y_spec_list.is_shaded() then &null else y_spec_list.get_contents()
         c.w_spec := if w_spec_list.is_shaded() then &null else w_spec_list.get_contents()
         c.h_spec := if h_spec_list.is_shaded() then &null else h_spec_list.get_contents()
         c.z := integer(z_field.get_contents())
         c.parent.compute_z_order()
         c.tab_ord := integer(tab_field.get_contents())
         c.parent.compute_tab_order()

         c.x_fixed := set_x_fixed.get_status()
         c.y_fixed := set_y_fixed.get_status()
         c.w_fixed := set_w_fixed.get_status()
         c.h_fixed := set_h_fixed.get_status()

         c.set_align(align_spec.get_x_align(), align_spec.get_y_align())
      }

      c.is_shaded_flag := shaded.get_status()
      c.tooltip := tooltip_field.get_contents()
      c.accel := if accel_flag.is_checked() then accel_tf.get_contents() else &null
      if has_initial_focus.is_checked() then
         c.parent_Canvas.initial_focus := c
      else {
         #
         # Clear if already set to this object
         #
         if c.parent_Canvas.initial_focus === c then
            c.parent_Canvas.initial_focus := &null
      }

      code_tab.set_vals()
      c.wattribs := normalize_wattribs(attrib_tab.get_table())

      c.event_handlers := event_tab.get_contents()

      if c.layout_delegate ~=== orig_layout then {
         if \c.layout_delegate then {
            every d := !c.children do {
               d.layout_safe()
            }
         } else {
            every d := !c.children do {
               d.x_spec := d.x - c.x
               d.y_spec := d.y - c.y
            }
         }
      }

      # If present, do the constraint tab.
      if \constraint_tab then
         c.constraints := normalize_constraints(constraint_tab.get_table())
   end

   public new(c)
      Dialog.new()
      self.c := c
      setup()
      return
   end
end


