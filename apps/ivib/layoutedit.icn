#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui, io, lang

############################################################################
#
#
#
class LayoutEdit(Dialog)
   public 
      c,
      label,                   # Dialog title
      tabset,
      code_tab,
      okay_result

   #
   # Add the tab to the TabSet
   #
   public add_tab(t) 
      tabset.add(t)
   end

   #
   # Add the tab to the TabSet, as the first item
   #
   public add_tab_at_front(t) 
      tabset.add(t, 1)
   end

   public setup()
      local oc
      Class.get_name(c) ? {
         ="Canvas"
         label := tab(0) || " Setup"
      }
      self.set_label(label)

      set_layout(GridLayout())

      tabset := TabSet().set_constraint("eol", &yes)
      add(tabset)

      code_tab := CodeTab(c)
      tabset.add(code_tab)

      oc := OkCancel()
      oc.listen(self)
      self.add(oc)
   end

   public on_cancel()
      self.dispose()
   end

   public validate_input()
      code_tab.validate_input() | fail
      return
   end

   public on_okay()
      self.validate_input() | fail
      self.set_vals(c)
      self.okay_result := &yes
      self.dispose()
   end

   public set_vals()
      code_tab.set_vals()
   end

   public new(c)
      Dialog.new()
      self.c := c
      setup(c)
      return
   end
end


class GridLayoutEdit(LayoutEdit)
   public
      set_doi,
      doi_field,
      set_dii,
      dii_field,
      extra_list

   public on_set_doi()
      doi_field.toggle_is_shaded()
   end

   public on_set_dii()
      dii_field.toggle_is_shaded()
   end

   public setup()
      local p
      LayoutEdit.setup()
      p := TabItem().set_label("General")
      p.set_layout(GridLayout().set_extra("borders"))
      add_tab_at_front(p)

      set_doi := CheckBox().set_label("Default outer inset :")
      set_doi.connect(self.on_set_doi, Event.ACTION)
      p.add(set_doi)
      doi_field := TextField().set_size(scale(130)).set_constraint("eol", &yes)
      p.add(doi_field)
      if \c.doi_val then {
         set_doi.set_is_checked(&yes)
         doi_field.set_contents(c.doi_val)
      } else
         doi_field.set_is_shaded(&yes)

      set_dii := CheckBox().set_label("Default inner inset :")
      set_dii.connect(self.on_set_dii, Event.ACTION)
      p.add(set_dii)
      dii_field := TextField().set_size(scale(130)).set_constraint("eol", &yes)
      p.add(dii_field)
      if \c.dii_val then {
         set_dii.set_is_checked(&yes)
         dii_field.set_contents(c.dii_val)
      } else
         dii_field.set_is_shaded(&yes)

      p.add(Label().set_label("Extra space"))
      extra_list := List().set_size(scale(130)).set_selection_list(["Cells","Borders","Ignore"])
      p.add(extra_list)
      extra_list.set_selection(case c.extra of {
         "cells": 1
         "borders": 2
         "ignore": 3
         default : stop("Bad value for extra:", c.extra)
      })
   end

   public set_vals()
      LayoutEdit.set_vals()

      if set_doi.is_checked() then {
         if c.doi_val := integer(doi_field.get_contents()) then
            c.set_doi(c.doi_val)
      } else {
         c.doi_val := &null
         c.set_doi(GridLayout.DEFAULT_OUTER_INSET)
      }

      if set_dii.is_checked() then {
         if c.dii_val := integer(dii_field.get_contents()) then
            c.set_dii(c.dii_val)
      } else {
         c.dii_val := &null
         c.set_dii(GridLayout.DEFAULT_INNER_INSET)
      }

      c.extra := case extra_list.get_selection() of {
         1: "cells"
         2: "borders"
         3: "ignore"
      }
   end
end


