package gui

import 
   ipl.sort,
   ipl.lists,
   ipl.filegui,
   io

#
#
# Directory dialog class.  This class provides a standard directory selection dialog.
#
# @example
# @ d := DirectoryDialog()
# @ d.show_modal()
# @ write(d.get_result() | "cancelled")
#
class DirectoryDialog(Dialog)
   public
      show_hidden_menu_item,
      tools_menu,
      tools_menu_button,
      home_button, 
      up_button, 
      cancel_button, 
      okay_button,
      init_dirs,         # Directory choices
      res,               # Resulting file path          
      message_label, 
      tree, 
      dir, 
      existing_file_mode

   public static const
      WARN, IGNORE, REQUIRE, DISALLOW
   
   private static init()
      WARN := "warn"
      IGNORE := "ignore"
      REQUIRE := "require"
      DISALLOW := "disallow"
   end

   public set_existing_file_mode(s)
      existing_file_mode := s
      return self
   end

   public component_setup()
      local root_node, d
      #
      # Defaults and extra dirs.
      #
      /init_dirs := []
      dir.set_selection_list(get_favourites_directories()).set_selection(1)
      root_node := TreeNode()
      every d := Files.get_roots() do
         root_node.add(TreeNode().set_label(ListEntry(ucs(d), Files.lstat(d), Files.stat(d))).set_always_expandable(&yes))
      tree.set_root_node(root_node)
      res := &null
   end

   public init_dialog()
      res := &null
      set_focus(dir.find_focus())
      win.set_min_size(win.get_width(), win.get_height())
      # Do this here as we need the tree to be setup so that we
      # can scroll to the selected dir.
      goto_dir(dir.get_contents())
   end

   #
   # Given a TreeNode n, load its children with the sub-directories.
   #
   public load_subtree(n)
      local s, e, l
      s := get_full_path(n).str()
      n.clear_children()
      l := list_directory(s) | fail
      every e := !l do
         n.add(TreeNode().set_label(e).set_always_expandable(&yes))
      return self
   end

   public list_directory(s)
      local e, dir_list, l, t
      l := Files.ucs_list(s, ListEntryWithIcon) | fail
      dir_list := []
      every e := !l do {
         t := e.name
         if e.stat.mode_str[1] == "d" &
            not(Files.is_relative_dir(t)) &
            (show_hidden_menu_item.is_checked() | 
               not(Files.is_hidden(t))) then
            put(dir_list, e)
      }
      return isort(dir_list, Files.name_key)
   end

   #
   # Given a TreeNode n, return a {FilePath} path it represents by traversing
   # up the tree structure to the root and converting to a {FilePath}.
   #
   public get_full_path(n)
      local l
      l := []
      repeat {
         push(l, n.get_label().name)
         n := n.get_parent()
         if n === tree.get_root_node() then
            break
      }
      return FilePath.from_list(l)
   end

   public on_tree_expansion()
      local n
      n := tree.get_last_expanded()
      #
      # Check whether it was an expansion or a contraction.  If
      # an expansion, load the subtree and refresh the tree.
      #
      if n.is_expanded() then {
         if load_subtree(n) then
            check_existing()
         else
            msg(&why)
         tree.tree_structure_changed()
      }
   end

   public on_tree_selection(ev)
      dir.set_contents(get_full_path(tree.object_get_selections()[1]).liberal_ucs())
      check_existing()
   end

   public on_dir(ev)
      if member(EditList.NAVIGATE, ev.code) then
         goto_dir(dir.get_contents())
      else
         check_existing()
   end

   #
   # Get the result, (will fail if cancel was pressed).
   #
   public get_result()
      return (\self.res).str()
   end

   #
   # Get the result, as a `FilePath` (will fail if cancel was pressed).
   #
   public get_result_path()
      return \self.res
   end

   #
   # Set the initial directory.  It should be in canonical form.
   #
   public set_directory(s)
      self.init_dirs := [s]
      return self
   end

   #
   # Set the initial directories as a list; the first is the one
   # initially shown.  Each entry should be in canonical form.
   #
   public set_directories(l)
      self.init_dirs := l
      return self
   end

   #
   # Keep the directory last selected by this dialog.
   #
   public keep_directory()
      return set_directory(get_dir_path().str())
   end

   public get_dir_path()
      return FilePath(dir.get_contents()).canonical()
   end

   public goto_dir(d)
      local n, s, p, ps, err, i
      p := FilePath(d).canonical()
      n := tree.get_root_node()
      every s := p.gen() do {
         n := find_child(n, s) | break
         load_subtree(n) | {
            err := &why
            break
         }
         n.set_expanded(&yes)
      }

      tree.tree_structure_changed()
      i := tree.find_line(n)
      tree.
         set_selections([i]).
         set_cursor(i).
         center_line(i)

      dir.set_contents(p.liberal_ucs())
      ps := p.str()
      if \err then
         msg(err)
      else if Files.is_directory(ps) then
         check_existing()
      else
         msg("Not a dir: " || ps)
   end

   public find_child(n, s)
      local n1
      every n1 := !n.children do {
$ifdef _MS_WIN32
         if map(n1.label.name) == map(s) then
            return n1
$else
         if n1.label.name == s then
            return n1
$endif
      }
   end

   public check_existing()
      local f
      clear_msg()
      f := get_dir_path().str()
      if Files.access(f) then {
         if not Files.is_directory(f) then
            msg("Not a directory")
         else if existing_file_mode === (WARN | DISALLOW) then
            msg("Existing directory")
      }
   end

   public on_okay_button()
      local f, fs
      f := get_dir_path()
      fs := f.str()
      if Files.access(fs) & not Files.is_directory(fs) then {
         msg("Selected file is not a directory")
         fail
      }
      case existing_file_mode of {
         REQUIRE: {
            if not Files.access(fs) then {
               msg("Selected directory doesn't exist")
               fail
            }
         }
         DISALLOW: {
            if Files.access(fs) then {
               msg("Selected directory already exists")
               fail
            }
         }
      }
      self.res := f
      self.dispose()
   end

   public on_cancel_button()
      self.dispose()
   end

   public on_show_hidden_menu_item(ev)
      local n
      n := tree.object_get_selections()[1] | fail
      goto_dir(get_full_path(n).str())
   end

   public on_up_button(ev)
      local t
      t := self.get_dir_path()
      if t.size() > 1 then
         goto_dir(t.parent().str())
      else
         msg("At root")
   end

   public on_home_button(ev)
      goto_dir(Files.get_home())
   end

   public on_refresh_menu_item(ev)
      local n
      n := tree.object_get_selections()[1] | fail
      if load_subtree(n) then
         check_existing()
      else
         msg(&why)
      tree.tree_structure_changed()
   end

   public on_new_dir_menu_item(ev)
      local d, s
      d := NewDirectoryDialog()
      d.show_modal(self)
      if \d.okay then {
         s := self.get_dir_path().child(d.result).str()
         if Files.mkdir(s) then
            goto_dir(s)
         else
            msg("mkdir failed: " || &why)
      }
   end

   public msg(s)
      message_label.set_label(s)
   end

   public clear_msg()
      msg("")
   end

   public new()
      cast(self,Dialog).new()
      self.setup()
      tools_menu.set_border_mid(NullBorder())
      # Try themed icon buttons
      theme_toolbar_button(home_button, "go-home")
      theme_toolbar_button(up_button, "go-up")
      theme_toolbar_button(tools_menu_button, "applications-system")

      tree.
         set_fixed_col_w(16 + 2 * 2).
         set_item_paint(IconFilesItemPaint()).
         set_item_border(EmptyBorder().
                            set_insets(2, Gui.TEXT_INSET, 0, 0).
                            set_x_align(Align.L))
         
      existing_file_mode := IGNORE
      return
   end

   public end_dialog()
   end

   public get_favourites_directories()
      local t
      t := copy(init_dirs)
      every put(t,
                Files.getcwd() | 
                FavouriteDirectoriesDialog.gen_directories())
      return lunique(FileDialog.ucs_list(t))
   end

   public on_favourite_dirs_menu_item(ev)
      local d
      d := FavouriteDirectoriesDialog()
      d.show_modal(self)
      \d.okay | fail
      dir.selection_list := get_favourites_directories()
      dir.constrain_selection().synch_selection()
   end

   private setup()
      local paint_2, favourite_dirs_menu_item, paint_45, layout_7, refresh_menu_item, paint_11, paint_42, layout_4, panel_4, paint_47, paint_1, paint_9, paint_44, layout_6, paint_10, paint_3, panel_3, paint_46, paint, new_dir_menu_item, paint_43, paint_35
      self.set_label("Select directory")
      self.set_resize(&yes)
      paint_45 := ImagePaint().
         set_cache("gui.CONFIGURE_24")
      paint_42 := TextPaint("New directory...")
      new_dir_menu_item := TextMenuItem().
         connect(on_new_dir_menu_item, Event.ACTION).
         set_paint_mid(paint_42)
      paint_43 := TextPaint("Favourite dirs...")
      favourite_dirs_menu_item := TextMenuItem().
         connect(on_favourite_dirs_menu_item, Event.ACTION).
         set_paint_mid(paint_43)
      paint_44 := TextPaint("Show hidden files")
      show_hidden_menu_item := CheckBoxMenuItem().
         connect(on_show_hidden_menu_item, Event.ACTION).
         set_paint_mid(paint_44)
      paint_46 := TextPaint("Refresh")
      refresh_menu_item := TextMenuItem().
         connect(on_refresh_menu_item, Event.ACTION).
         set_paint_mid(paint_46)
      tools_menu := Menu().
         set_paint_mid(paint_45).
         add(new_dir_menu_item).
         add(favourite_dirs_menu_item).
         add(show_hidden_menu_item).
         add(refresh_menu_item)
      paint_47 := TextPaint("Tools")
      tools_menu_button := MenuButton().
         clear_constraints().
         set_tooltip(paint_47).
         set_menu(tools_menu)
      paint_1 := ImagePaint().
         set_cache("gui.HOME_24")
      paint := TextPaint("Home")
      home_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint).
         connect(self.on_home_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_1)
      paint_3 := ImagePaint().
         set_cache("gui.UP_24")
      paint_2 := TextPaint("Up")
      up_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_2).
         connect(self.on_up_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_3)
      layout_6 := GridLayout().
         set_doi(0).
         set_dii(2).
         set_extra("cells")
      panel_4 := Panel().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_align", Align.L).
         set_layout(layout_6).
         add(tools_menu_button).
         add(home_button).
         add(up_button)
      self.add(panel_4)
      tree := ItemPaintTree().
         set_size("390", "272").
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         connect(self.on_tree_expansion, Event.TREE_NODE_EXPANSION).
         connect(self.on_tree_selection, Event.SELECTION_CHANGED).
         set_select_mode(Select.ONE).
         set_show_root(&no)
      self.add(tree)
      paint_35 := TextPaint("Directory")
      dir := EditList().
         set_size("150").
         set_align(Align.L, Align.B).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_tooltip(paint_35).
         connect(self.on_dir, Event.ACTION).
         connect(self.on_dir, Event.CONTENT_CHANGED).
         set_selection_list([""])
      self.add(dir)
      paint_9 := TextPaint("Okay")
      okay_button := TextButton().
         set_align(Align.L, Align.B).
         clear_constraints().
         connect(self.on_okay_button, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_9)
      paint_10 := TextPaint("Cancel")
      cancel_button := TextButton().
         set_align(Align.L, Align.B).
         clear_constraints().
         connect(self.on_cancel_button, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_10)
      paint_11 := TextPaint("")
      message_label := Label().
         set_size("130").
         set_align(Align.L, Align.B).
         set_fg("red").
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_paint(paint_11)
      layout_4 := GridLayout().
         set_doi(0).
         set_extra("cells")
      panel_3 := Panel().
         clear_constraints().
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_layout(layout_4).
         add(okay_button).
         add(cancel_button).
         add(message_label)
      self.add(panel_3)
      layout_7 := GridLayout().
         set_extra("cells")
      self.set_layout(layout_7)
   end
end

### Ivib-v2 layout: layouts/$.layout
