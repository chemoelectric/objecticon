#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import graphics

class Event()
   public static const
      MOUSE_LEFT_PRESS,
      MOUSE_MIDDLE_PRESS,
      MOUSE_RIGHT_PRESS,
      MOUSE_LEFT_RELEASE,
      MOUSE_MIDDLE_RELEASE,
      MOUSE_RIGHT_RELEASE,
      MOUSE_LEFT_DRAG,
      MOUSE_MIDDLE_DRAG,
      MOUSE_RIGHT_DRAG,
      MOUSE_MOVEMENT,
      MOUSE_WHEEL_UP,
      MOUSE_WHEEL_DOWN,
      WINDOW_RESIZE,
      WINDOW_CLOSE_BUTTON,
      # The synthetic event for invocation via the event queue.
      INVOKE_LATER,        
      # This event listens for all window-system generated events
      ICON,
      BUTTON_RELEASE,
      BUTTON_PRESS,
      BUTTON_HELD,
      SELECTION_CHANGED,
      CONTENT_CHANGED,
      CURSOR_MOVED,
      VALUE_CHANGED,
      ACTION,
      TREE_NODE_EXPANSION,
      SIZER_PRESS,
      SIZER_DRAG,
      SIZER_RELEASE,
      MOUSE_ENTER,
      MOUSE_EXIT,
      KEY_PRESS,
      KEY_RELEASE,
      TICK,
      GOT_FOCUS,
      LOST_FOCUS,
      DIALOG_CLOSED

   private static init()
      MOUSE_LEFT_PRESS := Mouse.LEFT_PRESS
      MOUSE_MIDDLE_PRESS := Mouse.MIDDLE_PRESS
      MOUSE_RIGHT_PRESS := Mouse.RIGHT_PRESS
      MOUSE_LEFT_RELEASE := Mouse.LEFT_RELEASE
      MOUSE_MIDDLE_RELEASE := Mouse.MIDDLE_RELEASE
      MOUSE_RIGHT_RELEASE := Mouse.RIGHT_RELEASE
      MOUSE_LEFT_DRAG := Mouse.LEFT_DRAG
      MOUSE_MIDDLE_DRAG := Mouse.MIDDLE_DRAG
      MOUSE_RIGHT_DRAG := Mouse.RIGHT_DRAG
      MOUSE_MOVEMENT := Mouse.MOVEMENT
      MOUSE_WHEEL_UP := Mouse.WHEEL_UP
      MOUSE_WHEEL_DOWN := Mouse.WHEEL_DOWN
      WINDOW_RESIZE := Mouse.WINDOW_RESIZE
      WINDOW_CLOSE_BUTTON := Mouse.WINDOW_CLOSE_BUTTON
      INVOKE_LATER := 1000
      ICON := 1
      BUTTON_RELEASE := 20
      BUTTON_PRESS := 21
      BUTTON_HELD := 22
      SELECTION_CHANGED := 40
      CONTENT_CHANGED := 50
      CURSOR_MOVED := 51
      VALUE_CHANGED := 55
      ACTION := 60
      TREE_NODE_EXPANSION := 70
      SIZER_PRESS := 80
      SIZER_DRAG := 81
      SIZER_RELEASE := 82
      MOUSE_ENTER := 94
      MOUSE_EXIT := 95
      KEY_PRESS := 100
      KEY_RELEASE := 101
      TICK := 300
      GOT_FOCUS := 400
      LOST_FOCUS := 401
      DIALOG_CLOSED := 500
   end
end

class Select()
   public static const 
      NONE,
      ONE,
      MANY

   private static init()
      NONE := "none"
      ONE := "one"
      MANY := "many"
   end
end

class Gui()
   public static 
      BORDER_WIDTH,
      TEXT_INSET,
      X_INSET,
      Y_INSET,
      REPEAT_DELAY,            
      REPEAT_RATE,
      TAB_WIDTH,                 # Default tab char width
      style

   public static const 
      CONSTRAINT_SET,
      WATTRIB_SET,
      PRINTABLE_1,              # Printable on a single line of text
      PRINTABLE_N               # Printable on multi lines of text

   private static init()
      BORDER_WIDTH := 2
      TEXT_INSET := 3
      X_INSET := 6
      Y_INSET := 3
      REPEAT_DELAY := 500
      REPEAT_RATE := 100
      TAB_WIDTH := 8
      style := Style()
      PRINTABLE_1 := cset(&cset[33:0])
      PRINTABLE_N := cset(&cset[33:0]) ++ '\t\n'
      CONSTRAINT_SET := set()
      every insert(CONSTRAINT_SET, "tab"|"eol"|"x"|"y"|"w"|"h"|"l_inset"|"r_inset"|"t_inset"|"b_inset"|
                   "x_fill"|"y_fill"|"x_align"|"y_align"|"x_weight"|"y_weight")
      WATTRIB_SET := set()
      every insert(WATTRIB_SET, "label" | "posx" | "pos" | "posy" | "resize" | "size" | "height" | 
                   "width" | "lines" | "columns" | "image" | "canvas" | "iconpos" | "iconlabel" | 
                   "iconimage" | "echo" | "cursor" | "x" | "y" | "row" | "col" | "pointer" | 
                   "pointerx" | "pointery" | "pointerrow" | "pointercol" | "display" | "depth" | 
                   "displayheight" | "displaywidth" | "fg" | "bg" | "reverse" | "drawop" | "gamma" | 
                   "font" | "fheight" | "fwidth" | "ascent" | "descent" | "leading" | "linewidth" | 
                   "linestyle" | "fillstyle" | "pattern" | "clipx" | "clipy" | "clipw" | "cliph" | 
                   "dx" | "dy" | "inputmask" | "minwidth" | "minheight" | "minsize")
   end

   public static is_constraint(s)
      return member(CONSTRAINT_SET, s)
   end

   public static is_window_attrib(s)
      return member(WATTRIB_SET, s)
   end
end

procedure erase_rectangle(W, x, y, w, h)
   if x < 0 then {
      w +:= x
      x := 0
   }

   if y < 0 then {
      h +:= y
      y := 0
   }

   return W.erase_area(x, y, w, h)
end

procedure draw_image_ex(W, x, y, i)
   i := get_extended_image(W, i) | fail
   #
   # This gets round a bug whereby painting an image
   # in a -ve location (off screen) takes a really long
   # time (it should be a no-op of course).
   #
   if x + image_width(i) < 0 & y + image_height(i) < 0 then
      return
   W.draw_image(x, y, i)
end

procedure palette_key_ex(W, palette, spec)
   local color
   color := case spec of {
      "hilite" : Gui.style.get_hilite_color(W)
      "shadow" : Gui.style.get_shadow_color(W)
      "fg" : W.attrib("fg")
      "bg" : W.attrib("bg")
      "trans" : return "\377"
      default : spec
   }
   return W.palette_key(palette, color)
end

procedure get_extended_image(W, img)
   local s1, s2, head, spec, palette

   img ? {
      ="(" | return img
      spec := tab(upto(')')) | fail
      =")"
      tab(many(' '))
      head := tab(upto(',')) || move(1) ||
         (palette := tab(upto(','))) || move(1) | fail

      s1 := s2 := ""
      spec ? repeat {
         tab(many('; '))
         if pos(0) then 
            break
         s1 ||:= move(1) | fail
         ="=" | fail
         spec := tab(upto(';') | 0)
         s2 ||:= palette_key_ex(W, palette, spec) | fail
      }
      return head || map(tab(0), s1, s2)
   }
end

procedure rectangle(W, x, y, w, h)
   return W.draw_rectangle(x, y, w - 1, h - 1)
end

#
# Return the char width for ch, which may be a tab
#
procedure char_width(win, ch)
   if ch == "\t" then
      return win.text_width(" ")
   else
      return win.text_width(ch)
end

#
# Extended TextWidth function, handling tabs in s.  Returns the
# width of the string from positions i through j.
#
procedure text_width_ex(win, s, i, j, tw)
   local tp, w, lr, cc, ch

   if /i then {
      i := 1
      j := *s + 1
   } else {
      /j:= i + 1
      if j <= 0 then
         j +:= *s + 1
   }

   if not upto('\t', s) then
      return win.text_width(s[i:j])

   /tw := 8
   tp := 0
   w := 0
   lr := 0
   every cc := 1 to *s do {
      if cc = i then
         lr := w
      if cc = j then
         break
      ch := s[cc]

      if ch == "\t" then {
         repeat {
            w +:= win.text_width(" ")
            tp +:= 1
            if tp % tw = 0 then 
               break
         }
      } else {
         w +:= win.text_width(ch)
         tp +:= 1
      }
   }
   return w - lr
end

procedure draw_string_ex(win, x, y, s, k)
   local i, x1, y1
   y +:= win.attrib("ascent")
   win.draw_string(x, y, s)
   if i := upto(\k, map(s)) then {
      x1 := x + win.text_width(s[1:i])
      y1 := y + win.attrib("descent") - 1
      win.draw_line(x1, y1, x1 + win.text_width(s[i]), y1)
   }
end

procedure image_width(s)
   s ? {
      if ="(" then {
         tab(upto(')')) 
         move(1)
      }
      return integer(tab(upto(',')))
   }
end

procedure image_height(s)
   local w
   s ? {
      if ="(" then {
         tab(upto(')')) 
         move(1)
      }
      w := integer(tab(upto(',')))
      move(1)
      tab(upto(','))
      move(1)
      return *tab(0) / (0 ~= \w)
   }
end

#
# The absolute pointer x position on the screen.
#
procedure get_pointerx()
   return Window.query_root_pointer()[1]
end

#
# The absolute pointer y position on the screen.
#
procedure get_pointery()
   return Window.query_root_pointer()[2]
end

#
# Convert a table to an attribute list in the form
#    ["key1=val1", "key2=val2", ...]
#
procedure wattribs_to_list(t)
   local l, e
   l := []
   every e := !sort(t) do
      put(l, e[1] || "=" || e[2])
   return l
end

