#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package lang

import exception(throw)

package record ClassInfo(template_els, fnum_map)
package record TemplateElement(ident, fnum)

#
# An implementation of `object_encode` and `object_decode`.  The
# subclass may override the method `get_template()` to generate
# a list of pairs.  The first element of each pair is an arbitrary
# identifier used to identify the field; the second element is the
# name of the field.
#
# Example :-
# ~
#     # This will save the three fields increment_size, value and 
#     # is_range_flag.
#     private get_template()
#        suspend
#            ["Increment Size", "increment_size"] |
#            ["Value", "value"] |
#            ["Is Range Flag", "is_range_flag"]
#     end
# ~
#
# The programmer may change the name of the field afterwards; for
# example `value` may be re-named `initial_value`, and the data would
# still be restored correctly, so long as the `get_template()` method
# was updated appropriately.
#
# Alternatively, any of the pairs may be a string field name, in which
# the label is the field name itself.  This does not permit the field
# name to change without rendering the encoded string invalid.
#
# If not implemented by a subclass, a default `get_template()`
# suspends all of the fields in the class.
#
abstract class SelectiveObjectCodec(ObjectCodec)
   #
   # This empty method may be overridden; it is invoked just before
   # the object is encoded.
   #
   private pre_encode()
   end

   #
   # This empty method may be overridden; it is invoked just after
   # the object has been encoded.
   #
   private post_encode()
   end

   #
   # This empty method may be overridden; it is invoked just before
   # the object is decoded.
   #
   private pre_decode()
   end

   #
   # This empty method may be overridden; it is invoked just after
   # the object has been decoded.
   #
   private post_decode()
   end

   private override object_encode(e)
      local p, m, x

      p := load_structs()

      pre_encode()
      m := p.fnum_map
      e.encode(*p.template_els)
      if /e.fast_flag then {
         every x := !p.template_els do {
            e.encode(x.ident)
            e.encode(Class.get(self, x.fnum))
         }
      } else {
         every x := !p.template_els do
            e.encode(Class.get(self, x.fnum))
      }
      post_encode()
   end

   private override object_decode(e)
      local p, m, v, f, n, x

      p := load_structs()

      pre_decode()
      m := p.fnum_map
      n := integer(e.decode()) | throw("Integer expected")
      if /e.fast_flag then {
         every 1 to n do {
            f := e.decode()
            v := e.decode()
            Class.get(self, \m[f]) := v
         }
      } else {
         n = *p.template_els | throw("Mismatch length versus template_els")
         every x := !p.template_els do {
            v := e.decode()
            Class.get(self, x.fnum) := v
         }
      }
      post_decode()
   end

   #
   # Get the conversion info structures for the given class, using
   # caching for efficiency.  The result is a record with two items.
   # The first element is a list of pairs of field identifiers and
   # numbers to read/write.  The second element is a table mapping the
   # field ids to field numbers.
   #
   private final load_structs()
      local e, fnum, fnum_map, template_els, p, x, cl
      static cache
      initial {
         cache := table()
      }
      cl := classof(self)
      if x := member(cache, cl) then
         return x

      # Create a list of field ident/number pairs and a table mapping
      # field idents to class field indices.  Check for duplicate
      # names and non-existent variable names.
      #
      template_els := []
      fnum_map := table()
      every e := get_template() do {
         if type(e) == "string" then {
            fnum := Class.get_field_index(cl, e) | runerr("SelectiveObjectCodec: unknown field: " || e)
            (/fnum_map[e] := fnum) | runerr("SelectiveObjectCodec: duplicate field: " || e)
            put(template_els, TemplateElement(e, fnum))
         } else {
            fnum := Class.get_field_index(cl, e[2]) | runerr("SelectiveObjectCodec: unknown field: " || e[2])
            (/fnum_map[e[1]] := fnum) | runerr("SelectiveObjectCodec: duplicate field: " || e[1])
            put(template_els, TemplateElement(e[1], fnum))
         }
      }

      p := ClassInfo(template_els, fnum_map)
      insert(cache, cl, p)
      return p
   end

   #
   # This method may be overridden by a subclass to return the field
   # template (see above).  By default, the method generates all of
   # the instance fields of self.
   #
   private get_template()
      suspend Class.get_instance_field_names(self)
   end
end
