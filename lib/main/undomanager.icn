#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package undo

#
# UndoManager is a CompoundEdit.  Until it is closed it allows undos and redos
# within its list of edits, moving a pointer into the list appropriately.
#
# Once closed, it behaves just like a closed CompoundEdit.
#
class UndoManager(CompoundEdit)
   private readable
      limit,
      index,
      last

   public override redo()
      if \closed then
         return CompoundEdit.redo()
      if index <= *l then {
         last := l[index]
         l[index].redo()
         index +:= 1
         return self
      }
   end

   public override undo()
      if \closed then
         return CompoundEdit.undo()
      if index > 1 then {
         index -:= 1
         last := l[index]
         l[index].undo()
         return self
      }
   end

   # Return the last edit added, undone or redone, or fail if there is no such edit.
   #
   public get_last()
      return .\last
   end

   public get_limit()
      return .limit
   end

   public set_limit(limit)
      self.limit := limit
      return self
   end

   public override add_edit(other)
      if \closed then
         return CompoundEdit.add_edit(other)

      last := other

      while *l >= index do
         pull(l)

      if not l[-1].add_edit(other) then {
         put(l, other)
         index +:= 1
      }

      while (*l > limit) & (index > 1) do {
         index -:= 1
         pop(l)
      }
      return self
   end

   #
   # If this edit is not closed, succeed if there is an
   # edit to undo, and return that edit.
   #
   public can_undo()
      if /closed then
         return l[index - 1]
   end

   #
   # If this edit is not closed, succeed if there is an
   # edit to redo, and return that edit.
   #
   public can_redo()
      if /closed then
         return l[index]
   end

   public override clear()
      CompoundEdit.clear()
      self.index := 1
      return self
   end

   public override new()
      CompoundEdit.new()
      self.limit := 100
      self.index := 1
      return
   end
end
