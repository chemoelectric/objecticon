#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

#
# This class provides decorative borders.  Optionally, a
# single other component can be the title of the Border.  This
# would normally be a Label object, but it could also be a
# CheckBox or an Icon, or whatever is desired.
#
# @example
# @ b := Border()
# @
# @ # Add a Label as the title
# @
# @ l := Label()
# @ l.set_label("Title String")
# @ b.set_title(l)
# @ self.add(b)
#
class Border(Component)
   public 
      internal_align, 
      title,
      content,
      y0,
      h0

   public static
      TITLE_SPACING,
      TITLE_OFFSET

   private static init()
      TITLE_SPACING := scale(2)
      TITLE_OFFSET := scale(6)
   end

   #
   # Set the alignment of the title object.  The input string should be
   # ``l'', ``c'' or ``r''.
   #
   public set_internal_align(x)
      self.internal_align := x
      return self
   end

   #
   # Set the title object to c.
   #
   public set_title(c)
      remove(\self.title)
      self.title := c
      add(\self.title)
      return self
   end
   
   #
   # Set the content object to c.
   #
   public set_content(c)
      remove(\self.content)
      self.content := c
      add(self.content)
      return self
   end

   public initially()
      \self.content | runerr("no content component specified")
      Component.initially()
   end

   public display()
      border.draw(self.cbwin, self.x, y0, self.w, h0)
      if \title then {
         # A little space to the left and right of the title.
         self.cbwin.erase_area(title.x - TITLE_SPACING, y0,
                               title.w + 2 * TITLE_SPACING, border.get_t_inset())
      }
      self.display_children()
   end

   public get_default_width()
      local w1
      w1 := border.get_total_width() + content.get_preferred_width()
      return if \title then
         max(w1, title.get_preferred_width() + 2 * TITLE_OFFSET)
      else
         w1
   end

   public get_default_height(dw)
      dw -:= border.get_total_width()
      return if \title then
         max(border.get_t_inset(), title.get_preferred_height()) + content.get_preferred_height(dw) + border.get_b_inset()
      else
         border.get_total_height() + content.get_preferred_height(dw)
   end

   public layout()
      local co
      if \title then {
         #
         # Setup title; this gives us its height to work out some other dimensions.
         # NB Important not to use resize here as this would fill up the _spec fields,
         # and mean later calls to get_preferred_xxx would go wrong (they would get stuck
         # with the _spec values) - see ivib/canvas.icn reset_layout() method.
         #
         title.w := title.get_preferred_width()
         title.h := title.get_preferred_height(title.w)
         title.x := self.x + case self.internal_align of {
            Align.C : (self.w - title.w) / 2
            Align.L : TITLE_OFFSET
            Align.R : self.w - title.w - TITLE_OFFSET
            default : runerr("incorrect internal_align specifier", self.internal_align)
         }
         title.y := self.y
         title.layout()
         content.x := self.x + border.get_l_inset()
         co := max(border.get_t_inset(), title.h)
         content.y := self.y + co
         content.w := self.w - border.get_total_width()
         content.h := self.h - co - border.get_b_inset()

         y0 := max(self.y, self.y + title.h / 2 - border.get_t_inset() / 2)
         h0 := self.y + self.h - self.y0
      } else {
         content.x := self.x + border.get_l_inset()
         content.y := self.y + border.get_t_inset()
         content.w := self.w - border.get_total_width()
         content.h := self.h - border.get_total_height()
         y0 := self.y
         h0 := self.h
      }
      content.layout()
   end

   public shift(dx, dy)
      Component.shift(dx, dy)
      y0 +:= dy
   end

   public new()
      Component.new()
      self.internal_align := Align.L
      self.set_border(BevelledBorder())
      self.set_constraint("x_fill", &yes)
      self.set_constraint("y_fill", &yes)
      self.set_constraint("x_weight", 1.0)
      self.set_constraint("y_weight",  1.0)
      return
   end
end


