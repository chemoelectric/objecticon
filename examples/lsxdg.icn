import io, lang, xdg, ipl.options, net

procedure text_link(s)
   return if FileStream.stdout.is_flowterm_tty() then
      "\e[!\"text:" || URL.percent_encode(s, URL.PATH_CHAR) || "\"L" || s || "\e[!L" 
   else
      s
end

procedure file_link(s)
   return if FileStream.stdout.is_flowterm_tty() then
      Files.begin_link(s) || s || Files.end_link()
   else
      s
end

procedure need_one(a)
   if *a = 1 then
      return ucs(a[1]) | help_stop("Parameter not UTF-8")
   else
      help_stop("This option needs a single parameter")
end

record pair(name, size)

procedure need_pair(a)
   if *a = 2 then
      return pair(ucs(a[1]), integer(a[2])) | help_stop("This option needs a UTF-8 string and an integer second parameter")
   else
      help_stop("This option needs two parameters")
end

procedure no_path(s)
   return FilePath(s).get(-1)
end

procedure usage()
   write("Usage: lsxdg CMD [ARGS]")
   write("Query the xdg database")
   write("Possible values of CMD :-")
   help_line("mime", "Get mime type for file(s)")
   help_line("alt-mime" ,"List alternatives for a mime type")
   help_line("generic-icons", "List generic icons for mime type")
   help_line("all-icons", "List all icons for mime type")
   help_line("icons", "List icons for mime type")
   help_line("icon-file", "Find icon for file and size")
   help_line("find-icon", "Find icon for icon name and size")
   help_line("de", "List desktop entries for mime type")
   help_line("de-file", "List desktop entries for file")
   help_line("dir", "Show config and data directories")
   help_line("cmd", "List commands for file")
   help_line("cmd-url", "List commands for URL")
   exit(0)
end

procedure main(a)
   local s, s1, d, cmd, u, u1, p, c

   options(a, [], usage)

   c := pop(a) | help_stop("Command argument needed")

   case c of {
      "mime": {
         every s := !a do {
            s := ucs(s) | help_stop("Parameter not UTF-8")
            write(s, ": ", text_link(Mime.get_mime_type_for_file(no_path(s))))
         }
      }

      "alt-mime": {
         s := need_one(a)
         every write(text_link(Mime.alternative_mime_types(s)))
      }

      "generic-icons": {
         s := need_one(a)
         every write(text_link(Mime.gen_generic_icons(s)))
      }

      "all-icons": {
         s := need_one(a)
         every write(text_link(Mime.gen_all_icons(s)))
      }

      "icons": {
         s := need_one(a)
         every write(text_link(Mime.gen_icons(s)))
      }

      "icon-file": {
         p := need_pair(a)
         write(file_link(Mime.find_icon_for_file(no_path(p.name), p.size)))
      }

      "find-icon": {
         p := need_pair(a)
         write(file_link(IconTheme.find_icon(p.name, p.size)))
      }

      "de": {
         s := need_one(a)
         every write(to_string(Mime.gen_desktop_entries(s), 3, &yes))
      }

      "de-file": {
         s := need_one(a)
         every write(to_string(Mime.gen_desktop_entries_for_file(no_path(s)), 3, &yes))
      }

      "dir": {
         write("Data Home: ", file_link(BaseDir.get_data_home()))
         every write("Data Dirs: ", file_link(Files.split_paths(BaseDir.get_data_dirs())))
         write("Config Home: ", file_link(BaseDir.get_config_home()))
         every write("Config Dirs: ", file_link(Files.split_paths(BaseDir.get_config_dirs())))
      }

      "cmd": {
         s := need_one(a)
         s1 := FilePath(s).canonical().ucs() | help_stop("Path not UTF-8")
         every d := Mime.gen_desktop_entries_for_path(s) do {
            cmd := d.subst_file_shell(s1)
            if FileStream.stdout.is_flowterm_tty() then {
               u := URL("launch:" || URL.percent_encode(cmd, URL.PATH_CHAR))
               write(Files.begin_link(u), cmd, Files.end_link())
            } else
               write(cmd)
         }
      }

      "cmd-url": {
         s := need_one(a)
         u1 := URL(s) | help_stop("This option needs a valid URL parameter")
         s1 := u1.ucs()
         every d := Mime.gen_desktop_entries("x-scheme-handler/" || string(u1.scheme)) do {
            cmd := d.subst_file_shell(s1)
            if FileStream.stdout.is_flowterm_tty() then {
               u := URL("launch:" || URL.percent_encode(cmd, URL.PATH_CHAR))
               write(Files.begin_link(u), cmd, Files.end_link())
            } else
               write(cmd)
         }
      }

      default:
         help_stop("Unknown query command: ", c)
   }
end
