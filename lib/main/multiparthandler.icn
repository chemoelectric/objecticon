#
# $Id$
#

package mail

import util(error)

class MultipartHandler(TypeHandler)
   public can_handle(ct)
      succeed map(ct.get_type()) == "multipart"
   end
   
   public convert_to_object(m, data)
      local s, res, b, ct, sm

      res := Multipart()

      ct := m.get_content_type()

      b := "\r\n--" || ct.get_parameter("boundary")
      if /b then
         return error("Missing boundary parameter")

      data ? {
         if =(b[3:0]) then
            # Boundary at start (without CRLF).
            res.set_preamble("")
         else {
            s := tab(find(b)) | return error("Missing boundary")
            res.set_preamble(s)
            =b
         }
         repeat {
            if ="--\r\n" | (="--" & pos(0)) then
               break

            ="\r\n" | return error("Unexpected char after boundary")

            data := tab(find(b)) | return error("Boundary not found")
            =b
            sm := Message.parse(data) | fail
            res.add_part(sm)
         }
         res.set_epilogue(tab(0))
      }

      return res
   end

   public convert_from_object(m, obj)
      local b, s, ct

      b := generate_boundary(obj.get_parts())
      
      ct := m.get_content_type()

      #
      # Install the boundary param into the message.
      #
      ct.set_parameter("boundary", b)
      m.set_content_type(ct)

      s := obj.get_preamble()
      every s ||:= "\r\n--" || b || "\r\n" || (!obj.get_parts()).to_rfc822()
      s ||:= "\r\n--" || b || "--\r\n" || obj.get_epilogue()

      return s
   end

   private generate_boundary(l)
      local b
      static id
      initial id := 1

      repeat {
         b := "boundary" || id
         if find(b, (!l).get_content()) then
            id +:= 1
         else
            return b
      }
   end
end

