package ipl.functional

#-------------------------------------------------------------------------------
# Name:        functools
# Purpose:     Small functional programming library
#
# Author:      Oleg Baharew aka ArqricCat (IDP Team)
#
# Created:     03.08.2013
# Copyright:   (c) IDP Team, 2013
# Licence:     MIT License

# Class summary:

#  FuncTools - This class provides some higher-order and other functions, borrowed from functional languages.

#  Methods defined in this class:
#     * head(l) - head of list
#     * tail(l) - tail of list
#     * mapf(f,l) - application of function to all elements of the list
#     * filter(f,l) - creates a list of values for which function is true
#     * foldl(f,l) - left-associative list folding
#     * foldr(f,l) - right-associative list folding
#     * enumerate(seq) - creates a table with iterated keys and values, taken from sequence
#     * sum(l) - sum of list elements
#     * min(l) - minimal value from list
#     * max(l) - maximal value from list
#     * product(l) - product of all elements of the list
#     * iota(a,b) - creates a list of integers from a to b
#     * also(flist,x) - generator that applies function from the list to argument
#     * lsequental(flist,x) - left-associative function composition of the list to the argument
#     * rsequental(flist,x) - right-associative function composition of the list to the argument
#     * joinfuncs(flist,x) - list generated from the results of the application functions from flist
#     * joinfuncs2(flist,x) - list formed from a list of functions and the results of their application
#     * iterf(f,l) - transform function application to generator
#     * traverse(l) - nested list traversal, activating &source with successive elements
#     * rtraverse(l) - nested list reverse order traversal, activating &source with successive elements

final abstract class FuncTools()

   public static head(l)
   return l[1]
   end

   public static tail(l)
   return l[2:0]
   end

   public static mapf(f,l)
   local i,acc
   acc := []
   every i:= !l do {
      if type(i) ~== "list" then put(acc,f(i)) else {
       put(acc,mapf(f,i))
    }
   }
   return acc
   end

   public static filter(f,l)
   local i,acc
   acc := []
   every i:= !l do {
      if type(i) ~== "list" then {
         if f(i) then put(acc,i)
      } else put(acc,filter(f,i))
   }
   return acc
   end

   public static foldl(f,start,l)
   local i
   every i := !l do {
      if type(i) ~== "list" then start := f(start,i) else start := f(start,foldl(f,start,i)) 
   }
   return start
   end

   public static foldr(f,start,l)
   local i
   every i := back(l) do {
      if type(i) ~== "list" then start := f(start,i) else start := f(start,foldl(f,start,i)) 
   }
   return start
   end

   public static enumerate(seq)
   local i,t
   t := table()
   every i := 1 to *seq do {
      t[i] := seq[i]
   }
   return t
   end

   public static sum(l)
   local acc,i
   acc := 0
   every i := !l do {
      if type(i) ~== "list" then acc +:= i else acc +:= sum(i)
   }
   return acc
   end

   public static min(l)
   local i,m
   every i := !l do {
      if /m then
         if type(i) ~== "list" then m := i else m := min(i)
      else
         if type(i) ~== "list" then m >:= i else m >:= min(i)
   }
   return \m
   end

   public static max(l)
   local i,m
   every i := !l do {
      if /m then
         if type(i) ~== "list" then m := i else m := max(i)
      else
         if type(i) ~== "list" then m <:= i else m <:= max(i)
   }
   return \m
   end

   public static product(l)
   local p,i
   p := 1
   every i := !l do {
      if type(i) ~== "list" then p *:= i else p *:= product(i)
   }
   return p
   end

   public static iota(a,b)
   local acc,i
   /a := 1
   acc := []
   every i := a to b do {
      put(acc,i)
   }
   return acc
   end

   public static also(flist,x)
   local e
   e := create traverse(flist)
   suspend (|@e)(x)
   end

   public static lsequental(flist,x)
   local acc,i
   acc := x
   every i := !flist do {
      if type(i) ~== "list" then acc := i(acc) else acc := lsequental(i,acc)
   }
   return acc
   end

   public static rsequental(flist,x)
   local acc,i
   acc := x
   every i := !back(flist) do {
      if type(i) ~== "list" then acc := i(acc) else acc := rsequental(i,acc)
   }
   return acc
   end

   public static joinfuncs(flist,x)
   local acc,i
   acc := []
   every i := !flist do {
      if type(i) ~== "list" then put(acc,i(x)) else put(acc,joinfuncs(i,x))
   }
   return acc
   end

   public static iterf(f,l)
   local e
   e := create traverse(l)
   suspend f(|@e)
   end

   public static traverse(l)
   local e
   every e := !l do
      if type(e) == "list" then traverse(e) else coact(e)
   end

   public static rtraverse(l)
   local e
   every e := back(l) do
      if type(e) == "list" then rtraverse(e) else coact(e)
   end
end
