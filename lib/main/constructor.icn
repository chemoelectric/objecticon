package lang

import util(need_string)

#
# This class contains various helpful methods to get information about
# a record constructor at runtime.
#
final abstract class Constructor()
   # Return the name of the constructor
   #
   public static native get_name(c)

   # Return the constructor of the given record
   #
   public static native get_constructor(c)

   # Return the program this constructor resides in.  The program's &main
   # co-expression is returned.
   #
   public static native get_program(c)

   # Return the name of the package in which this constructor resides; fails
   # if the constructor is not in a package.
   #
   public static get_package(c)
      return extract_package(get_name(c))
   end

   # Return the source location of the constructor
   # :Returns :
   # :  a `Location` instance
   #
   public static get_location(c)
      return Prog.get_global_location(get_name(c), get_program(c))
   end

   # Generate the field names of the constructor `c`.
   #
   public static get_field_names(c)
      suspend get_field_name(c, 1 to get_n_fields(c))
   end

   # Return the number of fields in the constructor `c`.
   #
   public static native get_n_fields(c)

   # Return the field index number of the given field in constructor`c`.
   # :Parameters :
   # :  `c` - the constructor
   # :  `field` - either a field name or number
   # :Returns :
   # :  an integer, being the index
   # :Fails :
   # :  if the field is unknown
   #
   public static native get_field_index(c, field)

   # Return the field name of the given field in constructor`c`.
   # :Parameters :
   # :  `c` - the constructor
   # :  `field` - either a field name or number
   # :Returns :
   # :  the field name
   # :Fails :
   # :  if the field is unknown
   #
   public static native get_field_name(c, field)

   # Return the source location of the given field in constructor`c`.
   # :Parameters :
   # :  `c` - the constructor
   # :  `field` - either a field name or number
   # :Returns :
   # :  a `Location` instance
   # :Fails :
   # :  if the field is unknown
   #
   public static get_field_location(c, field)
      return Location!get_field_location_impl(c, field)
   end

   private static native get_field_location_impl(c, field)

   # Lookup a constructor by name
   # 
   # :Parameters :
   # :  `s` - a constructor name
   # :  `ce` - a coexpression, representing a loaded program, defaults
   #   to the main program
   # :Returns :
   # :  a constructor
   # :Fails :
   # :  if the constructor is unknown
   #
   public static for_name(s, ce)
      local t
      s := need_string(s)
      if not(integer(s)) &
         t := Prog.get_named_global(s, ce) &
         type(t) == "constructor" then
         return t
   end
end
