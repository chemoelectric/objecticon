#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import xml, io, ipl.options

procedure main(a)
   local fmt, p, s, d, x, t, opt, ss
   fmt := CanonicalXmlFormatter(ss := RamStream())
   p := XmlParser().set_preserve_insignificant_whitespace(&yes).set_do_namespaces(&no)

   opt := options(a, [Opt("u",, "Ucs input")], "Usage: testinvalid SOURCE [OUTPUT]")
   *a > 0 | help_stop("Need a parameter")

   s := Files.file_to_string(a[1]) | stop("Couldn't open ", a[1], ": ", &why)
   if \opt["u"] then
      s := ucs(s) | exit(0)     # Okay if invalid utf8

   if d := p.parse(s) then {
      if d.validity_errors = 0 then {
         write("Testcase : ", a[1], " unexpectedly parsed with no validity errors")
         write(s)
         write("Failure")
         write("End===============================================================")
         exit(1)
      } else {
         if *a = 1 then {
            # Okay, parse with validity errors no further checking
            exit(0)
         }

         t := Files.file_to_string(a[2]) | stop("Couldn't open ", a[2], ": ", &why)

         fmt.format(d)
         x := ss.done()
         if x == t then
            exit(0)

         write("Testcase : ", a[1], " parsed with validity errors, but didn't compare to out version")
         write("Parsed:")
         write(x)
         write("Test:")
         write(t)
         write("Failure")
         write("End===============================================================")
         exit(1)
      }
   } else {
      # Okay if it didn't parse
      exit(0)
   }

end


