package ipl.browser

import
   gui,
   util

# A simple dialog for displaying a single HTML page, typically
# containing a help message.
#
class HTMLMessageDialog(Dialog)
   public const
      browser
   private readable
      delay_open_flag,
      size_precisely_flag

   #
   # If set, then the dialog is hidden until the page is fully loaded.
   # This can be preferable for cosmetic reasons, so that the
   # partially loaded page (without images), is not shown.
   #
   public set_delay_open(s)
      self.delay_open_flag := need_flag(s)
      return self
   end

   #
   # This is like `set_delay_open()` above, but will size the dialog
   # to the size of the browser's inner component.  The browser's size
   # should also be set with `browser.set_size()`, since this
   # influences the size of the inner component.  In particular the
   # width should be set to the desired resulting width and the height
   # to a minimum desired height.
   #
   public set_size_precisely(s)
      self.size_precisely_flag := need_flag(s)
      return self
   end

   private on_first_load()
      if \size_precisely_flag then {
         # Remove the scrollbars, since they affect
         # ComponentScrollArea's layout(), and we are setting the size
         # based on there being no scrollbars.
         browser.
            remove_hsb().
            remove_vsb().
            set_size(browser.predict_total_width(browser.view.inner_w),
                     browser.predict_total_height(browser.view.inner_h)).
            reset_layout_chain()
         resize_win(get_preferred_width(), get_preferred_height())
      }
      win.set_canvas("normal")
   end

   public override component_setup()
      if \delay_open_flag | \size_precisely_flag then {
         set_canvas("hidden")
         browser.connect_n(on_first_load, SimpleBrowser.PAGE_FULLY_LOADED)
      }
   end

   public override new()
      Dialog.new()
      self.setup()
      return
   end

   private setup()
      local layout_1, paint_1, close_button
      self.set_resize(&yes)
      browser := SimpleBrowser().
         set_size(scale(353), scale(254)).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0)
      self.add(browser)
      paint_1 := TextPaint("Close")
      close_button := TextButton().
         clear_constraints().
         connect(self.dispose, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_1)
      self.add(close_button)
      self.connect(self.dispose, Event.WINDOW_CLOSE_BUTTON)
      layout_1 := GridLayout().
         set_extra("cells")
      self.set_layout(layout_1)
   end
end

### Ivib-v2 layout: layouts/$.layout
