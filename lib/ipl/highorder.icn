package ipl.functional

import
   lang(Class),
   ipl.callable(callable),
   ipl.lists(lreverse_mod),
   ipl.pdco(List,Parallel),
   datastruct(EqTable,BuiltinTable)

#
# Implementation class for `partial`
#
package class Partial()
   private const
      f, spec, v

   public call(a[])
      local e, c, r
      e := create !v
      r := []
      every c := !spec do {
         case c of {
            "v": put(r, @e | &null)
            "V": while put(r, @e)
            "a": put(r, get(a) | &null)
            "A": while put(r, get(a))
            "-": get(a)
            default: runerr("Invalid spec char to partial", c)
         }
      }
      suspend f!r
   end

   public new(f, spec, v)
      self.f := f
      self.spec := spec
      self.v := v
      return
   end
end

# Returns a function which modifies its arguments according to `spec`,  before applying them
# to f.  The modification is specified by the following characters in spec:-
#    "v": add the next value from the arguments which follow the spec
#         parameter, or `&null` if none remain.
#    "V": add the remaining values.
#    "a": add the next argument, or `&null` if none remain.
#    "A": add the remaining arguments.
#    "-": skip the next argument.
#
# Example :-
# ~
#     f := partial(write, "vvvAV", "a", "b", "c", "p", "q", "r")
#     f("x","y","z")   # writes abcxyzpqr
# ~
procedure partial(f, spec, l[])
   return Partial(f, spec, l).call
end

#
# Implementation class for `lpartial` and `rpartial`
#
package class LRPartial()
   private const
      f, x

   public lcall(a[])
      suspend f!(x ||| a)
   end

   public lcall1(a[])
      suspend f!push(a, x)
   end

   public rcall(a[])
      suspend f!(a ||| x)
   end

   public rcall1(a[])
      suspend f!put(a, x)
   end

   public new(f, x)
      self.f := f
      self.x := x
      return
   end
end

#
# Partial application to function f, prepending l to the arguments.
#
procedure lpartial(f, l[])
   return if *l = 1 then
      LRPartial(f, l[1]).lcall1
   else
      LRPartial(f, l).lcall
end

#
# Partial application to function f, appending l to the arguments.
#
procedure rpartial(f, l[])
   return if *l = 1 then
      LRPartial(f, l[1]).rcall1
   else
      LRPartial(f, l).rcall
end

#
# Implementation class for `compose`
#
package class Compose()
   private const
      f, g

   public call(a[])
      suspend f(g!a)
   end

   public new(f, g)
      self.f := f
      self.g := g
      return
   end
end

#
# Compose functions f and g
#
procedure compose(f, g)
   return Compose(f, g).call
end

# Convenient function to get the binary operator `op`, partially
# applied with `x` as the left argument.  For example
# ~
#    lpb(2, "*")
# ~
# returns a function which doubles its argument, whilst
# ~
#    lpb(0, "<")
# ~
# returns a function which succeeds and returns its argument if it is
# greater than 0.
#
procedure lpb(x, op)
   op := callable(op, 2) | runerr("Invalid operation for lpb", op)
   return lpartial(op, x)
end

# Convenient function to get the binary operator `op`, partially
# applied with `x`, as the right argument.  For example
# ~
#   rpb("/", 2)
# ~
# returns a function which halves its argument.
#
procedure rpb(op, x)
   op := callable(op, 2) | runerr("Invalid operation for rpb", op)
   return rpartial(op, x)
end

#
# Implementation class for `methodf`
#
package class Methodf()
   private const
      field

   public call(obj, a[])
      suspend Class.get(obj, field)!a
   end

   public new(field)
      self.field := field
      return
   end
end

# Returns a function that takes its first argument, obtains the given
# field from it, and then applies the remaining arguments to the
# resulting method.
#
# Example :-
# ~
#   f := methodf("abc")
#   f(obj, 1, 2, 3)   # invokes obj.abc(1, 2, 3)
# ~
procedure methodf(field)
   return Methodf(field).call
end

# Implementation class for `flip` and `revargs`.
package class Func()
   private const f

   public two(a, b)
      suspend f(b, a)
   end

   public all(a[])
      suspend f!lreverse_mod(a)
   end

   public new(f)
      self.f := f
      return
   end
end

# This function takes a binary function and returns another function
# which invokes the original, but swapping its two arguments.
#
procedure flip(f)
   return Func(f).two
end

# This function takes a function and returns another function which
# invokes the original, but reversing all its arguments.  This is like
# `flip` above, but more general (and slower).
#
procedure revargs(f)
   return Func(f).all
end

# Implementation class for `memoize` and `memoize1`
package class Memoize()
   private const
      f, t

   public call(a[])
      local l
      (l := t.member(a)) | t.insert(a, l := List{f!a})
      suspend .!l
   end

   public call1(a)
      local l
      (l := t.member(a)) | t.insert(a, l := f(a)) | fail
      return l
   end

   public new(f, t)
      self.f := f
      self.t := t
      return
   end
end

# This procedure returns a function which memoizes the passed
# function.  Subsequent arguments to and results from this function
# are cached in a `datastruct.Table` so that the underlying function
# is only called for parameters that haven't been seen before.
#
# :Parameters :
# :  `f` - the function to memoize
# :  `t` - the `Table` to use to cache results; by default an
#          `EqTable`.  Note that the keys of this table will
#          always be distinct lists, so using, for example,
#           a `BuiltinTable` makes no sense.
#
procedure memoize(f, t)
   /t := EqTable()
   return Memoize(f, t).call
end

# This is a simpler (but faster) version of `memoize()`.  Only a
# single parameter is passed to the given function, and only a single
# result is cached.  Further, by default a `BuiltinTable` is used to
# cache results, rather than an `EqTable`.
#
# :Parameters :
# :  `f` - the function to memoize
# :  `t` - the `Table` to use to cache results; by default an
#          `BuiltinTable`.  An `EqTable` could be used if the cost
#          of evaluating `f` were large compared to the cost of
#          `lang.hash` and `lang.equals`.
#
procedure memoize1(f, t)
   /t := BuiltinTable()
   return Memoize(f, t).call1
end

# Implementation class for `adjoin`.
package class Adjoin()
   private const f

   private mk(f, a)
      return create f!a
   end

   public call(a[])
      suspend Parallel!List{mk(!f, a)}
   end

   public new(f)
      self.f := f
      return
   end
end

# This procedure puts several functions together and returns another
# function.  When the returned function is called, the results of the
# individual functions are generated in parallel, and a sequence of
# lists containing those results is generated.
#
procedure adjoin(f[])
   return Adjoin(f).call
end
