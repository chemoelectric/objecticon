#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package xml

import io, exception

#
# This is an abstract base class for Formatters, which take a Document
# object (or a Node within a Document), and output that document to a
# stream.
#
class Formatter(Stream, HasUnderlyingStream)
   private
      file
   protected 
      level

   public new(file)
      /file := FileStream.stdout
      self.file := file
      file.can(Stream.WRITE) | runerr("Formatter: stream not writable: ", file)
      return
   end

   public out(s)
      return file.out(s) | throw(&why)
   end

   public get_mode()
      return WRITE
   end

   public close()
      if \close_underlying_flag then
         file.close() | fail
      return
   end

   public format(n)
      self.level := -1
      return simple_try{ format_node(n) }
   end

   protected format_node(n)
      local s, res
      level +:= 1
      if (res := if s := text(n) then
         format_content(s)
      else if is(n, Element) then
         format_element(n)
      else if is(n, DocType) then
         format_doctype(n)
      else if is(n, Comment) then
         format_comment(n)
      else if is(n, ProcessingInstruction) then
         format_pi(n)
      else if is(n, CData) then
         format_cdata(n)
      else if is(n, Document) then
         format_document(n)
      else if is(n, XmlDecl) then
         format_xmldecl(n)) then 
      {
         level -:= 1
         return res
      } else {
         level -:= 1
         fail
      }
   end

   protected defer format_document(n)

   protected defer format_content(s)

   protected defer format_doctype(n)

   protected defer format_comment(n)

   protected defer format_pi(n)

   protected defer format_element(n)

   protected defer format_cdata(n)

   protected defer format_xmldecl(n)
end


procedure xml_escape(s, c)
   local ch, r

   r := ""
   s ? repeat {
      r ||:= tab(upto(c) | 0)
      ch := move(1) | break
      r ||:= tcase string(ch) of {
         "&" : "&amp;"
         "<" : "&lt;"
         ">" : "&gt;"
         "\"" : "&quot;"
         default : "&#" || ord(ch) || ";"
      }
   }
   return r
end

