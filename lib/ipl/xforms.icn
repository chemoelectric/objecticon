############################################################################
#
#	File:     xforms.icn
#
#	Subject:  Procedures to do matrix transformations
#
#	Author:   Stephen W. Wampler and Ralph E. Griswold
#
#	Date:     May 2, 2001
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#  These procedures produce matrices for affine transformation in two
#  dimentionsi and transform point lists.
#
#  A point list is a list of Point() records.  See gobject.icn
#
############################################################################
#
#  Links:  matrix
#
############################################################################

package ipl.xforms

import
   ipl.matrix(identity_matrix, mult_matrix),
   util(Math)

# transform point list by matrix
procedure transform(p, M)		
   local pl, i

   # convert p to a matrix for matrix multiply...

   every put((pl := [[]])[1], (!p)|1.0)	# the 1.0 makes it homogeneous

   # do the conversion...

   pl := mult_matrix(pl, M)

   # convert list back to a point list...

   p := copy(p)
   every i := 1 to *p do
      p[i] := pl[1][i]

   return p

end

# transform point list
procedure transform_points(pl,M)	
   local xformed

   every put(xformed := [], !transform(!pl,M))

   return xformed

end
   
# matrix for scaling
procedure set_scale(x, y)		
   local M

   M := identity_matrix(3,3)

   M[1][1] := x
   M[2][2] := y

   return M

end

# matrix for translation
procedure set_trans(x, y)		
   local M

   M := identity_matrix(3,3)

   M[*M][1] := x
   M[*M][2] := y

   return M

end

# matrix for x shear
procedure set_xshear(x)			
   local M

   M :=  identity_matrix(3,3)

   M[1][2] := x

   return M

end

# matrix for y shear
procedure set_yshear(y)			
   local M

   M := identity_matrix(3,3)

   M[2][1] := y

   return M

end

# matrix for rotation
procedure set_rotate(x)			
   local M

   M := identity_matrix(3,3)
   M[1][1] := Math.cos(x)
   M[2][2] := M[1][1]
   M[1][2] := Math.sin(x)
   M[2][1] := -M[1][2]

   return M

end
