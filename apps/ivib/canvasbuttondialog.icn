#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui

############################################################################
#
#
#
class CanvasButtonDialog(CanvasComponentDialog)
   public 
      paint_field,         
      paint_down_field,
      button_group_list,   
      in_checkbox_group,   
      keyboard,            
      no_click_focus,
      checkbox_group_list, 
      in_button_group,     
      button_tab_set,
      tab_basic,
      tab_groups,
      tab_images,
      toggles,
      initially_checked,
      has_label_down

   public validate_input()
      CanvasComponentDialog.validate_input() | fail
      \self.paint_field.get_contents() | return alert_error(self, "Label cannot be null")
      self.paint_field.validate_input() | fail
      if \has_label_down then
         self.paint_down_field.validate_input() | fail
      return
   end
      
   public set_vals()
      CanvasComponentDialog.set_vals()

      c.set_paint(paint_field.get_contents())

      if \has_label_down then
         c.set_paint_down(paint_down_field.get_contents())

      #
      # If in cbg and on, turn off, since may go out of cbg or into
      # a different one.
      #
      if (\c.parent_check_box_group).which_one === c then
         c.parent_check_box_group.which_one := &null                 

      if in_checkbox_group.is_checked() then {
         #
         # Put in cbg.
         #
         c.set_parent_check_box_group(c.parent_Canvas.checkbox_groups[checkbox_group_list.get_selection()])
         if initially_checked.is_checked() then {
            #      
            # Turn off current one on, if any; turn self on.
            #
            (\c.parent_check_box_group.which_one).is_checked_flag := &null
            c.parent_check_box_group.which_one := c
         }
      } else
         c.set_parent_check_box_group()

      #
      # Set checked flag
      #
      c.is_checked_flag := initially_checked.get_status()
      c.toggles_flag := toggles.get_status()
      if keyboard.is_checked() then
         c.set_accepts_focus(&no)
      else
         c.set_accepts_focus(&yes)
      c.no_click_focus_flag := no_click_focus.get_status()
      c.set_parent_button_group(
        if in_button_group.is_checked() then 
            c.parent_Canvas.button_groups[button_group_list.get_selection()]
        else 
            &null
        )
   end

   public on_in_button_group()
      button_group_list.toggle_is_shaded()
   end

   public on_in_checkbox_group()
      checkbox_group_list.toggle_is_shaded()
   end

   public setup()
      CanvasComponentDialog.setup()

      tab_basic := TabItem().set_label("General")
      tab_basic.set_layout(GridLayout())
      paint_field := PaintField().set_title(Label().set_label("Label")).set_constraint("eol", &yes)
      paint_field.set_contents(c.paint)
      tab_basic.add(paint_field)

      if \has_label_down then {
         paint_down_field := PaintField().set_title(Label().set_label("Label down")).set_constraint("eol", &yes)
         paint_down_field.set_contents(c.paint_down)
         tab_basic.add(paint_down_field)
      }

      keyboard := CheckBox().set_constraint("eol", &yes)
      keyboard.set_label("Don't accept focus at all")
      if /c.accepts_focus_flag then
         keyboard.set_is_checked(&yes)
      tab_basic.add(keyboard)

      no_click_focus := CheckBox().set_constraint("eol", &yes)
      no_click_focus.set_label("Don't accept focus on mouse click")
      if \c.no_click_focus_flag then
         no_click_focus.set_is_checked(&yes)
      tab_basic.add(no_click_focus)

      initially_checked := CheckBox().set_constraint("eol", &yes)
      initially_checked.set_label("Initially checked")
      tab_basic.add(initially_checked)

      toggles := CheckBox().set_constraint("eol", &yes)
      toggles.set_align("l", "c")
      toggles.set_label("Toggles state")
      if \c.toggles_flag then
         toggles.set_is_checked(&yes)
      tab_basic.add(toggles)
      add_tab_at_front(tab_basic)

      tab_groups := TabItem().set_label("Groups")
      tab_groups.set_layout(GridLayout().set_extra("borders"))
      in_button_group := CheckBox()
      in_button_group.connect(self.on_in_button_group, Event.ACTION)
      in_button_group.set_label("Button Group")
      tab_groups.add(in_button_group)
      button_group_list := List().set_constraint("eol", &yes)
      button_group_list.set_size(scale(175))
      button_group_list.set_selection_list(cos_names(c.parent_Canvas.button_groups))
      tab_groups.add(button_group_list)

      in_checkbox_group := CheckBox()
      in_checkbox_group.connect(self.on_in_checkbox_group, Event.ACTION)
      in_checkbox_group.set_label("CheckBox Group")
      tab_groups.add(in_checkbox_group)
      checkbox_group_list := List().set_constraint("eol", &yes)
      checkbox_group_list.set_size(scale(175))
      checkbox_group_list.set_selection_list(cos_names(c.parent_Canvas.checkbox_groups))
      tab_groups.add(checkbox_group_list)
      add_tab(tab_groups)

      self.set_label(label)

      if *c.parent_Canvas.checkbox_groups = 0 then {
         in_checkbox_group.set_is_shaded(&yes)
         checkbox_group_list.set_is_shaded(&yes)
         if c.is_checked() then
            initially_checked.set_is_checked(&yes)
      } else {
         if \c.parent_check_box_group then {
            in_checkbox_group.set_is_checked(&yes)
            checkbox_group_list.set_selection(keyof(c.parent_Canvas.checkbox_groups,
                                                         c.parent_check_box_group))
            if c === c.parent_check_box_group.which_one then
               initially_checked.set_is_checked(&yes)
         } else  {
            checkbox_group_list.set_is_shaded(&yes)
            if c.is_checked() then
               initially_checked.set_is_checked(&yes)
         }
      }

      if *c.parent_Canvas.button_groups = 0 then {
         in_button_group.set_is_shaded(&yes)
         button_group_list.set_is_shaded(&yes)
      } else {
         if \c.parent_button_group then {
            in_button_group.set_is_checked(&yes)
            button_group_list.set_selection(keyof(c.parent_Canvas.button_groups,
                                                       c.parent_button_group))
         } else 
            button_group_list.set_is_shaded(&yes)
      }
   end
end


