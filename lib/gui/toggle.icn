#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import util

#
# This is a class for representing objects which can have an
# on-off state, in particular checkboxes, toggle buttons,
# and menu checkboxes.
#
class Toggle()
   public 
      parent_check_box_group,
      is_checked_flag

   #
   # Set the parent {CheckBoxGroup}.
   # @param x   The parent {CheckBoxGroup}.
   #
   public set_parent_check_box_group(x)
      self.parent_check_box_group := x
      synch_cbg()
   end

   #
   # Succeed if the object is checked.
   #
   public is_checked()
      return \self.is_checked_flag
   end

   #
   # Succeed if the object is not checked.
   #
   public is_unchecked()
      return /self.is_checked_flag
   end

   #
   # Return the status of the object; {1} if the object is checked,
   # {&null} otherwise.
   #
   public get_status()
      return self.is_checked_flag
   end

   #
   # Toggle the status of the object.
   #
   public toggle_is_checked()
      if /self.is_checked_flag then
         self.set_is_checked("t")
      else
         self.set_is_checked("f")
   end

   #
   # Set the status to checked.
   #
   public set_is_checked(s)
      self.is_checked_flag := to_flag(s)
      synch_cbg()
   end

   #
   # Ensure any parent CBG is consistent with our checked status.
   # @p
   public synch_cbg()
      if \self.parent_check_box_group then { 
         if \self.is_checked_flag & self.parent_check_box_group.which_one ~=== self then {
            (\self.parent_check_box_group.which_one).set_is_checked("f")
            self.parent_check_box_group.which_one := self
         } else if /self.is_checked_flag & self.parent_check_box_group.which_one === self then {
            self.parent_check_box_group.which_one := &null
         }
      }
   end
end

