#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import util

#
# This class scales and displays an image.  The image source can
# be an image string, an external file, or another window, and
# can be changed at any time.
#
class Image(Component)
   public 
      image_str,
      image_window,
      image_cache,
      image_pixels,
      win,
      zoom_win,
      win_pix,
      fill_dimensions

   #
   # Set an image to use; the parameter is passed to `ImageCache.load`
   # to load the image.
   #
   public set_image(x)
      image_str := image_cache := image_window := image_pixels := &null
      if is_initialized() then {
         close_image()
         image_str := x
         load_image()
         invalidate()
      } else
         image_str := x
      link
   end

   #
   # Set an image to use; the parameter is passed to `ImageCache.get`
   # to load the image.
   #
   public set_cache(x)
      image_str := image_cache := image_window := image_pixels := &null
      if is_initialized() then {
         close_image()
         image_cache := x
         load_image()
         invalidate()
      } else
         image_cache := x
      link
   end

   #
   # Set a `Window` to use as the image source.  It will not be closed
   # by this Component.
   #
   public set_window(x)
      image_str := image_cache := image_window := image_pixels := &null
      if is_initialized() then {
         close_image()
         image_window := x
         load_image()
         invalidate()
      } else
         image_window := x
      link
   end

   #
   # Set a `Pixels` to use as the image source.  It will not be closed
   # by this Component.
   #
   public set_pixels(x)
      image_str := image_cache := image_window := image_pixels := &null
      if is_initialized() then {
         close_image()
         image_pixels := x
         load_image()
         invalidate()
      } else
         image_pixels := x
      link
   end

   #
   # Blank the image
   #
   public clear_image()
      image_str := image_cache := image_window := image_pixels := &null
      if is_initialized() then {
         close_image()
         invalidate()
      }
      link
   end

   public override initially()
      Component.initially()
      load_image()
   end

   public load_image()
      if \image_str then
         win_pix := ImageCache.load_pixels(image_str, cbwin)
      else if \image_pixels then
         win_pix := image_pixels.shared_copy()
      else if \image_cache then
         win := ImageCache.get(image_cache, cbwin).shared_copy()
      else if \image_window then
         win := image_window.shared_copy()
   end

   # This controls how the image will be expanded if its size is less
   # than that specified by `set_size()`.  If 0, then the image will
   # not be expanded; if 1 then the image will not be distorted, but
   # will be expanded to fill one of the dimensions depending on its
   # shape.  If 2, then the image will be distorted and expanded to
   # fill both dimensions.
   # 
   # If the image is bigger than the specified size then it will
   # always be scaled down, but if this setting is 2, then again the
   # image is distorted to fill both dimensions.
   #
   public set_fill_dimensions(n)
      self.fill_dimensions := need_integer(n, 0, 2)
      link
   end

   public close_image()
      (\win).close()
      (\zoom_win).close()
      (\win_pix).close()
      win := zoom_win := win_pix := &null
   end

   public override get_default_width()
      local ww
      ww := get_image_width() | 0
      return ww + border.get_total_width()
   end

   public override get_default_height(dw)
      local t, wh, ww
      ww := get_image_width() | 0
      wh := get_image_height() | 0
      dw -:= border.get_total_width()
      t := if fill_dimensions < 2 & ww <= dw then
         wh
      else if ww > 0 then (dw * wh) / ww else 0
      return t + border.get_total_height()
   end

   #
   # Succeed if an image is currently loaded.
   #
   public has_image()
      succeed \win | \win_pix
   end

   #
   # Return the loaded image width, or fail if no image is loaded.
   #
   public get_image_width()
      return (\win).get_width() | (\win_pix).get_width()
   end

   #
   # Return the loaded image height, or fail if no image is loaded.
   #
   public get_image_height()
      return (\win).get_height() | (\win_pix).get_height()
   end

   public override display()
      local ir, img_w, img_h,
         asp_r, asp_max, zoom_w, zoom_h, pt

      border.draw_rect(self.cbwin, self)

      \win | \win_pix | fail

      ir := border.get_inner_rect(self)
      if ir.empty() then
         fail

      img_w := get_image_width()
      img_h := get_image_height()

      #
      # Scale the image to the desired size
      #
      if (fill_dimensions = 0) & (img_w <= ir.w) & (img_h <= ir.h) then {
         zoom_w := img_w
         zoom_h := img_h
      } else if fill_dimensions = 2 then { 
         zoom_w := ir.w
         zoom_h := ir.h
      } else {
         asp_r := real(img_w) / img_h
         asp_max := real(ir.w) / ir.h

         if asp_r > asp_max then {
            zoom_w := ir.w
            zoom_h := integer(ir.w / asp_r)
         } else {
            zoom_w := integer(ir.h * asp_r)
            zoom_h := ir.h
         }
      }

      pt := ir.float(Size(zoom_w, zoom_h), border)

      zoom_w <:= 1
      zoom_h <:= 1

      if img_w = zoom_w & img_h = zoom_h then {
         /win := open_image(win_pix)
         win.copy_to(,,,, self.cbwin, pt.x, pt.y)
      } else if \zoom_win &
         zoom_win.get_width() = zoom_w & 
         zoom_win.get_height() = zoom_h
      then
         zoom_win.copy_to(,,,, self.cbwin, pt.x, pt.y)
      else {
         (\zoom_win).close()
         /win_pix := win.get_pixels()
         zoom_win := zoom_pix(win_pix, zoom_w, zoom_h)
         zoom_win.copy_to(,,,, self.cbwin, pt.x, pt.y)
      }
   end

   public override finally()
      Component.finally()
      close_image()
   end

   public override new()
      Component.new()
      self.set_constraint("x_fill", &yes)
      self.set_constraint("y_fill", &yes)
      self.set_constraint("x_weight", 1.0)
      self.set_constraint("y_weight",  1.0)
      set_border(RaisedBorder())
      fill_dimensions := 0
      return
   end
end
