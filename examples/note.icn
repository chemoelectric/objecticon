$encoding UTF-8

import io, util, lang, graphics, ipl.options, posix(System), ipl.sort,
   xdg, ipl.printf, ipl.strings, ipl.pdco, net, gui(GetSelection),
   ipl.functional

global opts, notes, mod

procedure notes_file()
   return FilePath(BaseDir.ensure_data_home()).child("oinotes").str() | stop("Couldn't access data dir: ", &why)
end

procedure load_notes()
   notes := decode_from_file(notes_file()) | []
end

procedure save_notes()
   encode_to_file(notes_file(), notes, &yes) | stop("Failed to write notes file: ", &why)
end

procedure load_from(fn)
   notes |||:= decode_from_file(fn) | stop("Couldn't load from file ", fn)
   mod := &yes
end

procedure save_to(fn)
   encode_to_file(fn, notes, &yes) | stop("Failed to write file: ", &why)
end

procedure do_uniq()
   notes := List{UniqueEq{ !notes }}
   mod := &yes
end

procedure do_sf()
   local u
   every u := !notes do {
      if u.scheme == "file" then {
         u.set_host("localhost").set_query()
         mod := &yes
      }
   }
end

procedure url_key(x)
   return x.str()
end

procedure do_sort()
   qsort(notes, convert_cmp(memoize1(url_key), Text.caseless_compare))
   mod := &yes
end

procedure limit(s)
   static cols
   initial
      cols := LineEditorStream.get_console_width() - 10 | 80
   if *s > cols then
      s[cols - 2:0] := "..."
   return s
end

procedure list_notes()
   local i, s, fl, u
   fl := Yes{ FileStream.stdout.is_flowterm_tty() }

   every i := 1 to *notes do {
      u := notes[i]
      s := if u.is_local_file() & /u.query then
         u.get_decoded_path()
      else
         u.str()
      s := if /fl then
         limit(s)
      else
         Files.begin_link(u) || limit(s) || Files.end_link()
      printf("%3d  %s%n", i, s)
   }
end

procedure add_note(s)
   local u
   if is(s, URL) then
      u := s
   else if match("http://" | "https://" | "file:/", s) then
      u := URL(s)
   if /u then
      u := URL("text:" || URL.percent_encode(s, URL.UNRESERVED ++ '/'))
   put(notes, u)
   mod := &yes
   return
end

procedure msg(a[])
   if /opts["s"] then
      write!a
end

procedure add_from_stdin()
   local i
   i := 0
   every add_note(|read()) do i +:= 1
   msg(i, " note(s) added")
end

procedure add_from_clipboard()
   local i, d
   d := GetSelection(Selection.CLIPBOARD, [Selection.URI_LIST_TARGET, Selection.UTF8_STRING_TARGET]).show_modal()
   if /d.result then
      ewrite("No selection available")
   else {
      if d.type == Selection.URI_LIST_TARGET then {
         i := 0
         every add_note(URL(separate_lines(d.result))) do i +:= 1
         msg(i, " note(s) added")
      } else {  # String result
         add_note(d.result)
         msg("Note added")
      }
   }
end

procedure add_parameter(s)
   if Files.access(s) then
      add_note(URL(FilePath(s).canonical().to_url()).set_host(&host))
   else
      add_note(s)
end

procedure do_remove(s)
   local i, j
   s ? {
      if i := tab(upto('-')) then {
         move(1)
         j := tab(0)
         if *i = 0 then
            i := 1
         else if *j = 0 then
            j := *notes
      } else
         i := j := tab(0)
      every notes[integer(i) to integer(j)] := &null
   }
   notes := List{ \!notes }
   mod := &yes
end

procedure do_run(a)
   local l, f, u, s, pid, cmd
   f := []
   every u := !notes do {
      if /opts["u"] & u.scheme == "file" then
         put(f, u.get_decoded_path())
      else
         put(f, u.str())
   }
   (!a == "{}") | help_stop("No {} in command")
   l := []
   every s := !a do {
      if s == "{}" then
         l |||:= f
      else
         put(l, s)
   }
   pid := System.fork() | stop(&why)
   if pid > 0 then
      System.wait(pid)
   else {
      cmd := pop(l)
      System.exec(cmd, l)
   }
end

procedure clear_notes()
   notes := []
   mod := &yes
end

procedure pop_one(a)
   return pop(a) | help_stop("This option needs a single parameter")
end

procedure pop_some(a)
   local s
   while s := pop(a) & s ~== "." do
      suspend s
end

# Used with options, to ignore options after a "run" command.
procedure run_arg(x)
   succeed x == "run"
end

procedure usage(opts)
   write("Usage: note [OPTIONS] CMD ...")
   write("Manage a list of URLs")
   options_help(opts)
   write("Possible values of CMD :-")
   help_line("add N ...", "Add note(s)")
   help_line("l", "List notes")
   help_line("load F", "Add notes from file")
   help_line("cat F ...", "Like load, but from several files")
   help_line("rm I[-J] ...", "Remove range(s) of notes")
   help_line("run CMD ARG ...", "Run command substituting notes for {}")
   help_line("save F", "Save notes to file")
   help_line("u", "Add URLs from clipboard")
   help_line("i", "Add URLs from standard input")
   help_line("uniq", "Trim notes to eliminate duplicates")
   help_line("sort", "Sort notes")
   help_line("sf", "Simplify file:// notes, removing query and setting host to localhost")
   help_line("x", "Clear all notes") 
   help_line(u"Commands may be combined in one invocation, eg “note u l”.")
   help_line(u"  - multiple parameters (except for run) may be ended with a single “.” - eg “note add one two . save res.txt”.")
   exit(0)
end

procedure main(a)
   local c
   opts := options(a, [Opt("u",, "(Run) Substitute file:// URLs rather than paths"),
                       Opt("s",, "Silent mode"),
                       Opt("k",, "Never modify existing notes file"),
                       Opt("i",, "Ignore existing notes file (implies -k)")],
                       usage,, ignore_after(run_arg))

   if /opts["i"] then
      load_notes()
   else {
      notes := []
      opts["k"] := &yes
   }

   while c := pop(a) do {
      case c of {
         "add": {
            every add_parameter(pop_some(a))
         }
         "l": {
            list_notes()
         }
         "rm": {
            every do_remove(pop_some(a))
         }
         "sf": {
            do_sf()
         }
         "uniq": {
            do_uniq()
         }
         "sort": {
            do_sort()
         }
         "x": {
            clear_notes()
         }
         "u": {
            add_from_clipboard()
         }
         "i": {
            add_from_stdin()
         }
         "save": {
            save_to(pop_one(a))
         }
         "load": {
            load_from(pop_one(a))
         }
         "cat": {
            every load_from(pop_some(a))
         }
         "run": {
            do_run(a)
            break
         }
         default: {
            help_stop("Unknown command: ", c)
         }
      }
   }
   if \mod & /opts["k"] then
      save_notes()
end
