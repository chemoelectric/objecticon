#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui, io, ipl.lists, util, ipl.pdco(String)

#
# Convert a list l to a string representation.
#
procedure contents_string(l)
   return "[" || String{ image(!l), ", " } || "]"
end

procedure is_image_file(s)
   return map(Files.get_extension(s)) == ("gif" | "png" | "jpeg" |"jpg")
end

#
# Check that the window attributes are valid.
#
procedure util_check_attribs(dialog, t, valid_set)
   local s
   # Check for attrib names
   every s := !sort(t) do {
      unless member(valid_set, s[1]) then
         return alert_error(dialog, "Invalid attribute " || s[1])
      unless normalize_wattrib(s[1], s[2]) then
         return alert_error(dialog, "Invalid value " || s[2] || " for attrib " || s[1])
   }
   return
end

procedure stringify_wattrib(key, val, quote)
   return if type(val) == "list" then list2str(val, ", ") 
      else if key == WAttrib.RESIZE then if \val then "&yes" else "&no"
      else if type(val) == ("integer" | "real") then string(val)
      else if /quote then text(val) else image(text(val))
end

procedure stringify_wattribs(t)
   local e, r
   r := table()
   every e := !sort(t) do
      insert(r, e[1], stringify_wattrib(e[1], e[2]))
   return r
end

procedure normalize_wattribs(t)
   local e, r
   r := table()
   every e := !sort(t) do
      insert(r, e[1], normalize_wattrib(e[1], e[2]))
   return r
end

procedure resolve_layout_filename(src, layout)
   local t, xl

   t := FilePath(src)

   # Work out the expanded layout, with $ expanded to the
   # file name, less the .icn extension.
   layout ? {
      if xl := tab(upto('$')) then {
         xl ||:= t.get(-1)
         if xl[-4:0] == ".icn" then
            xl[-4:0] := ""
         move(1)
         xl ||:= tab(0)
      } else
         xl := layout
   }

   # Append the expanded layout string to the directory
   # part of the src file.
   if t := t.parent() then
      return t.append(FilePath(xl)).str()
   else
      return xl
end


procedure center_string(win, x, y, s)
   win.draw_string(x - win.text_width(s) / 2, 
                   y - win.get_font_height() / 2 + win.get_font_ascent(), 
                   s)
end


#
# Display an error message
#
procedure alert_error(d, a)
   if string(a) then
      a := [a]
   if /d.win then 
      stop!a
   InfoDialog(a, "Information", "Okay").show_modal(d)
end

# Don't use ucs for a string unless needed.
procedure best_text(s)
   if ord(s) > 127 then
      return s
   else
      return string(s)
end

procedure try_list(val, len)
   local l, t
   if type(val) == "list" then {
      if *val = len then
         return val
      fail
   }

   l := []
   val ? {
      while t := tab(find(",")) do {
         put(l, integer(t)) | fail
         move(1)
      }
      t := tab(0)
      put(l, integer(t)) | fail
   }
   if *l = len then
      return l
end

procedure normalize_wattrib(key, val)
   case key of {
      WAttrib.POS | WAttrib.SIZE | WAttrib.MIN_SIZE | WAttrib.MAX_SIZE |
         WAttrib.BASE_SIZE | WAttrib.INCREMENT_SIZE:
         return try_list(val, 2)
      WAttrib.GEOMETRY:
         return try_list(val, 4)
      WAttrib.RESIZE: 
         return flag(val)

      WAttrib.X | WAttrib.Y | WAttrib.HEIGHT | WAttrib.WIDTH | 
         WAttrib.DX | WAttrib.DY | WAttrib.MIN_WIDTH | 
         WAttrib.MIN_HEIGHT | WAttrib.MAX_WIDTH | WAttrib.MAX_HEIGHT |
         WAttrib.BASE_HEIGHT | WAttrib.BASE_WIDTH |
         WAttrib.INCREMENT_HEIGHT | WAttrib.INCREMENT_WIDTH:
         return integer(val)

      WAttrib.LEADING  |  WAttrib.LINE_WIDTH | WAttrib.MAX_ASPECT_RATIO | WAttrib.MIN_ASPECT_RATIO:
         return real(val)

      WAttrib.FG | WAttrib.BG | WAttrib.DRAW_OP | WAttrib.ICON | WAttrib.FONT | WAttrib.LABEL | 
         WAttrib.LINE_JOIN | WAttrib.LINE_END:
         return best_text(val)
   }
end

procedure normalize_constraints(t)
   local e, r
   r := table()
   every e := !sort(t) do
      insert(r, e[1], normalize_constraint(e[1], e[2]))
   return r
end

procedure normalize_constraint(key, val)
   case key of {
      Grid.X_TAB | Grid.Y_TAB | Grid.X | Grid.Y | Grid.W | Grid.H | Grid.L_INSET | Grid.R_INSET | Grid.T_INSET | Grid.B_INSET:
         return integer(val)
      Grid.X_ALIGN:
         return (string(val) == (Align.L | Align.R | Align.C))
      Grid.Y_ALIGN:
         return (string(val) == (Align.T | Align.B | Align.C))
      Grid.EOL | Grid.X_FILL | Grid.Y_FILL:
         return flag(val)
      Grid.X_WEIGHT | Grid.Y_WEIGHT:
         return real(val)
      default:
         return best_text(val)
   }
end

procedure align_str(val)
   return case val of {
      Align.L: "Align.L"
      Align.R: "Align.R"
      Align.T: "Align.T"
      Align.B: "Align.B"
      Align.C: "Align.C"
      default: image(val)
   }
end

procedure select_str(val)
   return case val of {
      Select.NONE : "Select.NONE"
      Select.ONE : "Select.ONE"
      Select.MANY : "Select.MANY"
      default: image(val)
   }
end

procedure constraint_str(val)
   return case val of {
      Grid.X_TAB : "Grid.X_TAB"
      Grid.Y_TAB : "Grid.Y_TAB"
      Grid.EOL : "Grid.EOL"
      Grid.X : "Grid.X"
      Grid.Y : "Grid.Y"
      Grid.W : "Grid.W"
      Grid.H : "Grid.H"
      Grid.L_INSET : "Grid.L_INSET"
      Grid.R_INSET : "Grid.R_INSET"
      Grid.T_INSET : "Grid.T_INSET"
      Grid.B_INSET : "Grid.B_INSET"
      Grid.X_FILL : "Grid.X_FILL"
      Grid.Y_FILL : "Grid.Y_FILL"
      Grid.X_ALIGN : "Grid.X_ALIGN"
      Grid.Y_ALIGN : "Grid.Y_ALIGN"
      Grid.X_WEIGHT : "Grid.X_WEIGHT"
      Grid.Y_WEIGHT : "Grid.Y_WEIGHT"
      default: image(val)
   }
end

procedure stringify_constraint(key, val, quote, c)
   case key of {
      Grid.X_TAB | Grid.Y_TAB | Grid.X | Grid.Y | Grid.W | Grid.H | Grid.L_INSET | Grid.R_INSET | Grid.T_INSET | Grid.B_INSET:
         return string(val)
      Grid.X_ALIGN | Grid.Y_ALIGN:
         return if /quote then val else if /c then align_str(val) else c.align_str(val)
      Grid.EOL | Grid.X_FILL | Grid.Y_FILL:
         return if \val then "&yes" else "&no"
      Grid.X_WEIGHT | Grid.Y_WEIGHT:
         return string(val)
      default:
         return if /quote then text(val) else image(text(val))
   }
end

procedure stringify_constraints(t)
   local e, r
   r := table()
   every e := !sort(t) do
      insert(r, e[1], stringify_constraint(e[1], e[2]))
   return r
end

#
# Check that the window attributes are valid.
#
procedure util_check_constraints(dialog, t)
   local s
   # Check for attrib names
   every s := !sort(t) do {
      if not normalize_constraint(s[1], s[2]) then
         return alert_error(dialog, "Invalid value " || s[2] || " for constraint " || s[1])
   }
   return
end

#
# Is an identifier valid?
#
procedure valid_id(s)
   succeed *s > 0 &
      any(&letters ++ '_', s) &
      not(upto(~(&letters ++ &digits ++ '_'), s))
end

#
# Is an identifier valid?
#
procedure valid_dotted_id(s)
   succeed *s > 0 &
      any(&letters ++ '_', s) &
      not(upto(~(&letters ++ &digits ++ '_.'), s))
end

#
# Convert a list of strings or ucs to a corresponding list with the
# given target type.
#
procedure convert_text_list(l, target)
   return ipl.pdco.List{ text_convert(!l, target) }
end

#
# Given a list of strings l, remove all trailing empty lines.
#
procedure trim_trailing_empty(l)
   while *l[-1] = 0 do
      pull(l)
   return l
end
