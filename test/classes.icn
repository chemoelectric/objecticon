import lang, util, io, first, second, datastruct

invocable proc1, proc2

class One()
   public x,y
   public new(x,y)
      self.x := x
      self.y := y
      return
   end
end

class Two()
   public id, junk
   public object_equals(other)
      return id=other.id
   end

   public object_output(o)
      return o.writes("id=" || id)
   end

   public object_clone()
      return Two(id, "cloned")
   end

   public object_hash()
      return id
   end

   public new(id, junk)
      self.id := id
      self.junk := junk
      return
   end
end

class Three()
   public x, y

   public object_clone()
      return Three(x, "cloned")
   end

   public new(x,y)
      self.x := x
      self.y := y
      return
   end
end

class Four()
   public x,y,z
end

class Five()
   public object_output(oo)
      return oo.writes("Nothing here")
   end
end

class Six()
   public x,y

   public new()
      x := 100
      y := self
      return
   end
end

class Seven()
   public a,b,c,d

   private object_output(oo)
      return oo.object_selected(self, "a","c")
   end

   public new()
      a := 1
      b := 2
      c := 3
      d := 4
      return
   end
end

class Eight()
   public thing()
      write("hello")
   end

   public defer dm()
end

class Nine()
end

class Ten(Nine)
   public static ten1()
      return "in ten1"
   end
end

class Eleven(Eight,Ten)
   public z, one, two, three, four, five, six, seven, eight

   public static a,b,c

   public eleven1()
      return "in eleven1"
   end

   public new()
      z := 100
      return
   end
end

class Twelve()
   public a,b,c,d
end

procedure eset(e)
   local s
   s := set()
   while insert(s, @e)
   return s
end

procedure do_class(c)
   local f, i, o, s1, s2, s3

   write("-------------\nClass ", Class.get_name(c))
   pr_seq{"Supers", Class.get_supers(c)}
   pr_seq{"Implemented classes", Class.get_implemented_classes(c)}
   write("Flags: ", Class.get_class_flags(c))
   write("Num fields: ", Class.get_n_fields(c))
   pr_seq{"Field names", Class.get_field_names(c)}
   write("Num class fields: ", Class.get_n_class_fields(c))
   pr_seq{"Class field names", Class.get_class_field_names(c)}
   write("Num instance fields: ", Class.get_n_instance_fields(c))
   pr_seq{"Instance field names", Class.get_instance_field_names(c)}
   yes_no{"is(c,c)", is(c,c)}
   yes_no{"Class.implements(c,c)", Class.implements(c,c)}
   yes_no{"is(c,Class)", is(c,Class)}
   yes_no{"Class.implements(c,Class)", Class.implements(c,Class)}
   yes_no{"Class.for_name check", Class.for_name(Class.get_name(c)) === c}
   yes_no{"Field count check", Class.get_n_fields(c) = Class.get_n_class_fields(c) +
             Class.get_n_instance_fields(c)}
   s1 := eset{Class.get_field_names(c)}
   s2 := eset{Class.get_instance_field_names(c)}
   s3 := eset{Class.get_class_field_names(c)}
   yes_no{"Name set check1", *s1 = *s2+*s3}
   yes_no{"Name set check2", equals(s1, s2 ++ s3)}

   o := c() | fail

   i := 1
   every f := Class.get_field_names(c) do {
      write("Field ", f, " index ", i)
      write("\tName: ", Class.get_field_name(c, f))
      write("\tIndex: ", Class.get_field_index(c, f))
      write("\tFlags: ", Class.get_field_flags(c, f))
      write("\tDefining class: ", imagex(Class.get_field_defining_class(c, f)))
      write("\tValue via class: ", imagex(Class.getf(c, f)) | "Not accessible")
      write("\tValue via instance: ", imagex(Class.getf(o, f)) | "Not accessible")
      i +:= 1
   }


end

procedure test_Class()
   local x
   x := Eight()
   write("classof(x): ", image(classof(x)))

   yes_no{"is(x,Eight)", is(x,Eight)}
   yes_no{"is(x,Class)", is(x,Class)}
   yes_no{"Class.implements(Eight,Eight)", Class.implements(Eight,Eight)}
   yes_no{"Class.implements(Eleven,Eight)", Class.implements(Eleven,Eight)}
   yes_no{"Class.implements(Eleven,Ten)", Class.implements(Eleven,Ten)}
   yes_no{"Class.implements(Eight,Eleven)", Class.implements(Eight,Eleven)}
   yes_no{"Class.for_name(\"junk\")", Class.for_name("junk")}
   try{"Class.for_name([])", Class.for_name([])}
   try{"is()", is()}
   try{"is(\"junk\")", is("junk")}
   try{"is(x,\"junk\")", is(x,"junk")}
   try{"is(\"junk\",Eleven)", is("junk",Eleven)}
   try{"classof(Time())",classof(Time())}
   try{"classof()",classof()}
   try{"classof(\"abc\")",classof("abc")}
   try{"Class.get_supers()", Class.get_supers()}
   try{"Class.get_supers(1)", Class.get_supers(1)}
   try{"Class.get_implemented_classes()", Class.get_implemented_classes()}
   try{"Class.get_implemented_classes(1)", Class.get_implemented_classes(1)}

   pr_seq{"Class.get_supers(Eleven)", Class.get_supers(Eleven)}
   pr_seq{"Class.get_implemented_classes(Eleven)", Class.get_implemented_classes(Eleven)}

   do_class(Eleven)
   do_class(Eight)
   do_class(Nine)
   do_class(Ten)

   x := Eleven()
   try{"Test eleven1", Class.get(x, "eleven1")()}
   try{"Test set", Class.get(x, "z") := 99}
   yes_no{"x.z = 99", x.z = 99}

   x := Seven()
   to_string_check([x,x])

   try{ "Class.get(Eleven, \"rubbish\")", Class.get(Eleven, "rubbish") }
   try{ "Class.get(Eleven, \"a\")", Class.get(Eleven, "a") }
   try{ "Class.junk", Class.junk }
end

procedure subtype(x)
   case type(x) of {
      "class"|"object":return Class.get_name(x)
      "constructor"|"record":return Constructor.get_name(x)
      "procedure":return Proc.get_name(x)
      default: runerr(123,x)
   }
end

procedure clone_check(a)
   local b
   write("Clone check: ", to_stringx(a,1))
   b := clone(a)
   yes_no{"\tequals(a,a)", equals(a,a)}
   yes_no{"\tequals(b,b)", equals(b,b)}
   yes_no{"\tequals(a,b)", equals(a,b)}
   yes_no{"\tequals(b,a)", equals(b,a)}
   yes_no{"\thash(a)=hash(b)", hash(a)=hash(b)}
   yes_no{"\ttype(a)==type(b)", type(a)==type(b)}
   try{"\tsubtype(a)==subtype(b)", subtype(a)==subtype(b)}
   if type(a) == "object" then
      yes_no{"\tclassof(a)===classof(b)", classof(a)===classof(b)}
end

procedure equals_check(a,b)
   write("Equals check: ", to_stringx(a,1), " -v- ", to_stringx(b,1))
   yes_no{"\tequals(a,a)", equals(a,a)}
   yes_no{"\tequals(b,b)", equals(b,b)}
   yes_no{"\tequals(a,b)", equals(a,b)}
   yes_no{"\tequals(b,a)", equals(b,a)}
   yes_no{"\thash(a)=hash(b)", hash(a)=hash(b)}
   yes_no{"\ttype(a)==type(b)", type(a)==type(b)}
   try{"\tsubtype(a)==subtype(b)", subtype(a)==subtype(b)}
   if type(a) == type(b) == "object" then
      yes_no{"\tclassof(a)===classof(b)", classof(a)===classof(b)}
end

procedure to_string_check(a)
   write("to_string: ",to_stringx(a))
end

procedure proc1()
end

procedure proc2()
end

record rec1(a,b,c)

procedure rand_obj(seen, depth)
   if /seen then {
      seen := set()
      return case ?4 of {
         1 : rand_list(seen, 0)
         2 : rand_set(seen, 0)
         3 : rand_table(seen, 0)
         4 : rand_class(seen, 0)
      }
   }

   if depth > 5 then
      return ?seen

   return case ?25 of {
      1 to 5: rand_string()
      6 : ?0
      7 to 10: ?1000
      11 : rand_list(seen, depth)
      12 : rand_set(seen, depth)
      13 : rand_table(seen, depth)
      14 : rand_class(seen, depth)
      15 : &null
      16 : cset(rand_string())
      17 to 21 : ?seen | []
      default: rand_string(seen, depth)
   }
end

procedure rand_class(seen, depth)
   local c
   c := Twelve()
   insert(seen, c)
   every (c.a|c.b|c.c|c.d) := rand_obj(seen, depth + 1)
   return c
end

procedure rand_list(seen, depth)
   local l
   l := []
   insert(seen, l)
   every 1 to ?12 do
      put(l, rand_obj(seen, depth + 1))
   return l
end

procedure rand_set(seen, depth)
   local s
   s := set()
   insert(seen, s)
   every 1 to ?12 do
      insert(s, rand_obj(seen, depth + 1))
   return s
end

procedure rand_table(seen, depth)
   local t
   t := table(rand_obj(seen, depth + 1))
   insert(seen, t)
   every 1 to ?12 do
      insert(t, rand_obj(seen, depth + 1), rand_obj(seen, depth + 1))
   return t
end

procedure rand_string()
   local s
   s := ""
   every 1 to ?16 do
      s ||:= ?&lcase
   return s
end

procedure test_langprocs()
   local x,m,y,p,q,r,a,b,c,d,e,l,l1,l2,cl,t,u,s1,s2,t1,t2

   clone_check(One(1,2))
   clone_check(rec1(1,2,3))
   clone_check(&null)
   clone_check(1)
   clone_check("fred")
   clone_check(["fred","mary",100,3.2,'abc',16rffffffffffffff])
   l := [6,7,8]
   m := [6,7,8]
   clone_check(l)
   l1 := [l,m,1,[m,l],3,4,5,l]
   l2 := [m,l,1,[l,m],3,4,5,m]
   equals_check(l1,l2)
   put(l2,5)
   equals_check(l1,l2)
   equals_check(1,1.0)
   equals_check(1, 1)
   equals_check("fred","fred")
   equals_check("bred","fred")

   p := proc("proc1") | stop(23)
   q := proc("proc1") | stop(23)
   equals_check(p, p)
   equals_check(p, q)
   yes_no{"p===q", p===q}

   p := proc("proc1") | stop(26)
   q := proc("proc2") | stop(27)
   equals_check(p, q)

   l1 := [1,2,[3,4],[],[[[3,4]]]]
   l2 := [1,2,[3,4],[],[[[3,4]]]]
   equals_check(l1, l2)
   equals_check([l1,l1,l1],[l1,l1,l1])

   l1 := [1,2,[3,4],[],[[[3,5]]]]
   l2 := [1,2,[3,4],[],[[[3,4]]]]
   equals_check(l1, l2)
   equals_check(l1, l1)

   equals_check()

   l1 := ["the","cat","sat","on","the","mat"]
   l2 := ["the","cat","sat","on","the","mat"]
   equals_check(l1, l2)

   l1 := ["the","cat","sat","off","the","mat"]
   l2 := ["the","cat","sat","on","the","mat"]
   equals_check(l1, l2)

   x := [1,2]
   put(x,x)
   y := [1,2]
   put(y,y)
   equals_check(x, y)
   clone_check(x)

   x := [1,2]
   put(x,x)
   y := [1,2]
   put(y,x)
   equals_check(x,y)

   x := [1,2]
   equals_check([x,x],[[1,2],[1,2]])

   x := []
   equals_check([x,x],[x,1])

   x := []
   put(x,x)
   y := []
   put(y,y)
   equals_check(x,y)

   p := Three()
   q := Three()
   r := Three()
   equals_check(p,q)
   equals_check(p,r)
   equals_check([p,p],[q,r])

   a := One(1,Two(1,2))
   b := One(1,Two(1, 3))
   c := One(1,3)

   equals_check(a,b)
   equals_check(a,c)
   
   a := Two(1,2)
   b := Two(2,2)
   c := Two(3,2)
   d := Two(4,2)
   e := One(Two(5),Two(6))
   l := [a,b,c]
   clone_check(l)
   l := [e,e]
   clone_check(e)

   a := One(1, Three(3, "junk"))
   b := [a,a]
   clone_check(b)

   a := One("hello",Two(1,2))
   b := One("hello",Two(1, 3))
   equals_check(a,b)

   a := One(1)
   a.y := One(One(One(a,a)))
   a.x := a.y
   clone_check(a)

   clone_check(Four(99, [1,2,3], "abc"))

   a := One([Two(1),Two(2)])
   a.x := set()
   insert(a.x,a)
   clone_check(a)

   a := Five()
   clone_check(a)

   cl := ClTable()
   a := Two(22)
   cl.insert(1, a)
   cl.insert(2, a)
   clone_check(cl)

   a := Six()
   clone_check(a)

   cl := ClTable()
   cl.insert(10, [])
   clone_check(cl)

   t := table()
   insert(t, 1, 2)
   insert(t, 3, 4)
   insert(t, t, t)
   u := table()
   insert(u, 1, 2)
   insert(u, 3, 4)
   insert(u, u, u)
   equals_check(t, u)
   clone_check(t)

   a := []
   put(a, a)
   b := []
   put(b, b)
   c := []
   put(c, c)
   equals_check([a,a],[b,c])

   s1 := set( [], [1,2,3], [2] )
   s2 := set( [1,2,3], [], [2] )
   equals_check(s1,s2)

   s1 := set()
   insert(s1,s1)
   s2 := set()
   insert(s2,s2)
   equals_check(s1,s2)

   s1 := set( [1], [2,2], [2,2], [3] )
   s2 := set( [1], [2,2], [2,2], [3] )
   equals_check(s1,s2)

   s1 := set( [1], [1], [2,2], [3] )
   s2 := set( [1], [2,2], [2,2], [3] )
   equals_check(s1,s2)

   t1 := Time.simple_parse("2000 10 10 20:11:33 BST")
   t2 := Time.simple_parse("2000 10 10 20:11:33 BST")
   equals_check(t1,t2)
   equals_check(set(t1), set(t2))

   t2.set_hour(11)
   equals_check(t1,t2)
   equals_check(set(t1), set(t2))

   equals_check(t1, One(1,2))

   a := Sixteen()
   b := Sixteen()
   c := Fifteen()
   equals_check(a.g, b.g)
   equals_check(a.f, c.f)
   equals_check(a.f, a.g)

   a := cast(Sixteen(), Fifteen)
   b := cast(Sixteen(), Fifteen)
   c := cast(Fifteen(), Fifteen)
   d := cast(Sixteen(), Sixteen)
   equals_check(a, b)
   equals_check(a, c)
   equals_check(a, d)

   a := Fifteen()
   b := Fifteen()
   a.val := a.f
   b.val := b.f
   equals_check(a,b)
end

procedure test_rand_objects()
   local x,c

   write("Random object test starting")
   &random := 0
   every 1 to 200 do {
      x := rand_obj()
      c := clone(x)
      hash(c) = hash(x) | write("FAILED(hash): ", to_stringx(x))
      equals(c, x) | write("FAILED(equals): ", to_stringx(x))
   }
   write("Random object test finished")
end

class Thirteen()
   private var

   public defer tryit1()

   public defer tryit2()

   public defer tryit3()

   public static setup1()
      Class.set_method("tryit1", default.tryit1)
   end

   public static setup3()
      try{"Setup err4", Class.set_method("var", default.tryit2)}
      try{"Setup err5", Class.set_method("setup1", default.tryit2)}
      try{"Setup err6", Class.set_method("tryit3", Fourteen.setup2)}
   end
end

class Fourteen(Thirteen)
   public static setup2()
      try{"Setup err3", Class.set_method("tryit2", default.tryit2)}
   end
end

class Fifteen()
   public val

   public f()
   end
end

class Sixteen(Fifteen)
   public g()
   end
end

procedure tryit1(o)
   write("Tryit1 ", imagex(o))
   yes_no{"getf", Class.getf(o, "var")}
end

procedure tryit2()
end

procedure test_set_method()
   local t, e
   t := Thirteen()
   tryit1(t)
   Thirteen.setup1()
   tryit1(t)
   t.tryit1()
   try{"Setup err1", Thirteen.setup1()}
   try{"Setup err2", Class.set_method("abc", tryit2)}
   Fourteen.setup2()
   Thirteen.setup3()
   
   second.p()
   first.FirstOne.inject(second.p)
   second.p()
   first.FirstOne.f()
   write(Proc.get_name(second.p))
   write(Proc.get_name(FirstOne.f))
   write(Proc.get_name(FirstOne.f,1))
   write(Proc.get_package(second.p))
   write(Proc.get_package(FirstOne.f))
   write(Proc.get_package(FirstOne.f,1))
   every e := Proc.get_location(second.p) | Proc.get_location(FirstOne.f) | Proc.get_location(FirstOne.f,1) do
      write(e.file[-21:0],",",e.line)
end

class E1()
   private x

   private object_equals(other)
      return other.x === x
   end

   public new(x)
      self.x := x
      return
   end
end

class E2(E1)
end

class E3(E1)
   private object_equals(other)
      return other.x === x
   end
end

procedure test_inherit_equals()
   local x1,x2

   x1 := SortTable(100,,"abc",1,  "dog",2,  "cat", 3)
   x2 := BuiltinTable(table(100,"abc",1,  "dog",2,  "cat", 3))
   yes_no{"equals(x1,x2)", equals(x1,x2)}

   x1 := TableSet(x1)
   x2 := BuiltinSet(set("cat","dog","abc"))
   yes_no{"equals(x1,x2)", equals(x1,x2)}

   x1 := E1(10)
   x2 := E2(10)
   yes_no{"equals(x1,x2)", equals(x1,x2)}

   x2 := E3(10)
   yes_no{"equals(x1,x2)", equals(x1,x2)}
end

procedure main()
   test_Class()
   test_langprocs()
   test_set_method()
   test_rand_objects()
   test_inherit_equals()
end
