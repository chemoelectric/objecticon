import gui


class CanvasLayout(CanvasObject)
   public gen_code(c)
      c.line(name || " := " || self.class_name || "()")
      c.add_var(name, class_variable)
      c.add_import(self.import_name, self.class_name)
   end

   private pre_decode()
      new()
   end

   #
   # Return the I/O template.
   #
   public get_template()
      suspend ["Name", "name"] |
              ["Class Name", "class_name"] |
              ["Import Name", "import_name"] |
              ["Class Variable", "class_variable"] |
              ["Parent", "parent"]
   end

   public dialog()
      return LayoutEdit(self)
   end

   public new()
      self.name := "layout"
      self.class_name := "CustomLayout"
      self.import_name := "gui"
      return
   end
end


class CanvasGridLayout(CanvasLayout,GridLayout)
   public doi_val, dii_val
   public gen_code(c)
      CanvasLayout.gen_code(c)
      c.chain("set_doi(" || \self.doi_val || ")")
      c.chain("set_dii(" || \self.dii_val || ")")
      c.chain("set_extra(" || image(self.extra) || ")")
   end

   #
   # Duplicate object.
   #
   public dup()
      local c
      c := CanvasGridLayout()
      CanvasObject.dup_fields(c)
      c.doi_val := self.doi_val
      c.dii_val := self.dii_val
      c.extra := self.extra
      c.set_doi(\c.doi_val)
      c.set_dii(\c.dii_val)
      return c
   end

   #
   # Return the I/O template.
   #
   public get_template()
      suspend ["DII val", "dii_val"] |
              ["DOI val", "doi_val"] |
              ["Extra", "extra"] | CanvasLayout.get_template()
   end

   public post_decode()
      self.set_doi(\self.doi_val)
      self.set_dii(\self.dii_val)
   end

   public dialog()
      return GridLayoutEdit(self)
   end

   public new()
      CanvasLayout.new()
      GridLayout.new()
      self.class_name := "GridLayout"
      #self.debug := 1
      return
   end
end

