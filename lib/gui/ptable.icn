package gui

import util, ipl.pdco

#
# A column in a `PTable`.
#
abstract class BasePTableColumn()
   public
      ptable,
      fixed_width,   # Optional fixed width
      calc_width,    # Width set from calculate_column_width
      width,         # Width after allocation of extra space
      weight
   
   public initially()
   end

   public finally()
   end

   #
   # Set the weight of the column.  Additional horizontal space in the
   # table is distributed among the columns in proportion to column
   # weights.
   #
   public set_weight(w)
      self.weight := w
      link
   end

   #
   # Set the initial width of the column, in pixels.  If this is
   # not provided, then the width will be set automatically.
   # :Parameters :
   # :  `x` - The width
   #
   public set_fixed_width(x)
      self.fixed_width := x
      link
   end

   #
   # The column's index
   #
   public get_column_index()
      return ptable.get_column_index(self)
   end

   #
   # Generate the column's data, as a slice of the contents list.
   #
   public slice()
      suspend ptable.slice(get_column_index())
   end

   #
   # Return the desired height of the lines for the cells in this
   # column.  This should return an integer if the heights are all the
   # same, or a list containing the different heights for each line.
   #
   # :Parameters :
   # :  `W` - the cloned window to draw into
   #
   public abstract calculate_line_height(W)

   public abstract calculate_column_width(W)

   #
   # Draw an individual cell for this column.
   #
   # :Parameters :
   # :  `W` - the cloned window to draw into
   # :  `data` - the data to draw
   # :  `line` - the line number of the data
   # :  `col` - the column number of the data
   # :  `cx` - the x position of the cell
   # :  `cy` - the y position of the cell
   # :  `ch` - the height of the cell
   #
   public abstract draw_cell(W, data, line, col, cx, cy, ch)

   public new()
      weight := 0
      return
   end
end

#
# The basic column, which displays simple textual data.
#
class PTableColumn(BasePTableColumn)
   public
      align

   #
   # Set the column alignment
   # :Parameters :
   # :  `x` - A constant from `Align`
   public set_align(x)
      self.align := x
      link
   end

   public override calculate_line_height(W)
      return W.get_line_height()
   end

   public override calculate_column_width(W)
      return \fixed_width |
         MaxNN{ W.text_width(detab(slice())) }
   end

   public override draw_cell(W, data, line, col, cx, cy, ch)
      local x1, y1
      x1 := case align of {
         Align.R : cx + width - W.text_width(data)
         Align.C : cx + (width - W.text_width(data)) / 2
         Align.L : cx
         default : runerr("Bad column alignment", align)
      }
      y1 := cy + (ch - W.get_line_height()) / 2
      W.draw_string(x1, y1 + W.get_line_ascent(), data)
   end

   public override new()
      BasePTableColumn.new()
      align := Align.L
      return
   end
end

# A table column which delegates interpretation of the data to
# an `ItemPaint` instance.
#
class ItemPaintPTableColumn(BasePTableColumn)
   public
      item_paint,
      item_border

   public override initially()
      \self.item_paint | runerr("ItemPaint not set")
      BasePTableColumn.initially()
      self.item_paint.initially(ptable)
      self.item_border.initially(ptable)
   end

   public override finally()
      BasePTableColumn.finally()
      self.item_paint.finally()
      self.item_border.finally()
   end

   public set_item_paint(r)
      if (\ptable).is_initialized() then {
         (\self.item_paint).finally()
         self.item_paint := r
         self.item_paint.initially(ptable)
      } else
         self.item_paint := r
      link
   end

   #
   # Set a border to draw along with each Paint instance.
   #
   public set_item_border(b)
      if (\ptable).is_initialized() then {
         (\self.item_border).finally()
         self.item_border := b
         self.item_border.initially(ptable)
      } else
         self.item_border := b
      link
   end

   public set_align(x)
      self.item_border.x_align := x
      link
   end

   public override calculate_line_height(W)
      local bh
      bh := item_border.get_total_height()
      return item_paint.get_constant_height(W) + bh |
         ipl.pdco.List{ item_paint.get_height(W, slice()) + bh }
   end

   public override calculate_column_width(W)
      return \fixed_width |
         MaxNN{ item_paint.get_width(W, slice()) } + item_border.get_total_width()
   end

   public override draw_cell(W, data, line, col, cx, cy, ch)
      local r
      r := Rect(cx, cy, width, ch)
      item_paint.draw_rect(W, data, item_border.float(r, item_paint.get_size(W, data)))
      item_border.draw_rect(W, r)
   end

   public override new()
      BasePTableColumn.new()
      self.set_item_border(NullBorder().
                           set_x_align(Align.L))
      return
   end
end

#
# A ptable column that provides on/off checkbox-like behaviour for
# each of its lines.   The corresponding data items are &yes or &no
# strings, representing on or off button states respectively.
#
class CheckBoxPTableColumn(BasePTableColumn, Connectable)
   public 
      single_selection_flag,
      unchecked_paint, 
      checked_paint,
      mouse_down_listener,
      align

   #
   # Set the column alignment
   # :Parameters :
   # :  `x` - A constant from `Align`
   public set_align(x)
      self.align := x
      link
   end

   public override calculate_column_width(W)
      return unchecked_paint.w + scale(8)
   end

   public override calculate_line_height()
      return unchecked_paint.h + scale(8)
   end

   #
   # Set whether or not we select one item in the column; the behaviour
   # is then like a column of radio buttons rather than a column of
   # checkboxes.
   #
   public set_single_selection(s)
      self.single_selection_flag := need_flag(s)
      link
   end

   #
   # Set the up/down icons to the given (distinct) `Paint` instances.
   # The two images must have the same dimensions.
   # :Parameters :
   # :  `x` - The up image
   # :  `y` - The down image
   #
   public set_box_paint(x, y)
      if (\ptable).is_initialized() then {
         (\self.unchecked_paint).finally()
         (\self.checked_paint).finally()
         self.unchecked_paint := x
         self.checked_paint := y
         self.unchecked_paint.initially(ptable)
         self.checked_paint.initially(ptable)
         ptable.invalidate()
         unchecked_paint.w = checked_paint.h | runerr("Image widths differ")
         unchecked_paint.h = checked_paint.h | runerr("Image heights differ")
      } else {
         self.unchecked_paint := x
         self.checked_paint := y
      }
      link
   end

   public mouse_down(e)
      local line, col
      ptable.get_column_under_pointer(e) === self | fail
      line := ptable.get_line_under_pointer(e) | fail
      col := get_column_index()
      if \self.single_selection_flag then {
         every ptable.slice(col) := &no
         ptable.get_cell(line, col) := &yes
      } else
         ptable.get_cell(line, col) := 
                     toggle_flag(ptable.get_cell(line, col))
      ptable.contents_changed()
      fire(Event.VALUE_CHANGED, line)
   end

   public override initially()
      BasePTableColumn.initially()
      #
      # Set the icons if necessary
      #
      if /unchecked_paint then {
         # Since the parent ptable is already initialized, the
         # following will initialize the paints.
         if /single_selection_flag then
            set_box_paint(ImagePaint().set_cache("gui.BOX_UP"), ImagePaint().set_cache("gui.BOX_DOWN"))
         else
            set_box_paint(ImagePaint().set_cache("gui.DIAMOND_UP"), ImagePaint().set_cache("gui.DIAMOND_DOWN"))
      } else {
         unchecked_paint.initially(ptable)
         checked_paint.initially(ptable)
      }
      mouse_down_listener := ptable.connect(mouse_down, Event.MOUSE_LEFT_PRESS).last_listener
      unchecked_paint.w = checked_paint.h | runerr("Image widths differ")
      unchecked_paint.h = checked_paint.h | runerr("Image heights differ")
   end

   public override finally()
      BasePTableColumn.finally()
      mouse_down_listener.disconnect()
      unchecked_paint.finally()
      checked_paint.finally()
   end

   public override draw_cell(W, data, line, col, cx, cy, ch)
      local x1, y1, i
      x1 := case align of {
         Align.R : cx + width - unchecked_paint.h
         Align.C : cx + (width - unchecked_paint.h) / 2
         Align.L : cx
         default : runerr("Bad column alignment", align)
      }
      y1 := cy + (ch - unchecked_paint.h) / 2
      i := if \data then checked_paint else unchecked_paint
      i.draw(W, x1, y1)
   end

   public override new()
      Connectable.new()
      BasePTableColumn.new()
      align := Align.C
      return
   end
end

#
# A `PTable` is like a `Table`, but without headers.  Column widths can also be calculated
# automatically.
#
class PTable(SelectableScrollArea)
   public
      cols,
      inset

   #
   # Set the inset to use between columns.
   #
   public set_inset(n)
      self.inset := n
      link
   end

   #
   # Add the given PTableColumn to this PTable.
   # :Parameters :
   # :  `c` - The column to add.
   # :  `i` - The index to add at; if omitted then the new column
   #           is appended to the end.
   #
   public add_column(c, i)
      /i := 0
      insert(cols, i, c)
      c.ptable := self
      if is_initialized() then
         c.initially()
      link
   end

   #
   # Remove a column
   # :Parameters :
   # :  `c` - The column to remove.
   #
   public remove_column(c)
      remove_column_index(get_column_index(c))
      link
   end

   #
   # Remove a column
   # :Parameters :
   # :  `i` - The index to remove
   #
   public remove_column_index(i)
      local c
      c := self.cols[i] | fail
      delete(cols, i)
      if is_initialized() then
         c.finally()
      link
   end

   #
   # Get the index of the given column
   #
   public get_column_index(c)
      return keyof(self.cols, c)
   end

   public override initially()
      if *cols = 0 then
         runerr("No PTableColumns in PTable")
      SelectableScrollArea.initially()
      every (!cols).initially()
   end

   public override finally()
      every (!cols).finally()
      SelectableScrollArea.finally()
   end

   public override calculate_line_height()
      local t, m, h, r, e, i
      t := []
      m := 0
      every h := (!cols).calculate_line_height(self.cbwin) do {
         if integer(h) then
            m <:= h
         else
            put(t, h)
      }
      #
      # Easy case, all columns report fixed line heights, so the line height for the
      # table is the maximum.
      if *t = 0 then
         return m

      r := list(*t[1], m)
      every e := !t do {
         *e = *contents | syserr("Inconsistent table column line height list sizes returned")
         every i := 1 to *r do
            r[i] <:= e[i]
      }

      return r
   end

   public slice(col)
      suspend (!contents)[col]
   end

   public get_cell(line, col)
      return contents[line, col]
   end

   public override calculate_subject_width()
      local mw, c
      mw := (*cols + 1) * inset
      every c := !cols do {
         c.calc_width := c.calculate_column_width(self.cbwin)
         mw +:= c.calc_width
      }
      return mw
   end

   public get_column(n)
      return cols[n]
   end

   #
   # Return the column under the current x, y cursor.
   #
   public get_column_under_pointer(e)
      local c, colx
      in_region(e) | fail
      colx := get_subject_x() + inset
      every c := !cols do {
         if colx <= e.x < colx + c.width then
            return c
         colx +:= c.width + inset
      }
   end

   public override draw()
      local yp, i, j, info, h, lh, r, col, cc, colx, W

      r := view.get_cbwin_clip()

      info := get_line_info(r) | fail
      h := get_line_height()

      colx := get_subject_x() + inset
      use {
         W := view.cbwin.clone(), 
         {
            every j := 1 to *cols do {
               col := cols[j]
               # If the column is visible
               if cc := view.cbwin.drawable(colx, r.y, col.width, r.h) then {
                  # Clip on the column.
                  W.clip!cc
                  yp := r.y - info.offset
                  # Write each line in this column
                  every i := info.first to info.last do {
                     lh := integer(h) | h[i]
                     col.draw_cell(W, self.contents[i, j], i, j, colx, yp, lh)
                     yp +:= lh
                  }
               }
               colx +:= col.width + inset
            }
         }
      }
      # Call the superclass draw to do the selection, highlight etc.
      SelectableScrollArea.draw()
   end

   public override draw_line_data(xp, yp, lh, i)
   end

   public override set_internal_fields()
      local extra, tw, c, lc, ta, t
      SelectableScrollArea.set_internal_fields()
      # Distribute any extra width to weighted columns.
      every c := !cols do
         c.width := c.calc_width
      extra := view.w - get_subject_width()
      if extra > 0 then {
         tw := 0
         every tw +:= (!cols).weight
         if tw > 0 then {
            ta := extra
            every c := !cols do {
               if c.weight > 0 then {
                  t := integer((extra * c.weight) / tw)
                  c.width +:= t
                  ta -:= t
                  lc := c
               }
            }
            # Any leftover to last one
            lc.width +:= ta
         }
      }
   end
   
   public override new()
      SelectableScrollArea.new()
      cols := []
      inset := Gui.TEXT_INSET
      return
   end
end
