#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import 
   util,
   ipl.strings,
   ipl.lists

#
# This class displays a list of strings.
#
class TextDisplay(LineBasedScrollArea)
   public
      contents, 
      split_words_flag,
      view_list,
      view_list_split_width,
      long_line,
      line_splitter,
      last_split,
      tab_width

   public get_split(sw)
      local s, i, pos, j, p, l, ll, v

      if \last_split &
         not(is(line_splitter, WidthLineSplitter) & last_split.width ~=== sw) then
         return last_split

      l := []
      every i := 1 to *self.contents do {
         pos := 1
         s := self.contents[i]
         every j := line_splitter.split(s, sw) do {
            p := s[pos:j]
            put(l, ViewLine(i, p, pos, j - 1, 
                            text_width_ex(view.cbwin, p,,, self.tab_width)))
            pos := j
         }
         l[-1].last +:= 1
      }
      ll := l[1] | &null
      every v := !l do {
         if v.tw > ll.tw then
            ll := v
      }
      return last_split := TextSplit(sw, l, ll)
  end

   public override get_default_subject_height(dw)
      local spl
      spl := get_split(dw  - 2 * Gui.TEXT_INSET)
      return get_line_height() * *spl.lines
   end

   public override get_default_subject_width()
      local spl
      spl := get_split()
      return 2 * Gui.TEXT_INSET + ((\spl.long_line).tw | 0)
   end

   public override calculate_line_count()
      if /view_list then
         create_view_list()
      return *self.view_list
   end

   #
   # Useful method to get the contents as a string, with each line
   # separated by the end-of-line character.
   #
   public get_contents_str()
      return cat_lines(self.contents)
   end

   #
   # Useful method to set the contents from a string in which each line
   # is separated by the end-of-line character.
   #
   public set_contents_str(s)
      set_contents(break_lines(s))
      link
   end

   #
   # Set the data to be displayed.
   # :Parameters :
   # :  `x` - The list of data.
   #
   public set_contents(x)
      self.contents := need_list(x)
      contents_changed()
      link
   end

   public override finally()
      LineBasedScrollArea.finally()
      # In case the component changes the contents and is then re-inited.
      clear_split_list()
   end

   #
   # Call this method if the contents list, previously
   # set with `set_contents()`, has changed.
   #
   public contents_changed()
      clear_split_list()
      compute_and_invalidate()
      link
   end

   #
   # Clear the view list, forcing it to be re-created next
   # time it's needed.
   # 
   public clear_split_list()
      last_split := &null
      clear_view_list()
   end

   public clear_view_list()
      view_list := long_line := &null
      invalidate_subject_width()
      invalidate_line_count()
   end

   #
   # Run through the view list looking for the longest line.
   # 
   public find_long_line()
      local v
      long_line := view_list[1] | &null
      every v := !view_list do {
         if v.tw > long_line.tw then
            long_line := v
      }
   end

   #
   # Update the view list, given that the contents have changed.
   # This takes care to minimize the work that has to be done.  The
   # first param is an index into the contents list.  The second param
   # indicates some view_list lines corresponding to those beginning
   # with index should be removed; the third param says that some should
   # be added.
   #
   # Any subject_width/line_count invalidations are done by the caller (or
   # end_handle).
   #
   public update_view_list(index, del, add)
      local vi, i, pos, j, v, p, s

      # We allow adding new lines past the end of the current view_list.
      if del = 0 & ((*view_list = 0 & index = 1) | (index = view_list[-1].index + 1)) then
         vi := *view_list + 1
      else {
         vi := get_view_list_index(1, index) | syserr("No such view index: " || index)
         # Do the deletions
         while view_list[vi].index <= index + del - 1 do {
            if view_list[vi] === long_line then
               long_line := &null
            delete(view_list, vi)
         }
         # Did we just get rid of long_line; if so get it again.
         if /long_line then
            find_long_line()
      }

      # Now do the additions
      every i := index to index + add - 1 do {
         pos := 1
         s := self.contents[i]
         every j := line_splitter.split(s, view_list_split_width) do {
            p := s[pos:j]
            v := ViewLine(i, p, pos, j - 1, text_width_ex(view.cbwin, p,,, self.tab_width))
            insert(view_list, vi, v)
            if /long_line | (v.tw > long_line.tw) then
               long_line := v
            pos := j
            vi +:= 1
         }
         view_list[vi - 1].last +:= 1
      }

      #
      # Adjust index values
      #
      if del ~= add then
         every view_list[vi to *view_list].index +:= (add - del)

      # Clear the cached split
      last_split := &null
   end

   #
   # Append lines of text and go to the bottom of the content.
   # :Parameters :
   # :  `l` - a list of lines to append
   # :  `max` - optional maximum length of resulting contents
   #
   public log(l, max)
      local n
      need_list(l)
      max := need_integer(\max)
      every put(self.contents, !l)
      if is_live() then {
         update_view_list(*self.contents - *l + 1, 0, *l)
         if (n := *self.contents - \max) > 0 then {
            every 1 to n do
               pop(self.contents)
            update_view_list(1, n, 0)
         }
         invalidate_line_count()
         invalidate_subject_width()
         compute_and_invalidate()
         goto_last(get_line_count())
      } else {
         while *self.contents > \max do
            pop(self.contents)
      }
      link
   end

   # Similar to `log()`, but log a string, rather than a list of
   # lines.  The string is separated into lines and the first is
   # appended to the last content line; the remaining lines (if any)
   # are appended to the content.
   #
   public log_str(s, max)
      local t, n, fl
      s := need_text(s)
      max := need_integer(\max)
      n := *contents
      if n = 0 then
         fl := &yes
      every t := separate_lines(s) do {
         if /fl then {
            contents[-1] ||:= t
            fl := &yes
         } else
            put(contents, t)
      }
      if is_live() then {
         if n = 0 then
            update_view_list(1, 0, *contents)
         else
            update_view_list(n, 1, 1 + *contents - n)
         if (n := *self.contents - \max) > 0 then {
            every 1 to n do
               pop(self.contents)
            update_view_list(1, n, 0)
         }
         invalidate_line_count()
         invalidate_subject_width()
         compute_and_invalidate()
         goto_last(get_line_count())
      } else {
         while *self.contents > \max do
            pop(self.contents)
      }
      link
   end

   #
   # Return the contents of the `ScrollArea`
   #
   public get_contents()
      return self.contents
   end

   public override calculate_line_height()
      return view.cbwin.get_line_height()
   end

   public override calculate_subject_width()
      if /view_list then
         create_view_list()
      # self.long_line will be null if contents is the empty list.
      return 2 * Gui.TEXT_INSET + ((\self.long_line).tw | 0)
   end

   public override draw_line(xp, yp, lh, i)
      view.cbwin.draw_string(xp + Gui.TEXT_INSET, yp + view.cbwin.get_line_ascent(), detab(view_list[i].str, self.tab_width + 1))
   end

   #
   # Create the view_list from the contents.
   # 
   public create_view_list()
      local spl
      spl := get_split(predict_view_width(w, vsb) - 2 * Gui.TEXT_INSET)
      view_list := spl.lines
      view_list_split_width := spl.width
      long_line := spl.long_line
   end

   #
   # Return the index into view_list containing the content position
   # x, y, or fail on out of range x or y.  Binary search is used.
   #
   public get_view_list_index(x, y)
      local i, j, mid, v
      # A search is not necessary with wrap mode off, since
      # view_list[i].index=i for every line.
      if is(line_splitter, DefaultLineSplitter) then
         return (v := view_list[y]) & (v.index = y) & (v.first <= x <= v.last) & y
      i := 1
      j := *view_list
      while i <= j do {
         mid := (i+j) / 2
         v := view_list[mid]
         if (v.index = y) & (v.first <= x <= v.last) then
            return mid
         if (v.index < y) | (v.index = y & v.last < x) then
            i := mid + 1
         else
            j := mid - 1
      }
   end

   public override set_internal_fields()
      local had_vsb
      had_vsb := self.vsb
      LineBasedScrollArea.set_internal_fields()
      if is(line_splitter, WidthLineSplitter) & had_vsb ~=== self.vsb then {
         clear_split_list()
         set_internal_fields()
      }
   end

   #
   # Set the tab width to use.  Default is set from the style object.
   #
   public set_tab_width(n)
      self.tab_width := need_integer(n, 1)
      if is_live() then {
         clear_split_list()
         compute_and_invalidate()
      }
      link
   end

   public override layout()
      if is(line_splitter, WidthLineSplitter) then
         clear_view_list()
      ScrollArea.layout()
   end

   #
   # Set the word-wrap mode, which should be one of the following
   # values :-
   #
   # &null, "false", "off", "no", meaning don't do word-wrap (the default).
   #
   # an integer (eg 20), meaning wrap at that line length.
   #
   # "width", meaning wrap at the width of the component.
   #
   public set_wrap_mode(s)
      local wc
      if /flag(s) then
         line_splitter := DefaultLineSplitter(self)
      else if wc := integer(s) then
         line_splitter := ColumnLineSplitter(self, wc)
      else if s == "width" then
         line_splitter := WidthLineSplitter(self)
      else
         runerr("Bad wrap mode", s)

      if is_live() then {
         clear_split_list()
         compute_and_invalidate()
      }
      link
   end

   #
   # Indicate, if wrapping, whether to split words or not (default no).
   #
   public set_split_words(s)
      self.split_words_flag := need_flag(s)
      if is_live() then {
         clear_split_list()
         compute_and_invalidate()
      }
      link
   end

   public override new()
      LineBasedScrollArea.new()
      tab_width := Gui.TAB_WIDTH
      set_contents([])
      set_wrap_mode("off")
      set_use_default_keys(&yes)
      return
   end
end
