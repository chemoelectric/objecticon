#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import graphics(Mouse,Window,Pixels,Selection,need_Window,need_Pixels),
   lang, util, io, xdg, ipl.strings, ipl.numbers

final abstract class Event()
   public static const
      MOUSE_LEFT_PRESS,
      MOUSE_MIDDLE_PRESS,
      MOUSE_RIGHT_PRESS,
      MOUSE_LEFT_RELEASE,
      MOUSE_MIDDLE_RELEASE,
      MOUSE_RIGHT_RELEASE,
      MOUSE_LEFT_DRAG,
      MOUSE_MIDDLE_DRAG,
      MOUSE_RIGHT_DRAG,
      MOUSE_MOVEMENT,
      MOUSE_WHEEL_UP,
      MOUSE_WHEEL_DOWN,
      MOUSE_WHEEL_LEFT,
      MOUSE_WHEEL_RIGHT,
      WINDOW_STATE,
      WINDOW_RESIZE,
      WINDOW_MOVE,
      MOUSE_LEFT_DRAG_OVER,
      MOUSE_MIDDLE_DRAG_OVER,
      MOUSE_RIGHT_DRAG_OVER,
      MOUSE_LEFT_RELEASE_OVER,
      MOUSE_MIDDLE_RELEASE_OVER,
      MOUSE_RIGHT_RELEASE_OVER,
      WINDOW_CLOSE_BUTTON,
      # This event listens for all window-system generated events
      ICON,
      BUTTON_RELEASE,
      BUTTON_PRESS,
      BUTTON_HELD,
      SELECTION_CHANGED,
      CONTENT_CHANGED,
      CURSOR_MOVED,
      VALUE_CHANGED,
      ACTION,
      TREE_NODE_EXPANSION,
      SIZER_PRESS,
      SIZER_DRAG,
      SIZER_RELEASE,
      MOUSE_ENTER,
      MOUSE_EXIT,
      KEY_PRESS,
      KEY_RELEASE,
      GOT_FOCUS,
      LOST_FOCUS,
      DIALOG_SHOWN,
      DIALOG_DISPOSED,
      IN_POINT_CHAIN,
      POPUP_OPENED,
      POPUP_CLOSED,
      INTERRUPTED,
      RESUMED

   private static init()
      MOUSE_LEFT_PRESS := Mouse.LEFT_PRESS
      MOUSE_MIDDLE_PRESS := Mouse.MIDDLE_PRESS
      MOUSE_RIGHT_PRESS := Mouse.RIGHT_PRESS
      MOUSE_LEFT_RELEASE := Mouse.LEFT_RELEASE
      MOUSE_MIDDLE_RELEASE := Mouse.MIDDLE_RELEASE
      MOUSE_RIGHT_RELEASE := Mouse.RIGHT_RELEASE
      MOUSE_LEFT_DRAG := 11
      MOUSE_MIDDLE_DRAG := 12
      MOUSE_RIGHT_DRAG := 13
      MOUSE_MOVEMENT := Mouse.MOVEMENT
      MOUSE_WHEEL_UP := Mouse.WHEEL_UP
      MOUSE_WHEEL_DOWN := Mouse.WHEEL_DOWN
      MOUSE_WHEEL_LEFT := Mouse.WHEEL_LEFT
      MOUSE_WHEEL_RIGHT := Mouse.WHEEL_RIGHT
      WINDOW_STATE := Window.STATE
      WINDOW_MOVE := Window.MOVE
      WINDOW_RESIZE := Window.RESIZE
      WINDOW_CLOSE_BUTTON := Window.CLOSE_BUTTON
      ICON := 1
      BUTTON_RELEASE := 20
      BUTTON_PRESS := 21
      BUTTON_HELD := 22
      SELECTION_CHANGED := 40
      CONTENT_CHANGED := 50
      CURSOR_MOVED := 51
      VALUE_CHANGED := 55
      ACTION := 60
      TREE_NODE_EXPANSION := 70
      SIZER_PRESS := 80
      SIZER_DRAG := 81
      SIZER_RELEASE := 82
      MOUSE_ENTER := 94
      MOUSE_EXIT := 95
      KEY_PRESS := 100
      KEY_RELEASE := 101
      MOUSE_LEFT_DRAG_OVER := 201
      MOUSE_MIDDLE_DRAG_OVER := 202
      MOUSE_RIGHT_DRAG_OVER := 203
      MOUSE_LEFT_RELEASE_OVER := 204
      MOUSE_MIDDLE_RELEASE_OVER := 205
      MOUSE_RIGHT_RELEASE_OVER := 206
      GOT_FOCUS := 400
      LOST_FOCUS := 401
      DIALOG_DISPOSED := 500
      IN_POINT_CHAIN :=  501
      POPUP_CLOSED := 502
      INTERRUPTED := 503
      RESUMED := 504
      DIALOG_SHOWN := 505
      POPUP_OPENED := 506
   end
end

final abstract class Select()
   public static const 
      NONE,
      ONE,
      MANY

   private static init()
      NONE := "none"
      ONE := "one"
      MANY := "many"
   end
end

final abstract class Direction()
   public static const
      UP,
      DOWN,
      BEST

   private static init()
      UP := "up"
      DOWN := "down"
      BEST := "best"
   end
end

# Alignment constants
final abstract class Align()
   public static const 
      L,
      C,
      R,
      T,
      B

   private static init()
      L := "l"
      C := "c"
      R := "r"
      T := "t"
      B := "b"
   end
end

final abstract class WAttrib()
   public static const
      BG,
      CANVAS,
      CLIP,
      DISPLAY,
      DRAW_OP,
      DX,
      DY,
      FG,
      FONT,
      GEOMETRY,
      HEIGHT,
      ICON,
      IMAGE,
      LABEL,
      LEADING,
      LINE_JOIN,
      LINE_END,
      LINE_WIDTH,
      MAX_HEIGHT,
      MAX_SIZE,
      MAX_WIDTH,
      MIN_HEIGHT,
      MIN_SIZE,
      MIN_WIDTH,
      BASE_HEIGHT,
      BASE_SIZE,
      BASE_WIDTH,
      INCREMENT_HEIGHT,
      INCREMENT_SIZE,
      INCREMENT_WIDTH,
      MAX_ASPECT_RATIO,
      MIN_ASPECT_RATIO,
      PATTERN,
      MASK,
      POINTER,
      POS,
      RESIZE,
      SIZE,
      TRANSIENT_FOR,
      UNCLIP,
      WIDTH,
      X,
      Y

   # For a given attribute `k`, generate those attributes which will
   # also set the same thing `k` does.
   #
   public static gen_conflicting(k)
      suspend case k of {
         POS: X | Y | GEOMETRY
         X | Y: POS | GEOMETRY
         SIZE: HEIGHT | WIDTH | GEOMETRY
         WIDTH | HEIGHT: SIZE | GEOMETRY
         GEOMETRY : POS | X | Y | SIZE | HEIGHT | WIDTH

         MIN_WIDTH | MIN_HEIGHT : MIN_SIZE
         MIN_SIZE : MIN_WIDTH | MIN_HEIGHT

         MAX_WIDTH | MAX_HEIGHT : MAX_SIZE
         MAX_SIZE : MAX_WIDTH | MAX_HEIGHT

         BASE_WIDTH | BASE_HEIGHT : BASE_SIZE
         BASE_SIZE : BASE_WIDTH | BASE_HEIGHT

         INCREMENT_WIDTH | INCREMENT_HEIGHT : INCREMENT_SIZE
         INCREMENT_SIZE : INCREMENT_WIDTH | INCREMENT_HEIGHT
      }
   end

   private static init()
      BG := "bg"
      CLIP := "clip"
      CANVAS := "canvas"
      DISPLAY := "display"
      DRAW_OP := "draw_op"
      DX := "dx"
      DY := "dy"
      FG := "fg"
      FONT := "font"
      GEOMETRY := "geometry"
      HEIGHT := "height"
      ICON := "icon"
      IMAGE := "image"
      LABEL := "label"
      LEADING := "leading"
      LINE_JOIN := "line_join"
      LINE_END := "line_end"
      LINE_WIDTH := "line_width"
      MAX_HEIGHT := "max_height"
      MAX_SIZE := "max_size"
      MAX_WIDTH := "max_width"
      MIN_HEIGHT := "min_height"
      MIN_SIZE := "min_size"
      MIN_WIDTH := "min_width"
      BASE_HEIGHT := "base_height"
      BASE_SIZE := "base_size"
      BASE_WIDTH := "base_width"
      INCREMENT_HEIGHT := "increment_height"
      INCREMENT_SIZE := "increment_size"
      INCREMENT_WIDTH := "increment_width"
      MAX_ASPECT_RATIO := "max_aspect_ratio"
      MIN_ASPECT_RATIO := "min_aspect_ratio"
      PATTERN := "pattern"
      MASK := "mask"
      POINTER := "pointer"
      POS := "pos"
      RESIZE := "resize"
      SIZE := "size"
      TRANSIENT_FOR := "transient_for"
      UNCLIP := "unclip"
      WIDTH := "width"
      X := "x"
      Y := "y"
   end
end

#
# Scale the given number using the current scale factor.  Note that
# since `SCALE >= 1.0`, if `i >= 0`, then the result should be `>= i`.
#
procedure scale(i)
   return round(Gui.SCALE * i)
end

#
# Scale, but don't round and convert to integer.
#
procedure scale_real(r)
   return Gui.SCALE * r
end

#
# Like `scale`, but ensure an odd number results.  If `j` is -ve, then
# the number is moved down one rather than up one, if necessary.
#
procedure scale_odd(i, j)
   i := scale(i)
   if i % 2 = 0 then if \j < 0 then i -:= 1 else i +:= 1
   return i
end

#
# Like `scale`, but ensure an even number results.  `j` has the same
# effect as for `scale_odd`.
#
procedure scale_even(i, j)
   i := scale(i)
   if i % 2 = 1 then if \j < 0 then i -:= 1 else i +:= 1
   return i
end

#
# Convenient procedure to combine `env_real` and `scale`.  The result
# is checked to ensure it is positive.
#
procedure env_scale(s, min, max)
   local v
   v := scale(env_real(s, min, max)) | fail
   if v < 1 then
      runerr("Scaled value of " || s || " out of range", v)
   return v
end

#
# Convenient procedure to combine `env_real` and `scale_even`.  The result
# is checked to ensure it is positive.
#
procedure env_scale_even(s, min, max, j)
   local v
   v := scale_even(env_real(s, min, max), j) | fail
   if v < 1 then
      runerr("Scaled value of " || s || " out of range", v)
   return v
end

#
# Convenient procedure to combine `env_real` and `scale_odd`.  The result
# is checked to ensure it is positive.
#
procedure env_scale_odd(s, min, max, j)
   local v
   v := scale_odd(env_real(s, min, max), j) | fail
   if v < 1 then
      runerr("Scaled value of " || s || " out of range", v)
   return v
end

#
# Return a valid icon colour value from the environment.
#
procedure env_color(s)
   local c
   c := env_string(s) | fail
   Window.color_value(c) | runerr("Colour value " || c || " of " || s || " is invalid")
   return c
end

#
# Return a valid icon font string value from the environment.
#
procedure env_font(s)
   local f, w
   f := env_string(s) | fail
   use{ w := new_win(), w.set_font(f) } | runerr("Font value " || f || " of " || s || " is invalid")
   return f
end

#
# Return a valid icon pattern string value from the environment.
#
procedure env_pattern(s)
   local p, w
   p := env_string(s) | fail
   use{ w := new_win(), w.set_masked_pattern(p) } | runerr("Pattern value " || p || " of " || s || " is invalid")
   return p
end

#
# Return a valid icon filter string value from the environment.
#
procedure env_filter(s)
   local f, w
   f := env_string(s) | fail
   use{ w := new_win(), w.filter(,,,, f) } | runerr("Filter value " || f || " of " || s || " is invalid")
   return f
end

#
# Return a valid icon pointer string value from the environment.
#
procedure env_pointer(s)
   local p, w
   p := env_string(s) | fail
   use{ w := new_win(), w.set_pointer(p) } | runerr("Pointer value " || p || " of " || s || " is invalid")
   return p
end

final abstract class Gui()
   public static const
      SCALE,
      UNIT,
      BORDER_WIDTH,
      CURSOR_WIDTH,
      FINE_WIDTH,
      DASHED_WIDTH,
      TOOLBAR_ICON_SIZE,
      MENU_ICON_SIZE,
      TEXT_INSET,
      X_INSET,
      Y_INSET,
      VISUALIZE_DELAY,
      REPEAT_DELAY,            
      REPEAT_RATE,
      CURSOR_BLINK,
      IDLE_SLEEP,
      # Default tab char width
      TAB_WIDTH,
      ALLOW_INTERNAL_POPUPS,
      # Gives extra preference to the downward direction in list popups.
      POPUP_LIST_DIRECTION_FACTOR,
      # A set of all window attribs.
      WATTRIB_SET,
      # A set of attribs that affect the graphical drawing context
      CONTEXT_WATTRIB_SET,
      # A Component that always has empty effective wattribs.
      EMPTY_WATTRIB_ANCESTOR,
      # Printable on a single line of text
      PRINTABLE_1,
      # Printable on multi lines of text
      PRINTABLE_N,
      style

   #
   # Try to calculate a default value for SCALE
   #
   private static calc_scale1(w)
      local pix, mm, t
      pix := w.get_display_size() | fail
      mm := w.get_display_size_mm() | fail
      t := (pix.width + pix.height) / ((mm.width + mm.height) / 25.4) / 96.0
      # Round to nearest 1%
      t := round(t * 100.0) / 100.0
      return (1.0 < t)
   end

   private static calc_scale()
      local w
      return use {
         w := Window(),
         calc_scale1(w)
      }
   end

   private static init()
      local s
      SCALE := env_real("OI_GUI_SCALE", 1.0) | calc_scale() | 1.0
      UNIT := scale(1)
      FINE_WIDTH := env_scale("OI_GUI_FINE_WIDTH") | UNIT
      DASHED_WIDTH := env_scale("OI_GUI_DASHED_WIDTH") | FINE_WIDTH
      CURSOR_WIDTH := env_scale_even("OI_GUI_CURSOR_WIDTH") | scale_even(2)
      # Has to be even; see BevelledBorder
      BORDER_WIDTH := env_scale_even("OI_GUI_BORDER_WIDTH") | scale_even(2)
      TEXT_INSET := env_scale("OI_GUI_TEXT_INSET") | scale(3)
      X_INSET := env_scale("OI_GUI_X_INSET") | scale(6)
      Y_INSET := env_scale("OI_GUI_Y_INSET") | scale(2)
      VISUALIZE_DELAY := env_int("OI_GUI_VISUALIZE_DELAY", 10) | 50
      REPEAT_DELAY := env_int("OI_GUI_REPEAT_DELAY", 250) | 500
      REPEAT_RATE := env_int("OI_GUI_REPEAT_RATE", 50) | 100
      CURSOR_BLINK := env_int("OI_GUI_CURSOR_BLINK", 100) | 400
      TAB_WIDTH := env_int("OI_GUI_TAB_WIDTH", 1) | 8
      IDLE_SLEEP := env_int("OI_GUI_IDLE_SLEEP", 0) | 50
      TOOLBAR_ICON_SIZE := env_scale("OI_GUI_TOOLBAR_ICON_SIZE") | scale(24)
      MENU_ICON_SIZE := env_scale("OI_GUI_MENU_ICON_SIZE") | scale(16)
      ALLOW_INTERNAL_POPUPS := env_flag("OI_GUI_ALLOW_INTERNAL_POPUPS") | &yes
      POPUP_LIST_DIRECTION_FACTOR := env_real("OI_GUI_POPUP_LIST_DIRECTION_FACTOR") | 2.0
      if s := env_string("OI_GUI_STYLE") then {
         style := Class.for_name(s)() | runerr("Unable to instantiate Style class", s)
         is(style, Style) | runerr("Style class not a subclass of gui.Style", style)
      } else
         style := Style()
      PRINTABLE_1 := '\x20-\x7e\x80-\U10ffff'
      PRINTABLE_N := '\t\n\x20-\x7e\x80-\U10ffff'
      WATTRIB_SET := set(WAttrib.LABEL, WAttrib.X, WAttrib.POS, WAttrib.Y, WAttrib.RESIZE, WAttrib.SIZE,
                         WAttrib.HEIGHT, WAttrib.WIDTH, WAttrib.IMAGE, WAttrib.CANVAS, WAttrib.POINTER, 
                         WAttrib.DISPLAY, WAttrib.FG, WAttrib.BG, WAttrib.DRAW_OP, WAttrib.ICON, WAttrib.LEADING,
                         WAttrib.FONT, WAttrib.LINE_WIDTH, WAttrib.GEOMETRY, WAttrib.TRANSIENT_FOR,
                         WAttrib.LINE_END, WAttrib.PATTERN, WAttrib.CLIP, WAttrib.UNCLIP, WAttrib.DX,
                         WAttrib.DY, WAttrib.MIN_WIDTH, WAttrib.MIN_HEIGHT, WAttrib.LINE_JOIN,
                         WAttrib.MIN_SIZE, WAttrib.MAX_WIDTH, WAttrib.MAX_HEIGHT, WAttrib.MAX_SIZE,
                         WAttrib.BASE_HEIGHT, WAttrib.BASE_SIZE, WAttrib.BASE_WIDTH,
                         WAttrib.INCREMENT_HEIGHT, WAttrib.INCREMENT_SIZE, WAttrib.INCREMENT_WIDTH,
                         WAttrib.MAX_ASPECT_RATIO, WAttrib.MIN_ASPECT_RATIO, WAttrib.MASK)
      CONTEXT_WATTRIB_SET := set(WAttrib.FG, WAttrib.BG, WAttrib.DRAW_OP, WAttrib.FONT, WAttrib.LEADING,
                                 WAttrib.LINE_WIDTH, WAttrib.LINE_END, WAttrib.LINE_JOIN, WAttrib.PATTERN,
                                 WAttrib.MASK)
      EMPTY_WATTRIB_ANCESTOR := EmptyWAttribAncestor() 
   end

   public static allow_internal_popups()
      succeed \ALLOW_INTERNAL_POPUPS
   end

   public static is_window_attrib(s)
      succeed member(WATTRIB_SET, s)
   end

   public static is_context_attrib(s)
      succeed member(CONTEXT_WATTRIB_SET, s)
   end
end

#
# A `Component` for providing empty effective wattribs.
#
package class EmptyWAttribAncestor(Component)
   public override get_effective_wattribs()
      return table()
   end
end

package procedure tab_ws()
   return tab(many(' \t\n\r'))
end

procedure is_image_string(v)
   string(v) ? {
      tab_ws()
      tab(many(&digits)) | fail
      tab_ws()
      ="," | fail
      return
   }
end

#
# A simple helper class for parsing an image string.
#
class ImageStringInfo()
   public
     width, height, pal, extra, data

   public new(s)
      s := need_string(s)
      s ? {
         tab_ws()
         width := (0 < integer(tab(many(&digits)))) | return error("Width expected")
         tab_ws()
         ="," | return error("Comma expected")
         tab_ws()
         if any('cg') then {
            pal := (move(1) || tab(many(&digits))) | return error("Palette expected")
            tab_ws()
         }
         if ="(" then {
            extra := tab(upto(')')) | return error("Missing )")
            move(1)
            tab_ws()
         }
         ="," | return error("Comma expected")
         data := tab(0)
         if *data = 0 | *data % width ~= 0 then
            return error("Wrong number of image characters")
         height := *data / width
      }
      return
   end

   public static from_parts(width, pal, extra, data)
      local i
      i := Class.create_instance()
      i.width := need_integer(width, 1)
      i.pal := need_string(\pal)
      i.extra := need_string(\extra)
      i.data := need_string(data)
      if *data = 0 | *data % width ~= 0 then
         return error("Wrong number of image characters")
      i.height := *data / width
      return i
   end

   public to_image_string()
      local s
      s := width || ","
      s ||:= \pal
      s ||:= "(" || \extra || ")"
      return s || "," || data
   end
end

# Convert an image string to a `Pixels` object, based on the window
# `W` for hilite, shadow colours etc.
#
procedure image_string_to_pixels(s, W)
   local q, k, v, r, w
   r := ImageStringInfo(s) | fail

   q := Pixels(r.width, r.height, Pixels.PALETTE8).
      set_data(r.data)
   # Add chars from palette, if specified.
   if \r.pal then {
      q.load_palette(r.pal) | {
         q.close()
         fail
      }
   }
   # Add extra chars
   if \r.extra then {
      r.extra ? repeat {
         tab_ws()
         k := move(1) | break
         ="=" | {
            q.close()
            return error("= expected")
         }
         v := tab(upto(';') | 0)
         v ? {
            w := tab(upto(', ') | 0)
            case w of {
               "hilite" : v := Gui.style.get_hilite_color(W)
               "shadow" : v := Gui.style.get_shadow_color(W)
               "fg" : v := W.get_fg()
               "bg" : v := W.get_bg()
               default : v := w
            }
            v ||:= tab(0)
         }
         move(1)
         q.set_palette(ord(k), v) | {
            q.close()
            return error("Invalid colour in image spec: " || v)
         }
      }
   }
   return q
end

#
# Extended TextWidth function, handling tabs in s.  Returns the
# width of the string from positions i through j.
#
procedure text_width_ex(win, s, i, j, tw)
   if /i then {
      i := 1
      j := *s + 1
   } else {
      /j:= i + 1
      if j <= 0 then
         j +:= *s + 1
   }
   if not upto('\t', s) then
      return win.text_width(s[i:j])
   /tw := 8
   return win.text_width(detab(s[1:j], tw + 1)) - win.text_width(detab(s[1:i], tw + 1))
end

# Draw a string in the normal way, but including an underscore below
# the first character `k`.
#
procedure draw_string_ex(win, x, y, s, k)
   local i
   win.draw_string(x, y, s)
   if i := upto(\k, map(s)) then {
      win.fill_rectangle(x + win.text_width(s[1:i]),
                         y + win.get_font_descent() - Gui.FINE_WIDTH,
                         win.text_width(s[i]), Gui.FINE_WIDTH)
   }
end

#
# This utility takes a string or ucs and returns a string or ucs
# according to the target parameter.  Strings are assumed to be in
# ISO-8859 format, rather than UTF-8 format.
#
procedure text_convert(s, target)
   s := text(s) | fail
   if type(s) == target then
      return s
   return case target of {
      "ucs": Text.iso_8859_1_to_ucs(s)
      "string": Text.ucs_to_iso_8859_1(s)
      default: runerr("Bad target type", target)
   }
end

#
# This utility takes a string or ucs and returns a string or ucs
# according to the target parameter.  The format of strings are
# guessed using the ucs() function; if that fails they are assumed to
# be in ISO-8859 format.
#
procedure text_guess_convert(s, target)
   s := text(s) | fail
   return case target of {
      "ucs": ucs(s) | Text.iso_8859_1_to_ucs(s)
      "string": Text.ucs_to_iso_8859_1(ucs(s)) | s
      default: runerr("Bad target type", target)
   }
end

#
# Given a result from a selection request (`target_type` and `data`), produce
# a corresponding string or a ucs as appropriate.
#
procedure selection_convert(target_type, data)
   return case target_type of {
      Selection.UTF8_STRING_TARGET : ucs(data)
      Selection.STRING_TARGET : string(data)
   }
end

procedure open_win_with(t)
   return apply_window_table(new_win(t[WAttrib.DISPLAY]), t)
end

procedure apply_window_table(w, t)
   local e, v
   every e := !sort(t) do {
      v := e[2]
      case e[1] of {
         WAttrib.LABEL: w.set_label(v)
         WAttrib.X: w.set_x(v)
         WAttrib.POS:  w.set_pos(v[1],v[2])
         WAttrib.Y: w.set_y(v)
         WAttrib.RESIZE: w.set_resize(v)
         WAttrib.SIZE: w.set_size(v[1],v[2])
         WAttrib.HEIGHT: w.set_height(v)
         WAttrib.WIDTH: w.set_width(v)
         WAttrib.IMAGE: w.set_image(v)
         WAttrib.POINTER: w.set_pointer(v)
         WAttrib.FG: w.set_fg(v)
         WAttrib.BG: w.set_bg(v)
         WAttrib.DRAW_OP: w.set_draw_op(v)
         WAttrib.ICON: w.set_icon(v)
         WAttrib.FONT: w.set_font(v)
         WAttrib.LEADING: w.set_leading(v)
         WAttrib.LINE_WIDTH: w.set_line_width(v)
         WAttrib.GEOMETRY: w.set_geometry(v[1],v[2],v[3],v[4])
         WAttrib.TRANSIENT_FOR: w.set_transient_for(v)
         WAttrib.LINE_JOIN: w.set_line_join(v)
         WAttrib.LINE_END: w.set_line_end(v)
         WAttrib.PATTERN: w.set_pattern(v)
         WAttrib.MASK: w.set_mask(v)
         WAttrib.CLIP: w.clip(v[1],v[2],v[3],v[4])
         WAttrib.UNCLIP: w.unclip()
         WAttrib.DX: w.set_dx(v)
         WAttrib.DY: w.set_dy(v)
         WAttrib.MIN_WIDTH: w.set_min_width(v)
         WAttrib.MIN_HEIGHT: w.set_min_height(v)
         WAttrib.MIN_SIZE: w.set_min_size(v[1],v[2])
         WAttrib.MAX_WIDTH: w.set_max_width(v)
         WAttrib.MAX_HEIGHT: w.set_max_height(v)
         WAttrib.MAX_SIZE: w.set_max_size(v[1],v[2])
         WAttrib.INCREMENT_WIDTH: w.set_increment_width(v)
         WAttrib.INCREMENT_HEIGHT: w.set_increment_height(v)
         WAttrib.INCREMENT_SIZE: w.set_increment_size(v[1],v[2])
         WAttrib.BASE_WIDTH: w.set_base_width(v)
         WAttrib.BASE_HEIGHT: w.set_base_height(v)
         WAttrib.BASE_SIZE: w.set_base_size(v[1],v[2])
         WAttrib.MAX_ASPECT_RATIO: w.set_max_aspect_ratio(v)
         WAttrib.MIN_ASPECT_RATIO: w.set_min_aspect_ratio(v)
      }
   }
   w.erase_area()
   if v := member(t, WAttrib.CANVAS) then
      w.set_canvas(v) | runerr(&why, v)
   return w
end

procedure apply_context_table(w, t)
   local e, v
   every e := !sort(t) do {
      v := e[2]
      case e[1] of {
         WAttrib.FG: w.set_fg(v)
         WAttrib.BG: w.set_bg(v)
         WAttrib.DRAW_OP: w.set_draw_op(v)
         WAttrib.FONT: w.set_font(v)
         WAttrib.LEADING: w.set_leading(v)
         WAttrib.LINE_WIDTH: w.set_line_width(v)
         WAttrib.LINE_END: w.set_line_end(v)
         WAttrib.LINE_JOIN: w.set_line_join(v)
         WAttrib.PATTERN: w.set_pattern(v)
         WAttrib.MASK: w.set_mask(v)
      }
   }
   return w
end

procedure clone_win_with(w, t)
   return apply_context_table(w.clone(), t)
end

procedure fresh_clone_win_with(w, t)
   local wt
   return use {
      wt := new_win(w.get_display()),
      {
         wt.set_dx(w.get_dx()).set_dy(w.get_dy())
         apply_context_table(w.couple(wt), t)
      }
   }
end

#
# Produce a string which is an initial substring of s, but tries to
# fit into n pixels of width.  If truncation takes place, the result
# ends in "...".
#
procedure limit_text(W, s, n)
   local i, t
   t := s
   i := *s
   while i > 0 & W.text_width(t) > n do {
      t := s[1:i] || "..."
      i -:= 1
   }
   return t
end

#
# Given a string, font and width, return a `GridPaint` format string
# which splits the string up into multiple lines broken at the given
# width.
#
procedure split_string(W, s, f, n)
   local w, l, r
   use {
      W := W.clone(),
      {
         W.set_font(f)
         r := ".cell\n.x_ialign l\n"
         l := ""
         every w := words(s) do {
            if *l > 0 then
               l ||:= " "
            l ||:= w
            if W.text_width(l) > n then {
               r ||:= l || "\n.br\n"
               l := ""
            }
         }
         if *l > 0 then
            r ||:= l || "\n.br\n"
      }
   }
   return r
end

#
# Helpful mixin-style class for a `Component` which has a horizontal
# or vertical orientation.
#
abstract class HasOrientation()
   public 
      is_horizontal_flag

   #
   # Configure the orientation.
   #
   public set_is_horizontal(s)
      self.is_horizontal_flag := need_flag(s)
      link
   end
end

#
# Helpful mixin-style class for a `Component` which has an optional
# wheel capability.
#
abstract class HasUseWheel(Connectable)
   public
      wheel_listeners

   public abstract handle_wheel_up(e)

   public abstract handle_wheel_down(e)

   public handle_wheel_left(e)
      handle_wheel_up(e)
   end

   public handle_wheel_right(e)
      handle_wheel_down(e)
   end
   
   public set_use_wheel(s)
      need_flag(s)
      every (!\wheel_listeners).disconnect()
      wheel_listeners := if /s then
         &null
      else
         [connect(handle_wheel_up, Event.MOUSE_WHEEL_UP).last_listener,
          connect(handle_wheel_down, Event.MOUSE_WHEEL_DOWN).last_listener,
          connect(handle_wheel_left, Event.MOUSE_WHEEL_LEFT).last_listener,
          connect(handle_wheel_right, Event.MOUSE_WHEEL_RIGHT).last_listener]
      link
   end
end

#
# This is a Dialog whose only purpose is to retrieve a given selection.
# For example :-
# ~
#   d := GetSelection(Selection.CLIPBOARD).show_modal()
#   ... the clipboard is now stored in d.result (which may be null).
# ~
class GetSelection(Dialog)
   private readable
      # The data result, which may be &null, indicating failure.
      result,
      # The type of the result.
      type
   private
      selection,
      target_types

   # Set the target types (a list), which by default is :-
   # ~
   #   [Selection.UTF8_STRING_TARGET, Selection.STRING_TARGET]
   # ~
   public set_target_types(l)
      self.target_types := l
      link
   end

   # Set the target selection.  The default is Selection.CLIPBOARD.
   #
   public set_selection(sel)
      self.selection := sel
      link
   end

   private respond(target_type, data, e)
      result := data
      type := target_type
      dispose()
   end

   public override show()
      Dialog.show()
      # Now we have an underlying window, we can request the selection.
      request_selection(selection,
                        target_types,
                        respond)
      link
   end

   # Create an instance, optionally specifying selection and target types.
   #
   public override new(selection, target_types)
      Dialog.new()
      set_canvas("withdrawn")
      set_size(100, 100)
      /selection := Selection.CLIPBOARD
      /target_types := [Selection.UTF8_STRING_TARGET, Selection.STRING_TARGET]
      set_selection(selection)
      set_target_types(target_types)
      return
   end
end

#
# This standardizes a toolbar button.  If the button `b` is an
# `IconButton` or a `MenuButton`, then this procedure will try to
# replace its `Paint` in three ways :-
#   1. if `icon` is given, then with the matching Xdg icon with that
#      name, appropriately resized;
#   2. if `svg` is given (it should be an `ImageCache` key), then with
#      the corresponding svg image, appropriately scaled;
#   3. if the `Paint` has an `ImageCache` key, then with a resized
#      version of that image, if necessary.
# Finally, `b`'s size is set to the standard toolbar icon size.
#
procedure theme_toolbar_button(b, icon, svg)
   local sz
   if is(b, IconButton) then
      b.set_paint(get_toolbar_theme_paint(b.paint, icon, svg))
   else if is(b, MenuButton) then
      b.menu.set_paint_mid(get_toolbar_theme_paint(b.menu.paint_mid, icon, svg))
   sz := Gui.TOOLBAR_ICON_SIZE + 2 * Gui.BORDER_WIDTH
   b.set_size(sz, sz)
   return b
end

package procedure get_toolbar_theme_paint(paint, icon, svg)
   local k, sz
   sz := Gui.TOOLBAR_ICON_SIZE
   if k := (IconTheme.find_icon_and_cache(\icon, sz,, &yes) |
            ImageCache.get_scaled_svg_key(\svg, sz, sz) |
            if is(paint, ImagePaint) then
               ImageCache.get_key_with_resize(\paint.image_cache, sz, sz))
   then
      return ImagePaint().set_cache(k)
end

record Range(lo, hi)

#
# Return the intersection of the range f1-t1 and f2-t2, or
# fail if the ranges don't intersect, as a record
# with lo and hi members.  Example:
# range(2,20,10,30) = [10,20]
# 
procedure range(f1, t1, f2, t2)
   if f1 > t1 then f1 :=: t1
   if f2 > t2 then f2 :=: t2
   if t1 >= f2 & f1 <= t2 then {
      f1 <:= f2
      t1 >:= t2
      return Range(f1,t1)
   }
end

# Like `range` above, but require a result r where r.lo ~= r.hi.  This
# is useful if the ranges represent a string slice and we want a
# non-empty intersection.
#
procedure range1(f1, t1, f2, t2)
   local t
   if t := range(f1, t1, f2, t2) & t.lo ~= t.hi then
      return t
end

#
# Succeed iff the range f1-t1 is wholly contained within f2-t2
#
procedure contained(f1, t1, f2, t2)
   if f2 > t2 then f2 :=: t2
   succeed f2 <= f1 <= t2 & f2 <= t1 <= t2
end

#
# Restrict i to be within the range f-t
#
procedure restrict(i, f, t)
   if f > t then f :=: t
   i <:= f
   i >:= t
   return i
end

# This provides some logic to text components on whether or not their
# cursor should blink, given that comp.should_draw_focus() has already
# succeeded.
#
procedure dont_blink(comp)
   local c
   # If a drag is in progress, don't blink
   if comp.parent_dialog.get_curr_drag()  then
      return
   # If not in menu mode, blink
   c := comp.parent_dialog.get_menu_mode() | fail
   # If this component is the menu mode (eg SuggestField), blink
   if c === comp then
      fail
   # If this component is a child of the menu mode's popup (eg a textfield in
   # a DropDown's popup, such as Calendar), blink.
   if c.gen_popup_components() === comp.gen_parents() then
      fail
   # Otherwise, don't blink.
   return
end

#
# Try to run the imagemagick convert program with the given (optional)
# standard input `Stream` and argument list.
#
# On success, the standard output is collected and returned.
#
procedure run_convert(stdin, args)
   local p, r
   static ok
   initial {
$if _PNG & _UNIX & ~_CYGWIN
      ok := Yes{ Files.find_exe("convert") }
$endif
   }
   if /ok then
      return error("Convert not available")
   if r := use { 
      p := FilterInputStream(stdin,
                             "convert",
                             args),
      p.read_all()
   } & p.succeeded() then
      return r
end

#
# Zoom (scale) the contents of window `src` to an new window of size
# `w` x `h`, and return that window.
#
procedure zoom_win(src, w, h)
   local p
   need_Window(src)
   return use {
      p := src.get_pixels(),
      zoom_pix(p, w, h)
   }
end

#
# Zoom (scale) the contents of `Pixels` `src` to an new window of size
# `w` x `h`, and return that window.
#
procedure zoom_pix(src, w, h)
   local q
   need_Pixels(src)
   return use {
      q := Pixels(w, h, Window.FORMAT),
      {
         src.scale_to(,,,, q)
         open_image(q)
      }
   }
end

#
# This calls `Window(d)`, but causes a runtime error on failure, in
# order to simplify error handling in the caller.
#
procedure new_win(d)
   return Window(d) | runerr("Couldn't open window: " || &why)
end

#
# Convenient method to open an image and return a hidden window with
# its contents.  A runtime error occurs if the window couldn't be
# opened.  Otherwise, failure occurs if `img` is a string which
# couldn't be interpreted as an image.  If `img` is a `Pixels`, this
# procedure should never fail.
#
# :Parameters :
# :  `img` - the image
#
procedure open_image(img)
   local w, t
   w := new_win()
   use {
      t := w.clone(),
      {
         t.set_draw_op("source")
         t.set_image(img)
      }
   } | {
      w.close()
      fail
   }
   return w
end
