#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package xml

import io

#
# A useful class for handling error/warning/validity messages from the XML parser.
#
class XmlErrorHandler()
   public
      out_file,
      level

   #
   # Set the output file
   #
   public set_out_file(x)
      self.out_file := x
      return self
   end

   #
   # Set the level to use :-
   #
   # 0 - no output
   # 1 - fatal only
   # 2 - fatal + validity
   # 3 - fatal + validity + warning
   #
   # The default is 3
   #
   public set_level(n)
      self.level := n
      return self
   end

   #
   # Connect the error handler to the given parser.
   # :Parameters :
   # :  `p` - An `XmlParser` instance.
   #
   public connect(p)
      p.connect(self.warning, XmlParser.WARNING_EVENT)
      p.connect(self.validity_error, XmlParser.VALIDITY_ERROR_EVENT)
      p.connect(self.fatal_error, XmlParser.FATAL_ERROR_EVENT)
   end

   public fatal_error(pd)
      msg_impl(pd, 1, "Fatal error")
   end

   public validity_error(pd)
      msg_impl(pd, 2, "Validity error")
   end

   public warning(pd)
      msg_impl(pd, 3, "Warning")
   end

   private msg_impl(pd, n, pre)
      if level < n then
         return
      write(out_file, pre, ": ", pd.msg, " at:")
      show_stack(pd.stack)
   end

   public show_stack(stack)
      local x, i, t
      every x := !stack do {
         t := x.subject[1:x.pos]
         i := 1
         every find("\n", t) do
            i +:= 1
         write(out_file, "\t", x.id || ": line " || i)
      }
   end

   public new(l, o)
      /l := 3
      self.level := l
      self.out_file := o
      return
   end
end

