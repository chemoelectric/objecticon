#SRC: V9GEN

import io

# test various preprocessor features

# test $define and various whitespace uses
$define abc 123
 $  define  def   456
$define	ghi 789
$ define  ghi   789	# duplicate definition should be ok if same
$undef ghi
$define ghi 987		# different definition should be ok after $undef

# test (when used later) that substituted text is rescanned
$define yy (xx+xx)
$define xx 1

# test undefinition of something that isn't defined
$undef notdefined

# test if of undefined symbol, and successful skip past bogus directive
$if notdef
$BOGUS
$endif

# test if of defined symbol, and null test body
$if abc
$endif

# test if ~ of defined symbol
$if ~ abc
$error -- abc not defined
$endif#comment on if terminator


# main test program

procedure main()
   # write values from definitions; test no substitution in string constant
   write("abc,def,ghi,xx,yy: ", abc, " ", def, " ", ghi, " ", xx, " ", yy)

   # test $include by including a code fragment from prepro.dat
   $include "prepro.dat"

   # write values defined in prepro.dat
   write("xyzzy: ", xyzzy)
   write("abc,def,ghi,xx,yy: ", abc, " ", def, " ", ghi, " ", xx, " ", yy)

   # test that predefined symbols agree with &features
   # (if defined, first argument is 1, else it's null)
$if _AMIGA
   precheck(_AMIGA,		"Amiga")
$endif
$if _ACORN
   precheck(_ACORN,		"Acorn Archimedes")
$endif
$if _ATARI
   precheck(_ATARI,		"Atari ST")
$endif
$if _CMS
   precheck(_CMS,		"CMS")
$endif
$if _MACINTOSH
   precheck(_MACINTOSH,		"Macintosh")
$endif
$if _MSDOS_386
   precheck(_MSDOS_386,		"MS-DOS/386")
$endif
$if _MSDOS
   precheck(_MSDOS,		"MS-DOS")
$endif
$if _MVS
   precheck(_MVS,		"MVS")
$endif
$if _OS2
   precheck(_OS2,		"OS/2")
$endif
$if _PORT
   precheck(_PORT,		"PORT")
$endif
$if _UNIX
   precheck(_UNIX,		"UNIX")
$endif
$if _VMS
   precheck(_VMS,		"VMS")
$endif
$if _COMPILED
   precheck(_COMPILED,		"compiled")
$endif
$if _INTERPRETED
   precheck(_INTERPRETED,	"interpreted")
$endif
$if _JAVA
   precheck(_JAVA,		"Java")
$endif
$if _ASCII
   precheck(_ASCII,		"ASCII", 1)
$endif
$if _EBCDIC
   precheck(_EBCDIC,		"EBCDIC", 1)
$endif
$if _CALLING
   precheck(_CALLING,		"calling to Icon")
$endif
$if _CO_EXPRESSIONS
   precheck(_CO_EXPRESSIONS,	"co-expressions")
$endif
$if _DIRECT_EXECUTION
   precheck(_DIRECT_EXECUTION,	"direct execution")
$endif
$if _EVENT_MONITOR
   precheck(_EVENT_MONITOR,	"event monitoring")
$endif
$if _EXECUTABLE_IMAGES
   precheck(_EXECUTABLE_IMAGES,	"executable images")
$endif
$if _EXTERNAL_FUNCTIONS
   precheck(_EXTERNAL_FUNCTIONS,"external functions")
$endif
$if _KEYBOARD_FUNCTIONS
   precheck(_KEYBOARD_FUNCTIONS,"keyboard functions")
$endif
$if _LARGE_INTEGERS
   precheck(_LARGE_INTEGERS,	"large integers")
$endif
$if _MEMORY_MONITOR
   precheck(_MEMORY_MONITOR,	"memory monitoring")
$endif
$if _MULTITASKING
   precheck(_MULTITASKING,	"multiple programs")
$endif
$if _MULTIREGION
   precheck(_MULTIREGION,	"multiple regions")
$endif
$if _PIPES
   precheck(_PIPES,		"pipes")
$endif
$if _RECORD_IO
   precheck(_RECORD_IO,		"record I/O")
$endif
$if _STRING_INVOKE
   precheck(_STRING_INVOKE,	"string invocation")
$endif
$if _SYSTEM_FUNCTION
   precheck(_SYSTEM_FUNCTION,	"system function")
$endif
$if _VISUALIZATION
   precheck(_VISUALIZATION,	"visualization support")
$endif
$if _WINDOW_FUNCTIONS
   precheck(_WINDOW_FUNCTIONS,	"window functions")
$endif
$if _X_WINDOW_SYSTEM
   precheck(_X_WINDOW_SYSTEM,	"X Windows")
$endif
$if _PRESENTATION_MGR
   precheck(_PRESENTATION_MGR,	"Presentation Manager")
$endif
$if _ARM_FUNCTIONS
   precheck(_ARM_FUNCTIONS,	"Archimedes extensions")
$endif
$if _DOS_FUNCTIONS
   precheck(_DOS_FUNCTIONS,	"MS-DOS extensions")
$endif
   write("done")
end


#  precheck (v, s, p) -- check that s is in &features iff v is non-null;
#			 always print presence/absence if p is non-null

procedure precheck (v, s, p)
   if s == &features then {
      if /v then
	 write ("error: no predefined symbol for ", s) 
      else if \p then 
	 write ("found feature: ", s)
      }
   else {
      if \v then
	 write ("error: unexpected predefined symbol for ", s) 
      else if \p then 
	 write ("no feature:    ", s)
      }
end
