############################################################################
#
#	File:     tables.icn
#
#	Subject:  Procedures for table manipulation
#
#	Author:   Ralph E. Griswold
#
#	Date:     August 20, 1996
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#	Contributor:  Alan Beale
#
############################################################################
#
#  For the operations on tables that mimic set operations, the
#  correspondences are only approximate and do not have the mathematical
#  properties of the corresponding operations on  sets.  For example, table
#  "union" is not symmetric or transitive.
#
#  Where there is potential asymmetry, the procedures "favor" their
#  first argument.
#
#  All the procedures that return tables return new tables and do not
#  modify their arguments.
#
############################################################################

package ipl.tables

import
   ipl.pdco(List,Set,Index),
   datastruct(Entries, EntryList)

# Table union, approximates `T1 ++ T2`.
procedure tblunion(T1, T2)			
   local T3, x

   T3 := copy(T1)

   every x := key(T2) do
      insert(T3, x, T2[x])

   return T3

end

# Table intersection, approximates `T1 ** T2`.
procedure tblinter(T1, T2)			
   local T3, x

   T3 := table(tbldflt(T1))

   every x := key(T1) do
      if member(T2, x) then insert(T3, x, T1[x])
   
   return T3

end

# Table difference, approximates `T1 -- T2`.
procedure tbldiff(T1, T2)			
   local T3, x

   T3 := copy(T1)

   every x := key(T2) do
      delete(T3, x)

   return T3

end

# Table inversion; produces a table whose keys are `T`'s values and
# whose values are `T`'s keys.
#
procedure tblinvrt(T)				
   local T1, x

   T1 := table(tbldflt(T))

   every x := key(T) do
      insert(T1, T[x], x)

   return T1

end

# Produces the default value for `T`.
procedure tbldflt(T)				
   static probe

   initial probe := []			# only need one

   return T[probe]

end

# Produces a two-way table based on `T`.
procedure twt(T)				
   local T1, x

   T1 := copy(T)

   every x := key(T) do
      insert(T1, T[x], x)

   return T1

end

# Produces sorted list of keys in table `T`.
procedure keylist(tbl)			
   return sort(List{ key(tbl) })
end

# Produces values in `T` ordered by sorted order of keys.
procedure kvallist(T)
   return List{ T[!keylist(T)] }
end

# Tests equivalences of tables `T1` and `T2`.
procedure tbleq(tbl1, tbl2)		
   local x
   static prod

   initial prod := []

   if *tbl1 ~= *tbl2 then fail
   if tbl1[prod] ~=== tbl2[prod] then fail
   else every x := key(tbl1) do
      if not(member(tbl2, x)) |
         (tbl2[x] ~=== tbl1[x]) then fail
   return tbl2

end

# Produces sorted list of values in table `T`.
procedure vallist(tbl)		
   return sort(List{ !tbl })
end

# Produces set of values in table `T`.
procedure valset(tbl)		
   return Set{ !tbl }
end

#
# Generate key-value pairs as a sequence of `Entry` records.  NB -
# for each invocation, the same record is returned every time, with
# the values replaced.
#
procedure entries(t)
   suspend Entries{ keyval(t) }
end

# Return a flat list, with alternating key-value entries.
procedure flatten(t)
   return List{ keyval(t) }
end

# Return an (unsorted) list of pairs of key-values.  Apply `sortf(l,
# 1)` to the result to get a sorted list.
procedure entrylist(t)
   return EntryList{ keyval(t) }
end

# Return a random key from table t
procedure randomkey(t)
   return Index{ key(t), ?(0 < *t) }
end

#  inserts() -- Inserts values into a table in which the same key can
#  have more than one value (i.e., duplicate keys).  The value of each
#  element is a list of inserted values.
#
procedure inserts(t, k, v)
   put(member(t, k), v) | insert(t, k, [v])
   return t
end

#
# This is like `inserts()` above, but the values of the given table are
# sets rather than lists.
#
procedure inserts_set(t, k, v)
   insert(member(t, k), v) | insert(t, k, set(v))
   return t
end

