#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import io

#
# All the elements in a grid line will be within this distance of
# one another originally.
#
$define GRID_TOLERANCE 15

############################################################################
#
# A line of components, either horizontally or vertically
#
class GridLine()
   public 
      avg_pos,                 # The average of the x or y values 
      avg_size,                # The average w or h.
      elements

   public new()
      elements := set()
      return
   end
end


############################################################################
#
# Vertical line
#
class VGridLine(GridLine)
   #
   # Is element e above/below/in this line?
   #
   public compare(e)
      if e.x >= avg_pos - GRID_TOLERANCE & e.x + e.w <= avg_pos + avg_size + GRID_TOLERANCE then
         return 0
      if e.x <= avg_pos + GRID_TOLERANCE & e.x + e.w >= avg_pos + avg_size - GRID_TOLERANCE then
         return 0
      if e.x - avg_pos > GRID_TOLERANCE then
         return 1
      if e.x - avg_pos < -GRID_TOLERANCE then
         return -1
      return 0
   end

   public add(e)
      local s
      insert(elements, e)
      s := 0
      every s +:= (!elements).x
      avg_pos := s / *elements
      s := 0
      every s +:= (!elements).w
      avg_size := s / *elements
   end
end


############################################################################
#
# Horizontal line - as above for the x direction.
#
class HGridLine(GridLine)
   #
   # Is element e above/below/in this line?
   #
   public compare(e)
      if e.y >= avg_pos - GRID_TOLERANCE & e.y + e.h <= avg_pos + avg_size + GRID_TOLERANCE then
         return 0
      if e.y <= avg_pos + GRID_TOLERANCE & e.y + e.h >= avg_pos + avg_size - GRID_TOLERANCE then
         return 0
      if e.y - avg_pos > GRID_TOLERANCE then
         return 1
      if e.y - avg_pos < -GRID_TOLERANCE then
         return -1
      return 0
   end

   public add(e)
      local s
      insert(elements, e)
      s := 0
      every s +:= (!elements).y
      avg_pos := s / *elements
      s := 0
      every s +:= (!elements).h
      avg_size := s / *elements
   end
end


############################################################################
#
# A set of GridLines
#
class GridSet()
   public 
      orientation,             # Either "h" or "v"                  
      lines

   #
   # Create a new GridLine and enter e into it.
   #
   public make_new(e)
      local new
      new := if orientation == "v" then VGridLine() else HGridLine()
      new.add(e)
      return new
   end

   #
   # Enter e either into a current GridLine, or a new one.
   #
   public enter(e)
      local i
      every i := 1 to *lines do {
         case lines[i].compare(e) of {
            0 : {
               lines[i].add(e)
               return
            }
            -1 : {
               insert(lines, i, make_new(e))
               return
            }
         }
      }
      put(lines, make_new(e))
   end

   public print(s)
      local l
      write("Gridset:",s)
      every l := !lines do {
         writes("Line: ")
         every writes((!l.elements).name,"  ")
         write()
      }
   end
      
   public new(orientation)
      self.orientation := orientation
      lines := []
      return
   end
end

