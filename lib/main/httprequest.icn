#
# $Id$
#

package http

import util, net, io, mail

#
# Encapsulate one request to `HttpClient`.
#
class HttpRequest(MimeHeaders)
   private readable 
      url,
      input_stream,
      method,
      output_stream,
      referer,
      range_start,
      range_end,
      content_type,
      helper

   #
   # Set the desired url.
   #
   public set_url(url)
      self.url := need_URL(url)
      link
   end

   #
   # Set the range of data to get; either being &null implies the
   # start or end of data respectively.
   #
   public set_range(s, e)
      self.range_start := /s | need_integer(s, 0)
      self.range_end := /e | need_integer(e, 0)
      link
   end

   #
   # Convenience method to set the post data from a table
   # which represents html form post data.  The content type
   # is set appropriately too.
   #
   public set_html_form_data(t)
      set_input_stream(StringStream(URL.make_cgi_string(t)))
      set_method("POST")
      set_content_type("application/x-www-form-urlencoded")
      link
   end

   #
   # Convenience method to set the post data from a Message
   # which represents html form post data.  The content type
   # is set appropriately too.
   #
   # The Message object must have content type multipart/form-data,
   # and have an appropriate MultiPart set as its content object.
   #
   public set_multipart_form_data(m)
      local s
      s := m.to_rfc822()
      # Strip off everything up to first boundary.
      s ?:= (tab(find("--boundary")), tab(0))
      set_input_stream(StringStream(s))
      set_method("POST")
      set_content_type(m.get_first_header("Content-Type"))
      link
   end

   #
   # Set the content type of the post/put data.  The parameter may
   # either be a string, or a `ContentType` instance.  In the latter
   # case, it is converted to string using `ContentType.to_rfc2616()`.
   #
   public set_content_type(content_type)
      if is(content_type, ContentType) then
         content_type := content_type.to_rfc2616()
      self.content_type := content_type
      link
   end

   #
   # Set the request method type.  The default is `GET`, unless post data is set, in which
   # case the default is `POST`.
   #
   public set_method(method)
      self.method := need_string(method)
      link
   end

   #
   # Set the referer page; the value may be a string or a `URL`.
   #
   public set_referer(s)
      self.referer := s
      link
   end

   #
   # For a POST or PUT, set the stream to read data from.
   #
   public set_input_stream(f)
      self.input_stream := f
      link
   end

   #
   # Set a stream to use to receive the data; always required except
   # on a "HEAD" method.
   #
   public set_output_stream(f)
      self.output_stream := f
      link
   end

   #
   # Set an instance of `HttpRequestHelper` to provide extra functions
   # which can be called during the request.
   #
   public set_helper(x)
      self.helper := x
      link
   end

   public override new()
      MimeHeaders.new()
      method := "GET"
      return
   end
end
