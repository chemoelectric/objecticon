#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui

############################################################################
#
#
#
class CanvasMenuBarDialog(CanvasComponentDialog)
   public 
      add_label,               #                 
      add_menu,                #                
      add_separator,           #                     
      add_checkbox,            #                    
      delete,                  #              
      edit,                    #            
      up,
      down,
      struct,                  #              
      select_rec,              #                  
      new_cbg

   #
   # Insert new into tree, update string representation.
   #
   public update(new)
      local nl

      new.change_canvas(c.parent_Canvas)
      new.rename()
      select_rec.parent.add(new, select_rec.index)
      new.set_parent_component(c)
      new.initially()
      c.set_string_rep()
      #
      # Compute line in which new insertion goes.
      #
      nl := struct.get_selections()[1]
      if /select_rec.owner then nl +:= 1
      struct.set_contents(c.get_string_rep())
      #
      # Move line down if necessary to ensure new addition on page.
      #
      struct.ensure_line_visible(nl)
      #
      # Make new insertion selected and move cursor there
      #
      struct.set_selections([nl])
      struct.set_cursor(nl)

      #
      # Set select_rec to inserted record.
      #
      select_rec := struct.get_rec(nl)

      update_grey()
   end

   public update_grey()
      local l, e, flag
      l := struct.get_selections()
      if *l = 1 then {
         select_rec := struct.get_rec(l[1])
         if c === select_rec.parent then {
            add_label.set_is_shaded(&yes)
            add_separator.set_is_shaded(&yes)
            add_checkbox.set_is_shaded(&yes)
            if is(c, CanvasMenuButton) then 
               add_menu.set_is_shaded(&yes)
            else
               add_menu.set_is_shaded(&no)
         } else {
            add_label.set_is_shaded(&no)
            add_separator.set_is_shaded(&no)
            add_checkbox.set_is_shaded(&no)
            add_menu.set_is_shaded(&no)
         }
         if \select_rec.owner then {
            edit.set_is_shaded(&no)
            if is(c, CanvasMenuButton) & c.menu === select_rec.owner then
               delete.set_is_shaded(&yes)
            else
               delete.set_is_shaded(&no)
            if can_go_up() then
               up.set_is_shaded(&no)
            else
               up.set_is_shaded(&yes)
            if can_go_down() then
               down.set_is_shaded(&no)
            else
               down.set_is_shaded(&yes)
         } else {
            delete.set_is_shaded(&yes)
            edit.set_is_shaded(&yes)
            up.set_is_shaded(&yes)
            down.set_is_shaded(&yes)
         }
      } else {
         select_rec := &null
         every (add_menu | add_label | add_separator | add_checkbox | 
                delete | edit | up | down).set_is_shaded(&yes)
      }

      every e := struct.get_rec(!l) do {
         if not is(e.owner, CanvasCheckBoxMenuItem) then {
            flag := 1
            break
         }
      }
      if *l = 0 | \flag then
         new_cbg.set_is_shaded(&yes)
      else
         new_cbg.set_is_shaded(&no)
   end

   public on_new_cbg()
      local l, n, e
      #
      # Should only have been selected if get_rec(!l) are all CanvasCheckBox
      #
      l := struct.get_selections()
      n := c.parent_Canvas.new_checkbox_group()
      every e := struct.get_rec(!l) do {
         e.owner.set_images(Icon.DIAMOND_UP, Icon.DIAMOND_DOWN)
         e.owner.set_parent_check_box_group(n)
         e.owner.set_is_checked(&no)
      }
      c.set_string_rep()
      struct.set_contents(c.get_string_rep())
      struct.clear_selections()
      update_grey()
   end

   public on_add_label()
      local new
      new := CanvasTextMenuItem()
      new.set_paint_mid(CanvasTextPaint("Edit me"))
      update(new)
      update_grey()
   end

   public on_add_menu()
      local new
      new := CanvasMenu()
      new.set_paint_mid(CanvasTextPaint("Edit me"))
      new.set_paint_right(CanvasImagePaint("image=",Icon.ARROW_RIGHT))
      update(new)
      update_grey()
   end

   public on_add_separator()
      local new
      new := CanvasMenuSeparator()
      update(new)
      update_grey()
   end

   public on_add_checkbox()
      local new
      new := CanvasCheckBoxMenuItem()
      new.set_paint_mid(CanvasTextPaint("Edit me"))
      update(new)
      update_grey()
   end

   public on_edit()
      case classof(select_rec.owner) of {
         CanvasMenu | CanvasTextMenuItem : CanvasMenuComponentDialog(select_rec.owner).show_modal(self)
         CanvasCheckBoxMenuItem : CanvasCheckBoxMenuEdit(select_rec.owner).show_modal(self)
         CanvasMenuSeparator : CanvasMenuSeparatorEdit(select_rec.owner).show_modal(self)
      }
      c.set_string_rep()
      struct.set_contents(c.get_string_rep())
   end

   public on_delete()
      select_rec.parent.remove_index(select_rec.index)
      c.set_string_rep()
      struct.set_contents(c.get_string_rep())
      struct.clear_selections()
      update_grey()
   end

   public can_go_up()
      local t, i
      t := select_rec.owner
      case select_rec.depth of {
         1 : # Top-level, parent is c
            return c.get_index(t) > 1
         2 : {
            i := t.parent.get_index(t)
            if i > 1 then
               return
            # Can we move to top?
            return is(c, CanvasMenuBar) & 
               (is(t, CanvasMenu) | c.get_index(t.parent) > 1)
         }
         default :
            return
      }
   end

   public can_go_down()
      local t, i
      t := select_rec.owner
      case select_rec.depth of {
         1 : # Top-level, parent is c
            return c.get_index(t) < *c.menus
         2 : {
            i := t.parent.get_index(t)
            if i < *t.parent.children then
               return
            # Can we move to top?
            return is(c, CanvasMenuBar) & 
               (is(t, CanvasMenu) | c.get_index(t.parent) < *c.menus)
         }
         default :
            return
      }
   end

   public on_up()
      local t, p, pp, i, pc
      t := select_rec.owner
      # Get the parent and the parent-of-the-parent
      case select_rec.depth of {
         1 : {
            p := c
            pc := c.menus
         }
         2 : {
            p := t.parent
            pp := c
            pc := p.children
         }
         default : {
            p := t.parent
            pp := p.parent
            pc := p.children
         }
      }
      i := p.get_index(t)
      p.remove_index(i)
      if i > 1 then {
         if is(pc[i - 1], CanvasMenu) then
            pc[i - 1].add(t)
         else
            p.add(t, i - 1)
      } else {
         if (pp ~=== c) | is(t, CanvasMenu)  then
            pp.add(t, pp.get_index(p))
         else
            c.menus[c.get_index(p) - 1].add(t)
      }
      c.set_string_rep()
      struct.set_contents(c.get_string_rep())
      i := struct.find_index(t) | syserr("Lost the component")
      struct.set_selections([i])
      struct.set_cursor(i)
      update_grey()
   end

   public on_down()
      local t, p, pp, i, pc
      t := select_rec.owner
      # Get the parent and the parent-of-the-parent
      case select_rec.depth of {
         1 : {
            p := c
            pc := c.menus
         }
         2 : {
            p := t.parent
            pp := c
            pc := p.children
         }
         default : {
            p := t.parent
            pp := p.parent
            pc := p.children
         }
      }
      i := p.get_index(t)
      if i < *pc then {
         p.remove_index(i)
         if is(pc[i], CanvasMenu) then
            pc[i].add(t, 1)
         else
            p.add(t, i + 1)
      } else {
         p.remove_index(i)
         if (pp ~=== c) | is(t, CanvasMenu)  then
            pp.add(t, pp.get_index(p) + 1)
         else
            c.menus[c.get_index(p) + 1].add(t, 1)
      }
      c.set_string_rep()
      struct.set_contents(c.get_string_rep())
      i := struct.find_index(t) | syserr("Lost the component")
      struct.set_selections([i])
      struct.set_cursor(i)
      update_grey()
   end

   public setup()
      local p, q
      cast(self,CanvasComponentDialog).setup()

      p := TabItem()
      p.set_layout(GridLayout())
      add_tab_at_front(p)
      p.set_label("General")

      struct := MenuTree()
      struct.connect(self.update_grey, Event.SELECTION_CHANGED)
      c.set_string_rep()
      struct.set_size(250, "300")
      struct.set_contents(c.get_string_rep())
      struct.set_select_mode(Select.MANY)
      p.add(struct)

      q := Panel("c:x_weight=0")
      q.set_layout(GridLayout("doi=0","extra=borders"))

      add_label := TextButton("c:eol")
      add_label.connect(self.on_add_label, Event.ACTION)
      add_label.set_label("Add label")
      q.add(add_label)

      add_separator := TextButton("c:eol")
      add_separator.connect(self.on_add_separator, Event.ACTION)
      add_separator.set_label("Add separator")
      q.add(add_separator)
 
      add_menu := TextButton("c:eol")
      add_menu.connect(self.on_add_menu, Event.ACTION)
      add_menu.set_label("Add Menu")
      q.add(add_menu)
     
      add_checkbox := TextButton("c:eol")
      add_checkbox.connect(self.on_add_checkbox, Event.ACTION)
      add_checkbox.set_label("Add checkbox")
      q.add(add_checkbox)

      delete := TextButton("c:eol")
      delete.connect(self.on_delete, Event.ACTION)
      delete.set_label("Delete")
      q.add(delete)

      edit := TextButton("c:eol")
      edit.connect(self.on_edit, Event.ACTION)
      edit.set_label("Edit")
      q.add(edit)

      new_cbg := TextButton("c:eol")
      new_cbg.connect(self.on_new_cbg, Event.ACTION)
      new_cbg.set_label("CheckBoxGroup")
      q.add(new_cbg)

      up := TextButton("label=Up", "c:eol")
      up.connect(self.on_up, Event.ACTION)
      q.add(up)

      down := TextButton("label=Down")
      down.connect(self.on_down, Event.ACTION)
      q.add(down)

      p.add(q)

      update_grey()
   end
end





