package gui

#
# A `ABorder` (so named to avoid a clash with the `Border` component),
# is an object which represents a border.  It reports the widths of
# the four edges of its border.  Given a rectangle, it also draws the
# border on a Window.
#
# An `ABorder` also subclasses `Align`.  This lets it position a
# `Size` within a `Rect` by "floating" it within the bordered inner
# area according to the alignment.
#
abstract class ABorder(Insets,Align)
   public abstract initially(c)
   public abstract draw(W, x, y, w, h)

   public finally()
   end

   public draw_rect(W, r)
      self.draw(W, r.x, r.y, r.w, r.h)
   end

   public draw_rev(W, x, y, w, h)
      self.draw(W, x, y, w, h)
   end

   public draw_rev_rect(W, r)
      self.draw_rev(W, r.x, r.y, r.w, r.h)
   end

   public draw_focus_rect(W, r)
      self.draw_focus(W, r.x, r.y, r.w, r.h)
   end

   public draw_focus(W, x, y, w, h)
      Gui.style.draw_focus_rectangle(W, x, y, w, h)
   end

   public draw_down_rect(W, r)
      self.draw_down(W, r.x, r.y, r.w, r.h)
   end

   public draw_down(W, x, y, w, h)
      Gui.style.fill_down_rectangle(W, x, y, w, h)
   end

   #
   # Take a {Rect}, giving the bordered size, and a {Size}, giving an
   # object within it, and "float" it within the area in accordance
   # with the x and y alignment, but limiting the result to the
   # {Rect}.  A {Rect} is returned.
   #
   public float(r, s)
      return get_inner_rect(r).float(s, self)
   end

   public set_x_align(x)
      self.x_align := x
      return self
   end
      
   public set_y_align(y)
      self.y_align := y
      return self
   end
      
   public set_align(x, y)
      set_x_align(x)
      set_y_align(y)
      return self
   end

   public new()
      x_align := y_align := Align.C
      return
   end
end

# A border with an arbitrary width, that is just empty space (ie
# nothing is drawn).  The default l/r insets are Gui.X_INSET and t/b
# insets Gui.Y_INSET.
#
class EmptyBorder(ABorder)
   public initially(c)
   end

   public draw(W, x, y, w, h)
   end

   public set_insets(l, r, t, b)
      set_l_inset(l)
      set_r_inset(r)
      set_t_inset(t)
      set_b_inset(b)
      return self
   end

   public set_l_inset(n)
      self.l_inset := n
      return self
   end

   public set_r_inset(n)
      self.r_inset := n
      return self
   end

   public set_t_inset(n)
      self.t_inset := n
      return self
   end

   public set_b_inset(n)
      self.b_inset := n
      return self
   end

   public new()
      cast(self,ABorder).new()
      l_inset := r_inset := Gui.X_INSET
      t_inset := b_inset := Gui.Y_INSET
      return
   end
end

#
# A border with zero size insets.
#
class NullBorder(ABorder)
   public initially()
      self.l_inset := self.t_inset := self.r_inset := self.b_inset := 0
   end

   public draw(W, x, y, w, h)
   end
end

#
# A parent class for several borders which draw lines to display the
# border.  The four insets are always of the same width.
#
abstract class LineBorder(ABorder)
   public line_width

   public initially()
      self.l_inset := self.t_inset := self.r_inset := self.b_inset := line_width
   end

   public draw_focus(W, x, y, w, h)
      Gui.style.draw_focus_rectangle(W,
                                     x + line_width + 1, y + line_width + 1, 
                                     w - 2 * line_width - 2, h - 2 * line_width - 2)
   end

   public get_line_width()
      return self.line_width
   end

   # Set the line width of this border; each of the four insets has this width.
   public set_line_width(n)
      self.line_width := n
      return self
   end

   public new()
      cast(self,ABorder).new()
      line_width := Gui.BORDER_WIDTH
      return
   end
end

# A `LineBorder` displayed as a raised rectangle.
class RaisedBorder(LineBorder)
   public draw(W, x, y, w, h)
      Gui.style.draw_raised_rectangle(W, x, y, w, h, line_width)
   end

   public draw_rev(W, x, y, w, h)
      Gui.style.draw_sunken_rectangle(W, x, y, w, h, line_width)
   end
end

# A `LineBorder` displayed as a sunken rectangle.
class SunkenBorder(LineBorder)
   public draw(W, x, y, w, h)
      Gui.style.draw_sunken_rectangle(W, x, y, w, h, line_width)
   end

   public draw_rev(W, x, y, w, h)
      Gui.style.draw_raised_rectangle(W, x, y, w, h, line_width)
   end
end

# A `LineBorder` displayed as a bevelled rectangle.
class BevelledBorder(LineBorder)
   public draw(W, x, y, w, h)
      Gui.style.draw_sunken_rectangle(W, x, y, w, h, line_width / 2)
      Gui.style.draw_raised_rectangle(W, x + line_width / 2, y + line_width / 2,
                                  w - line_width, h - line_width, line_width / 2)
   end
end

# A `LineBorder` displayed as a plain rectangle.
class PlainBorder(LineBorder)
   public draw(W, x, y, w, h)
      local i
      every i := 0 to line_width - 1 do
         W.draw_rectangle(x + i, y + i, w - 2 * i, h - 2 * i)
   end
end

#
# A border made up of two sub-borders.
#
class CompoundBorder(ABorder)
   public
      outer,
      inner

   public initially(c)
      outer.initially(c)
      inner.initially(c)
      l_inset := outer.l_inset + inner.l_inset
      r_inset := outer.r_inset + inner.r_inset
      t_inset := outer.t_inset + inner.t_inset
      b_inset := outer.b_inset + inner.b_inset
   end

   public finally()
      outer.finally()
      inner.finally()
   end

   public draw(W, x, y, w, h)
      outer.draw(W, x, y, w, h)
      inner.draw(W, x + outer.l_inset, y + outer.t_inset,
              w - outer.l_inset - outer.r_inset,
              h - outer.t_inset - outer.b_inset)
   end

   public draw_rev(W, x, y, w, h)
      outer.draw_rev(W, x, y, w, h)
      inner.draw_rev(W, x + outer.l_inset, y + outer.t_inset,
                     w - outer.l_inset - outer.r_inset,
                     h - outer.t_inset - outer.b_inset)
   end

   public draw_focus(W, x, y, w, h)
      outer.draw_focus(W, x, y, w, h)
   end

   public draw_down(W, x, y, w, h)
      outer.draw_down(W, x, y, w, h)
   end

   public set_inner(inner)
      self.inner := inner
      return self
   end

   public set_outer(outer)
      self.outer := outer
      return self
   end
end
