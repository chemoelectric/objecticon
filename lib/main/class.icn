package lang

import util(need_string)

#
# This class contains various helpful methods to get information about
# a class at runtime.
#
final abstract class Class()
   public static const 
      # Integer flag for a method
      Method,
      # Integer flag for a private field
      Private,
      # Integer flag for a public field
      Public,
      # Integer flag for a protected field
      Protected,
      # Integer flag for a package field
      Package,
      # Integer flag for a static field
      Static,
      # Integer flag for a constant field
      Const,
      # Integer flag for a readable field
      Readable,
      # Integer flag for an optional method
      Optional, 
      # Integer flag for a final method or class
      Final,
      # Integer flag for a special method, ie init or new.
      Special,
      # Integer flag for an abstract class/method.
      Abstract,
      # Integer flag for a native method.
      Native,
      # Integer flag for a removed method.
      Removed,
      # Integer flag for an override method.
      Override

   private static init()
      Method := 8r01
      Private := 8r02
      Public := 8r04
      Protected := 8r010
      Package := 8r020
      Static := 8r040
      Const := 8r0100
      Readable := 8r0200
      Optional := 8r0400
      Final := 8r01000
      Special := 8r02000
      Abstract := 8r04000
      Native := 8r010000
      Removed := 8r020000
      Override := 8r040000
   end

   # This method creates a new instance of the class from which the
   # method is called.  The `new()` method is not invoked.  The new
   # object has all its instance fields set to &null, and is in an
   # initializing state, meaning that `new()` may be invoked upon it,
   # and `const` fields are assignable.  After the instance is
   # initialized by the caller, `complete_raw_instance` must be called
   # to place it into the initialized state.
   #
   public static native create_raw_instance()

   # This method creates a new instance of the class from which the
   # method is called.  The `new()` method is not invoked.  The new
   # object has all its instance fields set to &null, and is in an
   # initialized state, meaning that `new()` cannot be invoked upon
   # it, and `const` fields are not assignable.
   #
   public static native create_instance()

   private static native create_raw_instance_of(c)

   # This completes the initialization of a raw instance by setting
   # its state to initialized.
   #
   public static native complete_raw_instance(o)

   # Return the name of the class
   #
   public static native get_name(c)

   # Return the class of the object
   #
   public static native get_class(c)

   # Return the program this class resides in.  The program's &main
   # co-expression is returned.
   #
   public static native get_program(c)

   # Return the name of the package in which this class resides; fails
   # if the class is not in a package.
   #
   public static get_package(c)
      return extract_package(get_name(c))
   end

   # Return the source location of the class
   # :Returns :
   # :  a `Location` instance
   #
   public static get_location(c)
      return Prog.get_global_location(get_name(c), get_program(c))
   end

   # Generate the superclasses of the class `c`
   #
   public static native get_supers(c)

   # Generate the implemented classes of the class `c`
   #
   public static native get_implemented_classes(c)

   # Succeed iff the class `c` implements the class `target`.  This is
   # similar to the builtin is() function, but takes a class as its
   # first argument, whereas is() takes an object (or fails).
   #
   public static native implements(c, target)

   # This is similar to the builtin is() function.  However, if obj is
   # in a different program to cl, then the class with the same name
   # as cl is looked up in obj's program.  Then is(obj, cl) is invoked
   # and the result returned.
   #
   public static is_by_name(obj, cl)
      local p
      p := get_program(obj) 
      if p ~=== get_program(cl) then
         cl := for_name(get_name(cl), p) | fail
      return is(obj, cl)
   end

   # Generate the field names of the class `c`.  The instance fields
   # come first, followed by the class fields.
   #
   public static get_field_names(c)
      suspend get_field_name(c, 1 to get_n_fields(c))
   end

   # Return the number of fields in the class `c`.
   #
   public static get_n_fields(c)
      return get_n_instance_fields(c) + get_n_class_fields(c)
   end

   # Return the flags for the class `c`, which can include
   # `Abstract` or `Final`.
   #
   public static native get_class_flags(c)

   # Generate the field names of the class fields of class `c`.
   #
   public static get_class_field_names(c)
      suspend get_field_name(c, get_n_instance_fields(c) + 1 to get_n_fields(c))
   end

   # Return the number of class fields of class `c`.
   #
   public static native get_n_class_fields(c)

   # Generate the field names of the instance fields of class `c`.
   #
   public static get_instance_field_names(c)
      suspend get_field_name(c, 1 to get_n_instance_fields(c))
   end

   # Return the number of instance fields of class `c`.
   #
   public static native get_n_instance_fields(c)

   # Return the flags of the given field in class`c`.
   # :Parameters :
   # :  `c` - the class
   # :  `field` - either a field name or number
   # :Returns :
   # :  an integer, being the OR of all the flags
   # :Fails :
   # :  if the field is unknown
   #
   public static native get_field_flags(c, field)

   # Return the field index number of the given field in class`c`.
   # :Parameters :
   # :  `c` - the class
   # :  `field` - either a field name or number
   # :Returns :
   # :  an integer, being the index
   # :Fails :
   # :  if the field is unknown
   #
   public static native get_field_index(c, field)

   # Return the field name of the given field in class`c`.
   # :Parameters :
   # :  `c` - the class
   # :  `field` - either a field name or number
   # :Returns :
   # :  the field name
   # :Fails :
   # :  if the field is unknown
   #
   public static native get_field_name(c, field)

   # Return the source location of the given field in class`c`.
   # :Parameters :
   # :  `c` - the class
   # :  `field` - either a field name or number
   # :Returns :
   # :  a `Location` instance
   # :Fails :
   # :  if the field is unknown
   #
   public static get_field_location(c, field)
      return Location!get_field_location_impl(c, field)
   end

   private static native get_field_location_impl(c, field)

   # Return the class in which the given field is defined.
   # :Parameters :
   # :  `c` - the class
   # :  `field` - either a field name or number
   # :Returns :
   # :  the defining class of the field
   # :Fails :
   # :  if the field is unknown
   #
   public static native get_field_defining_class(c, field)

   # Return the object part of a method pointer.
   # :Parameters :
   # :  `mp` - a methp structure
   # :Returns :
   # :  an object
   #
   private static native get_methp_object(mp)

   # Return the procedure part of a method pointer.
   # :Parameters :
   # :  `mp` - a methp structure
   # :Returns :
   # :  a procedure object (which will be an instance method)
   #
   private static native get_methp_proc(mp)

   # Set the component parts of a methp.
   # :Parameters :
   # :  `mp` - a methp structure
   # :  `obj` - the object part
   # :  `proc` - the proc part
   # :Returns :
   # :  the methp
   #
   private static native set_methp(mp, obj, proc)

   # Get the value of the field in `x`, behaving in exactly the same way
   # as though the "." operation had been invoked with equivalent values.
   #
   # :Parameters :
   # :  `x` - either a record, class or object
   # :  `field` - either a field name or number
   # :Returns :
   # :  the field value
   # :Runtime error :
   # :  if the field is unknown or access is not permitted
   #
   public static native get(x, field)

   # This behaves in exactly the same way as `get` above, but fails
   # rather than stops with a runtime error, if the field is unknown
   # or access is denied.  On failure, `&why` is set to an appropriate
   # message.
   #
   # :Parameters :
   # :  `x` - either a record, class or object
   # :  `field` - either a field name or number
   # :Returns :
   # :  the field value
   # :Fails :
   # :  if the field is unknown or access is not permitted
   #
   public static native getf(x, field)

   # This behaves in exactly the same way as `getf` above, but
   # doesn't set `&why` on failure.
   #
   # :Parameters :
   # :  `x` - either a record, class or object
   # :  `field` - either a field name or number
   # :Returns :
   # :  the field value
   # :Fails :
   # :  if the field is unknown or access is not permitted
   #
   public static native getq(x, field)

   # This method tries to resolve all the unresolved deferred methods
   # declared in the class from which is called, from the dll `lib`.
   # Methods are matched to functions in the dll using the same scheme
   # for native methods in the main runtime interpreter, namely by
   # using the form "<class>_<method>", with all dots in <class>
   # replaced by underscores.  Any methods not found are simply
   # ignored.  If the library cannot be found, the call fails and sets
   # `&why` to the message reported by dlerror.
   # 
   # :Parameters :
   # :  `lib` - the name of the dll
   # :Fails :
   # :  if the library cannot be found.
   #
   public static native load_library(lib)   

   # Lookup a class by name
   # 
   # :Parameters :
   # :  `s` - a class name
   # :  `ce` - a coexpression, representing a loaded program, defaults
   #   to the main program
   # :Returns :
   # :  a class
   # :Fails :
   # :  if the class is unknown
   #
   public static for_name(s, ce)
      local t
      s := need_string(s)
      if not(integer(s)) &
         t := Prog.get_named_global(s, ce) &
         type(t) == "class" then
         return t
   end

   # Initialize a class, by calling its static init method.  Has no
   # effect if the class has already been initialized.
   #
   public static native ensure_initialized(c)
end
