package eval

import ipl.pdco, ipl.lists, lang, util, exception, parser

abstract class EvaluatorEnv()
   public abstract get(k, ev)
end

class DefaultEvaluatorEnv(EvaluatorEnv)
   private 
      vars, consts
   private readable
      write_globals_flag

   public override get(k, ev)
      return (if \write_globals_flag then glookup(k, ev) else .glookup(k, ev)) | tlookup(k)
   end

   private tlookup(k)
      if upto('.', k) then
         (k ?:= (="default.", tab(0))) | runerr("No such id: " || k)
      return .member(\consts, k) | vars[k]
   end

   private glookup(k, ev)
      local t, f
      if upto('.', k) then {
         k ?:= (="default.", tab(0))
         return lang.Prog.get_global(k)
      }
      t := []
      if lang.Prog.get_global(k) then
         put(t, k)
      every f := ev.get_imports() || "." || k do {
         if lang.Prog.get_global(f) then
            put(t, f)
      }
      if *t = 1 then
         return lang.Prog.get_global(t[1])
      if *t > 1 then
         runerr("Ambiguous name: " || k || "(" || list2str(t) || ")")
   end

   public set_vars(t)
      self.vars := t
      link
   end

   public set_consts(t)
      self.consts := t
      link
   end

   public set_write_globals(f)
      write_globals_flag := need_flag(f)
      link
   end

   public new(v, c)
      /v := table()
      self.vars := v
      self.consts := c
      return
   end
end

class Evaluator()
   private
      # Map of nodes (loops, breaks) to the enclosing loop node.
      loops,
      brk,
      subject,
      imports,
      pos,
      # Map of nodes (loops, breaks) to the topmost scan node in the enclosing loop
      scans,
      env,
      node

   private compute_loops(n, loop, scan)
      if is(n, Node) then
         case n.label of {
            "everydo"|"every"|"whiledo"|"while"|"untildo"|"until"|"repeat": {
               loops[n] := loop
               scans[n] := scan
               every compute_loops(n.gen(), n)
            }
            "create": compute_loops(n.child(2))
            "coinvoke": {
               compute_loops(n.child(1), loop, scan)
               every compute_loops(ExprList(n, 3).gen().pos)
            }
            "break"|"breakexpr": {
               loops[n] := \loop | throw("break without loop")
               scans[n] := scan
               compute_loops(n.child(2), loops[loop], scans[loop])
            }
            "next": {
               loops[n] := \loop | throw("next without loop")
               scans[n] := scan
            }
            "augqmark"|"Bqmark": {
               compute_loops(n.child(1), loop, scan)
               /scan := n
               compute_loops(n.child(3), loop, scan)
            }
            "fail"|"return"|"returnexpr"|"succeed"|"succeedexpr"|"link"|
               "linkexpr"|"suspend"|"suspendexpr"|"suspendexprdo":
               throw("suspend/return/succeed/link/fail not allowed")
            default: every compute_loops(n.gen(), loop, scan)
         }
   end

   private loop(n, ex)
      local res
      brk[n] := &current
      while res := !ex do
         unless res === "next" then
            return res
   end

   private restore(n)
      local x
      if x := \scans[n] then {
         &subject := subject[x]
         &pos := pos[x]
      }
   end

   private save(n)
      subject[n] := &subject
      pos[n] := &pos
      return
   end

   private do_everydo(n)
      local e
      e := create_E(n.child(2))
      suspend E(loop(n, create while @e do E(n.child(4)) ))
   end

   private do_every(n)
      local e
      e := create_E(n.child(2))
      suspend E(loop(n, create while @e ))
   end

   private create_E(e)
      return create E(e)
   end

   private static pos_list(x)
      return ipl.pdco.List{ x.gen().pos }
   end

   private do_invoke(n)
      local x
      x := pos_list(ExprList(n, 3))
      suspend case *x of {
         0: E(n.child(1))()
         1: E(n.child(1))(E(x[1]))
         2: E(n.child(1))(E(x[1]),E(x[2]))
         3: E(n.child(1))(E(x[1]),E(x[2]),E(x[3]))
         4: E(n.child(1))(E(x[1]),E(x[2]),E(x[3]),E(x[4]))
         5: E(n.child(1))(E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]))
         6: E(n.child(1))(E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]))
         7: E(n.child(1))(E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]))
         8: E(n.child(1))(E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]))
         9: E(n.child(1))(E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]))
         10: E(n.child(1))(E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]))
         11: E(n.child(1))(E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
                                   E(x[11]))
         12: E(n.child(1))(E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
                                   E(x[11]),E(x[12]))
         13: E(n.child(1))(E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
                                   E(x[11]),E(x[12]),E(x[13]))
         14: E(n.child(1))(E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
                                   E(x[11]),E(x[12]),E(x[13]),E(x[14]))
         15: E(n.child(1))(E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
                                   E(x[11]),E(x[12]),E(x[13]),E(x[14]),E(x[15]))
         16: E(n.child(1))(E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
                                   E(x[11]),E(x[12]),E(x[13]),E(x[14]),E(x[15]),E(x[16]))
         default: runerr("Too many parameters")
      }
   end

   private do_coinvoke(n)
      local x
      x := pos_list(ExprList(n, 3))
      suspend case *x of {
         0: E(n.child(1)){}
         1: E(n.child(1)){E(x[1])}
         2: E(n.child(1)){E(x[1]),E(x[2])}
         3: E(n.child(1)){E(x[1]),E(x[2]),E(x[3])}
         4: E(n.child(1)){E(x[1]),E(x[2]),E(x[3]),E(x[4])}
         5: E(n.child(1)){E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5])}
         6: E(n.child(1)){E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6])}
         7: E(n.child(1)){E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7])}
         8: E(n.child(1)){E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8])}
         9: E(n.child(1)){E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9])}
         10: E(n.child(1)){E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10])}
         11: E(n.child(1)){E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
                                   E(x[11])}
         12: E(n.child(1)){E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
                                   E(x[11]),E(x[12])}
         13: E(n.child(1)){E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
                                   E(x[11]),E(x[12]),E(x[13])}
         14: E(n.child(1)){E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
                                   E(x[11]),E(x[12]),E(x[13]),E(x[14])}
         15: E(n.child(1)){E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
                                   E(x[11]),E(x[12]),E(x[13]),E(x[14]),E(x[15])}
         16: E(n.child(1)){E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
                                   E(x[11]),E(x[12]),E(x[13]),E(x[14]),E(x[15]),E(x[16])}
         default: runerr("Too many parameters")
      }
   end

   private do_subscript(n)
      local x
      x := pos_list(ExprList(n, 3))
      suspend case *x of {
         0: E(n.child(1))[]
         1: E(n.child(1))[E(x[1])]
         2: E(n.child(1))[E(x[1]),E(x[2])]
         3: E(n.child(1))[E(x[1]),E(x[2]),E(x[3])]
         4: E(n.child(1))[E(x[1]),E(x[2]),E(x[3]),E(x[4])]
         5: E(n.child(1))[E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5])]
         6: E(n.child(1))[E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6])]
         7: E(n.child(1))[E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7])]
         8: E(n.child(1))[E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8])]
         9: E(n.child(1))[E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9])]
         10: E(n.child(1))[E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10])]
         11: E(n.child(1))[E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
                           E(x[11])]
         12: E(n.child(1))[E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
                           E(x[11]),E(x[12])]
         13: E(n.child(1))[E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
                           E(x[11]),E(x[12]),E(x[13])]
         14: E(n.child(1))[E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
                           E(x[11]),E(x[12]),E(x[13]),E(x[14])]
         15: E(n.child(1))[E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
                           E(x[11]),E(x[12]),E(x[13]),E(x[14]),E(x[15])]
         16: E(n.child(1))[E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
                           E(x[11]),E(x[12]),E(x[13]),E(x[14]),E(x[15]),E(x[16])]
         default: runerr("Too many subscripts")
      }
   end

   private do_paren(n)
      local x
      x := pos_list(ExprList(n, 2))
      suspend case *x of {
         0:  &null
         1:  E(x[1])
         2:  (E(x[1]),E(x[2]))
         3:  (E(x[1]),E(x[2]),E(x[3]))
         4:  (E(x[1]),E(x[2]),E(x[3]),E(x[4]))
         5:  (E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]))
         6:  (E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]))
         7:  (E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]))
         8:  (E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]))
         9:  (E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]))
         10: (E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]))
         11: (E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
              E(x[11]))
         12: (E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
              E(x[11]),E(x[12]))
         13: (E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
              E(x[11]),E(x[12]),E(x[13]))
         14: (E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
              E(x[11]),E(x[12]),E(x[13]),E(x[14]))
         15: (E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
              E(x[11]),E(x[12]),E(x[13]),E(x[14]),E(x[15]))
         16: (E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
              E(x[11]),E(x[12]),E(x[13]),E(x[14]),E(x[15]),E(x[16]))
         default: runerr("Too many parenthesized expressions")
      }
   end

   private do_brack(n)
      local x, l
      x := pos_list(ExprList(n, 2))
      suspend case *x of {
         0:  []
         1:  [E(x[1])]
         2:  [E(x[1]),E(x[2])]
         3:  [E(x[1]),E(x[2]),E(x[3])]
         4:  [E(x[1]),E(x[2]),E(x[3]),E(x[4])]
         5:  [E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5])]
         6:  [E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6])]
         7:  [E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7])]
         8:  [E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8])]
         9:  [E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9])]
         10:  [E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10])]
         11:  [E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
               E(x[11])]
         12:  [E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
               E(x[11]),E(x[12])]
         13:  [E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
               E(x[11]),E(x[12]),E(x[13])]
         14:  [E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
               E(x[11]),E(x[12]),E(x[13]),E(x[14])]
         15:  [E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
               E(x[11]),E(x[12]),E(x[13]),E(x[14]),E(x[15])]
         16:  [E(x[1]),E(x[2]),E(x[3]),E(x[4]),E(x[5]),E(x[6]),E(x[7]),E(x[8]),E(x[9]),E(x[10]),
               E(x[11]),E(x[12]),E(x[13]),E(x[14]),E(x[15]),E(x[16])]
         default: {
            l := ipl.pdco.List{ create_E(!x) }
            copy(Lifo!l)
         }
      }
   end

   private do_case(n)
      local l, v, cc, def
      l := pos_list(CaseList(n, 5))
      if v := E(n.child(2)) then {
         every cc := !l do {
            if cc.label == "cclause" then {
               if v === E(cc.child(1)) then {
                  suspend E(cc.child(3))
                  fail
               }
            } else # Default clause
               def := cc
         }
         if \def then
            suspend E(def.child(3))
      }
   end

   private do_section(n) 
      suspend case n.child(4).tok of {
         YY.COLON : E(n.child(1))[E(n.child(3)):E(n.child(5))]
         YY.PCOLON : E(n.child(1))[E(n.child(3))+:E(n.child(5))]
         YY.MCOLON : E(n.child(1))[E(n.child(3))-:E(n.child(5))]
      }
   end

   private do_dottedident(n)
      local ls
      ls := Util.dottedid2string(n.child(1))
      if (ls == "default") | member(\imports, ls) then
         return env.get(ls || "." || n.child(3).s, self)
      suspend Class_get(E(n.child(1)), n.child(3).s)
   end

   # This is wrapped in a static method so that lookups if x is a
   # class give the right error message (606 rather than 607).
   private static Class_get(x, field)
      return lang.Class.get(x, field)
   end

   private do_keyword(n) 
      local s, f
      s := "&" || n.child(2).s
      f := lang.Prog.get_keyword(s) | runerr("Invalid keyword: "|| s)
      suspend f() 
   end

   private do_break(n)
      restore(n)
      return coact(Factory.new_keyword(, "null"), brk[loops[n]])
   end

   private do_next(n)
      restore(n)
      return coact("next", brk[loops[n]])
   end

   private do_breakexpr(n)
      restore(n)
      return coact(n.child(2), brk[loops[n]])
   end

   private E(n)
      if is(n, Token) then
         return case n.tok of {
            YY.IDENT: env.get(n.s, self)
            YY.INTLIT|YY.REALLIT|YY.STRINGLIT|YY.CSETLIT|YY.UCSLIT: n.val
            default : fatalerr("Not implemented: token " || to_string(n))
         }
      suspend case n.label of {
         "Bat": E(n.child(1)) @ E(n.child(3))
         "Bbackslash": E(n.child(1)) \ E(n.child(3))
         "Bbang": E(n.child(1)) ! E(n.child(3))
         "Bbar": E(n.child(1)) | E(n.child(3))
         "Bcaret": E(n.child(1)) ^ E(n.child(3))
         "Bconcat": E(n.child(1)) || E(n.child(3))
         "Bdiff": E(n.child(1)) -- E(n.child(3))
         "Bequiv": E(n.child(1)) === E(n.child(3))
         "Binter": E(n.child(1)) ** E(n.child(3))
         "Blconcat": E(n.child(1)) ||| E(n.child(3))
         "Bminus": E(n.child(1)) - E(n.child(3))
         "Bmod": E(n.child(1)) % E(n.child(3))
         "Bnequiv": E(n.child(1)) ~=== E(n.child(3))
         "Bnmeq": E(n.child(1)) = E(n.child(3))
         "Bnmge": E(n.child(1)) >= E(n.child(3))
         "Bnmgt": E(n.child(1)) > E(n.child(3))
         "Bnmle": E(n.child(1)) <= E(n.child(3))
         "Bnmlt": E(n.child(1)) < E(n.child(3))
         "Bnmne": E(n.child(1)) ~= E(n.child(3))
         "Bplus": E(n.child(1)) + E(n.child(3))
         "Bqmark": 1(E(n.child(1)),save(n)) ? E(n.child(3))
         "Bseq": E(n.child(1)) == E(n.child(3))
         "Bsge": E(n.child(1)) >>= E(n.child(3))
         "Bsgt": E(n.child(1)) >> E(n.child(3))
         "Bslash": E(n.child(1)) / E(n.child(3))
         "Bsle": E(n.child(1)) <<= E(n.child(3))
         "Bslt": E(n.child(1)) << E(n.child(3))
         "Bsne": E(n.child(1)) ~== E(n.child(3))
         "Bstar": E(n.child(1)) * E(n.child(3))
         "Bunion": E(n.child(1)) ++ E(n.child(3))
         "Empty": {}
         "Uat": @E(n.child(2))
         "Ubackslash": \E(n.child(2))
         "Ubang": !E(n.child(2))
         "Ucaret": ^E(n.child(2))
         "Ubar"|"Uconcat"|"Ulconcat": |E(n.child(2))
         "Udiff": --E(n.child(2))
         "Udot": .E(n.child(2))
         "Uequiv": ===E(n.child(2))
         "Uinter": **E(n.child(2))
         "Uminus": -E(n.child(2))
         "Unequiv": ~===E(n.child(2))
         "Unmeq": =E(n.child(2))
         "Unmne": ~=E(n.child(2))
         "Unot": not E(n.child(2))
         "Uplus": +E(n.child(2))
         "Uqmark": ?E(n.child(2))
         "Useq": ==E(n.child(2))
         "Uslash": /E(n.child(2))
         "Usne": ~==E(n.child(2))
         "Ustar": *E(n.child(2))
         "Utilde": ~E(n.child(2))
         "Uunion": ++E(n.child(2))
         "and": E(n.child(1)) & E(n.child(3))
         "assign": E(n.child(1)) := E(n.child(3))
         "augand": E(n.child(1)) &:= E(n.child(3))
         "augat": E(n.child(1)) @:= E(n.child(3))
         "augbang": E(n.child(1)) !:= E(n.child(3))
         "augcaret": E(n.child(1)) ^:= E(n.child(3))
         "augconcat": E(n.child(1)) ||:= E(n.child(3))
         "augdiff": E(n.child(1)) --:= E(n.child(3))
         "augequiv": E(n.child(1)) ===:= E(n.child(3))
         "auginter": E(n.child(1)) **:= E(n.child(3))
         "auglconcat": E(n.child(1)) |||:= E(n.child(3))
         "augminus": E(n.child(1)) -:= E(n.child(3))
         "augmod": E(n.child(1)) %:= E(n.child(3))
         "augnequiv": E(n.child(1)) ~===:= E(n.child(3))
         "augnmeq": E(n.child(1)) =:= E(n.child(3))
         "augnmge": E(n.child(1)) >=:= E(n.child(3))
         "augnmgt": E(n.child(1)) >:= E(n.child(3))
         "augnmle": E(n.child(1)) <=:= E(n.child(3))
         "augnmlt": E(n.child(1)) <:= E(n.child(3))
         "augnmne": E(n.child(1)) ~=:= E(n.child(3))
         "augplus": E(n.child(1)) +:= E(n.child(3))
         "augqmark": 1(E(n.child(1)),save(n)) ?:= E(n.child(3))
         "augseq": E(n.child(1)) ==:= E(n.child(3))
         "augsge": E(n.child(1)) >>=:= E(n.child(3))
         "augsgt": E(n.child(1)) >>:= E(n.child(3))
         "augslash": E(n.child(1)) /:= E(n.child(3))
         "augsle": E(n.child(1)) <<=:= E(n.child(3))
         "augslt": E(n.child(1)) <<:= E(n.child(3))
         "augsne": E(n.child(1)) ~==:= E(n.child(3))
         "augstar": E(n.child(1)) *:= E(n.child(3))
         "augunion": E(n.child(1)) ++:= E(n.child(3))
         "brace": E(n.child(2))
         "brack": do_brack(n)
         "break": do_break(n)
         "breakexpr": do_breakexpr(n)
         "case": do_case(n)
         "coinvoke": do_coinvoke(n)
         "compound": { E(n.child(1)) ; E(n.child(3)) }
         "create": create_E(n.child(2))
         "dottedident": do_dottedident(n)
         "every": do_every(n)
         "everydo": do_everydo(n)
         "field": Class_get(E(n.child(1)), n.child(3).s)
         "if": if E(n.child(2)) then E(n.child(4))
         "ifelse": if E(n.child(2)) then E(n.child(4)) else E(n.child(6))
         "invoke": do_invoke(n)
         "keyword": do_keyword(n)
         "next": do_next(n)
         "paren": do_paren(n)
         "repeat": E( loop(n, create  repeat E(n.child(2)) ))
         "revassign": E(n.child(1)) <- E(n.child(3))
         "revswap": E(n.child(1)) <-> E(n.child(3))
         "section": do_section(n)
         "subscript": do_subscript(n)
         "swap": E(n.child(1)) :=: E(n.child(3))
         "to": E(n.child(1)) to E(n.child(3))
         "toby": E(n.child(1)) to E(n.child(3)) by E(n.child(5))
         "unless": unless E(n.child(2)) then E(n.child(4))
         "unlesselse": unless E(n.child(2)) then E(n.child(4)) else E(n.child(6))
         "until": E( loop(n, create  until E(n.child(2)) ))
         "untildo": E( loop(n, create  until E(n.child(2)) do E(n.child(4)) ))
         "while": E( loop(n, create  while E(n.child(2)) ))
         "whiledo": E( loop(n, create  while E(n.child(2)) do E(n.child(4)) ))
         default: fatalerr("Not implemented: " || n.label)
      }
   end
   
   public eval()
      (\env & \node) | runerr("eval() called without environment and/or node being set")
      brk := table()
      subject := table()
      pos := table()
      suspend E(node)
   end

   public set_env(env)
      self.env := env
      link
   end

   public set_node(n)
      loops := table()
      scans := table()
      node := n
      unless try1 { compute_loops(n) } then {
         node := loops := scans := &null
         fail
      }
      link
   end

   public set_imports(t)
      self.imports := t
      link
   end

   public get_imports()
      suspend .!\imports
   end
end
