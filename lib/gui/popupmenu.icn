#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import graphics

#
# This is a class for popup menus.  It is an invisible placeholder
# component, with zero size, from which a Menu can be popped up
# using the {popup()} method.
#
# Note that instances should never be added or removed from a dialog;
# that is done automatically.
#
class PopupMenu(Component, MenuMode)
   public 
      menu

   public go_right()
   end

   public go_left()
   end

   public close_menu()
      self.menu.hide()
      self.menu.finally()
      self.menu := &null
      self.parent_dialog.exit_menu_mode(self)
      self.parent.remove(self)
      fire(Event.POPUP_CLOSED)
   end

   public close_all()
      close_menu()
   end

   public make_partial()
      close_menu()
   end

   public should_close(e)
      if member(Mouse.PRESS, e.code) &
         not(menu.which_region(e)) then
         return
   end

   public allow_nested(c)
      local t
      every t := c.gen_parents() do {
         if is(t, SubMenuProxyComponent) then
            return t.menu.parent_component === self
      }
   end

   public handle_key(e)
      (\menu).handle_key(e)
   end

   #
   # Popup a menu.  The use of the alternate positions is described in
   # {MenuComponent.show()}.
   #
   # @param comp The component to temporarily add the menu to
   # @param menu  The menu to show
   # @param x The x position to show
   # @param y The y position to show
   # @param xa The alternate x position to show; defaults to {x}.
   # @param ya The alternate y position to show; defaults to {&null}).
   #
   public popup(comp, menu, x, y, a[])
      local xa, ya, pd
      xa := a[1] | x
      ya := a[2]
      pd := comp.parent_dialog
      pd := \pd.popup_manager
      set_all_wattribs(pd.get_effective_wattribs())
      comp.add(self)
      self.resize()
      self.parent_dialog.enter_menu_mode(self)
      self.menu := menu
      self.menu.set_component_link(self)         
      self.menu.initially()
      self.menu.show(x, y, xa, ya)
      return self
   end

   public new()
      cast(self,Component).new()
      self.x_spec := self.y_spec := self.w_spec := self.h_spec := 0
      connect(handle_key, Event.KEY_PRESS)
      set_inherit_wattribs(&no)
      return
   end
end
