import lang

procedure main(args)
   local l, s, res

   l := Loader(args[1])
   s := l.load() | stop(l.get_reason())

   write("Source:")
   if any(&lcase, s.code) then
      s.code ? LegacyCodePrinter().decode(0)
   else
      s.code ? CodePrinter().decode(0)

   write("\n\n===========================\n\nResult:")

   res := s.migrate()
   res ? CodePrinter().decode(0)
   write()
end


class LegacyCodePrinter(LegacyDecode)
   public col

   public print(l,s)
      \l|fail
      if col = 0 then
         writes(repl(" ",l*4))
      writes(s)
      col +:= l*4 + *s
   end

   public nl()
      if col > 0 then
         write()
      col := 0
   end

   public decode(l)
      local i, n, rname, t, res, s

      t := line_in() | fail

      if i := integer(t) then {
         print(l, "REF to " || i)
         return
      }

      case t of {
         "null":{
            print(l,"&null")
            return
         }

         "procedure" : {
            print(l,"procedure(" || line_in() || ")")
            return
         }

         "record" :{
            (rname := line_in() &
             n := integer(line_in())) | fail
            note_seen(res)
            print(l, "record<" || tag_count || ">" || rname || "(")
            every i := 1 to n do {
               decode(l+1) | fail
               if i < n then
                  print(l+1,",")
            }
            print(l, ")")
            return
         }

         "class" :
            return decode_class(l)

         "string" : {
            print(l,image(s := decode_string(line_in())))
            return s
         }

         "integer" : {
            print(l, i := integer(line_in()))
            return i
         }

         "real" : {
            print(l, i := real(line_in()))
            return i
         }

         "cset" : {
            print(l, "cset("|| image(s := cset(decode_string(line_in())))|| ")")
            return s
         }

         "list" : {
            n := integer(line_in()) | fail
            note_seen(res)
            print(l, "<" || tag_count || ">[")
            every i := 1 to n do {
               decode(l+1) | fail
               if i < n then
                  print(l+1,",")
            }
            print(l, "]")
            return
         }

         "set" : {
            n := integer(line_in()) | fail
            note_seen(res)
            print(l, "set<" || tag_count || ">(")
            every i := 1 to n do {
               decode(l+1) | fail
               if i < n then
                  print(l+1,",")
            }
            print(l, ")")
            return
         }

         "table" : {
            print(l,"table(")
            decode() | fail
            n := integer(line_in()) | fail
            note_seen(res)
            print(l, ")<" || tag_count || ">{")
            every 1 to n do {
               nl()
               decode(l+1)
               print(l+1,"->")
               decode(l+2)
            }
            print(l,"}")
            return
         }            

         default :
            fail
      }
   end

   public decode_class(l)
      local res, cname, n, spc
      spc := repl(" ", 4 * l)
      cname := line_in() | fail
      nl()
      note_seen(res)
      print(l,"class<" || tag_count || ">"|| cname|| "(")
      n := integer(line_in()) | fail
      every 1 to n do {
         nl()
         print(l+1,line_in())
         print(l+1, "->")
         decode(l+2)
      }
      print(l, ")")
      return
   end

   public new()
      cast(self,LegacyDecode).new()
      col := 0
      return
   end
end



class CodePrinter(Decode)
   public col

   public print(l,s)
      \l|fail
      if col = 0 then
         writes(repl(" ",l*4))
      writes(s)
      col +:= l*4 + *s
   end

   public nl()
      if col > 0 then
         write()
      col := 0
   end

   public decode(l)
      local i, n, rname, t, res, s

      t := char_in() | fail
      case t of {
         Codec.REF_CODE : {
            i := int_in() | fail
            print(l, "REF to " || i)
            return
         }

         Codec.NULL_CODE : {
            print(l,"&null")
            return
         }

         Codec.PROCEDURE_CODE : {
            print(l,"procedure(" || line_in() || ")")
            return
         }

         Codec.OBJECT_CODE : {
            return decode_class(l)
         }

         Codec.STRING_CODE : {
            print(l,image(s := decode_string(line_in())))
            return s
         }

         Codec.INTEGER_CODE : {
            print(l, i := int_in())
            return i
         }

         Codec.REAL_CODE : {
            print(l, i := real(line_in()))
            return i
         }

         Codec.CSET_CODE : {
            print(l, "cset("|| image(s := cset(decode_string(line_in())))|| ")")
            return s
         }

         Codec.RECORD_CODE : {
            (rname := line_in() &
             n := int_in()) | fail
            note_seen(res)
            print(l, "record<" || tag_count || ">" || rname || "(")
            every i := 1 to n do {
               decode(l+1) | fail
               if i < n then
                  print(l+1,",")
            }
            print(l, ")")
            return
         }

         Codec.LIST_CODE : {
            n := int_in() | fail
            note_seen(res)
            print(l, "<" || tag_count || ">[")
            every i := 1 to n do {
               decode(l+1) | fail
               if i < n then
                  print(l+1,",")
            }
            print(l, "]")
            return
         }

         Codec.SET_CODE : {
            n := int_in() | fail
            note_seen(res)
            print(l, "set<" || tag_count || ">(")
            every i := 1 to n do {
               decode(l+1) | fail
               if i < n then
                  print(l+1,",")
            }
            print(l, ")")
            return
         }

         Codec.TABLE_CODE : {
            n := int_in() | fail
            print(l,"table(")
            decode(l+1) | fail
            note_seen(res)
            print(l, ")<" || tag_count || ">{")
            every 1 to n do {
               nl()
               decode(l+1)
               print(l+1,"->")
               decode(l+2)
            }
            print(l,"}")
            return
         }            

         default :
            fail
      }            
   end

   public decode_class(l)
      local res, cname, n, spc
      spc := repl(" ", 4 * l)
      cname := line_in() | fail
      nl()
      note_seen(res)
      print(l,"class<" || tag_count || ">"|| cname|| "(")
      n := decode()
      every 1 to n do {
         nl()
         decode(l+1)
         print(l+1, "->")
         decode(l+2)
      }
      print(l, ")")
      return
   end

   public new()
      cast(self,Decode).new()
      col := 0
      return
   end
end


