############################################################################
#
#	File:     xformimg.icn
#
#	Subject:  Procedures to transform image
#
#	Author:   Ralph E. Griswold
#
#	Date:     February 4, 1995
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#  These procedures perform reflections, rotations, and concatenations
#  of images.
#
#  Warning:  Some of these operations are slow.
#
############################################################################
#
#  Requires:  Version 9 graphics
#
############################################################################
#
#  Links:  numbers, wattrib, wopen
#
############################################################################

package ipl.xformimg

import
   graphics(Pixels, Window),
   io(stop)

procedure wreflect(win1, dir)
   local win2,  x2,  y2, width, height, px1, px2, p

   /dir := "v"				# vertical reflection is the default

   height := win1.get_height()
   width := win1.get_width()

   win2 := Window.open().set_size(width, height) |
      stop("*** cannot window for reflection")

   case dir of {
      "v":  {
         x2 := 0
         y2 := height - 1
         px1 := win1.get_pixels()
         px2 := Pixels.blank(width, height)
         every p := px1.gen_rgba() do {
            px2.set_rgba(x2, y2, p[1], p[2], p[3])
            if x2 = width - 1 then {
               x2 := 0
               y2 -:= 1
               }
            else x2 +:= 1
            }
         px1.close()
         win2.draw_image(,, px2)
         px2.close()
         }
      "h":  {
         x2 := width - 1
         y2 := 0
         px1 := win1.get_pixels()
         px2 := Pixels.blank(width, height)
         every p := px1.gen_rgba() do {
            px2.set_rgba(x2, y2, p[1], p[2], p[3])
            if x2 = 0 then {
               x2 := width - 1
               y2 +:= 1
               }
            else x2 -:= 1
            }
         px1.close()
         win2.draw_image(,, px2)
         px2.close()
         }
      default:  runerr("*** invalid specification for reflect()", dir)
      }

   return win2

end

procedure wrotate(win1, dir)
   local win2,  x2,  y2, width, height, px1, px2, p

   /dir := "90"				# 90-degree rotation is the default

   height := win1.get_height()
   width := win1.get_width()


   case integer(dir) of {
      90:  {
         x2 := height - 1
         y2 := 0
         win2 := Window.open().set_size(height, width) | stop("*** cannot open target window")
         px1 := win1.get_pixels()
         px2 := Pixels.blank(height, width)
         every p := px1.gen_rgba() do {
            px2.set_rgba(x2, y2, p[1], p[2], p[3])
            if y2 = width - 1 then {
               y2 := 0
               x2 -:= 1
               }
            else y2 +:= 1
            }
         px1.close()
         win2.draw_image(,, px2)
         px2.close()
         }
      -90:  {
         win2 := Window.open().set_size(height, width) | stop("*** cannot open target window")
         x2 := 0
         y2 := width - 1
         px1 := win1.get_pixels()
         px2 := Pixels.blank(height, width)
         every p := px1.gen_rgba() do {
            px2.set_rgba(x2, y2, p[1], p[2], p[3])
            if y2 = 0 then {
               y2 := width - 1
               x2 +:= 1
               }
            else y2 -:= 1
            }
         px1.close()
         win2.draw_image(,, px2)
         px2.close()
         }
      180:  {
         win2 := Window.open().set_size(width, height) | stop("*** cannot open target window")
         x2 := width - 1
         y2 := height - 1
         px1 := win1.get_pixels()
         px2 := Pixels.blank(width, height)
         every p := px1.gen_rgba() do {
            px2.set_rgba(x2, y2, p[1], p[2], p[3])
            if x2 = 0 then {
               x2 := width - 1
               y2 -:= 1
               }
            else x2 -:= 1
            }
         px1.close()
         win2.draw_image(,, px2)
         px2.close()
         }
      default:  runerr("*** invalid specification for rotate()", dir)
      } | runerr("*** invalid specification for rotate()", dir)

   return win2

end

procedure wcatenate(win1, win2, dir)
   local width1, width2, height1, height2, win3

   /dir := "h"			# horizontal concatenation is the default

   width1 := win1.get_width()
   width2 := win2.get_width()
   height1 := win1.get_height()
   height2 := win2.get_height()

   case dir of {
      "h":  {
         win3 := Window.open().set_size(width1 + width2, max(height1, height2)) |
               stop("*** cannot open window for concatenation")
         win1.copy_to(,,,, win3)
         win2.copy_to(0, 0, width2, height2, 
                      win3, width1, 0)
         }
      "v":  {
         win3 := Window.open().set_size(max(width1, width2), height1 + height2) |
               stop("*** cannot open window for concatenation")
         win1.copy_to(,,,, win3)
         win2.copy_to(0, 0, width2, height2, 
                      win3, 0, height1)
         }
      default:  runerr("*** invalid specification for catenate()", dir)
      }

   return win3

end
