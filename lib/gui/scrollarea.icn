#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import graphics, util

#
# This is a base class for displaying an arbitrarily large object
# using a pair of scroll bars.  This specification of the object is
# provided by implementing methods in a subclass.
#
abstract class ScrollArea(Component)
   public 
      hsb,              
      vsb,
      view,
      subject_width,       
      subject_height,
      wheel_factor,
      vertical_increment,
      horizontal_increment,
      use_wheel_flag,
      default_key_listener

   public static const
      SCROLLBAR_SIZE

   private static init()
      SCROLLBAR_SIZE := env_scale("OI_SCROLLAREA_SCROLLBAR_SIZE") | 
         ScrollBar.DEFAULT_INNER_SIZE + 2 * Gui.BORDER_WIDTH
   end

   #
   # The x offset into the object we are viewing
   #
   public get_area_x()
      return (\self.hsb).get_value() | 0
   end

   #
   # The y offset into the object we are viewing
   #
   public get_area_y()
      return (\self.vsb).get_value() | 0
   end

   #
   # The virtual x position of the subject
   #
   public get_subject_x()
      return self.view.x - get_area_x()
   end

   #
   # The virtual y position of the subject
   #
   public get_subject_y()
      return self.view.y - get_area_y()
   end

   #
   # Recompute the scrollbars and redisplay the object.
   #
   public compute_and_invalidate()
      is_live() | fail
      self.set_internal_fields()
      self.invalidate()
      return self
   end

   public get_default_height(dw)
      return get_default_subject_height(dw -border.get_total_width()) + border.get_total_height()
   end

   public get_default_width()
      return get_default_subject_width() + border.get_total_width()
   end

   public get_default_subject_height()
      return get_subject_height() 
   end

   public get_default_subject_width()
      return get_subject_width()
   end

   public layout()
      self.set_internal_fields()
   end

   public on_vsb(e)
      self.refresh()
   end

   public on_hsb(e)
      self.refresh()
   end

   #
   # Goto a horizontal pos.
   #
   public set_area_x(horiz)
      local t
      if t := (\self.hsb).value then {
         self.hsb.set_value(horiz)
         if hsb.value ~= t then
            self.refresh()
      }
      return self
   end

   #
   # Goto a vertical pos.
   #
   public set_area_y(vert)
      local t
      if t := (\self.vsb).value then {
         self.vsb.set_value(vert)
         if vsb.value ~= t then
            self.refresh()
      }
      return self
   end

   #
   # Set the wheel factor, being the number of vertical increments to
   # move on a wheel press; if not set then the scrollbar will use
   # its default value.
   #
   public set_wheel_factor(n)
      self.wheel_factor := n
      return self
   end

   #
   # Get the wheel_factor
   #
   public get_wheel_factor()
      return self.wheel_factor
   end

   #
   # Set the vertical increment, which is the amount moved on a press on
   # the small button; if not set then the subclass's method
   # {get_default_vertical_increment()} is used for the value.
   #
   public set_vertical_increment(n)
      self.vertical_increment := n
      return self
   end

   public get_vertical_increment()
      return self.vertical_increment
   end

   #
   # Set the horizontal increment, which is the amount moved on a press on
   # the small button; if not set then the subclass's method
   # {get_default_horizontal_increment()} is used for the value.
   #
   public set_horizontal_increment(n)
      self.horizontal_increment := n
      return self
   end

   public get_horizontal_increment()
      return self.horizontal_increment
   end

   public predict_view_width(w, sb)
      local w1
      w1 := w - border.get_total_width()
      if \sb then
         w1 -:= SCROLLBAR_SIZE
      return w1
   end

   public predict_total_width(vw, sb)
      local w1
      w1 := vw + border.get_total_width()
      if \sb then
         w1 +:= SCROLLBAR_SIZE
      return w1
   end

   public predict_view_height(h, sb)
      local h1
      h1 := h - border.get_total_height()
      if \sb then
         h1 -:= SCROLLBAR_SIZE
      return h1
   end

   public predict_total_height(vh, sb)
      local h1
      h1 := vh + border.get_total_height()
      if \sb then
         h1 +:= SCROLLBAR_SIZE
      return h1
   end

   # Ensure the given region (in area co-ordinates) is visible.
   #
   public ensure_region_visible(r)
      if r.y + r.h > get_area_y() + view.h then
         set_area_y(min(r.y, r.y + r.h - view.h))
      else if r.y < get_area_y() then
         set_area_y(r.y)

      if r.x + r.w > get_area_x() + view.w then
         set_area_x(min(r.x, r.x + r.w - view.w))
      else if r.x < get_area_x() then
         set_area_x(r.x)

      return self
   end

   # Center the given region (in area co-ordinates) vertically.
   #
   public center_region_vertically(r)
      return set_area_y(r.y + r.h / 2 - view.h / 2)
   end

   # Center the given region (in area co-ordinates) horizontally.
   #
   public center_region_horizontally(r)
      return set_area_y(r.x + r.w / 2 - view.w / 2)
   end

   #
   # Set an ideal size (into w_spec/h_spec) based on the given min and max
   # dimensions.
   #
   public set_ideal_size(min_w, max_w, min_h, max_h)
      local max_th, max_tw, min_th, min_tw, need_vsb, need_hsb, pw, ph

      # Calculate the preferred view size; don't call
      # get_subject_width()/get_subject_height() since
      # get_default_width()/get_default_height() may have been
      # overridden.
      pw := get_preferred_width()
      ph := get_preferred_height(pw)
      pw := predict_view_width(pw)
      ph := predict_view_height(ph)

      if /max_w then
         need_hsb := 0
      else {
         max_tw := predict_view_width(max_w)
         min_tw := predict_view_width(max_w, &yes)
         if min_tw >= pw then
            need_hsb := 0
         else if max_tw >= pw then
            need_hsb := 1
         else
            need_hsb := 2
      }

      if /max_h then
         need_vsb := 0
      else {
         max_th := predict_view_height(max_h)
         min_th := predict_view_height(max_h, &yes)
         if min_th >= ph then
            need_vsb := 0
         else if max_th >= ph then
            need_vsb := 1
         else
            need_vsb := 2
      }

      # ptw(pvw(x))=x
      # ptw(pvw(x,1),1)=x
      # ptw(x) < ptw(x,1)
      # pvw(x) > pvw(x,1)

      if (need_vsb < 2) & (need_hsb < 2) then {
         # pw <= pvw(max_w)  (since need_hsb=0 or 1)
         # w_spec = ptw(pw) <= ptw(pvw(max_w)) = max_w
         w_spec := predict_total_width(pw)
         h_spec := predict_total_height(ph)
      } else if (need_hsb + need_vsb > 2) then {
         w_spec := max_w
         h_spec := max_h
      } else if (need_hsb = 0) & (need_vsb = 2) then {
         # pw <= pvw(max_w,1) (since need_hsb=0)
         # w_spec = ptw(pw,1) <= ptw(pvw(max_w,1),1) = max_w
         w_spec := predict_total_width(pw, &yes)
         h_spec := max_h
      } else if (need_hsb = 2) & (need_vsb = 0) then {
         w_spec := max_w
         h_spec := predict_total_height(ph, &yes)
      }

      w_spec <:= \min_w
      h_spec <:= \min_h
      return self
   end

   #
   # Called on resize, buttons resized, or contents amended
   #
   public set_internal_fields()
      local max_th, max_tw, min_th, min_tw, need_vsb, need_hsb, 
         new_vsb, new_hsb, i, sb_size

      sb_size := SCROLLBAR_SIZE

      #
      # Position and size of scrolling region
      #
      view.x := self.x + border.get_l_inset()
      view.y := self.y + border.get_t_inset()
      max_tw := self.w - border.get_total_width()
      max_th := self.h - border.get_total_height()
      min_th := max_th - sb_size
      min_tw := max_tw - sb_size

      #
      # Set flags indicating whether scroll bars needed.  0 => definitely not
      # 1 => yes if opposite scroll bar needed; 2 => definitely yes.
      #
      if min_th >= get_subject_height() then
         need_vsb := 0
      else if max_th >= get_subject_height() then
         need_vsb := 1
      else
         need_vsb := 2

      if min_tw >= get_subject_width() then
         need_hsb := 0
      else if max_tw >= get_subject_width() then
         need_hsb := 1
      else
         need_hsb := 2

      #
      # Case analysis on flags to set up correct scroll bars, text width
      # and height fields.
      #
      if (need_vsb < 2) & (need_hsb < 2) then {
         #
         # No scroll bars.
         #
         view.w := max_tw
         view.h := max_th
         remove_vsb()
         remove_hsb()
      } else if (need_hsb + need_vsb > 2) then {
         #
         # Two scroll bars.
         #
         if /self.vsb := ScrollBar() then
            new_vsb := &yes
         if /self.hsb := ScrollBar() then {
            self.hsb.set_is_horizontal(&yes)
            new_hsb := &yes
         }

         view.w := min_tw
         view.h := min_th

         self.vsb.x := self.x + self.w - sb_size - border.get_r_inset()
         self.vsb.y := self.y + border.get_t_inset()
         self.vsb.w := sb_size
         self.vsb.h := self.h - sb_size - border.get_total_height()

         self.hsb.x := self.x + border.get_l_inset()
         self.hsb.y := self.y + self.h - sb_size - border.get_b_inset()
         self.hsb.w := self.w - sb_size - border.get_total_width()
         self.hsb.h := sb_size
      } else if (need_hsb = 0) & (need_vsb = 2) then {
         #
         # One vertical scroll bar.
         #
         if /self.vsb := ScrollBar() then
            new_vsb := &yes
         remove_hsb()

         view.w := min_tw
         view.h := max_th

         self.vsb.x := self.x + self.w - sb_size - border.get_r_inset()
         self.vsb.y := self.y + border.get_t_inset()
         self.vsb.w := sb_size
         self.vsb.h := self.h  - border.get_total_height()
      } else if (need_hsb = 2) & (need_vsb = 0) then {
         #
         # One horizontal scroll bar.
         #
         if /self.hsb := ScrollBar() then {
            self.hsb.set_is_horizontal(&yes)
            new_hsb := &yes
         }
         remove_vsb()

         view.w := max_tw
         view.h := min_th

         self.hsb.x := self.x + border.get_l_inset()
         self.hsb.y := self.y + self.h - sb_size - border.get_b_inset()
         self.hsb.w := self.w - border.get_total_width()
         self.hsb.h := sb_size
      }

      #
      # Initialize scroll bars.
      #
      if \self.vsb then {
         if view.h > 0 then
            self.vsb.set_page_size(view.h)
         else
            self.vsb.set_page_size(1)
         self.vsb.set_total_size(get_subject_height())
         i := \self.vertical_increment | get_default_vertical_increment()
         self.vsb.set_increment_size(i)
         if \new_vsb then {
            self.vsb.set_wheel_factor(\self.wheel_factor)
            self.vsb.
               set_wheel_component(if /use_wheel_flag then &null else self).
               connect(self.on_vsb, Event.VALUE_CHANGED).
               set_value(0)
            self.add(self.vsb)
         }
         self.vsb.layout()
      } 

      if \self.hsb then {
         if view.w > 0 then
            self.hsb.set_page_size(view.w)
         else
            self.hsb.set_page_size(1)
         self.hsb.set_total_size(get_subject_width())
         i := \self.horizontal_increment | get_default_horizontal_increment()
         self.hsb.set_increment_size(i)
         if \new_hsb then {
            self.hsb.
               set_wheel_component(&null).
               connect(self.on_hsb, Event.VALUE_CHANGED).
               set_value(0)
            self.add(self.hsb)
         }
         self.hsb.layout()
      }

      view.layout()
   end

   public remove_hsb()
      remove(\hsb)
      hsb := &null
      return self
   end

   public remove_vsb()
      remove(\vsb)
      vsb := &null
      return self
   end

   #
   # Invalidate the view area.
   #
   public refresh()
      view.invalidate()
   end

   public display()
      border.draw_rect(cbwin, self)
      display_children()
      if \default_key_listener & has_focus() & is_unshaded() then
         # Allowing the border to draw the focus rect wouldn't look
         # right here, since the scrollbars abut the border.  So we
         # draw it manually around the edge.
         Gui.style.draw_focus_rectangle(cbwin, x, y, w, h)
   end

   #
   # Move the vertical scrollbar (if any) to the topmost position
   #
   public goto_top()
      return set_area_y(0)
   end

   #
   # Move the vertical scrollbar (if any) to the bottommost position
   #
   public goto_bottom()
      set_area_y((\self.vsb).total_size)
      return self
   end

   #
   # Succeed if there is no vertical scrollbar, or if it's at the topmost position.
   #
   public at_top()
      return /vsb | vsb.at_top()
   end

   #
   # Succeed if there is no vertical scrollbar, or if it's at the bottommost position.
   #
   public at_bottom()
      return /vsb | vsb.at_bottom()
   end

   public on_default_key(e)
      case e.code of {
         Key.HOME : goto_top()
         Key.END : goto_bottom()
         Key.PGUP : set_area_y(get_area_y() - (\self.vsb).page_size)
         Key.PGDN : set_area_y(get_area_y() + (\self.vsb).page_size)
         Key.UP : set_area_y(get_area_y() - (\self.vsb).increment_size)
         Key.DOWN : set_area_y(get_area_y() + (\self.vsb).increment_size)
         Key.LEFT : set_area_x(get_area_x() - (\self.hsb).increment_size)
         Key.RIGHT : set_area_x(get_area_x() + (\self.hsb).increment_size)
      }
   end

   # Configure whether or not to use the default cursor movement keys; default no.
   #
   public set_use_default_keys(s)
      check_flag(s)
      (\default_key_listener).disconnect()
      if /s then {
         set_accepts_focus(&no)
         default_key_listener := &null
      } else {
         set_accepts_focus(&yes)
         default_key_listener := connect(on_default_key, Event.KEY_PRESS).last_listener
      }
      return self
   end

   # Configure whether or not to use the mouse wheel; default yes.
   #
   public set_use_wheel(s)
      use_wheel_flag := check_flag(s)
      return self
   end

   public keeps(e)
      return \default_key_listener & member(Key.CURSOR, e.code)
   end

   #
   # Return the width of the subject object
   #
   public get_subject_width()
      /self.subject_width := calculate_subject_width()
      return self.subject_width
   end

   #
   # This method must be implemented to compute the subject width.  Because
   # this is potentially expensive, the value is calculated as late as
   # possible and the result cached.
   #
   public abstract calculate_subject_width()

   #
   # Clear the cached value of subject width.
   #
   public invalidate_subject_width()
      self.subject_width := &null
      return self
   end

   #
   # Return the height of the subject object
   #
   public get_subject_height()
      /self.subject_height := calculate_subject_height()
      return self.subject_height
   end

   #
   # This method must be implemented to compute the subject width.  Because
   # this is potentially expensive, the value is calculated as late as
   # possible and the result cached.
   #
   public abstract calculate_subject_height()

   #
   # Clear the cached value of subject height.
   #
   public invalidate_subject_height()
      self.subject_height := &null
      return self
   end

   #
   # Return the default increment on a line-up/line-down
   #
   public abstract get_default_vertical_increment()

   #
   # Return the default increment on a line-left/line-right
   #
   public abstract get_default_horizontal_increment()

   #
   # Create the view component
   #
   public abstract create_view()

   public new()
      Component.new()
      self.set_border(SunkenBorder())
      use_wheel_flag := &yes
      self.view := create_view()
      add(view)
      self.set_constraint("x_fill", &yes)
      self.set_constraint("y_fill", &yes)
      self.set_constraint("x_weight", 1.0)
      self.set_constraint("y_weight",  1.0)
      return
   end
end
