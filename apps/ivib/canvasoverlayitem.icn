#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui

############################################################################
#
# Class for representing a OverlayItem on the canvas.
#
class CanvasOverlayItem(CanvasComponent,OverlayItem)
   #
   # Generate code into Code object c.
   #
   public override gen_code(c)
      local e
      (\self.layout_delegate).gen_code(c)
      every (!self.children).gen_code(c)
      c.add_var(self.name, class_variable)
      c.add_import(self.import_name, self.class_name)
      c.line(name || " := " || self.class_name || "()")
      every e := !sort(self.wattribs) do
         c.wattrib_line(e[1], e[2])
      if \self.layout_delegate then
         c.chain("set_layout(" || self.layout_delegate.name || ")")
      every c.chain("add(" || (!self.children).name || ")")
   end

   #
   # Duplicate object.
   #
   public override dup()
      local c
      c := CanvasOverlayItem()
      CanvasComponent.dup_fields(c)
      every c.add((!self.children).dup())
      return c
   end

   #
   # Return the I/O template.
   #
   public override get_template()
      suspend CanvasComponent.get_template() |
         ["Children", "children"] |
         ["Parent OverlaySet", "parent"]
   end

   public override display()
      if in_preview() then
         OverlayItem.display()
      else {
         # Display the OverlaySet title here rather than in CanvasOverlaySet,
         # otherwise it would have to be on top, or be overwritten
         # by the current OverlaySetItem.
         center_string(self.cbwin, self.x + self.w / 2, self.y + 10, "<OverlaySet>")
         display_children()
         self.cbwin.draw_rectangle(self.x, self.y, self.w, self.h)
      }
   end

   #
   # Open the configuration dialog box.
   #
   public override dialog()
      return CanvasOverlayItemDialog(self)
   end

   #
   # Overrides CanvasComponent.is_inside()
   #
   public override is_inside(c)
      local e, o
      if c === self then
         fail
      every e := back(self.z_children) do
         if o := e.is_inside(c) then
            return o
      if (self.x <= c.mx < self.x + self.w) & (self.y <= c.my < self.y + self.h) then
         return self
   end

   #
   # Overrides CanvasComponent.which_cursor_over() 
   #
   public override which_cursor_over(e)
      local t, o
      every t := back(self.z_children) do
         if o := t.which_cursor_over(e) then
            return o
   end

   public op_which()
      local t
      t := parent_Canvas.dup()
      parent.which_one := self
      parent.reset()
      parent_Canvas.parent_dialog.push_onto_undo(t)
      parent_Canvas.clear_selections()
      parent_Canvas.set_modified()
   end

   public override op_delete()
      local i, c
      if parent.which_one === self then {
         i := parent.get_index(self)
         c := parent.children[i-1 | i+1]
         parent.set_which_one(\c)
      }
      parent_Canvas.delete(self)
   end

   public override create_menu()
      local m, i
      m := CanvasComponent.create_menu()
      if self ~=== parent.which_one then {
         i := TextMenuItem().set_label("Which")
         i.connect(self.op_which, Event.ACTION)
         m.add(i)
      }
      return m
   end

   public override allows_selection()
   end

   public override allows_add()
      return 1
   end

   public override allows_positioning()
   end

   public override allows_copy()
   end

   public override allows_delete()
      # Can't delete the last item
      return *parent.children > 1
   end

   public override gen_cos()
      suspend CanvasComponent.gen_cos() | !self.children
   end

   public override new()
      OverlayItem.new()
      CanvasComponent.new()
      self.set_show_layout(&yes)
      self.class_name := "OverlayItem"
      self.import_name := "gui"
      self.name := "overlay_item"
      return
   end
end


