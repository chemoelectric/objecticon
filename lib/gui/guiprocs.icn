#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import graphics, lang, util

class Event()
   public static const
      MOUSE_LEFT_PRESS,
      MOUSE_MIDDLE_PRESS,
      MOUSE_RIGHT_PRESS,
      MOUSE_LEFT_RELEASE,
      MOUSE_MIDDLE_RELEASE,
      MOUSE_RIGHT_RELEASE,
      MOUSE_LEFT_DRAG,
      MOUSE_MIDDLE_DRAG,
      MOUSE_RIGHT_DRAG,
      MOUSE_MOVEMENT,
      MOUSE_WHEEL_UP,
      MOUSE_WHEEL_DOWN,
      WINDOW_RESIZE,
      WINDOW_CLOSE_BUTTON,
      # This event listens for all window-system generated events
      ICON,
      BUTTON_RELEASE,
      BUTTON_PRESS,
      BUTTON_HELD,
      SELECTION_CHANGED,
      CONTENT_CHANGED,
      CURSOR_MOVED,
      VALUE_CHANGED,
      ACTION,
      TREE_NODE_EXPANSION,
      SIZER_PRESS,
      SIZER_DRAG,
      SIZER_RELEASE,
      MOUSE_ENTER,
      MOUSE_EXIT,
      KEY_PRESS,
      KEY_RELEASE,
      TICK,
      GOT_FOCUS,
      LOST_FOCUS,
      DIALOG_CLOSED

   private static init()
      MOUSE_LEFT_PRESS := Mouse.LEFT_PRESS
      MOUSE_MIDDLE_PRESS := Mouse.MIDDLE_PRESS
      MOUSE_RIGHT_PRESS := Mouse.RIGHT_PRESS
      MOUSE_LEFT_RELEASE := Mouse.LEFT_RELEASE
      MOUSE_MIDDLE_RELEASE := Mouse.MIDDLE_RELEASE
      MOUSE_RIGHT_RELEASE := Mouse.RIGHT_RELEASE
      MOUSE_LEFT_DRAG := 11
      MOUSE_MIDDLE_DRAG := 12
      MOUSE_RIGHT_DRAG := 13
      MOUSE_MOVEMENT := Mouse.MOVEMENT
      MOUSE_WHEEL_UP := Mouse.WHEEL_UP
      MOUSE_WHEEL_DOWN := Mouse.WHEEL_DOWN
      WINDOW_RESIZE := Window.RESIZE
      WINDOW_CLOSE_BUTTON := Window.CLOSE_BUTTON
      ICON := 1
      BUTTON_RELEASE := 20
      BUTTON_PRESS := 21
      BUTTON_HELD := 22
      SELECTION_CHANGED := 40
      CONTENT_CHANGED := 50
      CURSOR_MOVED := 51
      VALUE_CHANGED := 55
      ACTION := 60
      TREE_NODE_EXPANSION := 70
      SIZER_PRESS := 80
      SIZER_DRAG := 81
      SIZER_RELEASE := 82
      MOUSE_ENTER := 94
      MOUSE_EXIT := 95
      KEY_PRESS := 100
      KEY_RELEASE := 101
      TICK := 300
      GOT_FOCUS := 400
      LOST_FOCUS := 401
      DIALOG_CLOSED := 500
   end
end

class Select()
   public static const 
      NONE,
      ONE,
      MANY

   private static init()
      NONE := "none"
      ONE := "one"
      MANY := "many"
   end
end

class Gui()
   public static 
      BORDER_WIDTH,
      TEXT_INSET,
      X_INSET,
      Y_INSET,
      REPEAT_DELAY,            
      REPEAT_RATE,
      CURSOR_BLINK,
      TAB_WIDTH,                 # Default tab char width
      style

   public static const 
      CONSTRAINT_SET,
      WATTRIB_SET,
      CONTEXT_WATTRIB_SET,      # attribs that affect the graphical drawing context
      EVENT_TABLE,
      PRINTABLE_1,              # Printable on a single line of text
      PRINTABLE_N               # Printable on multi lines of text

   private static init()
      BORDER_WIDTH := 2
      TEXT_INSET := 3
      X_INSET := 6
      Y_INSET := 3
      REPEAT_DELAY := 500
      REPEAT_RATE := 100
      CURSOR_BLINK := 400
      TAB_WIDTH := 8
      style := Style()
      PRINTABLE_1 := '\x20-\x7e\x80-\U10ffff'
      PRINTABLE_N := '\t\n\x20-\x7e\x80-\U10ffff'
      CONSTRAINT_SET := set("tab", "eol", "x", "y", "w", "h", "l_inset", "r_inset", "t_inset", "b_inset", 
                            "x_fill", "y_fill", "x_align", "y_align", "x_weight", "y_weight")
      WATTRIB_SET := set("label", "x", "pos", "y", "resize", "size", "height", 
                         "width", "w", "h", "image", "canvas", "pointer", 
                         "display", "depth", "fg", "bg", "draw_op",
                         "font", "line_width", "geometry", "transient_for",
                         "line_style", "fill_style", "pattern", "clip", "unclip",
                         "dx", "dy", "input_mask", "min_width", "min_height", "min_size", "max_width", 
                         "max_height", "max_size")
      CONTEXT_WATTRIB_SET := set("fg", "bg", "draw_op", "font", "line_width", "line_style", "fill_style", 
                                 "pattern")
      EVENT_TABLE := table(,
                         "mouse_left_press", Event.MOUSE_LEFT_PRESS,
                         "mouse_middle_press", Event.MOUSE_MIDDLE_PRESS,
                         "mouse_right_press", Event.MOUSE_RIGHT_PRESS,
                         "mouse_left_release", Event.MOUSE_LEFT_RELEASE,
                         "mouse_middle_release", Event.MOUSE_MIDDLE_RELEASE,
                         "mouse_right_release", Event.MOUSE_RIGHT_RELEASE,
                         "mouse_left_drag", Event.MOUSE_LEFT_DRAG,
                         "mouse_middle_drag", Event.MOUSE_MIDDLE_DRAG,
                         "mouse_right_drag", Event.MOUSE_RIGHT_DRAG,
                         "mouse_movement", Event.MOUSE_MOVEMENT,
                         "mouse_wheel_up", Event.MOUSE_WHEEL_UP,
                         "mouse_wheel_down", Event.MOUSE_WHEEL_DOWN,
                         "window_resize", Event.WINDOW_RESIZE,
                         "window_close_button", Event.WINDOW_CLOSE_BUTTON,
                         "icon", Event.ICON,
                         "button_release", Event.BUTTON_RELEASE,
                         "button_press", Event.BUTTON_PRESS,
                         "button_held", Event.BUTTON_HELD,
                         "selection_changed", Event.SELECTION_CHANGED,
                         "content_changed", Event.CONTENT_CHANGED,
                         "cursor_moved", Event.CURSOR_MOVED,
                         "value_changed", Event.VALUE_CHANGED,
                         "action", Event.ACTION,
                         "tree_node_expansion", Event.TREE_NODE_EXPANSION,
                         "sizer_press", Event.SIZER_PRESS,
                         "sizer_drag", Event.SIZER_DRAG,
                         "sizer_release", Event.SIZER_RELEASE,
                         "mouse_enter", Event.MOUSE_ENTER,
                         "mouse_exit", Event.MOUSE_EXIT,
                         "key_press", Event.KEY_PRESS,
                         "key_release", Event.KEY_RELEASE,
                         "tick", Event.TICK,
                         "got_focus", Event.GOT_FOCUS,
                         "lost_focus", Event.LOST_FOCUS,
                         "dialog_close", Event.DIALOG_CLOSED)
   end

   public static is_constraint(s)
      return member(CONSTRAINT_SET, s)
   end

   public static is_window_attrib(s)
      return member(WATTRIB_SET, s)
   end

   public static is_event(s)
      return member(EVENT_TABLE, s)
   end
end

procedure draw_image_ex(W, x, y, i)
   return W.draw_image(x, y, get_extended_image(W, i))
end

procedure palette_key_ex(W, palette, spec)
   local color
   color := case spec of {
      "hilite" : Gui.style.get_hilite_color(W)
      "shadow" : Gui.style.get_shadow_color(W)
      "fg" : W.get_fg()
      "bg" : W.get_bg()
      "trans" : return "\377"
      default : spec
   }
   return Window.palette_key(palette, color)
end

procedure get_extended_image(W, img)
   local s1, s2, head, spec, palette

   img ? {
      ="(" | return img
      spec := tab(upto(')')) | return error("Invalid extended image (no closing bracket)")
      =")"
      tab(many(' '))
      head := tab(upto(',')) || move(1) ||
         (palette := tab(upto(','))) || move(1) | 
            return error("Invalid extended image (no header)")

      s1 := s2 := ""
      spec ? repeat {
         tab(many('; '))
         if pos(0) then 
            break
         s1 ||:= move(1) | return error("Invalid extended image (bad palette spec)")
         ="=" | return error("Invalid extended image (expected '=' in spec)")
         spec := tab(upto(';') | 0)
         s2 ||:= palette_key_ex(W, palette, spec) | 
            return error("Invalid extended image (bad palette or color in spec)")
      }
      return head || map(tab(0), s1, s2)
   }
end

#
# Extended TextWidth function, handling tabs in s.  Returns the
# width of the string from positions i through j.
#
procedure text_width_ex(win, s, i, j, tw)
   if /i then {
      i := 1
      j := *s + 1
   } else {
      /j:= i + 1
      if j <= 0 then
         j +:= *s + 1
   }
   if not upto('\t', s) then
      return win.text_width(s[i:j])
   /tw := 8
   return win.text_width(detab(s[1:j], tw + 1)) - win.text_width(detab(s[1:i], tw + 1))
end

procedure draw_string_ex(win, x, y, s, k)
   local i, x1, y1
   y +:= win.get_font_ascent()
   win.draw_string(x, y, s)
   if i := upto(\k, map(s)) then {
      x1 := x + win.text_width(s[1:i])
      y1 := y + win.get_font_descent() - 1
      win.draw_line(x1, y1, x1 + win.text_width(s[i]), y1)
   }
end

procedure image_width(s)
   s ? {
      if ="(" then {
         tab(upto(')')) 
         move(1)
      }
      return integer(tab(upto(',')))
   }
end

procedure image_height(s)
   local w
   s ? {
      if ="(" then {
         tab(upto(')')) 
         move(1)
      }
      w := integer(tab(upto(',')))
      move(1)
      tab(upto(','))
      move(1)
      return *tab(0) / (0 ~= \w)
   }
end

#
# Convert a table to an attribute list in the form
#    ["key1=val1", "key2=val2", ...]
#
procedure wattribs_to_list(t)
   local l, e
   l := []
   every e := !sort(t) do
      put(l, e[1] || "=" || e[2])
   return l
end

#
# This utility takes a string or ucs and returns a string or ucs
# according to the target parameter.  Strings are assumed to be in
# iso-8859 format, rather than utf8 format.
#
procedure text_convert(s, target)
   local t, i

   s := text(s) | fail

   if type(s) == target then
      return s

   case target of {
      "ucs": {
         t := ""
         every t ||:= Text.utf8_seq(ord(s))
         return ucs(t)
      }
      "string": {
         t := ""
         every i := ord(s) do
            t ||:= char(256 > i | 63)
         return t
      }
      default: runerr("Bad target type", target)
   }
end

#
# Given a result from a selection request ({target_type} and {data}), produce
# a corresponding string or a ucs as appropriate.
#
procedure selection_convert(target_type, data)
   case target_type of {
      Selection.UTF8_STRING_TARGET : return ucs(data)
      Selection.STRING_TARGET : return string(data)
      default: fail
   }
end
