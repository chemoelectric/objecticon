############################################################################
#
#	File:     random.icn
#
#	Subject:  Procedures related to random numbers
#
#	Authors:  Ralph E. Griswold and Gregg M. Townsend
#
#	Date:     May 15, 2000
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#  This file contains procedures related to pseudo-random numbers.
#
############################################################################

package ipl.random

import
   lang(Limit),
   util(Time, need_integer, need_string, ce_param,
        HasClose, HasCloseUnderlying, Math, lclose,
        need_instance),
   ipl.factors(nxtprime),
   ipl.numbers(residue),
   ipl.pdco(Index),
   ipl.printf(stopf),
   ipl.sort(mergesort, field_cmp, rev_internal_cmp),
   io(need_Stream)

global random

# randomize() sets &random to a "random" value, based on the time
# of day and the date.
#
procedure randomize()			
   static ncalls

   initial ncalls := 0

   ncalls +:= 1

   &random := map("sSmMhH", "Hh:Mm:Ss", &clock) +
      map("YyXxMmDd", "YyXx/Mm/Dd", &date) + 
      Time.get_system_millis() % 1000 + &time + 1009 * ncalls

   return

end

# produces random number in the range min <= i <= max.
procedure randrange(min, max)		

   return min - 1 + ?(max - min + 1)

end

# generates the integers from i to j in random order.
procedure randrangeseq(i, j)		
   i := need_integer(i) - 1
   j := need_integer(j)

   suspend permutation(j - i)  + i
end

# suspend the elements of x in a random order; x should be something which
# can be indexed by integer (string, ucs, list, or cset).
#
procedure randelements(x)
   suspend x[permutation(*x)]
end

# Generate a random permutation of the integers 1..n.
#
procedure permutation(n)
   local x, m, a, c, p, r

   n := need_integer(n)
   if n <= 0 then fail
   if n = 1 then return 1

   # Create the parameters for a full-cycle LCG

   # Choose a modulus m >= n in the form of a perfect square of a
   # prime p >= 5.
   p := nxtprime(Math.sqrt(n))
   p <:= 5
   m := p^2
   # Choose c relatively prime to m, ie not divisible by p
   repeat {
      c := ?m
      if c % p > 0 then
         break
   }
   # Choose a such that a=1 (mod p), p being the sole prime factor of
   # m, and also so that a > 1 (mod m), since a = 1 gives a poor
   # random sequence.  We can choose from p*i + 1, for 1 <= i < p. (If
   # i = p then a = p^2 + 1 = 1 (mod m)).
   a := p * ?(p - 1) + 1

   # Create an LCG with a randomly chosen seed
   r := LCG(a, c, m, ?m)
   every 1 to n do {
      x := n > |r.get()       # discard out-of-range values
      suspend 1 + x
   }

end

# generates the values of &random, starting at seed,
# that occur as the result of using ?x.
#
procedure randseq(seed)			

   suspend &random := seed
   suspend |?1 & &random

end

#  The procedure shuffle(x) shuffles a string, list, or record.
#  In the case that x is a string, a corresponding string with the
#  characters randomly rearranged is produced. In the case that x is
#  list or records the elements are randomly rearranged.
#
procedure shuffle(x)			
   local i

   x := text(x)		# may fail
   every i := *x to 2 by -1 do
      x[?i] :=: x[i]
   return x
end

#  Note:  the following procedure is simpler, but does not produce
#  as good a shuffle:
#
#procedure shuffle(x)
#   x := string(x)
#   every !x :=: ?x
#   return x
#end

# Choose k numbers from the range 1..n in ascending order
procedure choose(k, n)
   local i
   k := need_integer(k, 0)
   n := need_integer(n, 0)
   every i := 1 to n do {
      if ?0 < real(k) / (n - i + 1) then {
         suspend i
         k -:= 1
      }
   }
end

#
# An abstract class for random number generators.
#
abstract class Random(HasClose)
   # Return a real number in the range [0, 1).
   #
   public abstract real()

   # Return an integer in the range [1, n).
   #
   public abstract range(n)

   # Select an element from structure or string type.
   #
   public choose(i)
      return case type(i) of {
         "list" | "record" | "string" | "ucs" | "cset": 
            i[range(0 < *i)]
         "table" | "set" :
            Index{ !i, range(0 < *i) }
         default:
            choose(need_string(i))
      }
   end
end

#
# A `Random` generator that just wraps the builtin random operator
# `?`.
#
class BuiltinRandom(Random)
   public override real()
      return ?0
   end

   public override range(n)
      return ?n
   end
end

# An abstract class for random generators which generate integers in
# the range of an arbitrary fixed modulus (usually a power of 2).
#
# The modulus `m` is supplied in the constructor, and a single method,
# `get()` is implemented which generates numbers in the range [0, m).
#
abstract class RandomWithModulus(Random)
   public const
      m                 # The modulus
   private readable
      rr, rf            # For calculating reals
   private
      n1, b1, p1, s1    # Some cached values
   public static const
      MAX_REAL_RANGE    # Max range for calculating a `real`

   private static init() 
      MAX_REAL_RANGE := 2 ^ 53
   end

   #
   # Return a random number in the range [0, m)
   #
   public abstract get()

   #
   # Set the range of values to use in calculating the result of
   # `real()`.  The default is `MAX_REAL_RANGE`, which gives the
   # maximum possible range of values, but may involve more calls to
   # `get()` for each real, if it is greater than the modulus.
   #
   public set_real_range(rr)
      self.rr := need_integer(rr, 2, MAX_REAL_RANGE)
      self.rf := 1.0 / self.rr
      link
   end

   public override real()
      local r
      repeat {
         r := (range(rr) - 1) * rf
         # This test should always succeed, but just in case.
         if r < 1.0 then
            return r
      }
   end

   # A convenient method to generate a sequence of results by
   # repeatedly calling `get()`.
   #
   public gen()
      suspend |get()
   end

   #
   # This method combines `p` random numbers from `get()` to give a
   # result in the range [0, m^p).  For example, if m=2^5, `get_n(2)`
   # would return a number in the range [0, m^2) = [0, 2^10).
   #
   public get_n(p)
      local r
      # Invariant: r is in [0, m^i), where i is is the loop iteration,
      #     since (m^i - 1) * m + (m - 1) = m^(i + 1) - 1
      r := 0
      every 1 to p do
         r := r * m + get()
      return r
   end

   public override range(n)
      local r, m1
      n := need_integer(n, 1)
      # See if we have to update the various cached fields.
      (n === n1) | {
         # Establish the smallest p1 for which m1 = m^p1 and m1 >= n.
         # m1 will thus be a modulus big enough to encompass n, and
         # formed from combining p1 results from `get()`.
         p1 := 1
         m1 := m
         while m1 < n do {
            m1 *:= m
            p1 +:= 1
         }
         b1 := m1 % n
         # Now since m1 >= n > 0 and 0 <= b1 < n,
         #      m1 = b1 + qn, for some q > 0
         # So (m1 - b1) is positive and divisible by n.
         s1 := (m1 - b1) / n
         n1 := n
      }
      repeat {
         # Get a random number r in the range [0, m^p1)
         r := get_n(p1)
         # Filter out any below the bias
         if r >= b1 then
            # We could return 1 + r % n here, but that would depend on
            # the lower order bits of r being a good random source
            # (which will not be the case for a power of 2 LCG).
            #
            # So instead split the possible range of r into n equal
            # sections and see which one it landed in.
            #
            # Since we have filtered r below b1, it is now in the
            # range [b1, m1).  so (r - b1) is in [0, m1 - b1).
            #
            # Now divide that range into n equal sections, each of
            # size (m1 - b1) / n, which is s1 (see above).
            # 
            return 1 + (r - b1) / s1
      }
   end

   # Returns `iand(n, 2^64 - 1)`
   #
   public static mod64(n)
      return iand(n, 16rFFFFFFFFFFFFFFFF)
   end

   # Returns `iand(n, 2^32 - 1)`
   #
   public static mod32(n)
      return iand(n, 16rFFFFFFFF)
   end

   # The constructor takes the modulus, an integer `m >= 2`.
   public new(m)
      self.m := need_integer(m, 2)
      set_real_range(MAX_REAL_RANGE)
      return
   end
end

# A random number generator which generates numbers based on random
# data from a `io.Stream`.
#
# For example to produce 64-bit integers from `/dev/urandom` :-
# ~
#   r := RandomFromStream(open("/dev/urandom"), 8)
# ~
#
class RandomFromStream(RandomWithModulus, HasCloseUnderlying)
   public const
      c, src

   public override get()
      local s, i, x
      s := src.reads(c) | stopf("Failed to read random source: %w")
      i := 0
      every x := ord(s) do
         i := 256 * i + x
      return i
   end

   # Close the underlying `io.Stream`.
   #
   public override close()
      if \close_underlying_flag then
         src.close() | fail
      link
   end

   # Create an instance using `io.Stream` `src` and reading `c`
   # (default 4) bytes at a time.  The modulus is thus `2 ^ (8*c)`.
   #
   public override new(src, c)
      self.src := need_Stream(src)
      self.c := need_integer(\c, 1) | 4
      RandomWithModulus.new(2 ^ (8 * self.c))
      self.close_underlying_flag := &yes
      return
   end
end

#
# A linear congruential random number generator.
#
class LCG(RandomWithModulus)
   public const
      a, c
   private readable
      x

   #
   # Set the current value of the generator sequence.
   #
   public set(x)
      self.x := need_integer(x, 0)
      link
   end

   public override get()
      x := (a * x + c) % m
      return .x
   end

   #
   # Create a generator with multiplier `a`, additive constant `c`,
   # modulus `m`, and initial value `x` (default 0).
   #
   public override new(a, c, m, x)
      RandomWithModulus.new(m)
      self.a := need_integer(a, 1)
      self.c := need_integer(c, 0)
      /x := 0
      set(x)
      return
   end
end

#
# A `RandomWithModulus` generator that uses the values from `&random`.
#
class BuiltinLCG(RandomWithModulus)
   public override get()
      return ?1 & &random
   end

   public override new()
      RandomWithModulus.new(Limit.MaxWord + 1)
      return
   end
end

# See https://www.pcg-random.org/
#
# Adapted from the C Implementation from
#    https://www.pcg-random.org/download.html
#
class PCG32(RandomWithModulus)
   public const
      a
   private readable
      x, i

   #
   # Set the current state of the generator sequence.
   #
   public set(x, i)
      x := need_integer(x)
      i := need_integer(i)
      self.x := 0
      self.i := mod64(ior(2 * i, 1))
      get()
      self.x := mod64(self.x + x)
      get()
      link
   end

   public override get()
      local o, s, r
      o := x
      self.x := mod64(o * a + i)
      s := mod32(ishift(ixor(ishift(o, -18), o), -27))
      r := ishift(o, -59)
      return mod32(ior(ishift(s, -r), ishift(s, iand(-r, 31))))
   end

   public override new(x, i, a)
      RandomWithModulus.new(16r100000000)
      self.a := need_integer(\a, 1) | 6364136223846793005
      /i := 1442695040888963407
      /x := 9600629759793949339
      set(x, i)
      return
   end
end

#
# 64-bit Mersenne Twister random generator.
#
# Adapted from :-
#    http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/VERSIONS/C-LANG/mt19937-64.c
#
class MersenneTwister64(RandomWithModulus)
   private
      mt,
      mti

   public static const
      N,
      M,
      MATRIX_A,
      UPPER_MASK,
      LOWER_MASK

   private static init() 
      N := 312
      M := 156
      MATRIX_A := 16rB5026F5AA96619E9
      UPPER_MASK := 16rFFFFFFFF80000000
      LOWER_MASK := 16r7FFFFFFF
   end

   public override get()
      local kk, y

      if mti >= N then {
         every kk := 1 to N - M do {
            y := ior(iand(mt[kk], UPPER_MASK), iand(mt[kk + 1], LOWER_MASK))
            mt[kk] := ixor(mt[kk + M], (y / 2), if y % 2 = 1 then MATRIX_A else 0)
         }
         every kk := N - M + 1 to N - 1 do {
            y := ior(iand(mt[kk], UPPER_MASK), iand(mt[kk + 1], LOWER_MASK))
            mt[kk] := ixor(mt[kk + (M - N)], (y / 2), if y % 2 = 1 then MATRIX_A else 0)
         }
         y := ior(iand(mt[N], UPPER_MASK), iand(mt[1], LOWER_MASK))
         mt[N] := ixor(mt[M], (y / 2), if y % 2 = 1 then MATRIX_A else 0)

         mti := 0
      }

      y := mt[mti +:= 1]
      y := ixor(y, iand(ishift(y, -29), 16r5555555555555555))
      y := ixor(y, iand(ishift(y, 17), 16r71D67FFFEDA60000))
      y := ixor(y, iand(ishift(y, 37), 16rFFF7EEE000000000))
      y := ixor(y, ishift(y, -43))
      
      return y
   end

   public init_list(l)
      local i, j
      init_genrand(19650218)
      i := 1; j := 0
      every 1 to max(N, *l) do {
         mt[i + 1] := mod64(ixor(mt[i + 1], ixor(mt[i], ishift(mt[i], -62)) * 3935559000370003845) + l[j + 1] + j)
         i +:= 1
         if i >= N then { mt[1] := mt[N]; i := 1 }
         j := (j + 1) % *l
      }
      every 1 to N - 1 do {
         mt[i + 1] := mod64(ixor(mt[i + 1], ixor(mt[i], ishift(mt[i], -62)) * 2862933555777941757) - i)
         i +:= 1
         if i >= N then { mt[1] := mt[N]; i := 1 }
      }
      mt[1] := 16r8000000000000000
   end

   private init_genrand(s)
      local i
      mt := [ mod64(s) ]
      every i := 2 to N do
         put(mt, mod64(6364136223846793005 * ixor(mt[-1], ishift(mt[-1], -62)) + (i - 1)))
      mti := N
   end

   public override new(l)
      RandomWithModulus.new(16r10000000000000000)
      /l := [16r12345, 16r23456, 16r34567, 16r45678]
      init_list(l)
      return
   end
end

#
# 32-bit Mersenne Twister random generator.
#
# Adapted from :-
#  http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/mt19937ar.c
#
class MersenneTwister32(RandomWithModulus)
   private
      mt,
      mti

   public static const
      N,
      M,
      MATRIX_A,
      UPPER_MASK,
      LOWER_MASK

   private static init() 
      N := 624
      M := 397
      MATRIX_A := 16r9908B0DF
      UPPER_MASK := 16r80000000
      LOWER_MASK := 16r7FFFFFFF
   end

   public override get()
      local kk, y

      if mti >= N then {
         every kk := 1 to N - M do {
            y := ior(iand(mt[kk], UPPER_MASK), iand(mt[kk + 1], LOWER_MASK))
            mt[kk] := ixor(mt[kk + M], (y / 2), if y % 2 = 1 then MATRIX_A else 0)
         }
         every kk := N - M + 1 to N - 1 do {
            y := ior(iand(mt[kk], UPPER_MASK), iand(mt[kk + 1], LOWER_MASK))
            mt[kk] := ixor(mt[kk + (M - N)], (y / 2), if y % 2 = 1 then MATRIX_A else 0)
         }
         y := ior(iand(mt[N], UPPER_MASK), iand(mt[1], LOWER_MASK))
         mt[N] := ixor(mt[M], (y / 2), if y % 2 = 1 then MATRIX_A else 0)

         mti := 0
      }

      y := mt[mti +:= 1]
      y := ixor(y, ishift(y, -11))
      y := ixor(y, iand(ishift(y, 7), 16r9D2C5680))
      y := ixor(y, iand(ishift(y, 15), 16rEFC60000))
      y := ixor(y, ishift(y, -18))
      
      return y
   end

   public init_list(l)
      local i, j
      init_genrand(19650218)
      i := 1; j := 0
      every 1 to max(N, *l) do {
         mt[i + 1] := mod32(ixor(mt[i + 1], ixor(mt[i], ishift(mt[i], -30)) * 1664525) + l[j + 1] + j)
         i +:= 1
         if i >= N then { mt[1] := mt[N]; i := 1 }
         j := (j + 1) % *l
      }
      every 1 to N - 1 do {
         mt[i + 1] := mod32(ixor(mt[i + 1], ixor(mt[i], ishift(mt[i], -30)) * 1566083941) - i)
         i +:= 1
         if i >= N then { mt[1] := mt[N]; i := 1 }
      }
      mt[1] := 16r80000000
   end

   private init_genrand(s)
      local i
      mt := [ mod32(s) ]
      every i := 2 to N do
         put(mt, mod32(1812433253 * ixor(mt[-1], ishift(mt[-1], -30)) + (i - 1)))
      mti := N
   end

   public override new(l)
      RandomWithModulus.new(16r100000000)
      /l := [16r123, 16r234, 16r345, 16r456]
      init_list(l)
      return
   end
end

# This class is a `RandomWithModulus` in which a co-expression
# provides the values returned by `get()`.  This enables results from
# other generators to be easily modified or combined.
#
# For convenience, the constructor optionally accepts PDCO-style
# parameters.
#
# For example :-
# ~
#    import ipl.pdco
#    ...
#    # A generator which uses every third result from a PCG32 source.
#    r1 := PCG32()
#    r := RandomFromGenerator{ r1.m, Index{ r1.gen(), seq(3, 3) } }
#
#    # A generator which XORs two LCGs' results.
#    r1 := LCG(53, 1, 2^16) ; r2 := LCG(525, 11, 2^16)
#    r := RandomFromGenerator{ r1.m, ixor!Parallel{ r1.gen(), r2.gen() } }
# ~
#
class RandomFromGenerator(RandomWithModulus)
   private const
      coex

   public override get()
      return @coex
   end

   # The constructor takes the modulus, and the co-expression, the
   # results from which must be integers in the range [0, m).
   #
   public override new(m, coex)
      m := ce_param(m) | fail
      RandomWithModulus.new(m)
      self.coex := coex
      return
   end
end

#
# A `Random` which implements `range()` in terms of `real()`.
#
abstract class RandomFromReal(Random)
   public override range(n)
      return 1 + integer(need_integer(n, 1) * real())
   end
end

#
# This class is a `RandomFromReal` in which a co-expression provides
# the values of `real()`.  This enables results from other generators
# to be easily modified or combined.
#
class RandomFromRealGenerator(RandomFromReal)
   private const
      coex

   public override real()
      return @coex
   end

   # The constructor takes a co-expression, the results from which
   # must be reals in the range [0, 1).
   #
   public new(coex)
      self.coex := coex
      return
   end
end

#
# Combine several `RandomWithModulus` instances, using the scheme
# described in
#    <https://en.wikipedia.org/wiki/Combined_linear_congruential_generator>
#
class CombinedRandom(RandomWithModulus, HasCloseUnderlying)
   private const
      r

   public override get()
      local i, o, e
      o := 1
      i := 0
      every e := !r do {
         i +:= o * e.get()
         o := -o
      }
      i := residue(i, m - 1)
      return if i = 0 then m - 1 else i
   end

   public override close()
      if \close_underlying_flag then
         lclose(r) | fail
      link
   end

   #
   # The constructor accepts several `RandomWithModulus` instances.
   #
   public override new(r[])
      every need_instance(!r, RandomWithModulus)
      r := mergesort(r, field_cmp("m", rev_internal_cmp))
      RandomWithModulus.new(r[1].m)
      self.r := r
      return
   end
end
