package lang

import util(error)

#
# This class allows information about procedures, functions, etc, to
# be obtained.  The parameters named `p` to the methods may be any
# function or procedure or method pointer.
#
# Additionally, `p` may be a two-element list.  The first element
# should be a class or object, the second a field name or number
# referencing a method.  This enables information about instance,
# special or private methods to be obtained.  In order to ensure
# consistency in information about native methods, passing a class in
# this way will cause it to be initialized if it isn't already.
#
# Note that methods which are resolved to stub functions may not
# behave as expected.  These stub functions are used as placeholders
# for optional, abstract and (unresolved) native methods.  They are
# also used to replace methods which `oit` deems unreferenced
# ("removed methods").
#
# Since these stub functions are shared by many methods, they do not
# link back to a particular class and field.  Thus, the `get_name`
# method, for example, will return the stub function's name rather
# than the name which one might otherwise expect.
#
final abstract class Proc()
   public static const
      Procedure,      # Value from `get_kind` indicating an icon procedure
      Function,       # Value from `get_kind` indicating a native function or method
      Keyword,        # Value from `get_kind` indicating a keyword function
      Operator,       # Value from `get_kind` indicating an operator
      Internal,       # Value from `get_kind` indicating an internal block of VM instructions
      Argument,       # Value from `get_local_kind` indicating an argument
      Dynamic,        # Value from `get_local_kind` indicating a dynamic variable
      Static          # Value from `get_local_kind` indicating a static variable

   private static init()
      # Kinds of procedure
      Procedure := 0
      Function :=  1
      Keyword :=   2
      Operator :=  3
      Internal :=  4
      # Types of local variable
      Argument := 0
      Dynamic := 1
      Static := 2
   end
      
   # Return the name of the proc.  For a method, the name is
   # return in the form `class.method`.
   #
   # For example :-
   # ~
   #    get_name(FileStream.pipe)` -> "io.FileStream.pipe"
   # ~
   #
   # Stub methods always return their stub name (since they
   # aren't recognised as fields) :-
   # ~
   #    # Optional method
   #    get_name([Stream, "in"]) -> "optional_method_stub"
   # ~
   #
   public static get_name(p)
      return get_name_impl(arg(p))
   end

   # Return the program this proc resides in, or fail if it is not in
   # a program.  The program's &main co-expression is returned.  For a
   # method (including resolved native methods), the declaring class's
   # program is returned.
   #
   # For example :-
   # ~
   #    get_program(DescStream.poll)` -> co-expression#123
   # ~
   #
   # Note that stub methods will always fail :-
   # ~
   #    # Optional method
   #    get_program([Stream, "in"])` -> fails
   # ~
   #
   public static get_program(p)
      return get_program_impl(arg(p))
   end

   # Return the name of the package in which this proc resides; fails
   # if the proc is not in a package.  For a method, the package of
   # the declaring class is returned.
   #
   # For example :-
   # ~
   #    get_package(FileStream.pipe)` -> "io"
   # ~
   #
   # Note that stub methods will always fail :-
   # ~
   #    # Optional method
   #    get_package([Stream, "in"])` -> fails
   # ~
   #
   public static get_package(p)
      local cl
      p := arg(p)
      if cl := get_defining_class_impl(p) then
         return Class.get_package(cl)
      if get_kind_impl(p) = Procedure then
         return extract_package(get_name_impl(p))
   end

   # Return the source location of the proc.  For a method, the
   # location of the method declaration is returned.
   #
   # For example :-
   # ~
   #    # Native method
   #    get_location(DescStream.poll)` -> Location#1(...)
   # ~
   #
   # Note that stub methods will always fail :-
   # ~
   #    # Optional method
   #    get_location([Stream, "in"])` -> fails
   # ~
   #
   # :Returns :
   # :  a `Location` instance
   #
   public static get_location(p)
      local cl, i, prog
      p := arg(p)
      return if cl := get_defining_class_impl(p) &
         i := get_field_index_impl(p) then
         Class.get_field_location(cl, i)
      else if prog := get_program_impl(p) then
         Prog.get_global_location(get_name_impl(p), prog)
      else
         # Set &why for consistency, since it is set by
         # Class.get_field_location & Prog.get_global_location
         error("Proc not a procedure, has no location")
   end

   # Return the class in which this method is defined; fails if this
   # is not a method.
   #
   public static get_defining_class(p)
      return get_defining_class_impl(arg(p))
   end

   # Return the field name of the method; fails if this is not a
   # method.
   #
   public static get_field_name(p)
      return get_field_name_impl(arg(p))
   end

   # Return the field index of the method; fails if this is not a
   # method.
   #
   public static get_field_index(p)
      return get_field_index_impl(arg(p))
   end

   #
   # Return the kind of this procedure, which is one of the constants :-
   # * `Procedure` for a procedure or method defined in an icon source file
   # * `Function` a builtin function like `upto`, or a native method
   # * `Keyword` a keyword function, obtained via `Prog.get_keyword()`
   # * `Operator` an operator function, obtained via `Prog.get_operator()`
   # * `Internal` an internally used block of VM instructions.
   #
   public static get_kind(p)
      return get_kind_impl(arg(p))
   end

   # Return the number of locals (arguments, dynamic locals and
   # statics) of the proc; fails if this is not an procedure.
   #
   public static get_n_locals(p)
      p := arg(p)
      return get_n_arguments_impl(p) + get_n_dynamics_impl(p) + get_n_statics_impl(p)
   end

   # Return the number of arguments of the proc; fails if this is not
   # an procedure.
   #
   public static get_n_arguments(p)
      return get_n_arguments_impl(arg(p))
   end

   # Succeeds if this is a procedure with variable args.
   #
   public static has_varargs(p)
      return has_varargs_impl(arg(p))
   end

   # Return the number of dynamic locals of the proc; fails if this is
   # not an procedure.
   #
   public static get_n_dynamics(p)
      return get_n_dynamics_impl(arg(p))
   end

   # Return the number of static variables in the proc; fails if this
   # is not an procedure.
   #
   public static get_n_statics(p)
      return get_n_statics_impl(arg(p))
   end

   # Return the local name with the given id (name or index number).
   #
   public static get_local_index(p, id)
      return get_local_index_impl(arg(p), id)
   end

   # Generate the local names of the procedure.
   #
   public static get_local_names(p)
      p := arg(p)
      suspend get_local_name_impl(p, 1 to get_n_locals(p))
   end

   # Return the location of the local variable with the given id (name
   # or index number).
   #
   public static get_local_location(p, id)
      return Location!get_local_location_impl(arg(p), id)
   end

   # Return the name of the local variable with the given id (name or
   # index number).
   #
   public static get_local_name(p, id)
      return get_local_name_impl(arg(p), id)
   end

   #
   # Return the type of the given local, which is one of the constants
   # * `Argument`,
   # * `Dynamic` (ie, a variable declared "local") or
   # * `Static`.
   #
   public static get_local_kind(p, id)
      return get_local_kind_impl(arg(p), id)
   end

   private static arg(p)
      if type(p) == "list" then {
         *p = 2 | runerr("Two-element list expected", p)
         if type(p[1]) == "class" then
            Class.ensure_initialized(p[1])
         p := get_proc_field!p | runerr(&why, p[2])
      }
      return p
   end

   private static native get_name_impl(p)
   private static native get_program_impl(p)
   private static native get_defining_class_impl(p)
   private static native get_field_name_impl(p)
   private static native get_field_index_impl(p)
   private static native get_kind_impl(p)
   private static native get_n_arguments_impl(p)
   private static native has_varargs_impl(p)
   private static native get_n_dynamics_impl(p)
   private static native get_n_statics_impl(p)
   private static native get_local_index_impl(p, id)
   private static native get_local_location_impl(p, id)
   private static native get_local_name_impl(p, id)
   private static native get_local_kind_impl(p, id)
   private static native get_proc_field(c, field)

   # load C function dynamically.
   public static native load(filename, funcname)

   # Lookup a procedure (or function) by name.  First the globals are
   # searched for a matching procedure or function.  Failing that, the
   # builtin function, operator and keyword tables are searched.
   # 
   # :Parameters :
   # :  `s` - a name to search for
   # :  `n` - the arity of an operator
   # :  `ce` - a coexpression, representing a loaded program, defaults
   #   to the main program
   # :Returns :
   # :  a procedure
   # :Fails :
   # :  if the name is unknown as a proc
   #
   public static for_name(s, n, ce)
      return proc(s, n, ce)
   end
end
