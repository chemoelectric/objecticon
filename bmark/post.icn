#################################################################
#
#  Support procedures for Icon benchmarking.
#
#################################################################
#
#     The code to be times is bracketed by calls to Init__(name)
#  and Term__(), where name is used for tagging the results.
#  The typical usage is:
#
#	procedure main()
#	   [declarations]
#	   Init__(name)
#		.
#		.
#		.
#	   Term__()
#	end
#
#     If the environment variable BM_OUTPUT is set, program output is
#  not suppressed.
#
#################################################################

$if _OBJECT_ICON
import lang, io, posix
$endif

global Name__, Write__, Writes__

procedure Getenv__(s)
$if _OBJECT_ICON
   return "" ~== System.getenv(s)
$else
   return "" ~== getenv(s)
$endif
end

# List information before running.
#
procedure Init__(prog)
   Name__ := prog			# program name
   if Getenv__("BM_VERBOSE") then {
      Signature__()			# initial information
      Regions__()
   }
   Time__()
   if Getenv__("BM_OUTPUT") then {	# if BM_OUTPUT is set, allow output
      write("*** Benchmarking with output ***")
      Write__ := write
      Writes__ := writes
   } else
      Write__ := Writes__ := 1

   return
end

# List information at termination.

procedure Term__()
   local v
   v := (&version ? (tab(find("Version ")) || move(8) || tab(upto(' '))))
   if any('.,', v[-1]) then v[-1] := ""

   # final information
   write(left(v, 32),": ",right(Time__(),8))
   if Getenv__("BM_VERBOSE") then {
      Regions__()
      Storage__()
      Collections__()
   }
   return
end

$if _OBJECT_ICON
# List garbage collections performed.
#
procedure Collections__()
   local collections
   collections := Prog.get_collection_info()
   write("collections")
   write("total ", right(collections.get_total(), 12))
   write("user  ", right(collections.user_requests, 12))
   write("stack ", right(collections.stack_requests, 12))
   write("string", right(collections.string_requests, 12))
   write("block ", right(collections.block_requests, 12))
   return
end

# List region sizes.
#
procedure Regions__()
   local regions
   regions := Prog.get_region_info()
   write("regions")
   write("string", right(regions.get_string_total().size,12))
   write("block ", right(regions.get_block_total().size,12))
   return
end

# List storage used.
#
procedure Storage__()
   local storage
   storage := Prog.get_region_info()
   write("storage")
   write("string", right(storage.get_string_total().used,12))
   write("block ", right(storage.get_block_total().used,12))
   return
end

$else
# List garbage collections performed.
#
procedure Collections__()
   static labels
   local collections
   
   initial labels := ["total","static","string","block"]

   collections := []
   every put(collections,&collections)
   write("collections")
   every i := 1 to *labels do
      write(labels[i],right(collections[i],12))
   return
end

# List region sizes.
#
procedure Regions__()
   static labels
   local regions
   
   initial labels := ["static","string","block"]

   regions := []
   every put(regions,&regions)
   write("regions")
   every i := 1 to *labels do
      write(labels[i],right(regions[i],12))
   return
end

# List storage used.
#
procedure Storage__()
   static labels
   local storage
   
   initial labels := ["static","string","block"]

   storage := []
   every put(storage,&storage)
   write("storage")
   every i := 1 to *labels do
      write(labels[i],right(storage[i],12))
   return
end


$endif

# List relveant implementation information
#
procedure Signature__()
   write(&version)
   write(&host)
   every write(&features)
   return
end


# List elapsed time.
#
procedure Time__()
   static lasttime

   initial lasttime := &time
   return &time - lasttime
end

record file(data, line)

procedure Load__(s)
   local f, l
   l := []
   f := open(s, "r") | stop("Couldn't open:",s)
   while put(l, read(f))
   close(f)
   return file(l,0)
end

procedure Read__(f)
   f.line +:= 1
   return .f.data[f.line]
end

procedure Tell__(f)
   return .f.line
end

procedure Seek__(f, n)
   f.line := n
   return n
end

procedure Close__(f)
   f.data := f.line := &null
   return
end

procedure options(arg,optstring)
   local x,i,c,otab,flist,o,p
   /optstring := string(&letters)
   otab := table()
   flist := []
   while x := get(arg) do
      x ? {
         if ="-" & not pos(0) then {
            if ="-" & pos(0) then break
            while c := move(1) do
               if i := find(c,optstring) + 1 then
                  otab[c] :=
                     if any(':+.',o := optstring[i]) then {
                        p := "" ~== tab(0) | get(arg) |
                              stop("No parameter following -",c)
                        case o of {
                           ":": p
                           "+": integer(p) |
                                 stop("-",c," needs numeric parameter")
                           ".": real(p) |
                                 stop("-",c," needs numeric parameter")
                           }
                        }
                     else 1
               else stop("Unrecognized option: -",c)
         }
         else put(flist,x)
      }
   while push(arg,pull(flist))
   return otab
end
