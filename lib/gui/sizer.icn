#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import util

#
# This class provides a component which can be dragged across the
# window, allowing panes within the window to be resized.  A Event.SIZER_RELEASE is
# generated when the `Sizer` has been dragged and released.  The new position
# may then be obtained and the dialog adjusted accordingly.
#
class Sizer(Component, HasOrientation)
   public 
      show_inter_flag,
      temp_win,  
      temp_orig,
      lo,
      hi,
      gp,
      drag_offset,
      curr_pos,
      start_pos

   public static const DEFAULT_SIZE

   private static init()
      DEFAULT_SIZE := env_scale_odd("OI_SIZER_DEFAULT_SIZE") | scale_odd(7)
   end

   #
   # Set the minimum and maximum values for the `Sizer`.  Whether
   # these are x or y values depends on the orientation of the
   # `Sizer`.  The range is always reset on each mouse press, so this
   # must be set on each `SIZER_PRESS` event.
   #
   public set_range(lo, hi)
      self.lo := lo
      self.hi := hi
      return self
   end

   #
   # Return the current position of the `Sizer`.  This may be invoked to determine
   # where the `Sizer` has been dragged to after it has generated an event.
   #
   public get_curr_pos()
      return curr_pos
   end

   #
   # Get the size of the move during the current move of the `Sizer`.
   #
   public get_delta()
      return curr_pos - start_pos
   end

   #
   # Set whether to show the intermediate position of the sizer,
   # ie whilst it is being dragged.
   #
   public set_show_inter(s)
      self.show_inter_flag := need_flag(s)
      return self
   end

   public display()
      local x1, y1
      x1 := self.x + (self.w - gp.w) / 2
      y1 := self.y + (self.h - gp.h) / 2
      gp.draw(self.cbwin, x1, y1)
   end

   private set_curr_pos(e)
      if \self.is_horizontal_flag then
         curr_pos := e.y - drag_offset - parent.y
      else
         curr_pos := e.x - drag_offset - parent.x

      curr_pos <:= \lo
      curr_pos >:= \hi
      return curr_pos
   end

   public initially()
      if \self.is_horizontal_flag then {
         set_pointer("sb v double arrow")
         gp.set_cache("gui.HORIZ_GRID")
      } else {
         set_pointer("sb h double arrow")
         gp.set_cache("gui.VERT_GRID")
      }
      Component.initially()
      gp.initially(self)
   end

   public finally()
      Component.finally()
      gp.finally()
   end

   public get_default_width()
      if /self.is_horizontal_flag then
         return DEFAULT_SIZE
   end

   public get_default_height()
      if \self.is_horizontal_flag then
         return DEFAULT_SIZE
   end

   public handle_lpress(e)
      drag_offset := if \self.is_horizontal_flag then
         e.y - self.y
      else
         e.x - self.x
      # We reset the range since it may no longer be valid (see notes).
      set_range()
      start_pos := set_curr_pos(e)
      if \self.show_inter_flag then {
         self.temp_win := SliderDragComponent().
            set_pos(self.x + parent_dialog.win.get_dx(), 
                    self.y + parent_dialog.win.get_dy()).
            set_z(self.parent_dialog.get_top_z()).
            set_size(self.w, self.h)
         if \self.is_horizontal_flag then {
            temp_orig := self.y + parent_dialog.win.get_dy()
            self.temp_win.set_pointer("sb v double arrow")
         } else {
            temp_orig := self.x + parent_dialog.win.get_dx()
            self.temp_win.set_pointer("sb h double arrow")
         }
         self.parent_dialog.add(self.temp_win)
         self.temp_win.resize().invalidate()
      }
      fire(Event.SIZER_PRESS, e)
   end

   public handle_ldrag(e)
      set_curr_pos(e)
      if \self.show_inter_flag then {
         if \is_horizontal_flag then {
            self.temp_win.y_spec := temp_orig + get_delta()
         } else {
            self.temp_win.x_spec := temp_orig + get_delta()
         }
         self.temp_win.invalidate().resize().invalidate()
      }
      fire(Event.SIZER_DRAG, e)
   end

   public handle_lrelease(e)
      set_curr_pos(e)
      if \self.show_inter_flag then {
         self.temp_win.invalidate()
         self.parent_dialog.remove(self.temp_win)
         self.temp_win := &null
      }
      fire(Event.SIZER_RELEASE, e)
   end

   public new()
      Component.new()
      connect(self.handle_lpress, Event.MOUSE_LEFT_PRESS)
      connect(self.handle_ldrag, Event.MOUSE_LEFT_DRAG)
      connect(self.handle_lrelease, Event.MOUSE_LEFT_RELEASE)
      gp := ImagePaint()
      return
   end
end


class SliderDragComponent(Component)
   public display()
      local cw
      use {
         cw := cbwin.clone(),
         cw.set_masked_pattern("gray").fill_rectangle(self.x, self.y, self.w, self.h)
      }
   end
end
