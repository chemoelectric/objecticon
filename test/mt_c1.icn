invocable all

import any.pack

global what, c

procedure main(a)
   local p
   what := 100
   c := load("mt_c2") | stop("Couldn't load mt_c2")
   @c
   p := glob("subchild0",c) | stop("no subchild0 found")
   p()
end

procedure child1(n)
   suspend what + (1 to n)
end

procedure child2(n)
   return n
end

procedure child3()
   fail
end

procedure child4(cb)
   pr_seq{"child4", "cb:" || cb(5)}
end

procedure gen5()
   suspend what + (1 to 5)
end

procedure child5()
   return create gen5()
end

procedure child6(e)
   local x
   while x := @e do {
      suspend what + x
   }
end

procedure child7()
   suspend what + (1 to 5)
end

procedure child8(l, p)
   every put(l,1 to 5)
   p(l)
end

procedure child9(r)
   r.a := 1
   r.b := 2
   r.c := 3
end

procedure child10(rc)
   local x
   x := rc(1,2,3)
   return x
end

procedure child11(l,f)
   every f(l, 100 to 105)
end

record rec12(p,q,r)

procedure child12(x)
   x.p := 7
   x.q := 8
   x.r := 9
end

procedure child13()
   suspend 2|4
end

procedure child14a()
   fail
end

procedure child14b()
   return 3
end

procedure child14c()
   suspend 2 to 4
end

procedure child15()
   #"hello"+1
end

procedure gen16()
   suspend 1 to 5
end

procedure child16()
   return create gen16()
end

procedure child17()
   local p,q,r
   p := glob("subchild17a",c) | stop("no subchild17a found")
   q := glob("subchild17b",c) | stop("no subchild17b found")
   r := glob("subchild17c",c) | stop("no subchild17c found")
   suspend what
   suspend p() | q() | r()
   suspend p()=q()
   suspend p()=r()
   suspend q()=p()
   suspend q()=r()
   suspend what
end

procedure child18()
   local e,p
   p := glob("subchild18",c) | stop("no subchild18 found")
   e := create p()
   @e
   return
end

procedure child19()
   local p
   p := glob("subchild19",c) | stop("no subchild18 found")
   return create p()
end

class Child20()
   public callme(z)
      write("callme z=",z)
   end
end

procedure child20(i,con)
   local j,k,l
   write("child20")
   i.meth1()
   j := con(1,2)
   j.meth1()
   k := j.meth2()
   k.meth1()
   l := Child20()
   i.meth3(l)
   j.meth3(l)
   k.meth3(l)
end

record dummy(v1,meth3)

procedure child21(obj, pc)
   write("in child21")
   write(obj.v1)
   cast(obj,pc).meth1()
   obj.meth3()
end

procedure child22(m, c)
   if m === &main then
      write("surprise - &main is the same")
   if c ~=== &current then
      write("suprise - &current is different")
end

procedure child23(t,r)
   local res
   pr_seq{"child23.r", !r}
   res := t(7,8,9)
   return res
end

procedure child24()
   return constructor("othertype","a","b","c")
end

procedure child25(self,x,y)
   write("child25:", image(self), ",", image(x), ",", image(y))
   write(self.g())
   return 100
end
