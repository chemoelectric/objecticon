#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import graphics

#
# This class is just a superclass of {List} and {EditList}.
#
class DropDown(SelectionList,Component)
   public 
      b,                           
      view,
      tl,
      old_selection,
      direction,
      max_height,
      max_width

   #
   # Set the direction to pop-up in.  Options are {Direction.UP}, {Direction.DOWN} or
   # {Direction.BEST} (the default).
   #
   public set_direction(s)
      self.direction := s
      return self
   end

   public on_button_press(ev)
      if \tl then
         #
         # Button pressed whilst list open; just close
         #
         self.close_textlist()
      else
         #
         # Button pressed whilst no list; open list
         #
         self.open_textlist(ev)
   end

   public on_textlist_selection(ev)
      local tmp
      #
      # Selection in list - close textlist, amend label.
      #
      tmp := tl.get_selections()[1]
      self.close_textlist()
      go_to(\tmp, ev)
   end

   public start_change(e)
      self.old_selection := self.selection
   end

   public end_change(e)
      if self.old_selection ~=== self.selection then
         fire(Event.SELECTION_CHANGED, e)
   end

   #
   # Create the view component
   #
   public defer create_view()

   public create_popup()
      return TextList()
   end

   #
   # Set the maximum height of the dropdown list; by default it is as large as is necessary
   # and can be accommodated on the screen.
   #
   public set_max_height(n)
      self.max_height := n
      return self
   end

   #
   # Set the maximum width of the dropdown list; by default it is as wide as is necessary
   # and can be accommodated on the screen.
   #
   public set_max_width(n)
      self.max_width := n
      return self
   end

   public go_up(e)
      if *selection_list = 0 then
         fail
      start_change(e)
      if /self.selection | (self.selection = 1) then
         set_selection(*self.selection_list, e)
      else
         set_selection(self.selection - 1, e)
      end_change(e)
   end

   public go_down(e)
      if *selection_list = 0 then
         fail
      start_change(e)
      if /self.selection then
         set_selection(1, e)
      else
         set_selection(1 + self.selection % *self.selection_list, e)
      end_change(e)
   end

   public go_to(x, e)
      start_change(e)
      set_selection(x, e)
      end_change(e)
   end

   public open_textlist(ev)
      local max_h, max_w, spc_below, spc_above, spc_right, d, dim, win, win_spc_above, 
         win_spc_below, win_spc_right, use_popup_win, use_direction, rs, r

      win := parent_dialog.win
      dim := win.get_display_size()
      # Screen rectangle, in adjusted co-ordinates
      rs := Rect(-win.get_x() - win.get_dx(), -win.get_y() - win.get_dy(), dim[1], dim[2])
      r := parent_dialog.intersect(rs)

      win_spc_above := self.y - r.y
      win_spc_below := r.y + r.h - self.y - self.h
      win_spc_right := r.x + r.w - self.x

      if Gui.style.allow_popup(self) then {
         # Space available for popup limited by screen size
         spc_above := self.y - rs.y
         spc_below := rs.y + rs.h - self.y - self.h
         spc_right := rs.x + rs.w - self.x
      } else {
         # Space available limited by window size (and screen size, if window is off screen)
         spc_above := win_spc_above
         spc_below := win_spc_below
         spc_right := win_spc_right
      }

      max_h := case self.direction of {
         Direction.UP: spc_above
         Direction.DOWN: spc_below
         Direction.BEST: max(spc_above, spc_below)
         default: runerr("Unknown direction", self.direction)
      }
      max_w := spc_right
      max_w >:= \self.max_width
      max_h >:= \self.max_height

      self.tl := create_popup().
         set_all_wattribs(self.get_effective_wattribs()).
         connect(self.on_textlist_selection, Event.SELECTION_CHANGED).
         set_contents(self.selection_list).
         set_draggable_cursor(&yes).
         set_motion_cursor(&yes).
         set_select_mode(Select.ONE).
         set_selection_on_key_moves(&no).
         set_z(self.parent_dialog.get_top_z())
      self.parent_dialog.add(tl)
      self.tl.initially()
      self.tl.set_ideal_size(self.w, 
                             max_w,
                             0, max_h)

      if tl.w_spec > win_spc_right then
         use_popup_win := 1
      case self.direction of {
         Direction.UP: {
            if tl.h_spec > win_spc_above then
               use_popup_win := 1
            use_direction := Direction.UP
         }
         Direction.DOWN: {
            if tl.h_spec > win_spc_below then
               use_popup_win := 1
            use_direction := Direction.DOWN
         }
         Direction.BEST: {
            if tl.h_spec > win_spc_below then
               if tl.h_spec <= spc_below then {
                  use_popup_win := 1
                  use_direction := Direction.DOWN
               } else if tl.h_spec > win_spc_above then {
                  use_popup_win := 1
                  use_direction := Direction.UP
               } else
                  use_direction := Direction.UP
            else
               use_direction := Direction.DOWN
         }
      }

      self.parent_dialog.enter_menu_mode(self)

      if Gui.style.allow_popup(self) & \use_popup_win then {
         # Remove tl from dialog and use add to popup window.
         self.tl.finally()
         self.parent_dialog.remove(tl)

         d := if use_direction == Direction.DOWN then 
            PureDialog().
               set_canvas("popup").
               set_width( tl.w_spec).
               set_height(tl.h_spec).
               set_dx(-self.x).
               set_dy(-(self.y + self.h)).
               set_x(win.get_x() + win.get_dx() + self.x).
               set_y(win.get_y() + win.get_dy() + self.y + self.h)
         else
            PureDialog().
               set_canvas("popup").
               set_width( tl.w_spec).
               set_height(tl.h_spec).
               set_dx(-self.x).
               set_dy(-(self.y - tl.h_spec)).
               set_x(win.get_x() + win.get_dx() + self.x).
               set_y(win.get_y() + win.get_dy() + self.y - tl.h_spec)

         d.add(tl)
         self.tl.set_pos(0, 0)
         self.parent_dialog.set_focus()
         self.parent_dialog.add_popup(d)
         d.show()
         d.set_focus(tl)
         d.held[ev.code] := [tl.view, tl, d]
      } else {
         if use_direction == Direction.DOWN then 
            self.tl.set_pos(self.x + win.get_dx(), self.y + self.h + win.get_dy())
         else
            self.tl.set_pos(self.x + win.get_dx(), self.y - self.tl.h_spec + win.get_dy())

         self.tl.resize()
         self.tl.invalidate()
         self.parent_dialog.hold(tl.view, ev.code)
         self.parent_dialog.set_focus(tl)
      } 

      self.parent_dialog.connect(self.dialog_event, Event.ICON)
      if \self.selection then {
         self.tl.set_cursor(self.selection)
         self.tl.center_line(self.selection)
      }
   end

   private forward_key(ev, src, type)
      # In menu mode key events are forwarded to this component,
      # rather than the text list, regardless of the focus.  So we
      # must forward them ourselves.
      (\tl).fire(type, ev)
   end

   public close_textlist()
      if /tl.parent_dialog.popup_manager then {
         if self.parent_dialog.focus === tl then
            self.parent_dialog.set_focus(view)
         self.tl.invalidate()
         self.tl.finally()
         self.parent_dialog.remove(tl)
      } else {
         if /self.parent_dialog.focus then
            self.parent_dialog.set_focus(view)
         self.parent_dialog.remove_popup(self.tl.parent_dialog)
         self.tl.parent_dialog.dispose()
      }
      self.tl := &null
      self.parent_dialog.exit_menu_mode()
      self.parent_dialog.disconnect_object(self)
   end

   public close_all()
      close_textlist()
   end

   public dialog_event(e)
      if (/e.release & (e.code === "\e")) | 
          (member(Mouse.PRESS, e.code) & 
                not(tl.in_region(e)) & not(b.in_region(e))) then 
      {
         #
         # Mouse click outside textlist.  Close.
         # 
         self.close_textlist()
      }
   end

   public initially()
      \self.selection_list | runerr("no selection list specified")
      cast(self,Component).initially()
   end

   public finally()
      #
      # Disposed with text list showing, just get rid of it
      #
      if \self.tl then 
         self.close_textlist()
      cast(self,Component).finally()
   end

   public get_default_height(dw)
      dw -:= border.get_total_width() + b.get_preferred_width()
      return border.get_total_height() + view.get_preferred_height(dw)
   end

   public display()
      border.draw_rect(self.cbwin, self)
      display_children()
   end

   public layout()
      local bw

      bw := b.get_preferred_width()
      #
      # Set button position and size
      #
      b.x := self.x + self.w - bw - border.get_r_inset()
      b.y := self.y + border.get_t_inset()
      b.w := bw
      view.x := self.x + border.get_l_inset()
      view.y := self.y + border.get_t_inset()
      view.w := self.w - border.get_total_width() - bw
      b.h := view.h := self.h - border.get_total_height()
      b.layout()
      view.layout()
   end

   public new()
      cast(self,Component).new()
      self.set_border(SunkenBorder())
      # Make the same width as the button in the scrollbar of the dropdown.
      self.b := IconButton().
         set_width(ScrollArea.predict_scrollbar_size()).
         set_parent(self).
         connect(self.on_button_press, Event.BUTTON_PRESS).
         set_paint(ImagePaint().set_cache("gui.ARROW_DOWN")).
         set_accepts_focus(&no)
      self.direction := Direction.BEST
      self.add(b)
      self.preferred_focus := self.view := create_view()
      self.add(view)
      self.set_constraint("x_fill", &yes)
      self.set_constraint("x_align", Align.L)
      self.set_constraint("x_weight", 1.0)
      connect(self.go_up, Event.MOUSE_WHEEL_UP)
      connect(self.go_down, Event.MOUSE_WHEEL_DOWN)
      every connect(self.forward_key, Event.KEY_PRESS | Event.KEY_RELEASE)
      return
   end
end






