package gui

class Frame(Component)
   public
      held_flag,
      bar,
      content,
      drag_x_offset,
      drag_y_offset

   public static const
      FRAME_RSW

   private static init()
      FRAME_RSW := 12
   end

   public can_drag(e)
      return bar.can_drag(e)
   end

   public setup()
      self.bar := create_bar()
      self.add(bar)
   end

   public create_bar()
      return FrameBar()
   end

   public set_title(s)
      bar.set_title(s)
      return self
   end

   public in_resize_corner(e)
      return in_region(e) & 
         (((self.x + self.w - FRAME_RSW <= e.x < self.x + self.w) & 
          (self.y + self.h - border.get_b_inset() <= e.y < self.y + self.h)) | 
          ((self.x + self.w - border.get_r_inset() <= e.x < self.x + self.w) & 
           (self.y + self.h - FRAME_RSW <= e.y < self.y + self.h)))
   end

   public display()
      border.draw_rect(self.cbwin, self)
      self.display_children()
   end

   public set_content(c)
      self.content := c
      self.add(c)
      return self
   end

   public initially()
      \self.content | runerr("no content component specified")
      cast(self,Component).initially()
   end

   public layout()
      bar.x := self.x + border.get_l_inset()
      bar.y := self.y + border.get_t_inset()
      bar.w := self.w - border.get_total_width()
      bar.h := bar.get_preferred_height(bar.w)
      content.x := bar.x
      content.y := bar.y + bar.h
      content.w := bar.w
      content.h := self.h - border.get_total_height() - bar.h
      every (!children).layout()
   end

   public get_default_width()
      return border.get_total_width() + max(bar.get_preferred_width(), content.get_preferred_width())
   end

   public get_default_height(dw)
      dw -:= border.get_total_width()
      return border.get_total_height() + bar.get_preferred_height(dw) + content.get_preferred_height(dw)
   end

   public get_pointer(e)
      if in_resize_corner(e) then
         return "bottom right corner"
   end

   public handle_lpress(e)
      if in_region(e) then
         to_top()
      if can_drag(e) then {
         self.held_flag := 1
         self.drag_x_offset := e.x - self.x
         self.drag_y_offset := e.y - self.y
      } else if in_resize_corner(e) then {
         self.held_flag := 2
         self.drag_x_offset := e.x - (self.x + self.w)
         self.drag_y_offset := e.y - (self.y + self.h)
      }
   end

   public handle_ldrag(e)
      \self.held_flag | fail
      self.invalidate()
      case self.held_flag of {
         1: {
            shift(e.x - drag_x_offset - self.x,
                  e.y - drag_y_offset - self.y)
            self.x_spec := self.x - parent.x
            self.y_spec := self.y - parent.y
         }
         2: {
            self.w_spec := e.x - drag_x_offset - self.x
            self.h_spec := e.y - drag_y_offset - self.y
            self.resize()
         }
      }
      self.invalidate()
   end

   public to_top()
      if self ~=== parent.z_children[-1] then {
         self.set_z(parent.get_top_z())
         parent.compute_z_order()
         self.invalidate()
      }
   end

   public to_bottom()
      if self ~=== parent.z_children[1] then {
         self.set_z(parent.get_bottom_z())
         parent.compute_z_order()
         self.invalidate()
      }
   end

   public close()
      self.invalidate()
      self.parent.remove(self)
      self.finally()
   end

   public handle_lrelease(e)
      self.held_flag := &null
   end

   public new()
      cast(self,Component).new()
      set_border(RaisedBorder())
      setup()
      connect(self.handle_lpress, Event.MOUSE_LEFT_PRESS)
      connect(self.handle_ldrag, Event.MOUSE_LEFT_DRAG)
      connect(self.handle_lrelease, Event.MOUSE_LEFT_RELEASE)
      return
   end
end


class FrameBar(Component)
   public lab
   public on_close()
      self.parent.close()
   end

   public set_title(s)
      lab.set_label(s)
      return self
   end

   public can_drag(e)
      return lab.in_region(e)
   end

   public setup()
      local b
      set_layout(GridLayout().set_doi(0).set_dii(0))
      lab := Label().
         set_constraint("x_weight", 1).
         set_constraint("x_fill", &yes).
         set_constraint("l_inset", 3).
         set_label("Frame")
      add(lab)
      b := IconButton().
         set_accepts_focus(&no).
         set_constraint("r_inset", 3).
         set_tooltip("Close")
      b.set_border(EmptyBorder().set_insets(0, 0, 0, 0))
      b.set_paint(ImagePaint().set_cache("gui.TINY_X"))
      b.connect(self.on_close, Event.ACTION)
      self.add(b)
   end

   public new()
      cast(self,Component).new()
      setup()
      return
   end
end



