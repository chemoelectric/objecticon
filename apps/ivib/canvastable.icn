#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui, lang


############################################################################
#
# Class for representing a Table on the canvas.
#
class CanvasTable(CanvasComponent,Table)
   public
      select_mode,
      columns

   #
   # Default minimum width for the object
   #
   public override min_width()
      return 65
   end

   #
   # Default minimum height for the object
   #
   public override min_height()
      return 65
   end

   #
   # Generate code into Code object c.
   #
   public override gen_code(c)
      every (!self.get_columns()).gen_code(c)
      CanvasComponent.gen_code(c)
      c.chain("set_select_mode(" || c.select_str(self.select_mode) || ")")
      c.add_import("gui", "Select")
      c.chain("set_contents([])")
      every c.chain("add_column(" || (!self.get_columns()).name || ")")
   end

   #
   # Duplicate object.
   #
   public override dup()
      local c
      c := CanvasTable()
      CanvasComponent.dup_fields(c)
      every c.add_column((!self.get_columns()).dup())
      c.select_mode := self.select_mode
      c.set_contents([])
      return c
   end

   #
   # Return the I/O template.
   #
   public override get_template()
      suspend CanvasComponent.get_template() |
         ["Select Mode", "select_mode"] |
         ["Columns", "columns"]
   end

   public override add_column(c)
      c.parent_Canvas := self.parent_Canvas
      return Table.add_column(c)
   end

   #
   # Use a temporary variable to store the columns, then add them
   # all afterwards.  This is needed since in the Table class, the columns
   # are the children of the TableHeader component, which is not
   # encodeable itself.
   #

   public override pre_encode()
      CanvasComponent.pre_encode()
      self.columns := get_columns()
   end

   public override post_decode()
      CanvasComponent.post_decode()
      every add_column(!self.columns)
   end

   #
   # Open the configuration dialog box.
   #
   public override dialog()
      return CanvasTableDialog(self)
   end

   public string_rep()
      local l, c, s
      l := []
      every c := !self.get_columns() do {
         s := if is(c.paint, CanvasTextPaint) then
            c.paint.str
         else
            Class.get_name(c)
         put(l, [s, 
                 if /c.column_width then "Auto" else c.column_width, 
                 c.column_align])
      }
      put(l, ["", "", ""])
      return l
   end

   public override gen_cos()
      suspend CanvasComponent.gen_cos() | !self.get_columns()
   end

   public override new()
      Table.new()
      CanvasComponent.new()
      self.set_contents([])
      self.class_name := "Table"
      self.import_name := "gui"
      self.name := "table"
      self.select_mode := Select.NONE
      return
   end
end




