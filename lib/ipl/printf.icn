############################################################################
#
#       File:     printf.icn
#
#       Subject:  Procedures for printf-style formatting
#
#       Author:   William H. Mitchell
#
#       Date:     July 20, 2005
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#       Contributors:   Cheyenne Wills, Phillip Lee Thomas, Michael Glass
#
############################################################################

package ipl.printf

import
   io(stop, FileStream, need_Stream),
   util(Format, need_integer, need_text, need_real, need_list),
   lang(Text,to_string),
   ipl.pdco(String)

#
# Returns a `printf` format as a string or ucs result.
#
procedure sprintf(format, args[])
   return lsprintf(format, args)
end

#
# Outputs a `printf` format to the given `io.Stream`.
#
procedure fprintf(file, format, args[])
   return lfprintf(file, format, args)
end

#
# Outputs a `printf` format to stderr.
#
procedure eprintf(format, args[])
   return lfprintf(FileStream.stderr, format, args)
end

#
# Set `&why` from a `printf` format, and fail.
#
procedure whyf(format, args[])
   &why := lsprintf(format, args)
end

#
# Call `stop()` with the result of a `printf` format.
#
procedure stopf(format, args[])
   stop(lsprintf(format, args))
end

#
# Performs a `printf` format, with the output produced as a result
# sequence of string (or ucs) chunks, some of which may be empty.
#
procedure gprintf(format, args[])
   suspend lgprintf(format, args)
end
 
#
# Outputs a C-style `printf` format to stdout.
#
# The specifier format is
# ~
#     %[index$]<flags><width>.<precision><char>
# ~
#  <flags> can be :-
#  *   0 - pad fields with zeroes instead of spaces; this may
#          not give sensible results with some numerical formats,
#          eg signed numbers or left adjusted numbers.
#  *   ' - for formats d, r, e, use commas to separate thousands
#  *   - - left adjust fields instead of right adjust
#  *   S - for formats r, e, replace trailing fractional zeroes
#          with spaces
#  *   Z - for formats r, e, means drop trailing fractional
#          zeroes altogether
#  *   + - for numeric formats, add a leading + to positive
#          numbers
#
# The optional "index$" specifier indicates the argument index to which
# this specifier applies, rather than the next argument in sequence.
#
# The optional width specifies the field width.  It may be "*", in
# which case an argument is consumed to give the width, or
# "*<index>$", indicating which argument to use.
#
# The optional precision (which may also be a "*") means :-
# *  for string formats (s, i, t) the maximum string length;
# *  for integer formats (d, x, X, o, b), the minimum number of
#    digits; leading zeroes are added if needed.
# *  for real formats (r, e), the number of digits in the
#    fractional part.
#
# The formats are :-
# *   %d  decimal number
# *   %s  string or ucs
# *   %x  hex lower case
# *   %X  hex upper case
# *   %o  octal
# *   %b  binary
# *   %i  image() result
# *   %t  to_string() result
# *   %r  real decimal
# *   %e  real in exponential format
# *   %E  real in exponential format, with a capital E in
#         the result
# *   %w  the value of &why
# *   %n  the empty string (useful for inserting spaces for
#         table alignment)
#
procedure printf(format, args[])
   return lfprintf(FileStream.stdout, format, args)
end

# Get a positional param of the form <int>$, or fail.
package procedure optpos()
   return 1(integer(tab(many(&digits ++ '\-'))), ="$")
end

# A helper class to process the arguments
package class Args()
   private a
   private const e
   public const why

   public get(i)
      return if /i then @e else a[i]
   end

   public intparam()
      local a, i
      return if ="*" then {
         # Optional *N$ form
         i := optpos()
         a := get(i)
         need_integer(a)
      } else
         integer(tab(many(&digits)))
   end

   public new(x)
      a := need_list(x)
      e := create !a
      # Save a copy of &why, since its value could be disturbed by
      # calls to writes1 in lfprintf.
      why := &why
      return
   end
end

package procedure one(args)  
   local v, a, just, width, conv, prec, pad, flag, apos
   move(1)     # Move over %
   # Get the optional positional specifier, eg "3$"
   apos := optpos()
   flag := cset(tab(many('0\'\-+SZ'))) | ''
   # Convert flags to those used by Format.numeric_to_string
   if any(flag, "'") then flag ++:= ','
   if any(flag, "S") then flag ++:= 's'
   if any(flag, "Z") then flag ++:= 'z'
   just := if any(flag, "-") then left else right
   if any(flag, "0") then pad := "0"
   width := args.intparam()
   if ="." then prec := args.intparam()
   conv := move(1) | ""
   # Formats that take an argument.
   if any('dsxXobitreE', conv) then
      a := args.get(apos)
   v := case string(conv) of {
      "d": decimal(a, prec, flag)
      "s": str(a, prec)
      "x": Text.lower(intstr(a, prec, flag))
      "X": intstr(a, prec, flag)
      "o": intstr(a, prec, flag, 8)
      "b": intstr(a, prec, flag, 2)
      "i": str(image(a), prec)
      "t": str(to_string(a), prec)
      "r": fixnum(a, prec, flag)
      "e": eformatstr(a, prec, flag ++ 'e')
      "E": eformatstr(a, prec, flag ++ 'E')
      "w": str(args.why, prec)
      "n": str("", prec)
      default: str(conv, prec)
   }
   if \width & *v < width then
      v := just(v, width, pad)
   return v
end

#
# This is like `gprintf`, but the second argument is a list of the
# arguments used by the format string.
#
procedure lgprintf(format, args)
   local v
   args := Args(args)
   format ? {
      while v := tab(upto('%')) do
         suspend v | one(args)
      return tab(0)
   }
end

#
# This is like `sprintf`, but the second argument is a list of the
# arguments used by the format string.
#
procedure lsprintf(format, args)
   return String{ lgprintf(format, args) }
end

#
# This is like `fprintf`, but the second argument is a list of the
# arguments used by the format string.
#
procedure lfprintf(file, format, args)
   local s
   need_Stream(file)
   every s := lgprintf(format, args) do
      file.writes1(s) | fail
   return file
end

package procedure str(x, prec)
   x := need_text(x)
   return x[1:(\prec + 1) | 0]
end

package procedure intstr(x, prec, flag, base)
   local v
   x := need_integer(x)
   v := Format.int_to_string(x, base, prec)
   if any(flag, "+") & x >= 0 then
      v := "+" || v
   return v
end

package procedure fixnum(x, prec, flag)
   /prec := 6
   x := need_real(x)
   return Format.numeric_to_string(x, prec, flag)
end

package procedure decimal(x, prec, flag)
   x := need_integer(x)
   # Limitation: if we have a precision (padded to min prec digits),
   # then we can't have commas.
   return if \prec then
      intstr(x, prec, flag, 10)
   else
      Format.numeric_to_string(x, 0, flag)
end

# e-format:  [-]m.ddddddE(+|-)xxx
#
package procedure eformatstr(x, prec, flag)
   /prec := 6
   x := need_real(x)
   return Format.numeric_to_string(x, prec, flag)
end
