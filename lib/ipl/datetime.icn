############################################################################
#
#	File:     datetime.icn
#
#	Subject:  Procedures for date and time operations
#
#	Author:   Robert J. Alexander and Ralph E. Griswold
#
#	Date:     November 6, 1998
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#	calendat(j)
#		returns a record with the month, day, and year corresponding
#		to the Julian Date Number j.
#
#	date()	natural date in English.
#
#	full13th(year1, year2)
#		generates records giving the days on which a full moon occurs
#		on Friday the 13th in the range from year1 though year2.
#
#	julian(m, d, y)
#		returns the Julian Day Number for the specified
#		month, day, and year.
#
#	pom(n, phase)
#		returns record with the Julian Day number of fractional
#		part of the day for which the nth such phase since
#		January, 1900.  Phases are encoded as:
#
#			0 - new moon
#			1 - first quarter
#			2 - full moon
#			3 - last quarter#
#
#		GMT is assumed.
#
#	saytime()
#		computes the time in natural English.  If an argument is
#		supplied it is used as a test value to check the operation
#		 the program.
#
#	walltime()
#		produces the number of seconds since midnight.  Beware
#		wrap-around when used in programs that span midnight.
#
############################################################################
#
#  See also:  datefns.icn
#
############################################################################
#
#  Acknowledgement:  Some of these procedures are based on an algorithm
#  given in "Numerical Recipes; The Art of Scientific Computing";
#  William H. Press, Brian P. Flannery, Saul A. Teukolsky, and William
#  T. Vetterling;#  Cambridge University Press, 1986.
#
############################################################################

package ipl.datetime

import
   util(Math)

record date1(month, day, year)
record date2(month, year, fraction)
record jdate(number, fraction)

# Julian date
procedure calendat(julian)			
   local ja, jalpha, jb, jc, jd, je, gregorian
   local month, day, year

   gregorian := 2299161

   if julian >= gregorian then {
      jalpha := integer(((julian - 1867216) - 0.25) / 36524.25)
      ja := julian + 1 + jalpha - integer(0.25 * jalpha)
      }
   else ja := julian

   jb := ja + 1524
   jc := integer(6680.0 + ((jb - 2439870) - 122.1) / 365.25)
   jd := 365 * jc + integer(0.25 * jc)
   je := integer((jb - jd) / 30.6001)
   day := jb - jd - integer(30.6001 * je)
   month := je - 1
   if month > 12 then month -:= 12
   year := jc - 4715
   if month > 2 then year -:= 1
   if year <= 0 then year -:= 1

   return date1(month, day, year)

end

# date in natural English
procedure date()			

   &dateline ? {
      tab(find(", ") + 2)
      return tab(find("  "))
      }

end

# full moons on Friday 13ths
procedure full13th(year1, year2)	
   local time_zone, jd, jday, fraction, jul
   local year, month,  n, icon, day_of_week, c

   time_zone :=  -5.0 / 24.0

   every year := year1 to year2 do {
      every month := 1 to 12 do {
         jday := julian(month, 13, year)
         day_of_week := (jday + 1) % 7
         if day_of_week = 5 then {
            n := integer(12.37 * (year - 1900 + integer((month - 0.5) / 12.0)))
            icon := 0
            repeat {
               jul := pom(n,2)
               jd := jul.number
               fraction := 24.0 * (jul.fraction + time_zone)
               if (fraction < 0.0) then {
                  jd  -:= 1
                  fraction  +:= 24.0
                  }
               if fraction > 12.0 then {
                  jd +:= 1
                  fraction -:= 12.0
                  }
               else fraction  +:= 12.0
               if jd = jday then {
                  suspend date2(month, year, fraction)
                  break
                  }
               else {
                  c := if jday >= jd then 1 else -1
                  if c = -icon then break
                  icon := c
                  n +:= c
                  }
               }
            }
         }
      }

end

# Julian date
procedure julian(month, day, year)	
   local jul, gregorian, ja, julian_year, julian_month

   gregorian := (15 + 31 * (10 + 12 * 1582))

   if year = 0 then fail
   if year < 0 then year +:= 1
   if month > 2 then  {
      julian_year := year
      julian_month := month + 1
      } else {
      julian_year := year - 1
      julian_month := month + 13
      }
   jul := (integer(365.25 * julian_year) + integer(30.6001 * julian_month) +
      day + 1720995)
   if day + 31 * (month + 12 * year) >= gregorian then  {
      ja := integer(0.01 * julian_year)
      jul +:= 2 - ja + integer(0.25 * ja)
      }

   return jul

end

# phase of moon
procedure pom(n, nph)			
   local i, jd, fraction, radians
   local am, as, c, t, t2, extra

   radians := Math.PI / 180

   c := n + nph / 4.0
   t := c / 1236.85
   t2 := t * t
   as := 359.2242 + 29.105356 * c
   am := 306.0253 + 385.816918 * c + 0.010730 * t2
   jd := 2415020 + 28 * n + 7 * nph
   extra := 0.75933 + 1.53058868 * c + ((1.178e-4) - (1.55e-7) * t) * t2

   if nph = (0 | 2) then
      extra +:=  (0.1734 - 3.93e-4 * t) * Math.sin(radians * as) - 0.4068 *
          Math.sin(radians * am)
   else if nph = (1 | 3) then
      extra +:= (0.1721 - 4.0e-4 * t) * Math.sin(radians * as) - 0.6280 *
        Math.sin(radians * am)
   else fail

   if extra >= 0 then i := integer(extra)
   else i := integer(extra - 1.0)
   jd  +:=  i
   fraction := extra - i

   return jdate(integer(jd), fraction)

end

# time in natural English
procedure saytime(time)			
   local hour,min,mod,near,numbers,out,sec
   #
   # Extract the hours, minutes, and seconds from the time.
   #
   /time := &clock
   time ? {
      hour := integer(tab(find(":") | 0)) | fail
      move(1)
      min := tab(find(":") | 0)
      move(1)
      sec := tab(0)
      }
   min := integer(min) | 0
   sec := integer(sec) | 0
   #
   # Now start the processing in earnest.
   #
   near := ["just gone","just after","nearly","almost"]
   if sec > 29 then min +:= 1    # round up minutes
   mod := min % 5                # where we are in 5 minute bracket
   out := near[mod] || " " | ""  # start building the result
   if min > 32 then hour +:= 1   # we are TO the hour
   min +:= 2             # shift minutes to straddle the 5-minute point
   #
   # Now special-case the result for Noon and Midnight hours.
   #
   if hour % 12 = 0 & min % 60 <= 4 then {
      return if hour = 12 then out || "noon"
				    else out || "midnight"
      }
   min -:= min % 5               # find the nearest 5 mins
   if hour > 12 then hour -:= 12 # get rid of 25-hour clock
   else if hour = 0 then hour := 12 # .. and allow for midnight
   #
   # Determine the phrase to use for each 5-minute segment.
   #
   case min of {
       0: {}                      # add "o'clock" later
      60: min=0                   # ditto
       5: out ||:= "five past"
      10: out ||:= "ten past"
      15: out ||:= "a quarter past"
      20: out ||:= "twenty past"
      25: out ||:= "twenty-five past"
      30: out ||:= "half past"
      35: out ||:= "twenty five to"
      40: out ||:= "twenty to"
      45: out ||:= "a quarter to"
      50: out ||:= "ten to"
      55: out ||:= "five to"
      }
   numbers := ["one","two","three","four","five","six",
		     "seven","eight","nine","ten","eleven","twelve"]
   out ||:= (if *out = 0 then "" else " ") || numbers[hour]
				 # add the hour number
   if min = 0 then out ||:= " o'clock" # .. and o'clock if exact
   return out                    # return the final result
end
 
# time since midnight
procedure walltime()			
   local seconds

   &clock ? {
      seconds := tab(upto(':')) * 3600		# seconds in a hour
      move(1)
      seconds +:= tab(upto(':')) * 60		# seconds in a minute
      move(1)
      return seconds + tab(0)
      }

end
