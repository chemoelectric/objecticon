#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import util

#
# This class is simply a container for several objects
# which then act together as ``radio buttons''.  The objects
# should be subclasses of `Toggle`, but are normally checkboxes.
#
# An `Event.SELECTION_CHANGED` is fired when  the user changes the
# selection (but not when the selection is changed programatically).
#
# NB - the objects in the group must be added to both the `CheckBoxGroup`
# and the dialog box too; a `CheckBoxGroup` is not a `Component`.
#
class CheckBoxGroup(Connectable)
   public 
      checkboxes,
      which_one,
      allow_none_checked_flag

   #
   # If set, then the group allows the user to press the currently
   # checked box, leaving none checked.
   #
   public set_allow_none_checked(s)
      self.allow_none_checked_flag := need_flag(s)
      return self
   end

   #
   # Returns the object which is currently checked, or fail if none are.
   #
   public get_which_one()
      return \self.which_one
   end

   #
   # Add the object to the CheckBoxGroup.
   # :Parameters :
   # :  `c` - The object to add, which must be a subclass of `Toggle`.
   #
   public add(c)
      insert(self.checkboxes, c)
      c.set_parent_check_box_group(self)
      return self
   end

   #
   # Remove the object from the CheckBoxGroup.
   # :Parameters :
   # :  `c` - The object to remove
   #
   public remove(c)
      if c === which_one then
         set_which_one()
      delete(self.checkboxes, c)
      c.set_parent_check_box_group()
      return self
   end

   #
   # Set which CheckBox is checked, or &null to indicate none checked.
   # :Parameters :
   # :  `x` - The object which is checked or &null.
   #
   public set_which_one(x)
      if /x then
         (\which_one).set_is_checked(&no)
      else
         x.set_is_checked(&yes)
      return self
   end

   public new()
      Connectable.new()
      self.checkboxes := set()
      return
   end
end

