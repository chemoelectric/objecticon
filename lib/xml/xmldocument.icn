#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package xml

import lang, io

#
# An XML document.
#
class XmlDocument(Document)
   public 
      parameter_entities,
      general_entities,
      element_declarations,
      notation_declarations,
      attribute_lists,
      id_attribute_values,
      validity_errors,
      warnings,
      standalone

   #
   # Get the number of validity errors during parsing
   #
   public get_validity_errors()
      return validity_errors
   end

   #
   # Get the number of warnings during parsing
   #
   public get_warnings()
      return warnings
   end

   #
   # Succeed iff this is a standalone document
   #
   public is_standalone()
      succeed \standalone
   end

   #
   # Debug function: Dump the entity definitions.
   #
   public show_entities()
      local x
      write("--- Parameter entities")
      every x := !sort(parameter_entities) do {
         write(image(x[1]), " -> ",to_string(x[2]))
      }
      write()
      write("--- General entities")
      every x := !sort(general_entities) do  {
         write(image(x[1]), " -> ",to_string(x[2]))
      }
      write()
   end

   #
   # Debug function: Dump the element declarations
   #
   public show_element_declarations() 
      local x
      write("--- Element declarations")
      every x := !sort(element_declarations) do  {
         write(image(x[1]), " -> ", to_string(x[2]))
      }
      write()
   end

   #
   # Debug function: Dump the notation declarations
   #
   public show_notation_declarations() 
      local x
      write("--- Notation declarations")
      every x := !sort(notation_declarations) do  {
         write(image(x[1]), " -> ", to_string(x[2]))
      }
      write()
   end

   #
   # Debug function: Dump the attribute declarations
   #
   public show_attribute_lists() 
      local x, y
      write("--- Attribute lists")
      every x := !sort(attribute_lists) do  {
         write(image(x[1]), " -> ")
         every y := !sort(x[2].attribute_defs) do
            write("       ", image(y[1]), " -> ", to_string(y[2]))
      }
      write()
   end

   #
   # Debug function: Show the ID attribute values
   #
   public show_id_attributes()
      local x
      write("--- ID Attributes")
      every x := !sort(id_attribute_values) do 
         write(x)
   end

   #
   # Return the parameter_entities.  This is a table mapping names to
   # EntityDef objects.
   #
   public get_parameter_entities()
      return parameter_entities
   end

   #
   # Return the general_entities.  This is a table mapping names to
   # EntityDef objects.
   #
   public get_general_entities()
      return general_entities
   end

   #
   # Return the element_declarations.  This is a table mapping names to
   # ContentSpec objects, ie the root of the parsed regular expression.
   #
   public get_element_declarations()
      return element_declarations
   end

   #
   # Return the notation_declarations.  A table mapping names to 
   # NotationDecl objects.
   #
   public get_notation_declarations()
      return notation_declarations
   end

   #
   # Return the attribute_lists.  A table mapping element names to AttList objects.
   #
   public get_attribute_lists()
      return attribute_lists
   end

   #
   # Return the id_attribute_values.  A set of all the ID attribute values 
   # encountered during parsing
   #
   public get_id_attribute_values()
      return id_attribute_values
   end

   public override new()
      Document.new()
      parameter_entities := table()
      general_entities := table()
      element_declarations := table()
      notation_declarations := table()
      attribute_lists := table()
      id_attribute_values := set()
      validity_errors := 0
      warnings := 0
      return
   end
end

