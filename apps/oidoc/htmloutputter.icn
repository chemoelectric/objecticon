#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import
   xml(xml_escape),
   parser, 
   ipl.sort,
   ipl.scan,
   io,
   util

class HtmlOutputter(Outputter)
   private
      output_dir,
      done_files,
      subclass_table

   private get_id(sym)
      local v, vo, i
      static sym_id_table, seen_set, cnv
      initial {
         sym_id_table := table()
         seen_set := set()
         cnv := if has_feature("MS Win32") | \opts["ci"] then map else 1
      }

      if v := member(sym_id_table, sym) then
         return v

      v := if type(sym) == "string" then
         sym || "-package"
      else if is(sym, Symbol) then
         sym.get_fq_name_default()
      else if is(sym, ScannedFile) then
         (\sym.pack | "default") || "-" || FilePath(sym.filename).get(-1)
      else
         syserr("Unknown type to get_id")

      # Check the id hasn't been used before; if so make a
      # new one.
      i := 0
      vo := v
      while member(seen_set, cnv(v)) do
         v := vo || "_" || (i +:= 1)
      insert(seen_set, cnv(v))

      insert(sym_id_table, sym, v)

      return v
   end

   private doctype(f)
      write(f, "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">")
   end

   public output()
      local nav, fname, index, s, all_classes, all_others, begin, c, all

      done_files := set()
      output_dir := \opts["o"] | stop("Please specify an output directory")
      fname := output_dir || "/index.html"
      use {index := open(fname, "w") | stop("Couldn't open ", fname), {
         doctype(index)
         write(index, "<html>")
         write(index, "<title>")
         write(index, "Generated Documentation")
         write(index, "</title>")
         write(index, "<script type=\"text/javascript\">")
         write(index, "   targetPage = \"\" + window.location.search;")
         write(index, "   if (targetPage != \"\" && targetPage != \"undefined\")")
         write(index, "      targetPage = decodeURIComponent(targetPage.substring(1));")
         write(index, "   function loadFrames() {")
         write(index, "      if (targetPage != \"\" && targetPage != \"undefined\")")
         write(index, "         top.displayFrame.location = top.targetPage;")
         write(index, "   }")
         write(index, "</script>")
         write(index, "</head>")
         write(index, "<frameset cols=\"20%,80%\" onload=\"top.loadFrames()\">")
         write(index, "<frameset rows=\"30%,70%\" onload=\"top.loadFrames()\">")
         write(index, "<frame src=\"nav.html\" name=\"navFrame\">")
         write(index, "<frame src=\"all.html\" name=\"listFrame\">")
         write(index, "</frameset>")
         write(index, "<frame src=\"begin.html\" name=\"displayFrame\">")
         write(index, "</frameset>")
         write(index, "<noframes>")
         write(index, "<h2>")
         write(index, "Frame Alert</h2>")
         write(index, "<p>")
         write(index, "This document is designed to be viewed using the frames feature.")
         write(index, "If you see this message, you are using a non-frame-capable web client.")
         write(index, "</html>")
      }}

      all_classes := []
      all_others := []
      subclass_table := table()
      every c := symbol_table.gen_symbols() do {
         if is(c, ClassSymbol) then {
            put(all_classes, c)
            every s := c.get_resolved_supers() do {
               /subclass_table[s] := []
               put(subclass_table[s], c)
            }
         } else 
            put(all_others, c)
      }

      fname := output_dir || "/nav.html"
      use {nav := open(fname, "w") | stop("Couldn't open ", fname), {
         doctype(nav)
         write(nav, "<html><body>")
         write(nav, "<h1>Packages</h1><p>")
         write(nav, "<a href=\"all.html\" target=\"listFrame\">All</a><p>")
         every s := get_packages() do {
            if should_print_package(s) then
               write(nav, "<a href=\"", get_id(s) || ".html" || "\" target=\"listFrame\">", s, "</a><br>")
            output_package(s)
         }
         write(nav, "</body></html>")
      }}
           
      fname := output_dir || "/begin.html"
      use {begin := open(fname, "w") | stop("Couldn't open ", fname), {
         doctype(begin)
         write(begin, "<html><body>")
         write(begin, "<h1>Object Icon generated documentation</h1>")
         write(begin, "This is the automatically generated documentation for the following packages.<p>")
         every s := get_packages() do
            if should_print_package(s) then
               write(begin, "<a href=\"", get_id(s) || ".html" || "\" target=\"listFrame\">", s, "</a><br>")
         write(begin, "</body></html>")
      }}

      fname := output_dir || "/all.html"
      use {all := open(fname, "w") | stop("Couldn't open ", fname), {
         doctype(all)
         write(all, "<html><body>")
         write(all, "<h1>All packages</h1><p>")
         write(all, "<h1>Classes</h1><p>")
         every c := !isort(all_classes, name_sort) do {
            if should_print_symbol(c) then
               write(all, "<a href=\"", 
                     get_id(c) || ".html\" target=\"displayFrame\">", 
                     c.name, "</a><br>")
         }
         write(all, "<p><h1>Other Symbols</h1><p>")
         every c := !isort(all_others, name_sort) do {
            if should_print_symbol(c) then
               write(all, 
                     "<a href=\"", get_id(c) || ".html\" target=\"displayFrame\">", 
                     c.name, "</a><br>")
         }
      }}
   end

   # Output the summary list for one package set
   private output_package(s)
      local f, fname, c
      fname := output_dir || "/" || get_id(s) || ".html"
      use {f := open(fname, "w") | stop("couldn't open " || fname), {
         doctype(f)
         write(f, "<html><head><meta charset=\"UTF-8\"><title>", s, "</title></head><body>")
         write(f, "<h1>Package ", s, "</h1><p>")
         write(f, "<h1>Classes</h1><p>")
         every c := get_classes_in(s) do {
            output_class(c)
            write(f, "<a href=\"", get_id(c) || ".html\" target=\"displayFrame\">", c.name, "</a><br>")
         }
         write(f, "<p><h1>Other Symbols</h1><p>")
         every c := get_others_in(s) do {
            output_other(c)
            write(f, "<a href=\"", get_id(c) || ".html\" target=\"displayFrame\">", c.name, "</a><br>")
         }
      }}
   end

   # Output one class description
   private output_class(c)
      local s, f, fname, supers, o, subs, d, overrides, meths, m, vars, mm, x
      fname := output_dir || "/" || get_id(c) || ".html"
      use {f := open(fname, "w") | stop("couldn't open " || fname), {
         doctype(f)
         write(f, "<html><head><meta charset=\"UTF-8\"><title>", c.name, "</title></head><body>")
         write(f, "<h1>", c.name, "</h1>")
         write(f, "<dl>")
         write(f, "<dt>Type :</dt><dd>", get_top_level_type(c), "</dd>")

         # Superclass list
         supers := []
         every o := c.get_resolved_supers() do {
            put(supers, "<a href=\"" || get_id(o) || ".html\" target=\"displayFrame\">" || o.get_fq_name() || "</a>")
         }
         if *supers > 0 then {
            write(f, "<dt>Superclasses :</dt><dd>")
            every write(f, !supers, "<br>")
            write(f, "</dd>")
         }

         # Subclass list
         subs := []
         every d := !\subclass_table[c] do {
            put(subs, "<a href=\"" || get_id(d) || ".html\">" || d.get_fq_name() || "</a>")
         }
         if *subs > 0 then {
            write(f, "<dt>Subclasses :</dt><dd>")
            every write(f, !subs, "<br>")
            write(f, "</dd>")
         }

         s := c.get_package() | "default"
         write(f, "<dt>Package :</dt><dd><a href=\"", get_id(s) || ".html" || "\" target=\"listFrame\">", s, "</a></dd>")
         write(f, "</dl><p>")

         if is(c.obj, Tree) then {
            output_a_file(c)
            comment_and_fields(f, c)
            write(f, "<p>")
         }

         pretty_heading(f, "Class summary")
         overrides := table()
         do_inherited(f, c, overrides)

         meths := []
         vars := []
         every x := c.get_fields() do {
            if is(x, ClassVariable) then
               put(vars, x)
            else
               put(meths, x)
         }
         meths := isort(meths, name_sort)
         vars := isort(vars, name_sort)

         if *meths > 0 then {
            tbl_start(f, "Methods defined in this class")
            every m := !meths do {
               write(f,"<a href=\"#" || m.name || "\">" || m.name || "()</a>")
            }
            tbl_end(f)
         }

         if *vars > 0 then {
            tbl_start(f, "Variables defined in this class")
            every m := !vars do {
               write(f,"<a href=\"#" || m.name || "\">" || m.name || "</a>")
            }
            tbl_end(f)
         }

         write(f, "<p>")

         if *meths > 0 then {
            pretty_heading(f, "Method detail")
            every m := !meths do {
               write(f, "<a name=\"", m.name, "\"/>")
               write(f, "<h3>", m.name, "(", get_param_string(m.obj) ,")</h3>")
               write(f, get_access_string(m.obj), "<p>")
               write(f, "<dl>")
               if member(overrides, m.name) then {
                  o := overrides[m.name]
                  mm := o.get_field(m.name) | syserr("get_field() failed")
                  write(f,"<dd>Overrides <a href=\"" || get_id(o) || ".html#" || 
                        mm.name || "\">" || mm.name || "()</a> in <a href=\"", 
                        get_id(o), ".html\" target=\"displayFrame\">", o.get_fq_name(), "</a></dd>")
               }
               if is(m.obj, Tree) then {
                  write(f, "<dd>")
                  comment_and_fields(f, m)
                  write(f, "</dd>")
               }
               write(f, "</dl><hr>")
            }
         }

         if *vars > 0 then {
            pretty_heading(f, "Variable detail")
            every m := !vars do {
               write(f, "<a name=\"", m.name, "\"/>")
               write(f, "<h3>", m.name, "</h3>")
               write(f, get_access_string(m.decl_obj), "<p>")
               write(f, "<dl>")
               if is(m.obj, Tree) then {
                  write(f, "<dd>")
                  comment_and_fields(f, m)
                  write(f, "</dd>")
               }
               write(f, "</dl><hr>")
            }
         }

         write(f, "</body></html>")
      }}
   end

   private do_inherited(f, c, overrides)
      local l, m, d, x, tm, tv
      l := []
      every push(l, c ~=== c.get_implemented_classes())

      tm := table()
      tv := table()
      every x := c.get_implemented_fields() do {
         if is(x, ClassVariable) then {
            /tv[x.defining_class] := []
            put(tv[x.defining_class], x)
         } else {
            /tm[x.defining_class] := []
            put(tm[x.defining_class], x)
         }
      }

      every d := !l do {
         # Note any overridden fields
         every x := c.get_fields() do {
            if d.get_field(x.name) then
               overrides[x.name] := d
         }

         if *\tm[d] > 0 then {
            tbl_start(f, "Methods inherited from " || d.get_fq_name())
            every m := !isort(tm[d], name_sort) do {
               write(f,"<a href=\"" || get_id(d) || ".html#" || m.name || "\">" || m.name || "()</a>")
            }
            tbl_end(f)
         }
         if *\tv[d] > 0 then {
            tbl_start(f, "Variables inherited from " || d.get_fq_name())
            every m := !isort(tv[d], name_sort) do {
               write(f,"<a href=\"" || get_id(d) || ".html#" || m.name || "\">" || m.name || "</a>")
            }
            tbl_end(f)
         }
      }
   end

   private pretty_heading(f, s)
      write(f, "<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\" width=\"100%\">")
      write(f, "<tr bgcolor=\"#ccccff\">")
      write(f, "<td colspan=1><font size=\"+2\">")
      write(f, "<b>", s, "</b></font></td>")
      write(f, "</tr>")
      write(f, "</table>")
   end

   private tbl_start(f, s)
      write(f, "<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\" width=\"100%\">")
      write(f, "<tr bgcolor=\"\#eeeeff\">")
      write(f, "<td><b>",s,"</b></td></tr>")
      write(f, "<tr bgcolor=\"white\"><td>")
   end

   private tbl_end(f)
      write(f, "</td></tr></table>")
   end

   private comment_and_fields(f, c)
      local k, com
      com := Comment(c)
      html(f, com.comment, c)
      write(f, "<dl>")
      every k := !com.keys do
         html_fields(f, c, k, com.fields[k])
      write(f, "</dl>")
      write(f, "<a href=\"", 
            get_id(c.scanned_file) || ".html#", 
            c.obj.get_first_token().line , 
            "\" target=\"displayFrame\">Source - ", 
            FilePath(c.obj.get_first_token().filename).get(-1),
            " </a>")
   end

   private html_fields(f, c, key, vals)
      local name, l
      case key of {
         "param" : {
            write(f, "<dt>Parameters :</dt>")
            every l := !vals do {
               l[1] ? {
                  tab(many(WHITESPACE))
                  name := tab(many(ID_CHAR))
                  l[1] := tab(0)
               }
               writes(f, "<dd><code>", name, "</code> - ")
               html(f, l, c)
               write(f, "</dd>")
            }
         }

         "return" : {
            write(f, "<dt>Returns :</dt>")
            write(f, "<dd>")
            html(f, vals[1], c)
            write(f, "</dd>")
         }

         "generate" : {
            write(f, "<dt>Generates :</dt>")
            write(f, "<dd>")
            html(f, vals[1], c)
            write(f, "</dd>")
         }

         "fail" : {
            write(f, "<dt>Fails :</dt>")
            write(f, "<dd>")
            html(f, vals[1], c)
            write(f, "</dd>")
         }

         "runerr" : {
            write(f, "<dt>Runtime error :</dt>")
            write(f, "<dd>")
            html(f, vals[1], c)
            write(f, "</dd>")
         }

         "example" : {
            write(f, "<dt>Example :</dt><dd><pre>")
            every l := !vals do
               every write(f, esc(l[2 to *l]))
            write(f, "</pre></dd>")
         }
      }
   end

   private esc(s)
      return xml_escape(s, '<>&')
   end

   protected output_fragment(s)
      writes(output_file, esc(s))
   end

   protected output_link(s)
      writes(output_file, "<code>", create_link(s, output_sym), "</code>")
   end

   protected output_code(s)
      writes(output_file, "<code>", esc(s), "</code>")
   end

   protected output_bold(s)
      writes(output_file, "<b>", esc(s), "</b>")
   end

   protected output_ul(s)
      writes(output_file, "<u>", esc(s), "</u>")
   end

   protected end_line(fl)
      if /fl then
         write(output_file)
      else
         write(output_file, "<br>")
   end

   protected begin_pre()
      write(output_file, "<pre>")
   end

   protected output_pre(s)
      write(output_file, esc(s))
   end

   protected end_pre()
      write(output_file, "</pre>")
   end

   protected output_bar(n)
      write(output_file, "<br>", repl("&nbsp;", n))
   end

   protected end_bar()
      write(output_file, "<br>")
   end

   protected begin_ul()
      write(output_file, "<p><ul>")
   end

   protected end_ul()
      write(output_file, "</ul>")
   end

   protected begin_ol()
      write(output_file, "<p><ol>")
   end

   protected end_ol()
      write(output_file, "</ol>")
   end

   protected begin_li()
      write(output_file, "<li>")
   end

   protected end_li()
      write(output_file, "</li>")
   end

   protected new_para()
      write(output_file, "<p>")
   end

   private output_file, output_sym

   private html(f, l, c)
      self.output_file := f
      self.output_sym := c
      markdown(l)
   end

   private resolve_link(sym, name)
      local i, j, d
      name := (name ? tab(upto('({') | 0))
      # For a procedure or method, fail if the name matches one of the parameters.
      if is(sym, ProcedureSymbol | ClassMethod) then {
         if name == sym.obj.get_args().gen().str() then
            fail
      }
      if is(sym, ClassField) &
         i := sym.defining_class.get_implemented_field(name) then
            return i
      if is(sym, ClassSymbol) &
         i := sym.get_implemented_field(name) then
            return i
      #
      # Is it a global - note the test for scanned_file is so we fail on
      # a builtin function.
      if i := symbol_table.resolve(sym.scanned_file, name) then
         return \i.scanned_file & i

      #
      # Is it in the form <Class>.<Field> ?
      if d := backto('.', name) &
         (i := symbol_table.resolve(sym.scanned_file, name[1:d-1])) & 
         is(i, ClassSymbol) &
         (j := i.get_implemented_field(name[d:0])) then
         return j
   end

   #
   # Get a link (if possible) for the string s.  c is the current comment.
   #
   private create_link(s, c)
      local o
      o := resolve_link(c, s) | return esc(s)
      if is(o, ClassField) then {
         # Link within the parent class's page
         return "<a href=\"" || get_id(o.defining_class) || ".html#" || 
            o.name || "\">" || esc(s) || "</a>"
      } else {
         # Link to the absolute page
         return "<a href=\"" || get_id(o) || ".html\" target=\"displayFrame\">" || esc(s) || "</a>"
      }
   end

   private output_a_file(c)
      local f, fname, line_no, g, s, filename

      filename := c.obj.get_first_token().filename
      if member(done_files, filename) then
         return
      insert(done_files, filename)

      fname := output_dir || "/" || get_id(c.scanned_file) || ".html"
      use {f := open(fname, "w") | stop("couldn't open " || fname), {
         doctype(f)
         write(f, "<html><head><meta charset=\"UTF-8\"><title>", FilePath(filename).get(-1), "</title></head><body><pre>")
         # filename may be unavailable if a #line directive gave a path which was inaccessible
         use { g := open(filename) , {
            line_no := 0
            while s := read(g) do {
               line_no +:= 1
               writes(f, "<a name=\"", line_no, "\"/>")
               write(f, xml_escape(s, '<>&'))
            }
         }}

         write(f, "</pre></body></html>")
      }}
   end

   private output_other(c)
      local s, f, fname, fullname
      fullname := c.name
      if is(c, ProcedureSymbol) then
         fullname ||:= "(" || get_param_string(c.obj) || ")"
      
      fname := output_dir || "/" || get_id(c) || ".html"
      use {f := open(fname, "w") | stop("couldn't open " || fname), {
         doctype(f)
         write(f, "<html><head><meta charset=\"UTF-8\"><title>", c.name, "</title></head><body>")
         write(f, "<h1>", fullname, "</h1>")
         write(f, "<dl>")
         s := c.get_package() | "default"
         write(f, "<dt>Package :</dt><dd><a href=\"", get_id(s) || ".html" || "\" target=\"listFrame\">", s, "</a></dd>")
         write(f, "<dt>Type :</dt><dd>", get_top_level_type(c), "</dd>")
         write(f, "</dl><p>")
         if is(c.obj, Tree) then {
            output_a_file(c)
            comment_and_fields(f, c)
            write(f, "<p>")
         }
         if is(c, RecordSymbol) then {
            write(f, "<dt>Fields :</dt><dl>")
            every write(f, "<dd>", get_record_fields(c.obj), "</dd>")
            write(f, "</dl>")
         }
         write(f, "</body></html>")
      }}
   end
end

