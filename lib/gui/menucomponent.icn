#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import util, graphics, ipl.lists

#
# This is the superclass of all the objects that make up the
# menu system (other than the top level {Component}s of course).
#
# It encapsulates the position and space of labels in the parent
# menu, as well as methods which allow this item to be a popup
# submenu. A submenu need not necessarily contain other
# {MenuComponent}s; see for example the {Palette} class.  A
# conventional submenu, which does contain children, is in the
# {Menu} class.
#
abstract class MenuComponent(Rect,Connectable)
   public 
      label_x,                                
      label_y,                                
      label_w,  
      label_h,                                
      is_sub_menu_flag,                                
      is_decorative_flag,                                
      component_link,
      parent_component,                               
      is_shaded_flag,                                
      parent,                  
      tooltip,         
      accel,
      children,
      border,
      temp_win,
      accel_skip

   public initially()
      self.parent_component := (\parent).parent_component | component_link
      (\self.border).initially(self.parent_component)
      every (!self.children).initially()
   end

   public finally()
      (\self.border).finally()
      every (!self.children).finally()
      self.parent_component := &null
   end

   #
   # Add the given {MenuComponent} to the Menu.
   #
   # @param c   The {MenuComponent} to add.
   # @param i   The index to add at; if omitted then the new component
   # @          is appended to the end.
   # @fail      If i is out of range
   #
   public add(c, i)
      /i := 0
      insert(self.children, i, c) | fail
      c.set_parent(self)
      if is_initialized() then
         c.initially()
      return self
   end

   #
   # Get the index of the given child component
   #
   public get_index(c)
      return keyof(self.children, c)
   end

   #
   # Remove the {MenuComponent} from the menu.
   # @param c   The {MenuComponent} to remove.
   # @fail      If c is not a child of this instance.
   #
   public remove(c)
      return remove_index(get_index(c))
   end

   #
   # Remove the {MenuComponent} at the given index from the list of children.
   # @param i    The index
   # @fail      If i is out of range
   #
   public remove_index(i)
      local c
      c := self.children[i] | fail
      delete(self.children, i)
      c.set_parent(&null)
      if is_initialized() then
         c.finally()
      return self
   end

   #
   # Remove all the children.
   #
   public remove_all()
      return remove_list() & self
   end

   #
   # Move the {MenuComponent} to the given index position.
   # @param c   The {MenuComponent} to move.
   # @param j   The new position.
   # @fail      If c is not a child of this instance, 
   # @           or j is out of range.
   #
   public reposition(c, j)
      return reposition_index(get_index(c), j)
   end

   #
   # Move the {MenuComponent} at position {i} to {j}.
   # @param i   The old position.
   # @param j   The new position.
   # @fail      If either index is out of range.
   #
   public reposition_index(i, j)
      lmove(children, i, j) | fail
      return self
   end

   # Remove the children in the range `i:j`, returning the
   # removed children in a list.
   # @param i   The start slice index, default 1
   # @param j   The end slice index, default 0
   # @fail      If the range is invalid.
   #
   #
   public remove_list(i, j)
      local l
      l := lextract(children, i, j) | fail
      every (!l).set_parent(&null)
      if is_initialized() then
         every (!l).finally()
      return l
   end

   # Add all the `MenuComponent`s contained in list `l` at index `i`.
   #
   # @param l    The list to add
   # @param i    The index
   # @fail      If i is out of range
   #
   public add_list(l, i)
      linsert(children, l, i) | fail
      every (!l).set_parent(self)
      if is_initialized() then
         every (!l).initially()
      return self
   end

   # Move all the children of `MenuComponent` `other`, to this
   # `MenuComponent`, adding them at index `i`.  `other` will be left empty.
   #
   # @param other The source {MenuComponent}.
   # @param i     The index to add at; if omitted then the new components
   # @            are appended to the end.
   # @fail        If i is out of range
   #
   public move_all(other, i)
      return add_list(other.remove_list(), i)
   end

   #
   # Traverse all the components, including subcomponents, with a
   # post-order traversal.
   #
   public traverse_postorder()
      every (!self.children).traverse_postorder()
      coact(self)
   end

   #
   # Traverse all the components, including subcomponents, with a
   # pre-order traversal.
   #
   public traverse_preorder()
      coact(self)
      every (!self.children).traverse_preorder()
   end

   #
   # Succeed iff the component has been initialized with {init()}, but
   # not yet cleaned up with {finally()}.
   #
   public is_initialized()
      return \self.parent_component
   end

   public set_parent(x)
      self.parent := x
      return self
   end

   #
   # Get the parent {MenuComponent}, or fail if there is none.
   #
   public get_parent()
      return \self.parent
   end

   #
   # Succeed iff the component is shaded
   #
   public is_shaded()
      return \self.is_shaded_flag
   end

   #
   # Succeed if the component is not shaded.
   #
   public is_unshaded()
      return /self.is_shaded_flag
   end

   #
   # Toggle whether or not the item is shaded.  If it is, it is
   # displayed in a filtered way and will not accept input.
   #
   public toggle_is_shaded()
      self.is_shaded_flag := toggle_flag(self.is_shaded_flag)
      possibly_invalidate()
      return self
   end

   #
   # Set the shaded status of the component.
   #
   public set_is_shaded(s)
      check_flag(s)
      if s ~=== self.is_shaded_flag then {
         self.is_shaded_flag := s
         possibly_invalidate()
      }
      return self
   end

   #
   # Invalidate the parent {Component} if this is the root of the menu hierarchy, or
   # the parent menu if it is open.
   #
   public possibly_invalidate()
      if /self.parent then
         (\self.parent_component).invalidate()
      else
         (\parent.temp_win).invalidate(get_label_rect())
      return self
   end

   #
   # The label's area as a {Rect}
   #
   public get_label_rect()
      return Rect(label_x, label_y, label_w, label_h)
   end

   #
   # Return the parent {Component}, for example a {MenuBar}.
   #
   public get_parent_component()
      return \self.parent_component
   end

   public set_parent_component(x)
      self.parent_component := x
      return self
   end

   #
   # Set the link to the parent component for the root of a tree of
   # {MenuComponent}s.  The tree's {parent_component} links will then
   # be set in the {initially} method.
   #
   public set_component_link(x)
      self.component_link := x
      return self
   end

   public is_sub_menu()
      return \self.is_sub_menu_flag
   end

   public set_is_decorative(s)
      self.is_decorative_flag := check_flag(s)
      return self
   end

   public is_decorative()
      return \self.is_decorative_flag
   end

   public in_label_region(e)
      return (self.label_y <= e.y < self.label_y + self.label_h) & 
         (self.label_x <= e.x < self.label_x + self.label_w)
   end

   #
   # Set the tooltip.
   #
   public set_tooltip(x)
      self.tooltip := x
      return self
   end

   #
   # Return the tooltip, if any.
   #
   public get_tooltip()
      return \self.tooltip
   end

   #
   # Set the mnemonic key, which will be used with the Alt key to provide keyboard
   # shortcuts.
   #
   public set_accel(k)
      self.accel := k
      return self
   end

   #
   # Get the mnemonic key, if present, or fail otherwise.
   #
   public get_accel()
      return \self.accel
   end

   #
   # Invoked by the menu system to set the component's label position.
   #
   public set_label_pos(x, y)
      self.label_x := x
      self.label_y := y
      return self
   end

   #
   # Close the menu system.
   #
   public close_all()
      parent_component.close_all()
   end

   #
   # Called when the menu component is selected
   #
   public succeed(ev)
      close_all()
      fire(Event.ACTION, ev)
   end

   #
   # Called on each child after the proxy window has been created.
   #
   public prepare_parent_proxy()
   end

   #
   # Abstract methods for the label sizes.
   #
   public abstract get_label_left_width()
   public abstract get_label_left_height()
   public abstract get_label_mid_width()
   public abstract get_label_mid_height()
   public abstract get_label_right_width()
   public abstract get_label_right_height()

   #
   # Abstract method for the display of the labels.
   #
   public abstract draw_label(W, lw, mw, rw)

   #
   # The following methods are only called for a MenuComponent which pops up
   # a sub-menu, ie is_sub_menu_flag is non-null.
   #

   #
   # Deduce which child label is under pointer, if any, given we're in the region.
   #
   public which_item(e)
      local m
      every m := !self.children do {
         if /m.is_shaded_flag & /m.is_decorative_flag & m.in_label_region(e) then
            return m
      }
   end

   #
   # Invoked after the x,y co-ordinates are set, this method should be implemented
   # so that the submenu may initialize its size.  The method should leave the
   # instance variables w and h initialized.
   #
   public defer resize()

   #
   # Invoked by the parent menu when the right cursor key is pressed.
   #
   public cursor_on()
   end

   #
   # Display the submenu
   #
   public defer display(w)

   #
   # Handle the given key event.
   #
   public defer handle_key(e)

   #
   # Is the cursor over us?
   # 
   public in_region(e)
      return temp_win.in_region(e)
   end

   #
   # Set the border to use - this relates to the popup submenu, 
   # not the label.
   #
   public set_border(b)
      if is_initialized() then {
         (\self.border).finally()
         self.border := b
         self.border.initially(self.parent_component)
      } else
         self.border := b
      return self
   end

   protected create_proxy()
      return SubMenuProxyComponent(self)
   end

   #
   # Display the submenu. The preferred position is x, y.  If that is
   # not possible, then xa, ya give another position to try, but this
   # time the values are right-adjusted.  These params default to the
   # right and bottom of the screen respectively.
   #
   public show(x, y, xa, ya)
      local d, win, x1, y1, pd, dim, rs
      /self.temp_win | fail

      pd := self.parent_component.parent_dialog
      win := pd.win

      dim := win.get_display_size()
      # Screen rectangle, in adjusted co-ordinates
      rs := Rect(-win.get_x() - win.get_dx(), -win.get_y() - win.get_dy(), dim.width, dim.height)
      self.x := x
      self.y := y
      self.resize()

      /xa := rs.x + rs.w
      /ya := rs.y + rs.h
      if self.x < rs.x then
         x1 := rs.x
      else if self.x + self.w > rs.x + rs.w then
         x1 := max(rs.x, xa - self.w)
      if self.y < rs.y then
         y1 := rs.y
      else if self.y + self.h > rs.y + rs.h then
         y1 := max(rs.y, ya - self.h)
      if \x1 | \y1 then {
         /x1 := self.x
         /y1 := self.y
         self.x := x1
         self.y := y1
         self.resize()
      }

      temp_win := create_proxy().
         set_size(self.w, self.h).
         # Copy attribs of the parent component
         set_all_wattribs(self.parent_component.get_effective_wattribs()).
         set_inherit_wattribs(&no)
      every (!children).prepare_parent_proxy()

      pd.enter_menu_mode(temp_win)

      # Note the test that we must use a popup for the menu if
      # the parent's menu is a popup; otherwise it may appear below
      # one of the parent popups.
      if pd.contains(self) &
         not (\parent).temp_win.parent_dialog.is_popup() then
      {
         temp_win.
            set_pos(self.x + win.get_dx(), 
                    self.y + win.get_dy()).
            set_z(pd.get_top_z())
         pd.add(self.temp_win)
         self.temp_win.resize().invalidate()
      } else {
         temp_win.set_pos(0, 0)
         d := PureDialog().
            set_canvas("popup").
            set_width(self.w).
            set_height(self.h).
            copy_wattrib("display", parent_component.parent_dialog).
            add(self.temp_win).
            set_dx(-self.x).
            set_dy(-self.y).
            set_x(win.get_x() + win.get_dx() + self.x).
            set_y(win.get_y() + win.get_dy() + self.y)
         pd.add_popup(d)
         d.show()
      }
   end

   #
   # Hide the submenu.
   #
   public hide()
      \self.temp_win | fail
      if temp_win.parent_dialog === parent_component.parent_dialog then {
         self.temp_win.invalidate()
         self.parent_component.parent_dialog.remove(self.temp_win)
      } else {
         parent_component.parent_dialog.remove_popup(self.temp_win.parent_dialog)
         self.temp_win.parent_dialog.dispose()
      }
      parent_component.parent_dialog.exit_menu_mode(temp_win)
      self.temp_win := &null
   end

   public new()
      Connectable.new()
      self.children := []
      return
   end
end


class SubMenuProxyComponent(Component, MenuMode)
   public menu

   public display()
      menu.display(self.cbwin)
      display_children()
   end

   public get_tooltip(e)
      local m
      every m := !menu.children do {
         if m.in_label_region(e) then
            return m.get_tooltip(e)
      }
   end

   public should_close(e)
      return member(Mouse.PRESS, e.code) & not(in_region(e))
   end

   public close_all()
      menu.hide()
   end

   public gen_popup_components()
      return self
   end

   public get_nesting_component()
      return self
   end

   public allow_nested(c) 
      local t
      if is(c, SubMenuProxyComponent) then
         return c.menu.parent === menu
      c := c.get_nesting_component()
      every t := c.gen_parents() do {
         if is(t, SubMenuProxyComponent) then
            return t === self
      }
   end

   public new(m)
      Component.new()
      self.menu := m
      set_tooltip_follows_mouse(&yes)
      return
   end
end

abstract class MenuSystem(MenuMode)
   public abstract go_right()
   public abstract go_left()
   public abstract make_partial()
end

