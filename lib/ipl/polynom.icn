############################################################################
#
#	File:     polynom.icn
#
#	Subject:  Procedures to manipulate multi-variate polynomials
#
#	Author:   Ralph E. Griswold
#
#	Date:     June 11, 2001
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#  The format for strings omits symbols for multiplication and
#  exponentiation.  For example, 3*a^2 is entered as 3a2.
#
############################################################################
#
#  Links:  strings, tables
#
############################################################################

package ipl.polynom

import
   ipl.strings(csort),
   ipl.tables(keylist),
   util(list2set)

# convert string to polynomial
procedure str2poly(str)			
   local poly, var, vars, term, factor, power

   poly := table(0)

   str ? {
      while term := (move(1) || tab(upto('\-+') | 0)) do {	# possible sign
         term ? {
            factor := 1			# default
            factor := tab(many(&digits ++ '+\-'))
            tab(0) ? {
               vars := ""
               while var := move(1) do {
                  power := 1		# default
                  power := integer(tab(many(&digits)))
                  vars ||:= repl(var, power)
                  }
               }
            poly[csort(vars)] +:= integer(factor)
            }
         }
      }

   return poly

end

# add polynomials
procedure polyadd(poly1, poly2)		
   local poly, keys, k

   keys := sort(list2set(keylist(poly1)) ++ list2set(keylist(poly2)))

   poly := table(0)

   every k := !keys do
      poly[k] := poly1[k] + poly2[k]

   return poly

end

# subtract polynomials
procedure polysub(poly1, poly2)		
   local poly, keys, k

   keys := sort(list2set(keylist(poly1)) ++ list2set(keylist(poly2)))

   poly := table(0)

   every k := !keys do
      poly[k] := poly1[k] - poly2[k]

   return poly

end

# multiply polynomials
procedure polymul(poly1, poly2)		
   local poly, keys1, keys2, k1, k2

   keys1 := keylist(poly1)
   keys2 := keylist(poly2)

   poly := table(0)

   every k1 := !keys1 do
      every k2 := !keys2 do
         poly[csort(k1 || k2)] +:= poly1[k1] * poly2[k2]

   return poly

end

# exponentiate polynomial
procedure polyexp(poly1, i)		
   local poly

   poly := copy(poly1)

   every 1 to i - 1 do 
      poly := polymul(poly, poly1)

   return poly

end

# polynomial to string
procedure poly2str(poly)		
   local str, keys, k, count, var

   keys := keylist(poly)

   str := ""

   every k := !keys do {
      if poly[k] = 0 then next		# skip term
      else if poly[k] > 1 then str ||:= "+" || poly[k]
      else if poly[k] = -1 then str ||:= "-"
      else if poly[k] < 0 then str ||:= poly[k]
      else str ||:= "+"
      k ? {
         while var := move(1) do {
            count := 1
            count +:= *tab(many(var))
            if count = 1 then str ||:= var
            else str ||:= var || count
            }
         }
      }

   return str[2:0]

end

# polynomial to profile sequence
procedure poly2profile(poly)		
   local str, keys, k

   keys := keylist(poly)

   str := ""

   every k := !keys do
      str ||:= repl(k, (0 < poly[k]))

   return str

end
