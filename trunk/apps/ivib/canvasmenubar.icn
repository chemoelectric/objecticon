#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui


############################################################################
#
# Class for representing a MenuBar on the canvas.
#
class CanvasMenuBar(CanvasComponent,MenuBar)
   public 
      string_rep

   #
   # Generate code into Code object c.
   #
   public gen_code(c)
      local i
      cast(self,CanvasComponent).gen_code(c)
      every i := !self.menus do {
         i.gen_code(c)
         c.line(self.name || ".add(" || i.name || ")")
      }
   end

   #
   # Duplicate object.
   #
   public dup(pc)
      local c
      c := CanvasMenuBar()
      cast(self,CanvasComponent).dup_fields(c)
      every c.add((!self.menus).dup())
      return c
   end

   #
   # Return the I/O template.
   #
   public get_template()
      return cast(self,CanvasComponent).get_template() ||| 
         [["Menus", "menus"]
         ]
   end

   #
   # Set the menu bar's string representation.
   #
   public set_string_rep()
      local sub, i
      string_rep := []
      every sub := self.menus[i := 1 to *self.menus] do 
         sub.set_string_rep(string_rep, 1, self, i)
      put(string_rep, MenuTreeNode(1, self, *self.menus + 1))
   end

   public get_string_rep()
      return self.string_rep      
   end

   #
   # Open the configuration dialog box.
   #
   public dialog()
      return CanvasMenuBarDialog(self)
   end

   public allows_null_height()
      return 1
   end

   public allows_null_width()
      return 1
   end

   public gen_cos()
      suspend cast(self,CanvasComponent).gen_cos() | !self.menus
   end

   public new()
      cast(self,MenuBar).new()
      cast(self,CanvasComponent).new()
      self.class_name := "MenuBar"
      self.import_name := "gui"
      self.name := "menu_bar"
      return
   end
end

