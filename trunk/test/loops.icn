import io, ipl.test

procedure showscan()
   write(image(&subject),":", &pos)
   return
end

procedure p1a()
   "three" ? {
      "four" ? {
         tab(4)
         showscan()
         suspend 1
         showscan()
         return 2
      }
   }
end

procedure p1()
   local x
   write("----- scan1")
   "outer" ? {
      tab(3)
      while showscan() & /x do {
         x := 1
         showscan()
         "inner" ? {
            tab(2)
            showscan()
            next
         }
      }
   }

   x := &null
   write("----- scan2")
   "outer" ? {
      tab(3)
      while showscan() & /x & (x := 1) & 
         ("inner" ? {
            tab(2)
            showscan()
            next
         })
   }

   write("----- scan3")
   "outer" ? {
      tab(3)
      every showscan() & (1 to 3) do {
         showscan()
         "inner" ? {
            tab(2)
            showscan()
            next
         }
      }
   }

   x := &null
   write("----- scan4")
   "outer" ? {
      tab(3)
      every showscan() & /x & (x := 1) & 
         ("inner" ? {
            tab(2)
            showscan()
            next
         })
   }

   write("----- scan5")
   "one" ? {
      "two" ? {
         tab(2)
         repeat {
            "three" ? {
               "four" ? {
                  tab(4)
                  showscan()
                  break
               }
            }
         }
         showscan()
      }
      showscan()
   }

   write("----- scan6")
   "one" ? {
      "two" ? {
         tab(2)
         while showscan() do {
            "three" ? {
               "four" ? {
                  tab(4)
                  showscan()
                  break
               }
            }
         }
         showscan()
      }
      showscan()
   }

   write("----- scan7")
   "one" ? {
      "two" ? {
         tab(2)
         every p1a() do
            showscan()
      }
      showscan()
   }
end

procedure p2()
   local x,y
   write("----- next1")
   every { (x:= 1 to 2) & write(x) & (y := !"xy") & write(y) & next }
   write("----- next2")
   every { (x:= 1 to 2) & write(x) & (y := !"xy") & write(y) & repeat { break next } }
   write("----- next3")
   every { (x:= 1 to 2) & write(x) & (y := !"xy") & write(y) & repeat { break break } }
   write("----- next4")
   every { (x:= 1 to 2) & write(x) & (y := !"xy") & write(y) & next } do write("never")
   write("----- next5")
   every { (x:= 1 to 2) & write(x) & (y := !"xy") & write(y) } do {
      write("body")
      next
      write("never")
   }
   write("----- next6")
   x := 4
   while write(x) & (x>0) do {
      x -:= 1
      write("body")
      next
      write("never")
   }
end

procedure p3()
   local x
   write("----- break1")
   every { (x:= 1 to 2) & write(x) & (break) & write("never") }
   write("----- break2")
   every { (x:= 1 to 2) & write(x) } do {
      write("body")
      break
      write("never")
   }
   write("----- break3")
   while { (x:= 1 to 2) & write(x) & (break) & write("never") }
   write("----- break4")
   while { (x:= 1 to 2) & write(x) } do {
      write("body")
      break
      write("never")
   }
   write("----- break4")
   pr_seq{"gen", repeat {
      repeat {
         break break !"cat"
      }
   }}
   write("----- break5")
   pr_seq{"gen", every {
      repeat {
         break break !"cat"
      }
   }}
   write("----- break6")
   pr_seq{"gen", every (x:= 1 to 2) do {
      break x|!"cat"
   }}
   write("----- break7")
   pr_seq{"gen",
      repeat {
         break
      }
   }
end

procedure main()
   p1()
   p2()
   p3()
end
