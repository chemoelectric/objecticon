#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

#
# This is a Spin for numeric values, optionally within a fixed range.
#
class RangeSpin(Spin)
   public
      lo,
      hi,
      increment_size

   public create_view()
      return SpinTextField()
   end

   public initially()
      local f
      f := &digits
      if type(lo | hi) == "real" then
         f ++:= '.'
      if /lo | /hi | (lo < 0) then
         f ++:= '\-'
      view.set_filter(f)
      cast(self,Spin).initially()
   end

   public do_increment(ev)
      set_value(get_value() + self.increment_size, ev)
   end

   public do_decrement(ev)
      set_value(get_value() - self.increment_size, ev)
   end

   #
   # Set the range of allowed values.  The values may
   # be integer or real.
   #
   # @param lo  The lower bound
   # @param hi  The upper bound
   #
   public set_range(lo, hi)
      self.lo := lo
      self.hi := hi
      return self
   end

   #
   # Set the value
   #
   public set_value(x, ev)
      x <:= \self.lo
      x >:= \self.hi
      if /ev then {
         view.set_contents(x)
         if is_live() then
            view.remove_wattrib("fg").reset()
      } else
         view.assign_contents(x, ev)
      return self
   end

   #
   # Set the increment, ie the amount moved up/down by the buttons.
   #
   public set_increment_size(x)
      self.increment_size := x
      return self
   end

   public on_textfield(ev, src, type)
      if get_value() then
         view.remove_wattrib("fg").reset()
      else
         view.set_fg("red").reset()
      # Fire the event with self as source.
      fire(type, ev)
   end

   #
   # Return the value, or fail if the value is not presently a valid
   # numeric value in the required range.
   #
   public get_value()
      local v
      v := numeric(view.get_contents()) | fail
      if (v < \self.lo) | (v > \self.hi) then
         fail
      return v
   end

   public get_default_width()
      local t
      t := 0
      # Bit difficult if we don't have a maximum...
      every t <:= self.cbwin.text_width((view.contents | \self.lo | \self.hi) || " ")
      return border.get_total_width() + up.get_preferred_width() + t + view.border.get_total_width()
   end

   public new()
      cast(self,Spin).new()
      self.increment_size := 1
      every view.connect(self.on_textfield, Event.CONTENT_CHANGED | Event.ACTION)
      return
   end
end

