package gui

class ListTabSetList(SelectableScrollArea)
   public calculate_line_height()
      local l
      l := []
      every put(l, (!self.contents).get_label_height())
      return l
   end

   public calculate_subject_width()
      local t, mw
      mw := 0
      every t := !self.contents do
         mw <:= t.get_label_width()
      return mw
   end

   public draw_line_data(xp, yp, lh, i)
      contents[i].draw_label(view.cbwin, 
                             xp, yp,
                             max(subject_width, view.w), lh)
   end
end


class ListTabSet(Component)
   public dl, oa

   public initially()
      Component.initially()
      self.dl.set_ideal_size(100, 200, 100, 400)
      if *self.dl.get_selections() = 0 then
         set_which_one(self.oa.children[1])
   end

   public set_which_one(x)
      self.dl.object_set_selections([x])
      self.dl.object_set_cursor(x)
      synch()
      return self
   end

   public add_tab(t, i)
      self.oa.add(t, i)
      self.dl.contents_changed()
      return self
   end

   public remove_tab(t)
      self.oa.remove(t)
      self.dl.contents_changed()
      return self
   end

   public on_sel_change(e)
      synch()
   end

   public synch()
      self.oa.set_which_one(self.dl.object_get_selections()[1])
   end

   public handle_accel(e)
      set_which_one(find_key(e))
      self.parent_dialog.set_focus(dl, e)
   end
 
   public match_accel(e)
      return find_key(e)
   end

   #
   # Find the TabItem with the given accelerator.
   # @p
   public find_key(k)
      local m
      every m := !self.oa.children do {
         if m.accel === k & m.is_unshaded() then
            return m
      }
   end

   public new()
      local b
      Component.new()
      self.set_constraint("x_fill", &yes)
      self.set_constraint("y_fill", &yes)
      self.set_constraint("x_weight", 1.0)
      self.set_constraint("y_weight",  1.0)
      set_layout(GridLayout().set_doi(0))
      self.dl := ListTabSetList().set_select_mode("one").set_constraint("x_weight", 0)
      self.dl.connect(self.on_sel_change, Event.SELECTION_CHANGED)
      self.add(dl)
      b := Border()
      b.set_border(SunkenBorder())
      self.add(b)
      self.oa := OverlaySet()
      self.dl.set_contents(self.oa.children)
      b.set_content(oa)
      return
   end
end


