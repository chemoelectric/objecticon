#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import 
   parser,
   ipl.strings, 
   ipl.sort,
   io

class GroffOutputter(Outputter)
   private
      output_file

   public output()
      local c, l, s, t, u, m, el, com, meths, vars, x, fullname

      if s := \opts["o"] then
         output_file := open(s, "w") | stop("couldn't open output file ", s, ": ", &why)

      every c := get_classes_in(get_packages()) do {
         l := []
         every put(l, c.get_resolved_supers().get_fq_name())
         if *l = 0 then 
            s := "(none)"
         else {
            s := ""
            every s ||:= !l || " "
            s := "\\f[HR]" || s || "\\f[R]"
         }
         t := c.get_package() | "default"
         t := "\\f[HR]" || t || "\\f[R]"
         u := c.scanned_file.filename
         u := "\\f[HR]" || u || "\\f[R]"
         write(output_file, ".HEAD \"", get_top_level_type(c), " ", c.name, "\" \"", s, "\"", " \"", t, "\"", " \"", u, "\"")
         if is(c.obj, Tree) then {
            com := Comment(c)
            markdown(com.comment)
         }

         meths := []
         vars := []
         every x := c.get_fields() do {
            if is(x, ClassVariable) then
               put(vars, x)
            else
               put(meths, x)
         }
         meths := isort(meths, name_sort)
         vars := isort(vars, name_sort)

         every m := !meths do {
            write(output_file, ".FUNC_START \"", get_access_string(m.obj), " ", m.name, "(", get_param_string(m.obj) ,")\"")
            if is(m.obj, Tree) then {
               com := Comment(m)
               markdown(com.comment)
               every el := !sort(com.fields) do
                  groff_fields(el[1], el[2])
            }
            write(output_file, ".FUNC_END")
         }
         every m := !vars do {
            write(output_file, ".FUNC_START \"", get_access_string(m.decl_obj), " ", m.name, "\"")
            if is(m.obj, Tree) then {
               com := Comment(m)
               markdown(com.comment)
               every el := !sort(com.fields) do
                  groff_fields(el[1], el[2])
            }
            write(output_file, ".FUNC_END")
         }
      }

      every c := get_others_in(get_packages()) do {
         fullname := c.name
         if is(c, ProcedureSymbol) then
            fullname ||:= "(" || get_param_string(c.obj) || ")"
         s := "(none)"
         t := c.get_package() | "default"
         t := "\\f[HR]" || t || "\\f[R]"
         u := c.scanned_file.filename
         u := "\\f[HR]" || u || "\\f[R]"
         write(output_file, ".HEAD \"", get_top_level_type(c), " ", c.name, "\" \"", s, "\"", " \"", t, "\"", " \"", u, "\"")
         write(output_file, ".FUNC_START \"", fullname ,"\"")
         if is(c.obj, Tree) then {
            com := Comment(c)
            markdown(com.comment)
            every el := !sort(com.fields) do
               groff_fields(el[1], el[2])
         }
         if is(c, RecordSymbol) then {
            write(output_file, ".P")
            write(output_file, "Fields :")
            write(output_file, ".LS_SET c")
            every write(output_file, ".LS_ITEM \\f[HR]", get_record_fields(c.obj), "\\fR")
            write(output_file, ".LS_END")
         }
         write(output_file, ".FUNC_END")
      }

      (\output_file).close()
   end

   private groff_fields(key, vals)
      local l, name
      case key of {
         "param" : {
            write(output_file, ".P")
            write(output_file, "Parameters :")
            write(output_file, ".LS_SET c")
            every l := !vals do {
               l[1] ? {
                  tab(many(WHITESPACE))
                  name := tab(many(ID_CHAR))
                  l[1] := tab(0)
               }
               write(output_file, ".LS_ITEM \\f[HR]", name, "\\fR")
               markdown(l)
            }
            write(output_file, ".LS_END")
         }

         "return" : {
            write(output_file, ".P")
            write(output_file, "Returns :")
            write(output_file, ".P")
            every markdown(vals[1])
         }

         "generate" : {
            write(output_file, ".P")
            write(output_file, "Generates :")
            write(output_file, ".P")
            every markdown(vals[1])
         }

         "fail" : {
            write(output_file, ".P")
            write(output_file, "Fails :")
            write(output_file, ".P")
            every markdown(vals[1])
         }

         "runerr" : {
            write(output_file, ".P")
            write(output_file, "Runtime error :")
            write(output_file, ".P")
            every markdown(vals[1])
         }

         "example" : {
            write(output_file, ".P")
            write(output_file, "Example :")
            write(output_file, ".ID\n.ft HR")
            every l := !vals do
               every write(output_file, l[2 to *l])
            write(output_file, ".ft R\n.DE")
         }
      }
   end

   private esc(s)
      return replace(s, "\\", "\\\\")
   end

   protected output_fragment(s)
      writes(output_file, esc(s))
   end

   protected output_link(s)
      writes(output_file, "\\f[HR]", esc(s), "\\fR")
   end

   protected output_code(s)
      writes(output_file, "\\f[HR]", esc(s), "\\fR")
   end

   protected output_bold(s)
      writes(output_file, "\\fB", esc(s), "\\fP")
   end

   protected output_ul(s)
      writes(output_file, "\\fI", esc(s), "\\fP")
   end

   protected end_line(fl)
      if /fl then
         write(output_file)
      else
         write(output_file, "\n.br")
   end

   protected begin_pre()
      write(output_file, ".nf\n.ft C")
   end

   protected output_pre(s)
      write(output_file, esc(s))
   end

   protected end_pre()
      write(output_file, ".ft P\n.fi")
   end

   protected output_bar(n)
      write(output_file, ".br\n", repl("\xa0", n))
   end

   protected end_bar()
      write(output_file, ".br")
   end

   protected begin_ul()
      write(output_file, ".LS_SET b")
   end

   protected end_ul()
      write(output_file, ".LS_END")
   end

   protected begin_ol()
      write(output_file, ".LS_SET 1")
   end

   protected end_ol()
      write(output_file, ".LS_END")
   end

   protected begin_li()
      write(output_file, ".LS_ITEM")
   end

   protected end_li()
   end

   protected new_para()
      write(output_file, ".P")
   end
end

