import gui, io, lang, ipl.pdco

class PaintEdit(Dialog)
   public 
      c, 
      tabset,
      code_tab,
      okay_result

   #
   # Add the tab to the TabSet
   #
   public add_tab(t) 
      tabset.add(t)
   end

   #
   # Add the tab to the TabSet, as the first item
   #
   public add_tab_at_front(t) 
      tabset.add(t, 1)
   end

   public setup()
      local oc, label
      Class.get_name(c) ? {
         ="Canvas"
         label := tab(0) || " Setup"
      }
      self.set_wattrib("label", label)

      set_layout(GridLayout())

      tabset := TabSet("c:eol")
      add(tabset)
      code_tab := CodeTab(c)
      tabset.add(code_tab)

      oc := OkCancel()
      oc.listen(self)
      self.add(oc)
   end

   public on_cancel()
      self.dispose()
   end

   public validate_input()
      return
   end

   public on_okay()
      self.validate_input() | fail
      self.set_vals(c)
      self.okay_result := 1
      self.dispose()
   end

   public set_vals()
      code_tab.set_vals()
   end

   public new(c)
      cast(self,Dialog).new()
      self.c := c
      setup()
      return
   end
end


class ImagePaintEdit(PaintEdit)
   public 
      scale_up,
      max_w, 
      max_h, 
      max_w_field, 
      max_h_field,
      img_cbg,
      str_cb,
      str_panel,
      str_img,
      cache_cb,
      cache_panel,
      cache_img,
      cache_field,
      relativize

   public on_max_w()
      max_w_field.toggle_is_shaded()
   end

   public on_max_h()
      max_h_field.toggle_is_shaded()
   end

   public set_vals()
      cast(self,PaintEdit).set_vals()
      c.max_w := if max_w.is_checked() then
         integer(max_w_field.get_contents())
      else
         &null

      c.max_h := if max_h.is_checked() then
         integer(max_h_field.get_contents())
      else
         &null

      c.scale_up_flag := scale_up.get_status()

      if str_cb.is_checked() then
         c.image_str := str_img.image_str
      else
         c.image_str := &null

      if cache_cb.is_checked() then
         c.image_cache := cache_img.image_cache
      else
         c.image_cache := &null
   end

   public on_cache_field()
      cache_img.set_cache(cache_field.get_contents())
      update_grey()
   end

   public on_str_browse()
      local fd, s, l
      fd := FileDialog()
      l := []
      put(l, \Ivib.last_icon_dir)
      l |||:= Ivib.main.prefs.cache_path
      fd.set_directories(l)
      fd.set_filters(["*.gif;*.png;*.jpg","*"])
      fd.show_modal(self)
      Ivib.last_icon_dir := fd.get_directory()
      if s := util_read_icon(self, fd.get_result()) then 
         self.str_img.set_image(s)
   end

   public on_file_browse()
      local fd, s, l, p
      fd := FileDialog()
      l := []
      if \cache_img.image_file then {
         p := Files.get_path(cache_img.image_file).canonical()
         put(l, p.parent().str())
         fd.set_file(p.get(-1))
      }
      put(l, \Ivib.last_icon_dir)
      l |||:= Ivib.main.prefs.cache_path
      fd.set_directories(l)
      fd.set_filters(["*.gif;*.png;*.jpg","*"])
      fd.show_modal(self)
      Ivib.last_icon_dir := fd.get_directory()
      if s := fd.get_result() then {
         self.cache_img.set_cache(s)
         cache_field.set_contents(s)
         update_grey()
      }
   end

   public on_data_browse()
      local d, s
      d := NamedImageDialog(cache_field.get_contents())
      d.show_modal(self)
      if s := d.get_result() then {
         self.cache_img.set_cache(s)
         cache_field.set_contents(s)
         update_grey()
      }
   end

   public on_file_relativize()
      local s, t
      s := cache_field.get_contents()
      every t := !Ivib.main.prefs.cache_path do {
         s ? if =t then {
            ="/"
            cache_field.set_contents(tab(0))
            on_cache_field()
            break
         }
      }
   end

   # Take an absolute path and try to make it relative to the image search
   # path.
   public make_relative(s)
      s ? if =!Ivib.main.prefs.cache_path then
         return tab(0)
      return s
   end

   public update_grey()
      if str_cb.is_checked() then
         str_panel.set_is_shaded(&no)
      else
         str_panel.set_is_shaded(&yes)

      if cache_cb.is_checked() then
         cache_panel.set_is_shaded(&no)
      else
         cache_panel.set_is_shaded(&yes)

      if cache_field.get_contents()[1] == "/" then
         relativize.set_is_shaded(&no)
      else
         relativize.set_is_shaded(&yes)
   end

   public setup()
      local p, q, b
      cast(self,PaintEdit).setup()

      p := TabItem("label=General")
      p.set_layout(GridLayout("extra=borders"))
      add_tab_at_front(p)

      max_w := CheckBox("label=Max width :")
      max_w.connect(self.on_max_w, Event.ACTION)
      p.add(max_w)
      max_w_field := TextField("size=130", "filter=",&digits, "c:eol")
      p.add(max_w_field)
      if \c.max_w then {
         max_w.set_is_checked(&yes)
         max_w_field.set_contents(c.max_w)
      } else
         max_w_field.set_is_shaded(&yes)

      max_h := CheckBox("label=Max height :")
      max_h.connect(self.on_max_h, Event.ACTION)
      p.add(max_h)
      max_h_field := TextField("size=130", "filter=",&digits, "c:eol")
      p.add(max_h_field)
      if \c.max_h then {
         max_h.set_is_checked(&yes)
         max_h_field.set_contents(c.max_h)
      } else
         max_h_field.set_is_shaded(&yes)

      scale_up := CheckBox("label=Scale up", "c:eol")
      if \c.scale_up_flag then
         scale_up.set_is_checked(&yes)
      p.add(scale_up)

      p := TabItem("label=Images")
      p.set_layout(GridLayout())
      add_tab_at_front(p)

      img_cbg := CheckBoxGroup()

      str_cb := CheckBox("label=String")
      str_cb.connect(self.update_grey, Event.ACTION)
      img_cbg.add(str_cb)
      str_panel := Component("layout=",GridLayout())
      b := Border("title=",str_cb,
                  "content=",str_panel,
                  "c:eol", "c:y_weight=0")
      str_img := Image("size=60,60")
      str_img.clear_constraints()
      str_panel.add(str_img)
      str_panel.add(TextButton("label=Browse...", "c:x_weight=1", "c:x_align=l", 
                               "e:action=",on_str_browse))
      if \c.image_str then {
         str_img.set_image(c.image_str)
         str_cb.set_is_checked(&yes)
      }
      p.add(b)

      cache_cb := CheckBox("label=Cache")
      cache_cb.connect(self.update_grey, Event.ACTION)
      img_cbg.add(cache_cb)
      cache_panel := Component("layout=",GridLayout())
      b := Border("title=",cache_cb,
                  "content=",cache_panel,
                  "c:eol", "c:y_weight=0")
      cache_img := Image("size=60,60")
      cache_img.clear_constraints()
      cache_panel.add(cache_img)
      q := Component("layout=",GridLayout("flush"), 
                     "c:eol", "c:x_weight=1", "c:x_align=l", "c:x_fill=t")
      cache_field := TextField("size=150", "c:eol", "c:w=3")
      cache_field.connect(self.on_cache_field, Event.CONTENT_CHANGED)
      q.add(cache_field)
      q.add(TextButton("label=File...", "e:action=",on_file_browse))
      relativize := TextButton("label=Relativize", "c:x_align=l", "c:x_weight=1",
                               "e:action=",on_file_relativize)
      q.add(relativize)
      q.add(TextButton("label=Data...", "e:action=",on_data_browse))
      cache_panel.add(q)
      if \c.image_cache then {
         cache_img.set_cache(c.image_cache)
         cache_field.set_contents(c.image_cache)
         cache_cb.set_is_checked(&yes)
      }
      p.add(b)

      update_grey()
   end

end



class GridPaintEdit(PaintEdit)
   public 
      res,
      input,
      output, 
      clipboard,
      ucs_cb

   public on_input(ev)
      render()
   end

   public init_dialog()
      render()
   end

   public set_vals()
      cast(self,PaintEdit).set_vals()
      c.fmt := input.get_contents_str()
   end

   public render(ev)
      output.set_spec(input.get_contents_str())
   end

   private on_ucs_cb()
      if ucs_cb.is_checked() then
         input.set_contents([u""])
      else
         input.set_contents([""])
      render()
   end

   public on_input_press(ev)
      local m, i, pm
      m := Menu()
      i := TextMenuItem("label=Save to...")
      i.connect(self.on_save_input, Event.ACTION)
      m.add(i)
      i := TextMenuItem("label=Load from...")
      i.connect(self.on_load_input, Event.ACTION)
      m.add(i)
      i := TextMenuItem("label=Insert icon...")
      i.connect(self.on_insert_icon, Event.ACTION)
      m.add(i)
      i := TextMenuItem("label=Debug")
      i.connect(self.on_debug, Event.ACTION)
      m.add(i)
      pm := PopupMenu()
      pm.popup(self, m, ev.x, ev.y)
   end

   public on_debug()
      output.d.g.print_layout()
   end

   public on_save_input()
      local d, fn
      d := FileDialog()
      d.show_modal(self)
      fn := d.get_result() | fail
      Files.string_to_file(fn, input.get_contents_str()) | 
         return alert_error(self, ["Couldn't save to " || fn, &why])
   end

   public on_load_input()
      local d, fn, s
      d := FileDialog()
      d.show_modal(self)
      fn := d.get_result() | fail
      s := Files.file_to_string(fn) | return alert_error(self, ["Couldn't load from " || fn, &why])
      input.set_contents_str(s)
   end

   public split_icon(s)
      local w, r
      w := image_width(s) | fail
      r := ""
      s ? {
         tab(upto(','))
         move(1)
         tab(upto(','))
         move(1)
         r ||:= s[1:&pos] || "\n"
         while r ||:= move(w) || "\n"
      }
      return r
   end

   public on_insert_icon(e)
      local d, s
      d := FileDialog()
      d.set_directory(\Ivib.last_icon_dir)
      d.show_modal(self)
      Ivib.last_icon_dir := d.get_directory()
      s := util_read_icon(self, d.get_result(), "c1") | fail
      s := split_icon(s)
      s := ".img\n" || s || "$\n"
      input.insert_string(s, e)
   end

   public setup()
      local p
      cast(self,PaintEdit).setup()

      p := TabItem("label=Edit")
      p.set_layout(GridLayout())
      add_tab_at_front(p)

      input := EditableTextList("c:x_weight=0", "size=250,200", "move_on_rpress=no")
      self.set_focus(input.find_focus())
      input.connect(self.on_input, Event.CONTENT_CHANGED)
      input.connect(self.on_input_press, Event.MOUSE_RIGHT_PRESS)
      input.set_contents_str(\c.fmt)

      output := ShowGridPaint("size=150,200", "c:eol")

      p.add(Split("left=",input, "right=",output, "c:eol"))

      ucs_cb := CheckBox("label=Ucs content")
      if type(c.fmt) == "ucs" then
         ucs_cb.set_is_checked(&yes)
      ucs_cb.connect(self.on_ucs_cb, Event.ACTION)
      p.add(ucs_cb)
   end
end


class ShowGridPaint(DrawScrollArea)
   public d

   public get_subject_width()
      return (\d).w | 0
   end

   public get_subject_height()
      return (\d).h | 0
   end

   public get_default_vertical_increment()
      return 10
   end

   public get_default_horizontal_increment()
      return 10
   end

   public draw(r)
      (\d).draw(view.cbwin, 
                view.x - get_area_x(), 
                view.y - get_area_y())
   end

   public finally()
      cast(self,DrawScrollArea).finally()
      (\d).finally()
   end

   public set_spec(s)
      (\d).finally()
      d := GridPaint(s)
      d.initially(self)
      d.draw_grid()
      compute_and_invalidate()
   end
end

class NamedImageDialog(Dialog)
   public 
      curr,
      lst, 
      result
   
   public setup()
      local oc
      attrib("w:label=Select image")
      set_layout(GridLayout())

      lst := TextList("size=250,300",
                      "select_mode=one",
                      "c:eol",
                      "contents=",ipl.pdco.List{key(ImageCache.names)})
      lst.object_set_selections([\curr])
      lst.set_cursor(lst.get_selections()[1])
      set_focus(lst)
      self.add(lst)
      oc := OkCancel()
      oc.listen(self)
      self.add(oc)
   end

   public init_dialog()
      lst.center_line(lst.get_selections()[1])
   end

   public on_cancel()
      self.dispose()
   end

   public on_okay()
      result := lst.object_get_selections()[1] | return alert_error(self, "No image selected")
      self.dispose()
   end

   public get_result()
      return \self.result
   end

   public new(curr)
      cast(self,Dialog).new()
      self.curr := curr
      setup()
      return
   end
end
