package util

import io(write), lang(Text), datastruct, ipl.pdco(String)

#
# Base class for an object which has headers (Message, and HTTP response
# and request objects).
#
abstract class MimeHeaders()
   public const
      headers

   #
   # Show the header table (useful debug)
   #
   public show_headers()
      local h
      every h := gen_header_entries() do {
         every write(h.key, ": ", !h.val)
      }
   end

   #
   # Generate the header keys in sorted order.
   #
   public gen_header_keys()
      suspend headers.key()
   end

   #
   # Generate a list of sorted key-entrylist header pairs.
   #
   public gen_header_entries()
      suspend headers.entries()
   end

   #
   # A convenience function to get the first header matching the given key, or fail
   #
   public get_first_header(key)
      return get_headers(key)[1]
   end

   #
   # Get all the headers for the key, or fail if the key has no headers
   # :Returns :
   # :  a list of all the headers for the key.  This will always be
   #         a non-empty list.
   # :Fails :
   # :  if no headers for the key have been defined
   #
   public get_headers(key)
      return headers.member(need_string(key))
   end

   #
   # Generate all the headers for the key, or fail if the key has no headers
   # :Generates :
   # :  all the headers for the key
   # :Fails :
   # :  if no headers for the key have been defined
   #
   public gen_headers(key)
      suspend !get_headers(key)
   end

   #
   # Get all the headers matching the given key as a string separated
   # by the given delimeter, which defaults to ","
   # :Fails :
   # :  if there is no header with the given key
   #
   public get_catenated_headers(key, delim)
      local l

      l := get_headers(key) | fail

      /delim := ","

      return String{ !l, delim }
   end

   #
   # Add a header with the given key, after any existing ones with the same key
   #
   public add_header(key, val)
      key := need_string(key)
      val := need_string(val)
      put(headers.member(key), val) | headers.insert(key, [val])
      link
   end

   #
   # Set a header with the given key; any existing headers with the same key
   # are removed.
   #
   public set_header(key, val)
      headers.insert(need_string(key), [need_string(val)])
      link
   end

   #
   # Unset the header(s) for the given key
   #
   public unset_header(key)
      headers.delete(need_string(key))
      link
   end

   #
   # Succeed iff there is a header with the given key.
   #
   public has_header(key)
      succeed headers.member(need_string(key))
   end

   public new()
      headers := SortTable(, Text.caseless_compare)
      return
   end
end
