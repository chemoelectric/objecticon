package gui

import util, graphics, io

class ImageCache()
   public static 
      imap,
      path

   private static init()
      imap := table()
      path := []
   end

   public static add_dir(d)
      d := Files.get_path(d).canonical()
      # Ensure it isn't in the list twice.
      if d.str() == (!path).str() then
         return
      push(path, d)
   end

   #
   # Get the full file path where the given window was found and loaded from.
   #
   public static get_source(w)
      return \imap[w]
   end

   #
   # Get the background to use for loading the image; for an opaque
   # jpeg this is always white, otherwise it is the user-supplied
   # background colour, or white by default
   #
   private static get_bg(s, bg)
      if /bg | (map(s[-4:0]) == ".jpg") | (map(s[-5:0]) == ".jpeg") then
         return "white"
      else
         return bg
   end

   public static get(s, bg)
      local f, w, key
      bg := get_bg(s, bg)
      every f := get_paths(s) do {
         key := bg || "#" || f
         if w := \imap[key] then
            return w
         if Files.stat(f).mode[1] == "-" then {
            w := Window.open("bg=",bg, "canvas=hidden")
            w.set_image(f) | {
               w.close()
               return error("Couldn't load image from file " || f)
            }
            insert(imap, key, w)
            insert(imap, w, f)
            return w
         }
      }
      return error("Couldn't find on path:" || s)
   end

   public static delete(s, bg)
      local f, w, key
      bg := get_bg(s, bg)
      every f := get_paths(s) do {
         key := bg || "#" || f
         if w := \imap[key] then {
            w.close()
            default.delete(imap, key)
            default.delete(imap, w)
            return
         }
      }
   end

   public static get_paths(s)
      local p
      p := Files.get_path(s)
      if p.is_absolute() then
         return p.canonical().str()
      suspend (!path).append(p).str()
   end
   
   final private new()
   end
end

