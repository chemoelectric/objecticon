package gui

import ipl.strings, lang, util

# This type gives, for each displayed suggestion, the label to display
# in the popup and the string to set in the field on selection, and
# the cursor position to go to.
#
class CompleteElement(Conversion)
   public const
      label

   public override new(label, str, pos)
      self.label := need_text(label)
      Conversion.new(str, pos)
      return
   end
end

# A useful sort comparator for `CompleteElement` instances.
#
procedure cmp_CompleteElement(x, y)
   return Text.consistent_compare(x.label, y.label)
end

# This class is a `TextField` which provides suggested insertion text when
# tab is pressed.
#
# `do_request` should return a list of `CompleteElement` records.
#
abstract class CompleteField(SuggestField)
   private static label_field(x)
      return x.label
   end

   public override create_popup()
      return ItemPaintList().
         set_item_paint(MapItemPaint(TextItemPaint(), label_field)).
         set_item_border(EmptyBorder().
                             set_insets(Gui.TEXT_INSET, Gui.TEXT_INSET, 0, 0).
                             set_x_align(Align.L))
   end

   public override convert_element(o)
      return o
   end

   public override get_insertion(l)
      local e, t, s
      t := []
      every e := !l do {
         (contents[1:cursor] == e.str[1:cursor] &
          contents[cursor:0] == e.str[e.pos:0]) | fail
         put(t, e.str[cursor:e.pos])
      }
      if s := ("" ~== coprefix(t)) then
         return Conversion(contents[1:cursor] || s || contents[cursor:0], cursor + *s)
   end

   public override new()
      SuggestField.new()
      set_popup_on_tab(&yes)
      return
   end
end
