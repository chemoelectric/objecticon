import io, ipl.test, ipl.tables

#  test of random selection

record r10(a,b,c,d,e,f,g,h,i,j)
global L, S, T, R, C, A, B

procedure main()
   local r, i

   R := r10(1,2,3,4,5,6,7,8,9,10)
   L := []
   T := table()
   every i := 1 to 100 do {
      put(L, i)
      T[i] := -i
   }
   S := set!L
   C := 'aeiou\uabcd'
   A := "aeiou"
   B := u"aeiou\uabcd\U10abffx"

   seed := 0
   rtest()
   r := seed

   rtest()

   seed := 0
   rtest()

   seed := r
   rtest()

   seed := 11213
   rtest()

   misc()
end

procedure rtest()
   write()
   write(right(seed,10), "  i  ", rand(9999))
   write(right(seed,10), "  i  ", rand(9999))
   write(right(seed,10), "  r  ", integer(10000 * rand(0)))
   write(right(seed,10), "  r  ", integer(10000 * rand(0)))
   write(right(seed,10), "  s  ", rand("abcdefghijklmnopqrstuvwxyz"))
   write(right(seed,10), "  s  ", rand("ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
   write(right(seed,10), "  c  ", rand(&lcase))
   write(right(seed,10), "  c  ", rand(&ucase))
   write(right(seed,10), "  L  ", rand(L))
   write(right(seed,10), "  L  ", rand(L))
   write(right(seed,10), "  R  ", rand(R))
   write(right(seed,10), "  R  ", rand(R))
   write(right(seed,10), "  S  ", rand(S))
   write(right(seed,10), "  S  ", rand(S))
   write(right(seed,10), "  T  ", rand(T))
   write(right(seed,10), "  T  ", rand(T))
   write(right(seed,10), "  A  ", rand(A))
   write(right(seed,10), "  A  ", rand(A))
   write(right(seed,10), "  B  ", rand(B))
   write(right(seed,10), "  B  ", rand(B))
   write(right(seed,10), "  C  ", rand(C))
   write(right(seed,10), "  C  ", rand(C))
end

procedure misc()
   local v

   write()
   yes_no{ "max 63 bit random < 1", 1.0842021724855e-19 * (2^63-1) < 1.0 }
   yes_no{ "max 31 bit random < 1", 4.656612873e-10 * (2^31-1) < 1.0 }

   v := valset(T)
   every 1 to 150 do {
      1 <= ?10 <= 10 | stop("Random ?10 out of range")
      0 <= ?0 < 1.0 | stop("Random ?0 out of range")
      member(S, ?S) | stop("?S not member")
      member(v, ?T) | stop("?T not value")
      keyof(L, ?L) | stop("?L not element")
      keyof(R, ?R) | stop("?R not element")
      any(C, ?C) | stop("?C not in cset")
      find(?A, A) | stop("?A not in string")
      find(?B, B) | stop("?B not in ucs")
   }
   write("Misc test OK")

   return
end
