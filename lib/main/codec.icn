package lang

import io, util, exception

$define PUBLIC_STATIC_METHOD ior(Class.Public, Class.Static, Class.Method)

class Codec()
   public static const 
      OBJECT_CODE,
      CLASS_CODE,
      CAST_CODE,
      METHP_CODE,
      RECORD_CODE,
      CONSTRUCTOR_CODE,
      PROCEDURE_CODE,
      NULL_CODE,
      STRING_CODE,
      CSET_CODE,
      INTEGER_CODE,
      REAL_CODE,
      LIST_CODE,
      SET_CODE,
      TABLE_CODE,
      REF_CODE,
      UCS_CODE,
      FAST_FLAG,
      CODE_SEPARATOR

   private static init()
      CODE_SEPARATOR := "|"
      OBJECT_CODE := "C"
      CLASS_CODE := "D"
      CAST_CODE := "G"
      METHP_CODE := "H"
      RECORD_CODE := "R"
      CONSTRUCTOR_CODE := "K"
      PROCEDURE_CODE := "P"
      NULL_CODE := "N"
      STRING_CODE := "S"
      CSET_CODE := "A"
      INTEGER_CODE := "I"
      REAL_CODE := "B"
      LIST_CODE := "L"
      SET_CODE := "E"
      TABLE_CODE := "T"
      UCS_CODE := "U"
      REF_CODE := "X"
      FAST_FLAG := "F"
   end
end

#
# Return a string, being the encoded representation of the given object.
# @param o the object to encode
# @param fast a flag - see {Encode.set_fast} below.
#
procedure encode(o, fast)
   local e, f
   return use {
      f := RamStream(),
      {
         e := Encode(f).set_fast(fast)
         if e.begin(o) then
            f.str()
      }
   }
end

#
# Recreate an object from the encoded string.
#
procedure decode(s)
   local d
   d := Decode()
   return d.parse(s)
end

class Encode(Stream)
   private
      tag_count,
      seen, 
      file
   private readable
      fast_flag

   #
   # Reset everything and output a new object.
   #
   public begin(o)
      self.tag_count := 0
      return use{
         self.seen := table(),
         simple_try{begin1(o)},
         self.seen := &null
      }
   end

   private begin1(o)
      if \fast_flag then
         writes(Codec.FAST_FLAG)
      encode(o)      
   end

   private note_seen(o)
      seen[o] := (tag_count +:= 1)
   end

   public out(s)
      return file.out(s) | throw(&why)
   end

   public get_mode()
      return WRITE
   end

   public close()
      if \close_underlying_flag then
         file.close() | fail
      return
   end

   private encode_string(s)
      local r
      static printable
      initial {
         printable := '\x20-\x7e' -- '\\' -- Codec.CODE_SEPARATOR
      }
      r := ""
      s ? {
         repeat {
            r ||:= tab(many(printable))
            if pos(0) then
               return r
            # This MUST be done in two steps to take advantage of
            # catenation optimisation - very slow otherwise!
            r ||:= "\\"
            r ||:= right(ord(move(1)), 3, "0")
         }
      }	 
   end

   # Get a code for a procedure value; the first char is "F" for a
   # builtin function like upto, "K" for a keyword function, "1","2"
   # or "3" for a builtin operator like "+" or "||", "P" for a
   # procedure and "M" for a (static) method.
   #
   private get_proc_code(f)
      local s, j
      image(f) ? {
         s := case tab(upto(' ')) of {
            "function": "F"
            "keyword": "K"
            "operator": string(Proc.get_n_arguments(f))
            "procedure": "P"
            "method": {
               j := Class.get_field_flags(Proc.get_defining_class(f), Proc.get_field_name(f))
               iand(j, PUBLIC_STATIC_METHOD) = PUBLIC_STATIC_METHOD |
                  throw("Can only encode a public static method")
               "M"
            }
            "deferred": throw("Can't encode a deferred method")
            "internal": throw("Can't encode an internal procedure")
            default: syserr("Not a proc")
         }
         move(1)
         return s || tab(0)
      }
   end

   public encode(o)
      local ty, i, cname, p, n, e, l

      if i := \seen[o] then {
         writes(Codec.REF_CODE)
         writes(i)
         return
      }

      ty := type(o)
      case ty of {
         "object" : {
            writes(Codec.OBJECT_CODE)
            cname := Class.get_name(o)
            line_out(cname)
            note_seen(o)
            if p := Class.getq(o, "object_encode") then
               p(self)
            else {
               n := Class.get_n_instance_fields(o)
               if \fast_flag then {
                  writes(n)
                  every e := Class.get(o, 1 to n) do
                     encode(e)
               } else {
                  encode(n)
                  every i := 1 to n do {
                     encode(Class.get_field_name(o, i))
                     encode(Class.get(o, i))
                  }
               }
            }
         }

         "class": {
            writes(Codec.CLASS_CODE)
            line_out(Class.get_name(o))
         }

         "cast": {
            writes(Codec.CAST_CODE)
            encode(Class.get_cast_object(o))
            encode(Class.get_cast_class(o))
         }

         "procedure" : {
            writes(Codec.PROCEDURE_CODE)
            # Need to encode string since can have eg binary operator "||"
            line_out(encode_string(get_proc_code(o)))
         }

         "constructor" : {
            writes(Codec.CONSTRUCTOR_CODE)
            line_out(Constructor.get_name(o))
         }

         "null" :
            writes(Codec.NULL_CODE)

         "string" : {
            writes(Codec.STRING_CODE)
            line_out(encode_string(o))
         }

         "ucs": {
            writes(Codec.UCS_CODE)
            line_out(encode_string(string(o)))
         }

         "cset" : {
            writes(Codec.CSET_CODE)
            l := []
            every put(l, Text.get_ord_range(o))
            writes(*l)
            every e := !l do
               encode(e)
         }

         "integer" : {
            writes(Codec.INTEGER_CODE)
            writes(string(o))
         }

         "real" : {
            writes(Codec.REAL_CODE)
            line_out(string(o))
         }

         "record" : {
            writes(Codec.RECORD_CODE)
            line_out(Constructor.get_name(o))
            note_seen(o)
            writes(*o)
            if \fast_flag then {
               every e := !o do
                  encode(e)
            } else {
               every i := 1 to *o do {
                  encode(Constructor.get_field_name(o, i))
                  encode(o[i])
               }
            }
         }

         "list" : {
            writes(Codec.LIST_CODE)
            writes(*o)
            note_seen(o)
            every e := !o do
               encode(e)
         }

         "set" : {
            writes(Codec.SET_CODE)
            writes(*o)
            note_seen(o)
            every e := !o do
               encode(e)
         }

         "table" : {
            writes(Codec.TABLE_CODE)
            writes(*o)
            encode(o[[]])
            note_seen(o)
            every e := keyval(o) do
               encode(e)
         }

         default : 
            throw("Type not encodable: " || ty)
      }
      return
   end

   private line_out(s)
      return writes(s, Codec.CODE_SEPARATOR)
   end

   #
   # Indicate whether the output should be in "fast" mode; that is
   # indicate to any custom object encoders that there is no
   # requirement to make the output robust against underlying
   # structure changes to objects.
   #
   public set_fast(s)
      self.fast_flag := check_flag(s)
      return self
   end

   public new(file)
      /file := FileStream.stdout
      self.file := file
      file.can(Stream.WRITE) | runerr("Encode: stream not writable: ", file)
      return
   end
end

#
# This class is used to decode a string created by the encode process, and
# reproduce the object.
#
class Decode()
   private
      tag_count,
      seen
   private readable
      fast_flag

   #
   # Reset everything and parse a new object from s
   #
   public parse(s)
      self.tag_count := 0
      s ? {
         self.fast_flag := if =Codec.FAST_FLAG then 1 else &null
         return use {
            self.seen := table(),
            simple_try{decode()},
            self.seen := &null
         }
      }
   end

   private decode_string(s)
      local r
      static esc
      initial
         esc := ~'\\'
      r := ""
      s ? {
         repeat {
            r ||:= tab(many(esc))
            if pos(0) then
               return r
            move(1)
            r ||:= char(move(3))
         }
      }
   end

   private decode_proc_code(fn)
      local c, s, i, j, cl, g
      fn ? {
         c := move(1)
         s := tab(0)
         case c of {
            "F": return Prog.get_function(s) | throw("No such function " || s)
            "K": return Prog.get_keyword(s) | throw("No such keyword " || s)
            !"123": return Prog.get_operator(s, c) | throw("No such function " || s || " arity " || c)
            "P": {
               if g := Prog.get_global(s) &
                  match("procedure ", image(g)) then
                  return g
               throw("No such procedure " || s)
            }
            "M": {
               every i := find(".", s)
               if cl := Class.for_name(s[1:i]) &
                  j := Class.get_field_flags(cl, s[i+1:0]) &
                  iand(j, PUBLIC_STATIC_METHOD) = PUBLIC_STATIC_METHOD 
               then
                  return Class.get(cl, s[i+1:0]) 
               throw("No such public static method " || s)
            }
            default: throw("Unknown proc code")
         }
      }
   end

   private line_in()
      local s
      if s := tab(upto(Codec.CODE_SEPARATOR)) then {
         move(1)
         return s
      }
      throw("missing separator")
   end

   private int_in()
      return integer(tab(many(&digits ++ '\-'))) | throw("int expected")
   end

   private char_in()
      return move(1) | throw("char expected")
   end

   private note_seen(o)
      seen[tag_count +:= 1] := o
   end

   public decode()
      local i, n, rname, t, res, def, con, cl, p, cname, l, v

      t := char_in()

      case t of {
         Codec.REF_CODE : {
            i := int_in()
            return \seen[i]
         }

         Codec.NULL_CODE :
            return

         Codec.CLASS_CODE : {
            cname := line_in()
            return Class.for_name(cname) | throw("No such class " || cname)
         }

         Codec.CONSTRUCTOR_CODE : {
            rname := line_in()
            return Constructor.for_name(rname) | throw("No such constructor " || rname)
         }

         Codec.PROCEDURE_CODE : {
            t := decode_string(line_in())
            return decode_proc_code(t)
         }

         Codec.OBJECT_CODE : {
            cname := line_in()
            #
            # Create an instance
            #
            cl := Class.for_name(cname) | throw("No such class " || cname)
            res := Class.create_raw(cl)
            note_seen(res)
            if p := Class.getq(res, "object_decode") then
               p(self)
            else {
               if \fast_flag then {
                  n := int_in()
                  n = Class.get_n_instance_fields(res) | 
                     throw("Inconsistent number of fields in " || image(res))
                  every i := 1 to n do
                     Class.get(res, i) := decode()
               } else {
                  n := integer(decode())
                  every 1 to n do {
                     (t := decode() &
                      v := decode())
                     Class.getq(res, t) := v
                  }
               }
            }
            Class.complete_raw(res)
            return res
         }

         Codec.STRING_CODE :
            return decode_string(line_in())

         Codec.INTEGER_CODE :
            return int_in()

         Codec.REAL_CODE :
            return real(line_in())

         Codec.CSET_CODE : {
             n := int_in()
             l := []
             every 1 to n do 
                put(l, decode())
             return Text.create_cset(l)
          }

         Codec.UCS_CODE :
            return ucs(decode_string(line_in()))

         Codec.RECORD_CODE : {
            rname := line_in()
            con := Constructor.for_name(rname) | throw("No such constructor " || rname)
            res := con() 
            note_seen(res)
            n := int_in()
            if \fast_flag then {
               n = *res | throw("Inconsistent number of fields in " || image(res))
               every i := 1 to n do
                  res[i] := decode()
            } else {
               every 1 to n do {
                  (t := decode() &
                   v := decode())
                  res[t] := v
               }
            }
            return res
         }

         Codec.LIST_CODE : {
            n := int_in()
            res := []
            note_seen(res)
            every 1 to n do 
               put(res, decode())
            return res
         }

         Codec.SET_CODE : {
            n := int_in()
            res := set()
            note_seen(res)
            every 1 to n do 
               insert(res, decode())
            return res
         }

         Codec.TABLE_CODE : {
            n := int_in()
            def := decode()
            res := table(def)
            note_seen(res)
            every 1 to n do
               insert(res, decode(), decode())
            return res
         }            

         Codec.CAST_CODE : {
            t := decode()
            cl := decode()
            is(t, cl) | throw("Cast to " || image(cl) || " from " || image(t) || " not valid")
            return cast(t, cl)
         }

         default :
            throw("Unknown type code:" || image(t))
      }            
   end
end
