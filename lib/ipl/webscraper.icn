#
# $Id$
#

package ipl.webscraper

import xml, util, ipl.scan, io, ipl.pdco, lang

package record AnchorString(str, path)
package record AnchorTag(name, attrs, path)

package record AnchorStringCmd(str)
package record AnchorTagCmd(name, attrs)
package record UpCmd(n)
package record RootCmd()
package record TagCmd(n, name)
package record StringCmd(n)

#
# A class to help with web scraping.  In particular, it provides a way
# to help lookup particular elements (tags) in a web page, which has a
# known element structure.  Having found a desired element, then the
# client program can extract the desired data.
#
# The class works by taking a sample web page which has the same
# structure as the web pages we will subsequently be scraping data
# from.  This sample page is called the template, and is like an
# ordinary webpage, but contains special directives which mark the
# particular points in the document we wish to locate in the pages we
# will be scraping data from.
#
# There are two types of special directives.  The first is the "scrape
# id".  This can either point to a tag, in which case it takes the
# form of an attribute :-
# ~
#    <table scrapeid="spellingtable">
# ~
# or it can be placed at the start of text content :-
# ~
#    <a href="/news/special_reports" class="navigation-wide-list__link">
#        <span>$scrapeid=title$Special Reports</span>
#    </a>
# ~
#
# The second type of directive is an "anchor".  The idea is that some
# unique, non-changing text content is chosen, near to a scrape id
# location.  This is then marked as an "anchor", and the scrape id is
# made to refer to the anchor.  The scrape id will then be searched
# for by first searching for the anchor text, and then by following
# the relative path to the scrape location.  This relative path will
# hopefully be less prone to change than the path from the scrape to
# the root element, which must be used if there is no anchor for the
# scrape.
#
# An example of an anchor and scrape used together is :-
# ~
#    <table scrapeid="pp:pastparticiple" border="0">
#       <tr><td align="center">$anchorid=pp$Past participle</td></tr>
#       <tr><td class="colVerbDef">gemacht&nbsp;</td></tr>
#    </table>
# ~
#
# Here the anchor id is "pp", and the anchor text is "Past
# participle".  The scrapeid is "pastparticiple", and the link to the
# anchor is indicated by prefixing this with "pp:".  Now, so long as
# this relative structure doesn't change, and future documents still
# contain the "Past participle" text in the same place, the scrape
# will still successfully retrieve the desired element.
#
# An anchor can also refer to an element, rather than text :-
# ~
#   <div anchorid="a2" class="definition-block def-text">
# ~
# Now a reference to this anchor will cause a search for the first
# element with the same tag name and attributes in the target
# document.
#
# A `WebScraper' instance is created by passing the text data
# containing the template document.  This can either be loaded from a
# file, or included using a `$load` directive, if it is not too
# unwieldy.
#
# Once created, subject web pages can be searched using the `lookup`
# method.  This takes a parsed document and a scrape id and returns
# the element in the document which corresponds to the scrape id in
# the template.
#
class WebScraper()
   private
      paths,
      debug_flag

   #
   # Generate the lookup scrape ids this webscraper can search for
   #
   public get_ids()
      suspend key(paths)
   end

   #
   # Turn on debugging info
   #
   public set_debug(s)
      self.debug_flag := check_flag(s)
      return self
   end

   #
   # Create a new instance using the given template.
   # :Parameters :
   # :  `data` - the template, either string or ucs.
   #
   public new(data)
      local d, n, s, i, anchors, ak, sk

      d := HtmlParser().parse(data)

      ak := same_type(u"ANCHORID", data)
      sk := same_type(u"SCRAPEID", data)

      anchors := create_anchors(d, ak, sk) | fail

      paths := table()

      every n := Seq{d.traverse_nodes_preorder()} do {
         if is(n, Element) & s := n.get_attribute(sk) then {
            do_insert(s, n, anchors) | fail
         }
         i := 0
         every s := text(!n.children) do {
            i +:= 1
            s ? if tab(caseless_match(u"$scrapeid=")) then {
               s := tab(upto('$')) | return error("Unclosed scrapeid")
               do_insert(s, n, anchors, i) | fail
            }
         }
      }

      return
   end

   private do_insert(s, n, anchors, si)
      local a, anchor, id
      s ? {
         if a := tab(upto(':')) then {
            move(1)
            anchor := member(anchors, a) | return error("Unknown anchor: " || a)
         }
         id := tab(0)
      }
      insert(paths, id, create_path(n, anchor, si))

      return self
   end

   private static create_anchors(d, ak, sk)
      local n, s, id, str, res, t

      res := table()
      every n := Seq{d.traverse_nodes_preorder()} do {
         if is(n, Element) & id := n.get_attribute(ak) then {
            t := copy(n.attributes)
            # Delete any special template attributes
            every delete(t, ak | sk)
            insert(res, id, AnchorTag(n.name, t, path_to_root(n)))
         }
         every s := text(!n.children) do {
            s ? if tab(caseless_match(u"$anchorid=")) then {
               id := tab(upto('$')) | return error("Unclosed anchor id")
               move(1)
               str := tab(0)
               insert(res, id, AnchorString(str, path_to_root(n)))
            }
         }
      }

      return res
   end

   private static create_path(n, anchor, si)
      local p1, p2, res, el

      res := []
      p1 := path_to_root(n)

      if \anchor then {
         p2 := copy(anchor.path)
         while p1[1] === p2[1] do {
            pop(p1)
            pop(p2)
         }

         if is(anchor, AnchorString) then
            put(res, AnchorStringCmd(anchor.str))
         else
            put(res, AnchorTagCmd(anchor.name, anchor.attrs))

         put(res, UpCmd(0 < *p2))
      } else {
         put(res, RootCmd())
         pop(p1)
      }

      every el := !p1 do
         put(res, TagCmd(get_tag_index(el), el.name))

      if \si then
         put(res, StringCmd(si))

      return res
   end

   private static get_tag_index(n)
      local i, e
      i := 0
      every e := !n.parent.children do {
         if not(text(e)) & is(e, Element) & e.name == n.name then
            i +:= 1
         if e === n then
            return i
      }
      syserr("Couldn't find child in parent!")
   end

   private static path_to_root(n)
      local l
      l := []
      repeat {
         push(l, n)
         n := n.parent 
         is(n, Element) | return l
      }
   end

   private find_anchor_tag(d, name, attrs)
      local n
      every n := d.get_root_element().search_tree(name) do {
         if equals(attrs, n.attributes) then
            return n
      }
   end

   #
   # Lookup the given scrape id in the given `HtmlDocument`.  Either
   # an `HTMLElement` or text is returned, depending on whether the
   # scrape directive was a tag attribute, or part of a text content
   # in the template.
   #
   # :Parameters :
   # :  `d` - An `HtmlDocument`.
   # :  `id` - The particular scrape id, corresponding to one of the
   #           ids in the template.
   public lookup(d, id)
      local l, n, e

      # The string type of the template and subject must match for AnchorTagCmd to work
      # properly (equals on two attribute tables).
      type(d.get_root_element().name) == type(key(paths)\1) | runerr("WebScraper string type mismatch between template and subject")

      l := member(paths, id) | return error("Unknown id:" || id)

      every e := !l do {
         if \debug_flag then
            ewrite("Command: ", to_string(e))

         case classof(e) of {
            RootCmd : {
               n := d.get_root_element()
            }
            AnchorStringCmd : {
               n := d.find_string(e.str) | return error("While looking up " || 
                                                        id || ": Couldn't find anchor string: " || e.str)
            }
            AnchorTagCmd : {
               n := find_anchor_tag(d, e.name, e.attrs) | return error("While looking up " || 
                                                                       id || ": Couldn't find anchor tag: " || e.name || " and " || *e.attrs || " attrs")
            }
            UpCmd : {
               every 1 to e.n do {
                  n := n.parent
                  is(n, Element) | return error("While looking up " || 
                                                id || ":  Couldn't go up " || e.n || " levels")
               }
            }
            TagCmd : {
               n := n.get_nth_element(e.n, e.name) | return error("While looking up " || 
                                                                  id || ": Tag " || e.name || " not found, n=" || e.n || ".")
            }
            StringCmd : {
               n := n.get_nth_string(e.n) | return error("While looking up " || 
                                                         id || ": String at " || e.n || " not found.")
            }
            default : syserr("Unknown command")
         }

         if \debug_flag then {
            if is(n, Element) then
               ewrite("OK: Now at ", n.name, " ", to_string(n.attributes))
            else
               ewrite("OK: Now at ", image(n))
         }
      }
      return n
   end

   #
   # Return an instance with template in the given file.
   # :Parameters :
   # :  `fn` - the filename.
   #
   public static from_file(fn)
      return WebScraper(Files.file_to_string(fn))
   end
 
   # Return an instance with template in the given file, which is
   # first converted to a ucs string.
   # :Parameters :
   # :  `fn` - the filename.
   #
   public static from_ucs_file(fn)
      local s
      s := Files.file_to_string(fn) | fail
      s := ucs(s) | return error("File not UTF-8")
      return WebScraper(s)
   end
end

