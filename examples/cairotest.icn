import
   gui, cairo, util, io

$load ROMEDALEN "romedalen.png"

class CairoDisplay(Component)
   public override display()
      local c
      use { c := Context(cbwin), cairo_display(c) }
   end

   private cairo_display(o)
      o.translate(x, y).scale(Gui.SCALE, Gui.SCALE)
      case parent_dialog.selector.get_selection() of {
         1: arc_example(o)
         2: arc_negative_example(o)
         3: clip_example(o)
         4: clip_image_example(o)
         5: curve_rectangle_example(o)
         6: curve_to_example(o)
         7: dash_example(o)
         8: fill_and_stroke_example(o)
         9: fill_style_example(o)
         10: gradient_example(o)
         11: image_example(o)
         12: imagepattern_example(o)
         13: multi_segment_caps_example(o)
         14: rounded_rectangle_example(o)
         15: set_line_cap_example(o)
         16: set_line_join_example(o)
         17: text_example(o)
         18: text_align_center_example(o)
         19: text_extents_example(o)
         20: group_example(o)
         21: mesh_example(o)
      }
   end

   private mesh_example(o)
      local m
      m := MeshPattern()

      # Add a Coons patch
      m.begin_patch ()
      m.move_to (0, 0)
      m.curve_to (30, -30,  60,  30, 100, 0)
      m.curve_to (60,  30, 130,  60, 100, 100)
      m.curve_to (60,  70,  30, 130,   0, 100)
      m.curve_to (30,  70, -30,  30,   0, 0)
      m.set_corner_color (0, "red")
      m.set_corner_color (1, "green")
      m.set_corner_color (2, "blue")
      m.set_corner_color (3, "yellow")
      m.end_patch ()

      # Add a Gouraud-shaded triangle
      m.begin_patch ()
      m.move_to (100, 100)
      m.line_to (130, 130)
      m.line_to (130,  70)
      m.set_corner_color (0, "red")
      m.set_corner_color (1, "green")
      m.set_corner_color (2, "blue")
      m.end_patch ()

      o.rectangle(10, 10, 200, 200)
      o.stroke_preserve()
      o.set_source(m)
      o.fill()
      m.close()
   end

   private group_example(o)
      o.push_group()
      arc_example(o)
      o.pop_group_to_source()
      o.paint_with_alpha(0.25)
   end

   private arc_example(o)
      local xc, yc, radius, angle1, angle2
      xc := 128.0; yc := 128.0; radius := 100.0
      angle1 := 45.0  * (Math.PI/180.0); angle2 := 180.0 * (Math.PI/180.0)
      o.set_line_width (10.0)
      o.arc (xc, yc, radius, angle1, angle2)
      o.stroke()
      o.set_fg("1.0,0.2,0.2,0.6")
      o.set_line_width (6.0)
      o.arc(xc, yc, 10.0, 0, 2*Math.PI)
      o.fill()
      o.arc (xc, yc, radius, angle1, angle1)
      o.line_to (xc, yc)
      o.arc (xc, yc, radius, angle2, angle2)
      o.line_to (xc, yc)
      o.stroke ()
   end

   private arc_negative_example(o)
      local xc, yc, radius, angle1, angle2
      xc := 128.0; yc := 128.0; radius := 100.0
      angle1 := 45.0  * (Math.PI/180.0); angle2 := 180.0 * (Math.PI/180.0)
      o.set_line_width (10.0)
      o.arc_negative (xc, yc, radius, angle1, angle2)
      o.stroke()
      o.set_fg("1.0,0.2,0.2,0.6")
      o.set_line_width (6.0)
      o.arc(xc, yc, 10.0, 0, 2*Math.PI)
      o.fill()
      o.arc (xc, yc, radius, angle1, angle1)
      o.line_to (xc, yc)
      o.arc (xc, yc, radius, angle2, angle2)
      o.line_to (xc, yc)
      o.stroke ()
   end

   private clip_example(o)
      o.arc ( 128.0, 128.0, 76.8, 0, 2 * Math.PI)
      o.clip ()
      o.new_path ()
      o.rectangle ( 0, 0, 256, 256)
      o.fill ()
      o.set_fg("green")
      o.move_to ( 0, 0)
      o.line_to ( 256, 256)
      o.move_to ( 256, 0)
      o.line_to ( 0, 256)
      o.set_line_width ( 10.0)
      o.stroke ()
   end

   private clip_image_example(o)
      local w
      o.arc ( 128.0, 128.0, 76.8, 0, 2 * Math.PI)
      o.clip ()
      o.new_path ()
      w := ImageCache.get("ROMEDALEN")
      o.scale (256.0 / w.get_width(), 256.0 / w.get_height())
      o.set_source(w)
      o.paint()
   end

   private curve_rectangle_example(o)
      local x0, y0, x1, y1, rect_width, rect_height, radius

      x0 := 25.6
      y0 := 25.6
      rect_width  := 204.8
      rect_height := 204.8
      radius := 102.4

      x1 := x0+rect_width
      y1 := y0+rect_height

      o.move_to  ( x0, y0 + radius)
      o.curve_to ( x0 , y0, x0 , y0, x0 + radius, y0)
      o.line_to ( x1 - radius, y0)
      o.curve_to ( x1, y0, x1, y0, x1, y0 + radius)
      o.line_to ( x1 , y1 - radius)
      o.curve_to ( x1, y1, x1, y1, x1 - radius, y1)
      o.line_to ( x0 + radius, y1)
      o.curve_to ( x0, y1, x0, y1, x0, y1- radius)

      o.close_path ()

      o.set_fg( "0.5,0.5,1")
      o.fill_preserve ()
      o.set_fg ( "0.5,0,0,0.5")
      o.set_line_width ( 10.0)
      o.stroke ()

   end

   private curve_to_example(o)
      local x, y, x1, y1, x2, y2, x3, y3
      x := 25.6;  y := 128.0
      x1 := 102.4; y1 := 230.4
      x2 := 153.6; y2 := 25.6
      x3 := 230.4; y3 := 128.0

      o.move_to ( x, y)
      o.curve_to ( x1, y1, x2, y2, x3, y3)

      o.set_line_width ( 10.0)
      o.stroke ()

      o.set_fg ( "1, 0.2, 0.2, 0.6")
      o.set_line_width ( 6.0)
      o.move_to (x,y);   o.line_to (x1,y1)
      o.move_to (x2,y2); o.line_to (x3,y3)
      o.stroke ()
   end

   private dash_example(o)
      o.set_dash(-50.0, 50.0, 10.0, 10.0, 10.0)
      o.set_line_width(10)
      o.move_to ( 128.0, 25.6)
      o.line_to ( 230.4, 230.4)
      o.rel_line_to ( -102.4, 0.0)
      o.curve_to ( 51.2, 230.4, 51.2, 128.0, 128.0, 128.0)
      o.stroke ()
   end

   private fill_and_stroke_example(o)
      o.move_to ( 128.0, 25.6)
      o.line_to ( 230.4, 230.4)
      o.rel_line_to ( -102.4, 0.0)
      o.curve_to ( 51.2, 230.4, 51.2, 128.0, 128.0, 128.0)
      o.close_path ()

      o.move_to ( 64.0, 25.6)
      o.rel_line_to ( 51.2, 51.2)
      o.rel_line_to ( -51.2, 51.2)
      o.rel_line_to ( -51.2, -51.2)
      o.close_path ()

      o.set_line_width ( 10.0)
      o.set_fg ( "0, 0, 1.0")
      o.fill_preserve ()
      o.set_fg ( "0, 0, 0")
      o.stroke ()
   end

   private fill_style_example(o)
      o.set_line_width ( 6)

      o.rectangle ( 12, 12, 232, 70)
      o.new_sub_path () 
      o.arc ( 64, 64, 40, 0, 2*Math.PI)
      o.new_sub_path () 
      o.arc_negative ( 192, 64, 40, 0, -2*Math.PI)

      o.set_fill_rule ( "even-odd")
      o.set_fg ( "0, 0.7, 0") 
      o.fill_preserve ()
      o.set_fg ( "0, 0, 0") 
      o.stroke ()

      o.translate ( 0, 128)
      o.rectangle ( 12, 12, 232, 70)
      o.new_sub_path ()
      o.arc ( 64, 64, 40, 0, 2*Math.PI)
      o.new_sub_path ()
      o.arc_negative ( 192, 64, 40, 0, -2*Math.PI)

      o.set_fill_rule ( "winding")
      o.set_fg ( "0, 0, 0.9") 
      o.fill_preserve ()
      o.set_fg( "0, 0, 0") 
      o.stroke ()
   end

   private gradient_example(o)
      local pat
      pat := LinearGradient(0.0, 0.0,  0.0, 256.0).
         add_color_stop(1.0, "black").
         add_color_stop(0.0, "white")
      o.rectangle(0, 0, 256, 256)
      o.set_source(pat)
      o.fill()
      pat.close()

      pat := RadialGradient(115.2, 102.4, 25.6, 102.4,  102.4, 128.0).
               add_color_stop(0.0, "white").
               add_color_stop(1.0, "black")
      o.set_source(pat)
      o.arc (128, 128, 76.8, 0, 2 * Math.PI)
      o.fill()
      pat.close()
   end

   private image_example(o)
      local w
      w := ImageCache.get("ROMEDALEN")
      o.translate (128.0, 128.0)
      o.rotate ( 45* Math.PI/180)
      o.scale (256.0 / w.get_width(), 256.0 / w.get_height())
      o.translate (-0.5*w.get_width(), -0.5*w.get_height())
      o.set_source(w)
      o.paint ()
   end

   private imagepattern_example(o)
      local w, pat, matrix
      w := ImageCache.get("ROMEDALEN")
      pat := Pattern.to_pattern(w).set_extend("repeat")

      o.translate ( 128.0, 128.0)
      o.rotate ( Math.PI / 4)
      o.scale ( 1 / Math.sqrt (2), 1 / Math.sqrt (2))
      o.translate ( -128.0, -128.0)

      matrix := Matrix.from_scale (w.get_width()/256.0 * 5.0, w.get_height()/256.0 * 5.0)
      pat.set_matrix (matrix)

      o.set_source ( pat)

      o.rectangle ( 0, 0, 256.0, 256.0)
      o.fill ()

      pat.close()
   end

   private multi_segment_caps_example(o)
      o.move_to ( 50.0, 75.0)
      o.line_to ( 200.0, 75.0)

      o.move_to ( 50.0, 125.0)
      o.line_to ( 200.0, 125.0)

      o.move_to ( 50.0, 175.0)
      o.line_to ( 200.0, 175.0)

      o.set_line_width ( 30.0)
      o.set_line_cap ("round")
      o.stroke ()
   end

   private rounded_rectangle_example(o)
      local x, y, width, height, aspect, corner_radius, 
         radius, degrees

      x  := 25.6
      y := 25.6
      width := 204.8
      height := 204.8
      aspect := 1.0
      corner_radius := height / 10.0

      radius := corner_radius / aspect
      degrees  := Math.PI / 180.0

      o.new_sub_path ()
      o.arc ( x + width - radius, y + radius, radius, -90 * degrees, 0 * degrees)
      o.arc ( x + width - radius, y + height - radius, radius, 0 * degrees, 90 * degrees)
      o.arc ( x + radius, y + height - radius, radius, 90 * degrees, 180 * degrees)
      o.arc ( x + radius, y + radius, radius, 180 * degrees, 270 * degrees)
      o.close_path ()

      o.set_fg ( "0.5, 0.5, 1")
      o.fill_preserve ()
      o.set_fg ( "0.5, 0, 0, 0.5")
      o.set_line_width ( 10.0)
      o.stroke ()
   end

   private set_line_cap_example(o)
      o.set_line_width ( 30.0)
      o.set_line_cap  ( "butt")
      o.move_to ( 64.0, 50.0) 
      o.line_to ( 64.0, 200.0)
      o.stroke ()
      o.set_line_cap  ( "round")
      o.move_to ( 128.0, 50.0)
      o.line_to ( 128.0, 200.0)
      o.stroke ()
      o.set_line_cap  ( "square")
      o.move_to ( 192.0, 50.0) 
      o.line_to ( 192.0, 200.0)
      o.stroke ()

      o.set_fg( "1, 0.2, 0.2")
      o.set_line_width ( 2.56)
      o.move_to ( 64.0, 50.0)
      o.line_to ( 64.0, 200.0)
      o.move_to ( 128.0, 50.0)
      o.line_to ( 128.0, 200.0)
      o.move_to ( 192.0, 50.0)
      o.line_to ( 192.0, 200.0)
      o.stroke ()
   end

   private set_line_join_example(o)
      o.set_line_width ( 40.96)
      o.move_to ( 76.8, 84.48)
      o.rel_line_to ( 51.2, -51.2)
      o.rel_line_to ( 51.2, 51.2)
      o.set_line_join ( "miter" )
      o.stroke ()

      o.move_to ( 76.8, 161.28)
      o.rel_line_to ( 51.2, -51.2)
      o.rel_line_to ( 51.2, 51.2)
      o.set_line_join ( "bevel" )
      o.stroke ()

      o.move_to ( 76.8, 238.08)
      o.rel_line_to ( 51.2, -51.2)
      o.rel_line_to ( 51.2, 51.2)
      o.set_line_join ( "round" )
      o.stroke ()
   end

   private text_example(o)
      # We have to "unscale" the font height, since o is already scaled.
      o.set_font("sans,bold,"||90/Gui.SCALE)
      o.move_to ( 10.0, 35.0)
      o.text_path ( "Hello")
      o.fill()

      o.move_to ( 70.0, 65.0)
      o.text_path ( "void")
      o.set_fg ( "0.5, 0.5, 1")
      o.fill_preserve ()
      o.set_fg ( "black")
      o.set_line_width ( 2.56)
      o.stroke ()

      o.set_fg ( "1, 0.2, 0.2, 0.6")
      o.arc ( 10.0, 35.0, 5.12, 0, 2*Math.PI)
      o.close_path ()
      o.arc ( 70.0, 65.0, 5.12, 0, 2*Math.PI)
      o.fill ()   
   end

   private text_align_center_example(o)
      local ext, x, y, s

      s := "Cairo"

      o.set_font("sans," || 52/Gui.SCALE)

      o.text_path ( s)
      ext := o.get_stroke_extents()

      x := 128 - ext.width/2
      y := 128 - ext.height/2

      o.new_path()
      o.move_to(x,y)
      o.text_path ( s)

      o.fill ()
      o.set_fg ( "1, 0.2, 0.2, 0.6")
      o.set_line_width ( 6.0)
      o.arc ( x, y, 10.0, 0, 2*Math.PI)
      o.fill ()
      o.move_to ( 128.0, 0)
      o.rel_line_to ( 0, 256)
      o.move_to ( 0, 128.0)
      o.rel_line_to ( 256, 0)
      o.stroke ()

   end

   private text_extents_example(o)
      local ext
      o.set_font("sans," || 100/Gui.SCALE)

      o.move_to (25, 50)
      o.text_path ( "cairo")
      ext := o.get_stroke_extents()
      o.fill ()

      o.set_fg ( "1, 0.2, 0.2, 0.6")
      o.set_line_width ( 6.0)
      o.arc ( ext.x, ext.y+ext.height, 10.0, 0, 2*Math.PI)
      o.fill ()
      o.move_to ( ext.x, ext.y+ext.height)
      o.line_to ( ext.x, ext.y)
      o.line_to ( ext.x+ext.width, ext.y)
      o.line_to ( ext.x+ext.width, ext.y+ext.height)
      o.stroke ()
      
   end
end

class CairoTest(Dialog)
   private readable
      selector,
      cairo_display

   public override component_setup()
      self.setup()
      selector.set_selection_list(["arc",
                                   "arc negative",
                                   "clip",
                                   "clip image",
                                   "curve rectangle",
                                   "curve to",
                                   "dash",
                                   "fill and stroke",
                                   "fill style",
                                   "gradient",
                                   "image",
                                   "imagepattern",
                                   "multi segment caps",
                                   "rounded rectangle",
                                   "set line cap",
                                   "set line join",
                                   "text",
                                   "text align center",
                                   "text extents",
                                   "group",
                                   "mesh"])
   end

   public override end_dialog()
   end

   public override init_dialog()
   end

   public override new()
      Dialog.new()
      return
   end

   private on_selector(ev)
      cairo_display.invalidate()
   end

   private setup()
      local layout_1, paint_1, panel_1, layout_3, border_content_1, border_1, layout_2, text_button_1
      self.set_resize(&yes)
      cairo_display := CairoDisplay().
         set_size(scale(275), scale(275)).
         clear_constraints().
         set_constraint("b_inset", scale(0)).
         set_constraint("l_inset", scale(0)).
         set_constraint("r_inset", scale(0)).
         set_constraint("t_inset", scale(0)).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0)
      layout_3 := GridLayout().
         set_extra("cells")
      border_content_1 := Component().
         clear_constraints().
         set_layout(layout_3).
         add(cairo_display)
      border_1 := Border().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_content(border_content_1)
      self.add(border_1)
      selector := List().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         connect(self.on_selector, Event.SELECTION_CHANGED).
         set_selection_list([""])
      paint_1 := TextPaint("Close")
      text_button_1 := TextButton().
         clear_constraints().
         connect(self.dispose, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_1)
      layout_1 := GridLayout().
         set_doi(scale(0)).
         set_extra("cells")
      panel_1 := Panel().
         clear_constraints().
         set_layout(layout_1).
         add(selector).
         add(text_button_1)
      self.add(panel_1)
      self.connect(self.dispose, Event.WINDOW_CLOSE_BUTTON)
      layout_2 := GridLayout().
         set_extra("cells")
      self.set_layout(layout_2)
      self.set_focus(selector.find_focus())
   end
end

procedure main()
   local d
   cairo_available() | stop(&why)
   ImageCache.name_image("ROMEDALEN", ROMEDALEN)
   d := CairoTest()
   d.show_modal()
end

### Ivib-v2 layout: layouts/$.layout
