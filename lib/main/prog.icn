package lang

# In the methods below, the term "program" refers to the main
# co-expression of either the root program, or a program loaded via
# {Prog.load} below.   The parameters named {P} are always programs
# and default to the currently executing program if omitted.
#
class Prog()
   # Load and return a program from file {s}.
   #
   public static defer load(s, arglist, blocksize, stringsize, stacksize)

   #
   # Generate the globals in program P
   #
   public static defer get_globals(P)

   #
   # Get the global named {s} in program P
   #
   public static defer get_global(s, P)

   #
   # Generate the global names in program P
   #
   public static defer get_global_names(P)

   #
   # Generate the builtin functions.
   #
   public static defer get_functions()

   #
   # Generate the builtin operators.
   #
   public static defer get_operators()

   #
   # Get the location of global {s} in program P, if that data is
   # available.
   # @return a {Location} instance
   #
   public static get_global_location(s, P)
      return Location!get_global_location_impl(s, P)
   end

   private static defer get_global_location_impl(s, P)

   #
   # Return the value of the keyword {s} in program P.
   #
   public static defer get_keyword(s, P)

   #
   # Find the variable with name s in program P and return a variable
   # descriptor which points to its value.
   #
   public static defer get_variable(s, P)

   #
   # Given a program, return its parent program
   #
   public static defer get_parent(P)

   #
   # Get the given program's opcode mask
   #
   public static defer get_opmask(P)

   #
   # Set the given program's opcode mask
   #
   public static defer set_opmask(cs, P)

   #
   # Get the given program's event mask
   #
   public static defer get_eventmask(P)

   #
   # Set the given program's event mask
   #
   public static defer set_eventmask(cs, P)

   #
   # Get the given program's value mask
   #
   public static defer get_valuemask(P)

   #
   # Set the given program's value mask
   #
   public static defer set_valuemask(t, P)

   #
   # Create event in program P with event code x and event value y,
   # and activate it.
   #
   public static defer send_event(x, y, P)

   public static defer get_event(cs, vmask, flag)

   #
   # Return the program holding the current execution point
   # of the given co-expression.
   #
   public static defer get_coexpression_program(ce)

   #
   # Get the number of milliseconds since the startup time of the given
   # program.
   #
   public static defer get_runtime_millis(P)

   #
   # Get the startup time (load time) of the given program, as the
   # number of microseconds since the Unix base epoch (1 Jan 1970).
   #
   public static defer get_startup_micros(P)

   #
   # Return info about the collections in the given program.
   # @return a {CollectionInfo} object
   #
   public static get_collection_info(P)
      return CollectionInfo!get_collection_info_impl(P)
   end

   private static defer get_collection_info_impl(P)

   #
   # Return info about the allocations in the given program.
   # @return a {AllocationInfo} object
   #
   public static get_allocation_info(P)
      return AllocationInfo!get_allocation_info_impl(P)
   end

   private static defer get_allocation_info_impl(P)

   #
   # Return info about the memory regions in the given program.
   # @return a {RegionInfo} object
   #
   public static get_region_info(P)
      return RegionInfo!get_region_info_impl(P)
   end

   private static defer get_region_info_impl(P)

   #
   # Get info about the stack use of the given co-expression.
   #
   # @param e a co-expression, by default {&current}.
   # @return a {StackInfo} object
   #
   public static get_stack_info(c)
      return StackInfo!get_stack_info_impl(c)
   end

   private static defer get_stack_info_impl(c)
end

#
# This class contains information about the garbage collections
# carried out by a program.
#
class CollectionInfo()
   public const
      # The number of collections requested by the {collect()} function.
      user_requests, 
      # The number of collections requested during static allocations.
      static_requests, 
      # The number of collections requested during string allocations.
      string_requests, 
      # The number of collections requested during block allocations.
      block_requests

   #
   # Return the total of all four types.
   #
   public get_total()
      return user_requests + static_requests + string_requests + block_requests
   end

   package new(user_requests, static_requests, string_requests, block_requests)
      self.user_requests := user_requests
      self.static_requests := static_requests
      self.string_requests := string_requests
      self.block_requests := block_requests
      return
   end
end

#
# This class returns the total amounts allocated by a program in each
# of its regions.
#
class AllocationInfo()
   public const
      # The total allocated in the static region.
      static_total,
      # The total allocated in the string region.
      string_total,
      # The total allocated in the block region.
      block_total

   #
   # The total in all regions.
   #
   public get_total()
      return static_total + string_total + block_total
   end

   package new(static_total, string_total, block_total)
      self.static_total := static_total
      self.string_total := string_total
      self.block_total := block_total
      return
   end
end

#
# This class contains information about a program's memory allocation
# regions.
#
class RegionInfo()
   public const
      # The amount of static allocations currently used
      static_used, 
      # The amount currently used in the string region
      string_used, 
      # The size of the string region
      string_size,
      # The amount currently used in the block region
      block_used, 
      # The size of the block region
      block_size

   #
   # Return the amount remaining free in the string space.
   #
   public get_string_free()
      return self.string_size - self.string_used
   end

   #
   # Return the amount remaining free in the block space.
   #
   public get_block_free()
      return self.block_size - self.block_used
   end

   package new(static_used,
               string_used,
               string_size,
               block_used,
               block_size)
      self.static_used := static_used
      self.string_used := string_used
      self.string_size := string_size
      self.block_used := block_used
      self.block_size := block_size
      return
   end
end

#
# This class contains info about a coexpression's stack size and
# usage.
#
class StackInfo()
   public const 
      # The size of the stack (excluding any portion used as a C
      # stack) Note that the size may change over time as the size of
      # the C stack changes.
      size, 
      # The amount of stack already used
      used

   #
   # Return the amount of stack free.
   #
   public get_free()
      return size - used
   end

   package new(used, size)
      self.used := used
      self.size := size
      return
   end
end
