package ipl.filegui

import
   ipl.sort,
   gui,
   io

class ColorFilesItemPaint(WithCloneItemPaint)
   protected make_clone(W)
      return W.clone()
   end

   public get_color(data)
      local st
      st := data[2]
      return case st.mode_str[1] of {
         "d" : "purple"
         "l" : "cyan"
         "p" : "orange"
         "s" : "dark gray"
         "b" : "gray"
         "c" : "gray"
         default : {
            if st.mode_str[-7] == ("x" | "s") then
               "green"
            else case map(string(Files.get_extension(data[1]))) of {
               "cmd"|"exe"|"com"|"btm"|"bat" : "green"
               "tar"|"tgz"|"arj"|"taz"|"lzh"|"zip"|"z"|"Z"|"gz"|"xz"|"bz2"|"rar" : "red"
               "jpg"|"jpeg"|"png"|"gif"|"bmp"|"xbm"|"xpm": "blue"
               "mp4"|"flv"|"avi"|"wmv"|"webm"|"3gp"|"mpeg"|"mpg"|"m4v"|"mkv": "pink" 
            }
         }
      } | "black"
   end

   public get_string(data)
      return data[1]
   end

   public get_width(W, data)
      return W.text_width(get_string(data))
   end

   public get_constant_height(W)
      return W.get_font_height()
   end

   public get_size(W, data)
      return Size(get_width(W, data), W.get_font_height())
   end

   public draw(W, data, x, y)
      W := get_clone(W).set_fg(get_color(data))
      draw_string_ex(W, x, y, get_string(data))
   end
end

$load PDF_16 "fileicons/pdf.png"
$load IMAGE_16 "fileicons/image.png"
$load VIDEO_16 "fileicons/video.png"
$load ARCHIVE_16 "fileicons/archive.png"
$load AUDIO_16 "fileicons/audio.png"
$load EXE_16 "fileicons/exe.png"
$load CHARDEVICE_16 "fileicons/chardevice.png"
$load BLOCKDEVICE_16 "fileicons/blockdevice.png"
$load SYMLINK_16 "fileicons/symlink.png"
$load SOCKET_16 "fileicons/socket.png"
$load PIPE_16 "fileicons/pipe.png"
$load HTML_16 "fileicons/html.png"

class IconFilesItemPaint(ItemPaint)
   public static const ICON_SIZE

   private static init()
      ImageCache.name_image("icn.PDF_16", PDF_16)
      ImageCache.name_image("icn.IMAGE_16", IMAGE_16)
      ImageCache.name_image("icn.VIDEO_16", VIDEO_16)
      ImageCache.name_image("icn.ARCHIVE_16", ARCHIVE_16)
      ImageCache.name_image("icn.AUDIO_16", AUDIO_16)
      ImageCache.name_image("icn.EXE_16", EXE_16)
      ImageCache.name_image("icn.CHARDEVICE_16", CHARDEVICE_16)
      ImageCache.name_image("icn.BLOCKDEVICE_16", BLOCKDEVICE_16)
      ImageCache.name_image("icn.SYMLINK_16", SYMLINK_16)
      ImageCache.name_image("icn.SOCKET_16", SOCKET_16)
      ImageCache.name_image("icn.PIPE_16", PIPE_16)
      ImageCache.name_image("icn.HTML_16", HTML_16)
      ICON_SIZE := 16
   end

   public get_width(W, data)
      return ICON_SIZE + Gui.TEXT_INSET + W.text_width(get_string(data))
   end

   public get_constant_height(W)
      return max(W.get_font_height(), ICON_SIZE)
   end

   public get_size(W, data)
      return Size(get_width(W, data), get_constant_height(W))
   end

   public get_string(data)
      return data[1]
   end

   public get_icon(data)
      local st, k
      st := data[2]
$ifdef _PNG
      k := case st.mode_str[1] of {
         "d" : "gui.CLOSED_FOLDER"
         "l" : "icn.SYMLINK_16"
         "s" : "icn.SOCKET_16"
         "p" : "icn.PIPE_16"
         "b" : "icn.BLOCKDEVICE_16"
         "c" : "icn.CHARDEVICE_16"
         default : {
            if st.mode_str[-7] == ("x" | "s") then
               "icn.EXE_16"
            else case map(string(Files.get_extension(data[1]))) of {
               "pdf": "icn.PDF_16"
               "cmd"|"exe"|"com"|"btm"|"bat" : "icn.EXE_16"
               "tar"|"tgz"|"arj"|"taz"|"lzh"|"zip"|"z"|"Z"|"gz"|"xz"|"bz2"|"rar" : "icn.ARCHIVE_16"
               "jpg"|"jpeg"|"png"|"gif"|"bmp"|"xbm"|"xpm": "icn.IMAGE_16"
               "mp4"|"flv"|"avi"|"wmv"|"webm"|"3gp"|"mpeg"|"mpg"|"m4v"|"mkv": "icn.VIDEO_16"
               "mp3"|"wav"|"mid"|"rm": "icn.AUDIO_16"
               "htm"|"html": "icn.HTML_16"
            }
         }
      } | "gui.FILE"
$else
      k := if st.mode_str[1] == "d" then
         "gui.CLOSED_FOLDER"
      else
         "gui.FILE"
$endif
      return ImageCache.get(k) | syserr("Bad cache key in IconFilesItemPaint")
   end

   public draw(W, data, x, y, w, h)
      local i
      i := get_icon(data)
      i.copy_to(,,,, W, x, y + (h - ICON_SIZE) / 2)
      x +:= ICON_SIZE + Gui.TEXT_INSET
      w -:= ICON_SIZE + Gui.TEXT_INSET
      draw_string_ex(W, x, y, limit_text(W, get_string(data), w))
   end
end

class FileSuggestField(SuggestField)
   public
      cwd,
      prefix,
      choose_mode,
      dir_list,
      dir_list_name

   public set_choose_mode(x)
      self.choose_mode := x
      return self
   end

   public set_cwd(d)
      self.cwd := d
      return self
   end

   private match_mode(l)
      if l[1] == (u"." | u"..") then
         fail
      return /choose_mode | any(choose_mode, l[2].mode_str)
   end

   private do_dir_list(s)
      if dir_list_name === s then
         return dir_list
      dir_list := Files.ucs_list(s) | fail
      dir_list := isort(dir_list, FileDialog.map1)
      dir_list_name := s
      return dir_list
   end

   protected do_request()
      local s, path, l, t, i
      if *contents = 0 then
         return []
      s := contents
      every i := upto('/', s)
      prefix := if /i then "" else s[1+:i]

      if s[1] == u"~" then {
         if *s = 1 then
            return []
         s := ucs(Files.get_home()) || s[2:0] | fail
      }

      path := FilePath(s)
      if not path.is_absolute() then
         path := FilePath(cwd).append(path)

      l := []
      if s[-1] == u"/" then {
         do_dir_list(path.str()) | fail
         every t := !dir_list do {
            if match_mode(t) then
               put(l, t)
         }
      } else {
         do_dir_list(path.parent().str()) | fail
         s := path.get(-1)
         every t := !dir_list do {
            if match_mode(t) & match(s, t[1]) then
               put(l, t)
         }
      }
      return l
   end

   public convert_element(o)
      return prefix || text(o[1])
   end

   public create_popup()
      return ItemPaintList().
         set_item_paint(IconFilesItemPaint()).
         set_item_border(EmptyBorder().
                            set_insets(Gui.TEXT_INSET, Gui.TEXT_INSET, 0, 0).
                            set_x_align(Align.L))
   end

   public new()
      cast(self,SuggestField).new()
      cwd := Files.getcwd()
      set_direction(Direction.DOWN)
      return
   end
end
