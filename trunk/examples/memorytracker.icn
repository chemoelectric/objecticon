import io, lang, util, ipl.options

procedure f(i)
   return Format.numeric_to_string(i,0,',')
end

procedure r(x,y)
   return right(f(x)||"/"||f(y), 25) ||
      right(if y > 0 then Format.numeric_to_string(100*real(x)/y,2) else "-",8)
end

procedure print_stats(prog)
   local t1, t2, t3, t1s, t1b, e, i, s1
   s1 := Prog.get_stack_used(prog)
   t1 := Prog.get_region_info(prog)
   t1s := t1.get_string_total()
   t1b := t1.get_block_total()
   t2 := Prog.get_allocation_info(prog)
   t3 := Prog.get_collection_info(prog)

   write("\nRegion                 Usage                      Total    Colls")
   write("------                 --------------------        ----    -----")
   write("Stack     ", right(f(s1),15), right(t3.stack_requests,39))
   i := 1
   every e := !t1.string_regions do {
      write(left("String " || i, 10), r(e.used, e.size))
      i +:= 1
   }
   write(left("String total", 43), right(f(t2.string_total), 12), right(t3.string_requests, 9))

   i := 1
   every e := !t1.block_regions do {
      write(left("Block " || i, 10), r(e.used, e.size))
      i +:= 1
   }
   write(left("Block total", 43), right(f(t2.block_total), 12), right(t3.block_requests, 9))
   write(left("User", 55), right(t3.user_requests, 9))
   write("                                                   ----    -----")
   write(right(f(t2.get_total()),55),right(t3.get_total(),9))
end

procedure main(args)
   local opts, proact, e, mask, prog, t1, t2, totals, t, prev_code, u_flag, a

   a := []
   while args[1][1] == "-" do
      put(a, pop(args))
   opts := options(a, "-u!")
   u_flag := opts["u"]

   prog := Prog.load(Files.find_exe(args[1]),args[2:0]) | stop(&why)

   proact := table(0)
   totals := table(0)
   t1 := Prog.get_runtime_millis()
   mask := MonitorCodeSet.AllocMask
   Prog.set_event_mask(mask,prog)
   while e := Prog.get_event(prog) do {
      if \u_flag then {
         proact[e.code] +:= 1
         totals[e.code] +:= integer(e.value)
      } else case e.code of {
         MonitorCode.BlkDeAlc: {
            proact[prev_code] -:= 1
            totals[prev_code] +:= integer(e.value)
         }
         MonitorCode.StrDeAlc: {
            totals[prev_code] +:= integer(e.value)
         }
         default: {
            proact[e.code] +:= 1
            totals[e.code] +:= integer(e.value)
            prev_code := e.code
         }
      }
      t2 := Prog.get_runtime_millis()
      if t2-t1 > 2000 then {
         print_stats(prog)
         t1 := t2
      }
   }
   print_stats(prog)
   write("\nSummary")
   write("Code           Desc                                     N       Total")
   write("----           ----                                 -----      ------")
   t := 0
   every e := !sort(proact) do {
      write(left(MonitorCode.get_sym(e[1]),15),left(MonitorCode.get_desc(e[1]),30), 
            right(f(e[2]), 12), right(f(totals[e[1]]),12))
      t +:= totals[e[1]]
   }
   write("                                                               ------")
   write(right(f(t), 69))
end
