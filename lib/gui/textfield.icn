#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import undo, util, graphics, ipl.functional

#
# A class for a single input line of text.  The text can
# scroll within the area specified.  By default, a border
# surrounds the text area; this can be turned off by using
# `toggle_draw_border()`.
#
# The horizontal size must be set by the `set_size()` method:
# there is no default (the vertical size will default, however).
#
# An `Event.ACTION` is generated when return is pressed,
# `Event.CONTENT_CHANGED` whenever the contents are changed,
# `Event.CURSOR_MOVED` when the cursor moves, and
# `Event.SELECTION_CHANGED` whenver the selection changes.
#
# Example :-
# ~
#   t := TextField()
#   t.set_pos(50, 250)
#   # Vertical size will default
#   t.set_size(100)
#   t.set_contents("Initial string")
#   self.add(t)
# ~
class TextField(Component)
   public 
      filter,                  # Cset for filtering characters
      is_editable_flag,        # Are we editable?
      menu_on_rpress_flag,     # Show context menu on mouse right press event?
      move_on_rpress_flag,     # Move on mouse right press event?
      contents,                #                
      going_left,
      cursor,                  #              
      mark,
      tx,                      #          
      tw,                      #
      displaychar,             # char to print on screen
      placeholder,
      undo_manager,
      primary,
      old_cursor,
      old_mark,
      old_region,
      no_drag,                 # Don't allow drag to set the cursor
      changed,
      loff,
      primary_selection_owner,
      scroll_ticker,
      scroll_ticker_interval,
      cursor_ticker,
      cursor_on

   #
   # Set the displaychar attribute
   #
   public set_displaychar(c)
      displaychar := need_text(c)
      (*displaychar = 1) | runerr("Single character string expected", displaychar)
      link
   end

   #
   # Set the placeholder attribute
   #
   public set_placeholder(s)
      placeholder := need_text(s)
      link
   end

   #
   # Set a filter on the characters allowed to be input to the text field.  For example :-
   # ~
   #   # Permit only hexadecimal characters as input
   #   set_filter('0987654321abcdefABCDEF')
   # ~
   # :Parameters :
   # :  `c` - The cset of permissible characters.
   public set_filter(c)
      self.filter := need_cset(c) ** Gui.PRINTABLE_1
      link
   end

   #
   # Set the editable status of the component.
   #
   public set_is_editable(s)
      self.is_editable_flag := need_flag(s)
      link
   end

   #
   # Move the cursor on mouse right press?  Only relevant if the context menu is disabled.
   #
   public set_move_on_rpress(s)
      self.move_on_rpress_flag := need_flag(s)
      link
   end

   #
   # Show the context menu on mouse right press?
   #
   public set_menu_on_rpress(s)
      self.menu_on_rpress_flag := need_flag(s)
      link
   end

   #
   # Return the present contents of the text field.
   #
   public get_contents()
      return self.contents
   end

   #
   # Set the undo manager used by this instance.
   #
   public set_undo_manager(u)
      undo_manager := u
      link
   end

   public override get_default_height()
      return self.cbwin.get_line_height() + border.get_total_height()
   end

   public override get_default_width()
      return self.cbwin.text_width(get_view()) + border.get_total_width()
   end

   public override layout()
      self.tx := self.x + border.get_l_inset()
      self.tw := self.w - border.get_total_width()
      constrain_line()
   end

   public override shift(dx, dy)
      Component.shift(dx, dy)
      self.tx +:= dx
   end

   #
   # Set the contents of the field.  If not invoked then
   # the initial content is the empty string.
   # :Parameters :
   # :  `x` - The contents
   #
   public set_contents(x)
      /x := ""
      self.contents := need_text(x)
      self.cursor := *self.contents + 1
      self.loff := 0
      clear_mark()
      if is_live() then {
         self.invalidate()
         constrain_line()
         undo_manager.clear()
      }
      link
   end

   #
   # Set the contents of the field, allowing the user to undo the
   # change, and firing events on the change.
   #
   # :Parameters :
   # :  `x` - The new contents
   # :  `pos` - The new cursor position, default *x + 1
   # :  `e` - The event causing the change
   # :  `coalesce` - Allow this operation to be coalesced with others 
   #            by the undo manager.
   #
   public assign_contents(x, pos, e, coalesce)
      local ed
      /x := ""
      x := need_text(x)
      /pos := *x + 1
      start_handle(e)
      if self.contents == x then {
         clear_mark()
         cursor := pos
      } else {
         ed := TextFieldAssignEdit(self, x, pos, coalesce)
         ed.doit()
         undo_manager.add_edit(ed)
      }
      end_handle(e)
      link
   end

   public start_handle(e)
      old_cursor := cursor
      old_mark := mark
      old_region := get_region() | &null
      changed := &null
   end

   public end_handle(e)
      local r
      if r := get_region() &
         primary ~=== r &
         not is_held(Mouse.LEFT_PRESS) then {
         parent_dialog.own_selection(Selection.PRIMARY, self.primary_selection_owner)
         self.primary := r
      }
      if \changed then {
         self.constrain_line()
         self.invalidate()
         cursor_on := -1
         fire(Event.CONTENT_CHANGED, e)
      }
      if old_cursor ~= cursor then {
         self.constrain_line()
         self.invalidate()
         cursor_on := -1
         fire(Event.CURSOR_MOVED, e)
      }
      if old_mark ~=== mark then {
         self.invalidate()
      }
      if old_region ~=== r then {
         fire(Event.SELECTION_CHANGED, e)
      }
   end

   #
   # Convenient function to move the cursor to the given position.
   #
   public move_cursor(x, shift, e)
      start_handle(e)

      # Same as keyboard mark...
      if \shift then
         /mark := cursor
      else
         mark := &null

      set_cursor(x)

      end_handle(e)
      link
   end

   public handle_lpress(e)
      start_handle(e)
      if \e.shift then {
         /self.mark := self.cursor
         self.cursor := whereis_x(e)
      } else {
         case (parent_dialog.get_click_count() - 1) % 3 of {
            0 : {
               self.cursor := whereis_x(e)
               self.mark := self.cursor
            }
            1 : {
               self.cursor := self.mark := whereis_x(e)
               while any(~' ', self.contents, self.cursor) do
                  self.cursor +:= 1
               while any(~' ', self.contents, self.mark - 1) do
                  self.mark -:= 1
               no_drag := &yes
            }
            2 : {
               self.cursor := *self.contents + 1
               self.mark := 1
               no_drag := &yes
            }
         }
      }
      end_handle(e)
   end

   public create_context_menu(e)
      local m
      m := TextContextMenu(self)
      if *m.children > 0 then
         return m
   end

   public handle_rpress(e)
      local m, pm
      if \menu_on_rpress_flag then {
         if m := create_context_menu(e) then {
            pm := PopupMenu()
            pm.popup(self, m, e.x, e.y)
         }
      } else if \move_on_rpress_flag then {
         start_handle(e)
         self.cursor := whereis_x(e)
         clear_mark()
         end_handle(e)
      }
   end

   private handle_mpress_response(e, target_type, data)
      local s, ed
      \data | fail
      \self.is_editable_flag | fail
      start_handle(e)
      self.cursor := whereis_x(e)
      clear_mark()
      if s := apply_filter(text_convert(selection_convert(target_type, data), 
                                        type(self.contents))) then {
         ed := TextFieldPasteEdit(self, s)
         ed.doit()
         undo_manager.add_edit(ed)
      }
      end_handle(e)
   end

   public handle_mpress(e)
      parent_dialog.request_selection(Selection.PRIMARY, 
                                      [Selection.UTF8_STRING_TARGET, Selection.STRING_TARGET], 
                                      lpartial(handle_mpress_response, e))
   end

   public whereis_x(e)
      local i, s, d, t

      s := get_view()
      d := e.x - self.tx + loff
      i := 1
      t := 0
      while (i <= *s) & ((.t + (t :=  self.cbwin.text_width(s[1+:i]))) / 2 < d) do
         i +:= 1

      return i
   end

   public handle_ldrag(e)
      local p

      /no_drag | fail

      start_handle(e)
      p := self.cursor

      # Start ticking if to the left/right, otherwise stop ticking
      if e.x < self.tx then {
         self.going_left := &yes
         check_scroll_ticker(self.tx - e.x)
      } else if e.x >= self.tx + self.tw then {
         self.going_left := &null
         check_scroll_ticker(e.x - (self.tx + self.tw))
      } else {
         self.cursor := whereis_x(e)
         scroll_ticker.stop()
      }
      end_handle(e)
   end

   public check_scroll_ticker(d)
      scroll_ticker_interval := Gui.style.distance2ticker_rate(d)
      scroll_ticker.change_time(scroll_ticker_interval)
      # Start it (if it isn't already running)
      scroll_ticker.start()
   end

   #
   # Move the text area displayed so that the cursor is on the screen.
   #
   public constrain_line()
      local s, i
      s := get_view()
      i := self.cbwin.text_width(s[1:self.cursor])

      # Constrain loff so that the cursor is on the screen
      if loff > i then
         loff := i
      else if loff + self.tw < i then
         loff := i - self.tw

      # Now try to use as much of tw as we can, by minimizing loff
      i := self.cbwin.text_width(s) 
      if i - self.tw < loff then
         loff := max(0, i - self.tw)
   end

   public scroll_tick()
      local s
      repeat {
         start_handle()
         s := get_view()
         if \going_left then {
            while self.cursor > 1 &
               self.cbwin.text_width(s[1:self.cursor]) >= loff do
               self.cursor -:= 1
         } else {
            while self.cursor <= *s &
               self.cbwin.text_width(s[1:self.cursor]) <= loff + self.tw do
               self.cursor +:= 1
         }
         end_handle()
         scroll_ticker.sleep(scroll_ticker_interval)
      }
   end

   public handle_lrelease(e)
      start_handle(e)
      # For consistency with editabletextlist we clear_mark if no region.
      has_region() | clear_mark()
      scroll_ticker.stop()
      no_drag := &null
      end_handle(e)
   end

   public handle_interrupted()
      if is_held(Mouse.LEFT_PRESS) then {
         # Release left press so that end_handle() owns the selection
         parent_dialog.release(self, Mouse.LEFT_PRESS)
         handle_lrelease()
      }
   end

   public clear_mark()
      self.mark := &null
      link
   end

   public set_mark(m)
      m := need_integer(m)
      m <:= 1
      m >:= *self.contents + 1
      self.mark := m
      link
   end

   public set_cursor(c)
      c := need_integer(c)
      c <:= 1
      c >:= *self.contents + 1
      self.cursor := c
      link
   end

   public override initially()
      Component.initially()
      cursor_ticker.start()
   end

   public override finally()
      scroll_ticker.stop()
      cursor_ticker.stop()
      Component.finally()
   end

   #
   # Delete
   #
   public handle_delete_left(e)
      local ed

      \self.is_editable_flag | fail

      start_handle(e)
      if has_region() then
         delete_region(e)
      else if self.cursor > 1 then {
         ed := TextFieldDeleteLeftEdit(self)
         ed.doit()
         undo_manager.add_edit(ed)
      }
      end_handle(e)
   end

   public handle_return(e)
      fire(Event.ACTION, e)
   end

   public keyboard_mark(e)
      if \e.shift then
         /mark := cursor
      else
         mark := &null
   end

   public handle_key_right(e)
      start_handle(e)
      keyboard_mark(e)
      self.cursor := (*self.contents + 1 >= self.cursor + 1)
      end_handle(e)
   end

   public handle_key_left(e)
      start_handle(e)
      keyboard_mark(e)
      self.cursor := (0 < self.cursor - 1)
      end_handle(e)
   end

   public handle_key_home(e)
      start_handle(e)
      keyboard_mark(e)
      self.cursor := 1
      end_handle(e)
   end

   public handle_key_end(e)
      start_handle(e)
      keyboard_mark(e)
      self.cursor := *self.contents + 1
      end_handle(e)
   end

   public handle_delete_line(e)
      local ed

      \self.is_editable_flag | fail

      start_handle(e)
      if *self.contents > 0 then {
         ed := TextFieldDeleteLineEdit(self)
         ed.doit()
         undo_manager.add_edit(ed)
      }
      end_handle(e)
   end

   public handle_delete_right(e)
      local ed

      \self.is_editable_flag | fail

      start_handle(e)
      if has_region() then
         delete_region(e)
      else if self.cursor <= *self.contents then {
         ed := TextFieldDeleteRightEdit(self)
         ed.doit()
         undo_manager.add_edit(ed)
      }
      end_handle(e)
   end

   public handle_select_all(e)
      start_handle(e)
      if *self.contents > 0 then {
         self.cursor := *self.contents + 1
         self.mark := 1
      }
      end_handle(e)
   end

   public handle_end_of_line(e)
      start_handle(e)
      keyboard_mark(e)
      self.cursor := *self.contents + 1
      end_handle(e)
   end

   public handle_start_of_line(e)
      start_handle(e)
      keyboard_mark(e)
      self.cursor := 1
      end_handle(e)
   end

   public handle_cut(e)
      local s
      \self.is_editable_flag | fail
      start_handle(e)
      if s := get_region() then {
         parent_dialog.own_selection(Selection.CLIPBOARD, StaticTextSelectionOwner(s))
         delete_region(e)
      }
      end_handle(e)
   end

   public handle_copy(e)
      local s
      start_handle(e)
      if s := get_region() then
         parent_dialog.own_selection(Selection.CLIPBOARD, StaticTextSelectionOwner(s))
      end_handle(e)
   end

   public is_editable()
      succeed \is_editable_flag
   end

   public has_contents()
      succeed *contents > 0
   end

   public can_undo()
      return undo_manager.can_undo()
   end

   public can_redo()
      return undo_manager.can_redo()
   end

   public override keeps(e)
      succeed member(Key.CURSOR_H, e.code)
   end

   public apply_filter(t)
      local s
      # Apply the filter to the string to paste
      s := ""
      t ? {
         while tab(upto(filter)) do
            s ||:= tab(many(filter))
      }
      if *s > 0 then
         return s
   end

   private handle_paste_response(e, target_type, data)
      insert_string(selection_convert(target_type, \data), e)
   end

   public handle_paste(e)
      parent_dialog.request_selection(Selection.CLIPBOARD, 
                                      [Selection.UTF8_STRING_TARGET, Selection.STRING_TARGET], 
                                      lpartial(handle_paste_response, e))
   end

   #
   # Insert a string as though it had been pasted via the clipboard.
   #
   public insert_string(s, e)
      local ce, ed

      \self.is_editable_flag | fail
      s := apply_filter(text_convert(s, type(self.contents))) | fail

      start_handle(e)
      ce := CompoundEdit()
      if has_region() then {
         ed := TextFieldDeleteRegionEdit(self)
         ed.doit()
         ce.add_edit(ed)
      }
      ed := TextFieldPasteEdit(self, s)
      ed.doit()
      ce.add_edit(ed)
      ce.close()
      undo_manager.add_edit(ce)
      end_handle(e)
      link
   end

   public handle_default(e)
      local ce, ed, ec

      ec := e.code
      if /self.is_editable_flag | not(type(ec) == ("string" | "ucs")) |
         \e.ctrl | \e.meta | not(any(filter, ec)) then
         fail

      ec := text_convert(ec, type(self.contents))

      start_handle(e)
      # 
      # Add the printable character at cursor position
      #
      if has_region() then {
         ce := CompoundEdit().set_liberal(&yes)
         ed := TextFieldDeleteRegionEdit(self)
         ed.doit()
         ce.add_edit(ed)
         ed := TextFieldDefaultEdit(self, ec)
         ed.doit()
         ce.add_edit(ed)
         ce.close()
         undo_manager.add_edit(ce)
      } else {
         ed := TextFieldDefaultEdit(self, ec)
         ed.doit()
         undo_manager.add_edit(ed)
      }
      end_handle(e)
   end

   public handle_undo(e)
      \self.is_editable_flag | fail

      start_handle(e)
      if undo_manager.can_undo() then
         undo_manager.undo()
      end_handle(e)
   end

   public handle_redo(e)
      \self.is_editable_flag | fail

      start_handle(e)
      if undo_manager.can_redo() then
         undo_manager.redo()
      end_handle(e)
   end

   public handle_key(e)
      case e.code of {
         "\b" : handle_delete_left(e)
         "\r" | "\l": handle_return(e)
         "\^k" : handle_delete_line(e)
         Key.HOME : handle_key_home(e)
         Key.END : handle_key_end(e)
         Key.RIGHT : handle_key_right(e)
         Key.LEFT : handle_key_left(e)
         "\^a" : handle_select_all(e)
         "\^e" : handle_end_of_line(e)
         "\d" | "\^d" : handle_delete_right(e)
         "\^x" :  handle_cut(e)
         "\^c" :  handle_copy(e)
         "\^v" :  handle_paste(e)
         Key.INSERT :  if \e.ctrl then handle_copy(e) else if \e.shift then handle_paste(e)
         "\^z" :  handle_undo(e)
         "\^y" :  handle_redo(e)
         default : handle_default(e)
      }
   end

   public get_region() 
      if has_region() then
         return contents[self.cursor:self.mark]
   end

   public delete_region(e)
      local ed
      ed := TextFieldDeleteRegionEdit(self)
      ed.doit()
      undo_manager.add_edit(ed)
   end

   public has_region()
      succeed \self.mark ~= self.cursor
   end

   public get_view()
      return if \displaychar then
         repl(displaychar, *contents)
      else
         contents
   end

   public cursor_tick()
      local t
      repeat {
         if should_draw_focus() & is_unhidden() then 
         {
            t := cursor_on
            cursor_on := if dont_blink(self) then
               0
            else
               (cursor_on + 1) % 3
            if (t | cursor_on) = 2 then
               invalidate()
         }
         cursor_ticker.sleep(Gui.CURSOR_BLINK)
      }
   end

   public override display()
      local fh, s, mp, np, y1, off1, off2, W

      fh := self.cbwin.get_font_height()
      y1 := self.y + (self.h - fh) / 2
      s := get_view()
      if *s = 0 & \placeholder then {
         use {
            W := Gui.style.get_shadow_clone(cbwin),
            W.draw_string(self.tx, y1 + W.get_font_ascent(), placeholder)
         }
      } else
         cbwin.draw_string(self.tx - loff, y1 + cbwin.get_font_ascent(), s)

      if has_region() then {
         mp := self.mark
         if mp > cursor then {
            np := mp
            mp := cursor
         } else
            np := cursor
         off1 := self.cbwin.text_width(s[1:mp])
         off2 := self.cbwin.text_width(s[1:np])
         Gui.style.fill_selection_rectangle(self.cbwin,
                                            self.tx - loff + off1,
                                            y1, 
                                            off2 - off1,
                                            fh)
      }

      #
      # If has focus display box cursor, else display outline cursor
      #
      if should_draw_focus() then {
         if self.cursor_on ~= 2 then
            Gui.style.draw_text_cursor(self.cbwin,
                                       self.tx - loff + self.cbwin.text_width(s[1:cursor]), y1, fh)
      } else if \self.is_editable_flag & \self.accepts_focus_flag then
         Gui.style.draw_shadow_text_cursor(self.cbwin,
                                           self.tx - loff + self.cbwin.text_width(s[1:cursor]), y1, fh)

      border.draw_rect(self.cbwin, self)
   end

   public override new()
      Component.new()
      scroll_ticker := Dispatcher.new_task{scroll_tick()}
      cursor_ticker := Dispatcher.new_task{cursor_tick()}
      cursor_on := -1
      undo_manager := UndoManager()
      filter := Gui.PRINTABLE_1
      self.accepts_focus_flag := &yes
      self.set_contents("")
      self.set_border(CompoundBorder().
                          set_outer(SunkenBorder()).
                          set_inner(EmptyBorder().
                                    set_l_inset(Gui.TEXT_INSET).
                                    set_r_inset(Gui.TEXT_INSET)))
      self.is_editable_flag := &yes
      self.menu_on_rpress_flag := &yes
      self.move_on_rpress_flag := &yes
      self.set_constraint("x_fill", &yes)
      self.set_constraint("x_align", Align.L)
      self.set_constraint("x_weight", 1.0)
      set_pointer("xterm")
      self.loff := 0
      self.primary_selection_owner := TextFieldPrimarySelectionOwner(self)
      connect(handle_lpress, Event.MOUSE_LEFT_PRESS)
      connect(handle_rpress, Event.MOUSE_RIGHT_PRESS)
      connect(handle_mpress, Event.MOUSE_MIDDLE_PRESS)
      connect(handle_ldrag, Event.MOUSE_LEFT_DRAG)
      connect(handle_lrelease, Event.MOUSE_LEFT_RELEASE)
      connect(handle_key, Event.KEY_PRESS)
      connect(handle_interrupted, Event.INTERRUPTED)
      return
   end
end

class TextFieldPrimarySelectionOwner(TextSelectionOwner)
   private parent

   protected override get_text()
      return \parent.primary
   end

   public override lost_ownership()
      # Since we may retain ownership after having been disposed of.
      if parent.is_live() then {
         parent.start_handle()
         parent.clear_mark()
         parent.end_handle()
      } else
         parent.clear_mark()
      parent.primary := &null
   end

   public new(parent)
      self.parent := parent
      return
   end
end

abstract class TextFieldEdit(UndoableEdit)
   public 
      parent,
      cursor, 
      mark

   public doit()
      save()
      self.redo_impl()
      parent.changed := &yes
   end

   public override redo()
      restore()
      self.redo_impl()
      parent.changed := &yes
   end

   public override undo()
      self.undo_impl()
      restore()
      parent.changed := &yes
   end

   public abstract redo_impl()
   public abstract undo_impl()

   public save()
      self.cursor := parent.cursor
      self.mark := parent.mark
   end

   public restore()
      parent.cursor := self.cursor
      parent.mark := self.mark
   end

   public new(parent)
      self.parent := parent
      return
   end
end

class TextFieldDeleteRightEdit(TextFieldEdit)
   public ch

   public override add_edit(other)
      if is(other, TextFieldDeleteRightEdit) &
         (cursor = other.cursor) then 
      {
         ch ||:= other.ch
         return
      }
   end

   public override redo_impl()
      parent.contents[parent.cursor +: *ch] := ""
      parent.clear_mark()
   end

   public override undo_impl()
      if cursor > *parent.contents then
         parent.contents ||:= ch
      else
         parent.contents[cursor] := ch || parent.contents[cursor]
   end

   public override new(parent)
      TextFieldEdit.new(parent)
      ch := parent.contents[parent.cursor]
      return
   end
end

class TextFieldDeleteLeftEdit(TextFieldEdit)
   public ch

   public override add_edit(other)
      if is(other, TextFieldDeleteLeftEdit) &
         (cursor = other.cursor + *ch) then
      {
         ch := other.ch || ch
         return
      }
   end

   public override redo_impl()
      parent.contents[parent.cursor -: *ch] := ""
      parent.cursor -:= *ch
      parent.clear_mark()
   end

   public override undo_impl()
      if cursor - *ch > *parent.contents then
         parent.contents ||:= ch
      else
         parent.contents[cursor - *ch] := ch || parent.contents[cursor - *ch]
   end

   public override new(parent)
      TextFieldEdit.new(parent)
      ch := parent.contents[parent.cursor - 1]
      return
   end
end

class TextFieldDeleteRegionEdit(TextFieldEdit)
   public pre

   public override redo_impl()
      if parent.mark < parent.cursor then {
         pre := parent.contents[parent.mark:parent.cursor]
         parent.contents[parent.mark:parent.cursor] := ""
         parent.cursor := parent.mark
      } else {
         pre := parent.contents[parent.cursor:parent.mark]
         parent.contents[parent.cursor:parent.mark] := ""
      }
      parent.clear_mark()
   end

   public override undo_impl()
      if self.mark < self.cursor then
         parent.contents := parent.contents[1:self.mark] || pre || parent.contents[self.mark:0]
      else
         parent.contents := parent.contents[1:self.cursor] || pre || parent.contents[self.cursor:0]
   end
end

class TextFieldPasteEdit(TextFieldEdit)
   public s

   public override redo_impl()
      parent.contents := parent.contents[1:parent.cursor] || s || parent.contents[parent.cursor:0]
      parent.cursor +:= *s
   end

   public override undo_impl()
      parent.contents[self.cursor +: *s] := ""
   end

   public override new(parent, s)
      TextFieldEdit.new(parent)
      self.s := s
      return
   end
end

class TextFieldDefaultEdit(TextFieldEdit)
   public s

   public override add_edit(other)
      if is(other, gui.TextFieldDefaultEdit) &
         (other.cursor = self.cursor + *s) then {
            s ||:= other.s
            return
      }
   end

   public override redo_impl()
      parent.contents := parent.contents[1:parent.cursor] || s || parent.contents[parent.cursor:0]
      parent.cursor +:= *s
      parent.clear_mark()
   end

   public override undo_impl()
      parent.contents[self.cursor +: *s] := ""
   end

   public override new(parent, e)
      TextFieldEdit.new(parent)
      s := e
      return
   end
end

class TextFieldDeleteLineEdit(TextFieldEdit)
   public pre

   public override redo_impl()
      pre := parent.contents
      parent.contents[1:0] := ""     # Preserves text type of contents
      parent.cursor := 1
      parent.clear_mark()
   end

   public override undo_impl()
      parent.contents := pre
   end
end

class TextFieldAssignEdit(TextFieldEdit)
   public s, pos, pre, coalesce

   public override add_edit(other)
      if \coalesce & is(other, gui.TextFieldAssignEdit) & \other.coalesce then {
         self.s := other.s
         self.pos := other.pos
         return
      }
   end

   public override redo_impl()
      pre := parent.contents
      parent.contents := s
      parent.cursor := pos
      parent.clear_mark()
   end

   public override undo_impl()
      parent.contents := pre
   end

   public override new(parent, s, pos, coalesce)
      TextFieldEdit.new(parent)
      self.s := s
      self.pos := pos
      self.coalesce := coalesce
      return
   end
end
