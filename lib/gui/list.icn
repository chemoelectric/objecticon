#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

#
#
# This component is for selecting one string from a list of
# several.  When a button is pressed a list appears (possibly
# with a scroll bar) from which one item can be selected.
# 
# A Event.SELECTION_CHANGED is generated whenever an item is selected from the
# list.
#
# @example
# @ l := List()
# @ l.set_selection_list(["Red", "Green", "Yellow", "Blue", "Orange"])
# @ l.set_size(120)
# @ l.set_pos(100, 100)
# @ l.set_selection(2)  # Green will be the first selection
# @ self.add(l)
#
class List(SelectionDropDown)
   public 
      old_selection,
      constant_label

   public start_change(e)
      self.old_selection := self.selection
   end

   public end_change(e)
      if self.old_selection ~=== self.selection then
         fire(Event.SELECTION_CHANGED, e)
   end

   public apply_selection()
      local s
      s := \self.constant_label | convert_element(object_get_selection()) | ""
      self.view.set_label(s)
   end

   #
   # The given string will always appear in the text part of the
   # component, rather than the currently selected item.
   #
   public set_constant_label(x)
      self.constant_label := x
      apply_selection()
      return self
   end

   public create_view()
      return DropDownLabel()
   end

   public get_default_width()
      local t
      if \self.constant_label then
         t := self.cbwin.text_width(self.constant_label)
      else {
         t := 0
         every t <:= self.cbwin.text_width(convert_element(!self.selection_list))
      }
      return border.get_total_width() + b.get_preferred_width() + t + view.border.get_total_width()
   end
end

# A subclass of `List` which has a null border and a zero size view,
# leaving just the button visible.  The button can then be customized
# by overriding `create_button`, giving a `List` with just a button.
#
abstract class ButtonOnlyList(List)
   public layout()
      view.x := b.x := x
      view.y := b.y := y
      b.w := w
      b.h := h
      view.w := view.h := 0
      b.layout()
      view.layout()
   end

   public get_default_width()
      return b.get_preferred_width()
   end

   public get_default_height(dw)
      return b.get_preferred_height(dw)
   end

   public new()
      List.new()
      view.set_accepts_focus(&no)
      set_border(NullBorder())
      return
   end
end


