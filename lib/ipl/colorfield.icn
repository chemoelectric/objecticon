package ipl.colorgui

import
   gui, graphics, util

#
# A component for choosing a color, in icon color-string format.
#
class ColorField(Component)
   private readable
      b,
      cr,
      tf,
      last_val,
      opaque_flag

   # If set, the field will only allow opaque colors to be entered.
   #
   public set_opaque(s)
      self.opaque_flag := need_flag(s)
      return self
   end

   public on_textfield(ev, src, type)
      if last_val := get_value() then {
         tf.remove_wattrib(WAttrib.FG).reset()
         cr.set_color(last_val)
      } else {
         tf.set_fg("red").reset()
         cr.set_color("white")
      }
   end

   public override initially()
      Component.initially()
      tf.set_width(cbwin.text_width(if /opaque_flag then "00000,00000,00000,00000 " else "00000,00000,00000 ") + tf.border.get_total_width())
   end

   # Return the value (as an integer form icon color value), or fail
   # if the input is not currently valid.
   #
   public get_value()
      local c
      c := Window.color_value(tf.get_contents()) | fail
      if \opaque_flag & Window.parse_color(c).alpha ~= 65535 then
         fail
      return c
   end

   # Set the value (from an icon color value).  Fails if `s` is not a
   # valid color.
   #
   public set_value(s)
      s := Window.color_value(s) | fail
      if \opaque_flag & Window.parse_color(s).alpha ~= 65535 then
         fail
      tf.set_contents(s)
      last_val := s
      cr.set_color(last_val)
      if is_live() then
         tf.remove_wattrib(WAttrib.FG).reset()
      return self
   end

   # Set the value as above, but firing events.
   #
   public assign_value(s, ev, coalesce)
      s := Window.color_value(s) | fail
      if \opaque_flag & Window.parse_color(s).alpha ~= 65535 then
         fail
      tf.assign_contents(s,, ev, coalesce)
      return self
   end

   private on_choose(ev)
      local d
      d := ColorDialog(last_val).set_opaque(opaque_flag)
      d.show_modal(parent_dialog)
      assign_value(d.get_result(), ev)
   end

   # Create a new instance optionally with the given initial value of
   # the field, as a icon color value.
   #
   public override new(val)
      local p, t
      /val := "black"
      Component.new() 
      set_layout(GridLayout().set_doi(0).set_dii(0))
      p := Component().
         set_layout(GridLayout().set_doi(0).set_dii(0))
      cr := ColorRectangle().
         set_size(25, 5).
         set_constraint("y_fill", &yes)
      p.add(cr)
      tf := TextField().
         set_border(EmptyBorder().set_l_inset(Gui.TEXT_INSET).set_r_inset(Gui.TEXT_INSET))
      tf.connect(on_textfield, Event.CONTENT_CHANGED | Event.ACTION)
      p.add(tf)
      t := Border().
         set_content(p).
         set_border(SunkenBorder()).
         set_preferred_focus(tf)
      add(t)
      b := TextButton().
         set_label("Choose...").
         connect(on_choose, Event.ACTION)
      add(b)
      set_value(val)
      return
   end
end
