############################################################################
#
#	File:     bevel.icn
#
#	Subject:  Procedures for drawing beveled objects
#
#	Author:   Gregg M. Townsend
#
#	Date:     April 1, 1997
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#	These procedures draw objects having a raised or sunken appearance.
#
#	BevelCircle(win, x, y, r, bw)		draws a beveled circle.
#
#	BevelDiamond(win, x, y, r, bw)		draws a beveled diamond.
#
#	BevelTriangle(win, x, y, r, o, bw)	draws a beveled triangle.
#
#	BevelSquare(win, x, y, r, bw)		draws a beveled square.
#
#	FillSquare(win, x, y, r)		fills a square.
#
#	FillDiamond(win, x, y, r)		fills a diamond.
#
#	FillTriangle(win, x, y, r, o)		fills a triangle.
#
#	RidgeRectangle(win, x, y, w, h, bw)	draws a ridged rectangle.
#
#	GrooveRectangle(win, x, y, w, h, bw)	draws a grooved rectangle.
#
#	BevelRectangle(win, x, y, w, h, bw)	draws a beveled rectangle.
#
#	DrawRidge(win, x1, y1, x2, y2, w)	draws a ridged line.
#
#	DrawGroove(win, x1, y1, x2, y2, w)	draws a grooved line.
#
############################################################################
#
#  These procedures allow the drawing of buttons and other objects
#  with a three-dimensional appearance.  They are intended to be
#  used like other graphics primitives (DrawRectangle() etc.).
#  However, this abstraction fails if the background color changes
#  or if clipping is set, due to the use of cached graphics contexts.
#
#
#  BevelCircle(win, x, y, r, bw) -- draw beveled circle
#  BevelDiamond(win, x, y, r, bw) -- draw beveled diamond
#  BevelTriangle(win, x, y, r, o, bw) -- draw beveled triangle
#  BevelSquare(win, x, y, r, bw) -- draw beveled square
#	These procedures draw a figure centered at (x,y) and having
#	a "radius" of r.  bw is the bevel width, in pixels.
#       o is the triangle orientation: "n", "s", "e", or "w".
#
#  FillSquare(win, x, y, r) -- fill square centered at (x,y)
#  FillDiamond(win, x, y, r) -- fill diamond centered at (x,y)
#  FillTriangle(win, x, y, r, o) -- fill triangle centered at (x,y)
#	These procedures complement the beveled outline procedures
#	by filling a figure centered at (x,y).  Fillcircle is already
#	an Icon function and so is not included here.
#
#  RidgeRectangle(win, x, y, w, h, bw) -- draw ridged rectangle
#  GrooveRectangle(win, x, y, w, h, bw) -- draw grooved rectangle
#  BevelRectangle(win, x, y, w, h, bw) -- draw beveled rectangle
#	These procedures draw a rectangle with the given external
#	dimensions and border width.  Beveled rectangles are raised
#	if bw > 0 or sunken if bw < 0.
#
#  DrawRidge(win, x1, y1, x2, y2, w) -- draw a ridged line
#  DrawGroove(win, x1, y1, x2, y2, w) -- draw a grooved line
#	These procedures draw a groove or ridge of width 2 at any angle.
#	If w = 0, a groove or ridge is erased to the background color.
#
#  For BevelSquare() and FillSquare(), the width drawn is 2 * r + 1,
#  not just 2 * r.  This is necessary to keep the visual center at the
#  specified (x, y) and is consistent with the other centered procedures
#  and the built-in function FillCircle.
#
############################################################################
#
#  Links:  graphics
#
############################################################################
#
#  Requires:  Version 9 graphics
#
############################################################################


package ipl.graphics

import util(Math)

global hilite_table, shadow_table

procedure GetHiliteColor(win)
   local c, hls, r

   /hilite_table := table()
   c := win.get_bg()
   if r := member(hilite_table, c) then
      return r

   hls := rgb2hls(color2rgb(c))
   if hls.l < 0.1 then        hls.l := 0.5
   else if hls.l < 0.25 then  hls.l +:= 0.25
   else if hls.l < 0.5 then   hls.l +:= 0.25
   else if hls.l < 0.75 then  hls.l +:= 0.25
   else if hls.l < 0.9 then   hls.l := 1.0 
   else                       hls.l := 0.75
   hls.s /:= 2
   insert(hilite_table, c, r := rgb2color(hls2rgb(hls)))
   return r
end

procedure GetShadowColor(win)
   local c, hls, r

   /shadow_table := table()
   c := win.get_bg()
   if r := member(shadow_table, c) then
      return r

   hls := rgb2hls(color2rgb(c))
   if hls.l < 0.1 then        hls.l := 0.25
   else if hls.l < 0.25 then  hls.l := 0.0
   else if hls.l < 0.5 then   hls.l -:= 0.25
   else if hls.l < 0.75 then  hls.l := 0.25
   else if hls.l < 0.9 then   hls.l -:= 0.50 
   else                       hls.l := 0.40
   hls.s /:= 2
   insert(shadow_table, c, r := rgb2color(hls2rgb(hls)))
   return r
end

procedure GetHiliteClone(win)
   win := win.clone()
   win.set_fg(GetHiliteColor(win))
   return win
end

procedure GetShadowClone(win)
   win := win.clone()
   win.set_fg(GetShadowColor(win))
   return win
end


#  BevelCircle(win, x, y, r, bw) -- draw beveled circle

# draw beveled circle
procedure BevelCircle(win, x, y, r, bw)		
   local upper, lower, a

   /r := 6
   /bw := 2
   if bw >= 0 then {
      upper := GetHiliteClone(win)
      lower := GetShadowClone(win)
   }
   else {
      upper := GetShadowClone(win)
      lower := GetHiliteClone(win)
      bw := -bw
   }

   upper.set_line_width(2)
   lower.set_line_width(2)

   a := -Math.PI / 8
   while (bw -:= 1) >= 0 do {
      lower.draw_circle(x, y, r, a, Math.PI)
      upper.draw_circle(x, y, r, a + Math.PI, Math.PI)
      r -:= 1
   }
   upper.close()
   lower.close()
   return win
end


#  BevelDiamond(win, x, y, r, bw) -- draw beveled diamond

# draw beveled diamond
procedure BevelDiamond(win, x, y, r, bw)	
   local upper, lower

   /r := 6
   /bw := 3
   if bw >= 0 then {
      upper := GetHiliteClone(win)
      lower := GetShadowClone(win)
   }
   else {
      upper := GetShadowClone(win)
      lower := GetHiliteClone(win)
      bw := -bw
   }

   upper.set_line_width(1)
   lower.set_line_width(1)

   while (bw -:= 1) >= 0 do {
      lower.draw_line(x - r, y, x, y + r, x + r, y)
      upper.draw_line(x - r, y, x, y - r, x + r, y)
      r -:= 1
   }
   upper.close()
   lower.close()
   return win
end


#  BevelTriangle(win, x, y, r, o, bw) -- draw beveled triangle

procedure BevelTriangle(win, x, y, r, o, bw)
   local upper, lower

   /r := 6
   /bw := 2
   if bw >= 0 then {
      upper := GetHiliteClone(win)
      lower := GetShadowClone(win)
   }
   else {
      upper := GetShadowClone(win)
      lower := GetHiliteClone(win)
      bw := -bw
   }

   upper.set_line_width(1)
   lower.set_line_width(1)

   while (bw -:= 1) >= 0 do {
      case o of {
         default: {  #"n"
            lower.draw_line(x - r, y + r, x + r, y + r, x, y - r)
            upper.draw_line(x - r, y + r, x, y - r)
         }
         "s": {
            lower.draw_line(x, y + r, x + r, y - r)
            upper.draw_line(x, y + r, x - r, y - r, x + r, y - r)
         }
         "e": {
            lower.draw_line(x - r, y + r, x + r, y)
            upper.draw_line(x - r, y + r, x - r, y - r, x + r, y)
         }
         "w": {
            lower.draw_line(x - r, y, x + r, y + r)
            lower.draw_line(x + r, y + r, x + r, y-r)
            upper.draw_line(x - r, y, x + r, y - r)
         }
      }
      r -:= 1
   }
   upper.close()
   lower.close()
   return win
end


#  BevelSquare(win, x, y, r, bw) -- draw beveled square

# draw beveled square
procedure BevelSquare(win, x, y, r, bw)		
   /r := 6
   return BevelRectangle(win, x - r, y - r, 2 * r + 1, 2 * r + 1, bw)
end


#  RidgeRectangle(win, x, y, w, h, bw) -- draw ridged rectangle

# draw ridged rectangle
procedure RidgeRectangle(win, x, y, w, h, bw)	
   /bw := 2
   return GrooveRectangle(win, x, y, w, h, -bw)
end


#  GrooveRectangle(win, x, y, w, h, bw) -- draw grooved rectangle

# draw grooved rectangle
procedure GrooveRectangle(win, x, y, w, h, bw)	
   local abw

   if (w | h) < 0 then
      return win

   /bw := 2
   if bw >= 0 then
      bw := (bw + 1) / 2
   else
      bw := -((-bw + 1) / 2)
   abw := abs(bw)

   BevelRectangle(win, x, y, w, h, -bw)
   BevelRectangle(win, x + abw, y + abw, w - 2 * abw, h - 2 * abw, bw)
   return win
end


#  BevelRectangle(win, x, y, w, h, bw) -- draw beveled rectangle
#
#  bw is the border width (>0 for raised bevel, <0 for sunken bevel).
#  (x,y,w,h) bounds the entire beveled rectangle, not the usable area inside.

# draw beveled rectangle
procedure BevelRectangle(win, x, y, w, h, bw)	
   local upper, lower, xx, yy

   if (w | h) < 0 then
      return win

   /bw := 2
   if bw >= 0 then {
      upper := GetHiliteClone(win)
      lower := GetShadowClone(win)
   }
   else {
      upper := GetShadowClone(win)
      lower := GetHiliteClone(win)
      bw := -bw
   }

   xx := x + w
   yy := y + h
   lower.fill_rectangle(x, yy - bw, w, bw)
   lower.fill_rectangle(xx - bw, y, bw, h)

   while (bw -:= 1) >= 0 do {
      upper.fill_rectangle(x, y, 1, h)
      upper.fill_rectangle(x + 1, y, w - 1, 1)
      h -:= 2
      w -:= 2
      x +:= 1
      y +:= 1
   }

   upper.close()
   lower.close()
   return win
end


#  DrawRidge(win, x1, y1, x2, y2, w) -- draw a ridged line
#
#  If w is negative, a groove is drawn instead.

# draw ridged line
procedure DrawRidge(win, x1, y1, x2, y2, w)	
   /w := 2

   DrawGroove(win, x1, y1, x2, y2, -w)
   return win
end


#  DrawGroove(win, x1, y1, x2, y2, w) -- draw a grooved line
#
#  If w > 0, draw groove of width 2.
#  If w = 0, erase groove/ridge of width 2.
#  If w < 0, draw ridge of width 2.
#
#  Horizontal and vertical grooves fill the same pixels as lines drawn
#  line_width=2.  Angled grooves are not necessarily the same, though.

# draw grooved line
procedure DrawGroove(win, x1, y1, x2, y2, w)	
   local a, n, upper, lower

   /w := 2
   x1 := integer(x1)
   y1 := integer(y1)
   x2 := integer(x2)
   y2 := integer(y2)

   if w ~= 0 then {			# if really drawing
      upper := GetShadowClone(win)
      lower := GetHiliteClone(win)
      }
   else {
      upper := win.clone().set_fg(win.get_bg())
      lower := win.clone().set_fg(win.get_bg())
      }

   upper.set_line_width(1)
   lower.set_line_width(1)

   a := Math.atan(y2 - y1, x2 - x1)
   if a < 0 then
      a +:= Math.PI
   n := integer(8 * a / Math.PI)

   if w < 0 then			# if groove/ridge swap
      upper :=: lower
   if n = 2 then			# if tricky illumination angle
      upper :=: lower

   if 2 <= n <= 5 then {		# approximately vertical
      upper.draw_line(x1 - 1, y1, x2 - 1, y2)
      lower.draw_line(x1, y1, x2, y2)
      }
   else {				# approximately horizontal
      upper.draw_line(x1, y1 - 1, x2, y2 - 1)
      lower.draw_line(x1, y1, x2, y2)
      }

   upper.close()
   lower.close()

   return win
end


#  FillSquare(win, x, y, r) -- fill square centered at (x,y)

# draw filled square
procedure FillSquare(win, x, y, r)		
   return win.fill_rectangle( x - r, y - r, 2 * r + 1, 2 * r + 1)
end


#  FillDiamond(win, x, y, r) -- fill diamond centered at (x,y)

# draw filled diamond
procedure FillDiamond(win, x, y, r)		
   return win.fill_polygon( x - r, y, x, y + r + 1, x + r + 1, y, x, y - r - 1)
end


#  FillTriangle(win, x, y, r, o) -- fill triangle centered at (x,y)
#
#  r is "radius" (1/2 of side of enclosing square)
#  o is orientation ("n", "s", "e", "w")

# draw filled triangle
procedure FillTriangle(win, x, y, r, o)		
   return case o of {
      default:  #"n"
         win.fill_polygon( x - r - 1, y + r + 1, x, y - r, x + r + 1, y + r + 1)
      "s":
         win.fill_polygon( x - r, y - r, x, y + r, x + r, y - r)
      "e":
         win.fill_polygon( x - r, y - r, x + r, y, x - r, y + r)
      "w":
         win.fill_polygon( x + r + 1, y - r - 1, x - r, y, x + r + 1, y + r + 1)
      }
end

