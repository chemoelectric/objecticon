#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui


############################################################################
#
# Class for representing a Table on the canvas.
#
class CanvasTable(CanvasComponent,Table)
   public
      select_mode,
      columns

   #
   # Default minimum width for the object
   #
   public min_width()
      return 65
   end

   #
   # Default minimum height for the object
   #
   public min_height()
      return 65
   end

   #
   # Generate code into Code object c.
   #
   public gen_code(c)
      local i
      cast(self,CanvasComponent).gen_code(c)
      case self.select_mode of {
         Select.NONE : c.line(self.name || ".set_select_mode(Select.NONE)")
         Select.ONE : c.line(self.name || ".set_select_mode(Select.ONE)")
         Select.MANY : c.line(self.name || ".set_select_mode(Select.MANY)")
      }
      c.line(self.name || ".set_contents([])")

      every i := !self.get_columns() do {
         i.gen_code(c)
         c.line(self.name || ".add_column(" || i.name || ")")
      }
   end

   #
   # Duplicate object.
   #
   public dup()
      local c
      c := CanvasTable()
      cast(self,CanvasComponent).dup_fields(c)
      every c.add_column((!self.get_columns()).dup())
      c.select_mode := self.select_mode
      c.set_contents([])
      return c
   end

   #
   # Return the I/O template.
   #
   public get_template()
      return cast(self,CanvasComponent).get_template() ||| 
         [
          ["Select Mode", "select_mode"],
          ["Columns", "columns"]
         ]
   end

   public add_column(c)
      c.parent_Canvas := self.parent_Canvas
      cast(self,Table).add_column(c)
   end

   #
   # Use a temporary variable to store the columns, then add them
   # all afterwards.  This is needed since in the Table class, the columns
   # are the children of the TableHeader component, which is not
   # encodeable itself.
   #

   public pre_encode()
      cast(self,CanvasComponent).pre_encode()
      self.columns := get_columns()
   end

   public post_decode()
      cast(self,CanvasComponent).post_decode()
      every add_column(!self.columns)
   end

   #
   # Open the configuration dialog box.
   #
   public dialog()
      return CanvasTableDialog(self)
   end

   public string_rep()
      local l, c, s
      l := []
      every c := !self.get_columns() do {
         s := if is(c.paint, CanvasTextPaint) then
            c.paint.str
         else
            subtype(c)
         put(l, [s, 
                 if /c.column_width then "Auto" else c.column_width, 
                 c.column_align])
      }
      put(l, ["", "", ""])
      return l
   end

   public gen_cos()
      suspend cast(self,CanvasComponent).gen_cos() | !self.get_columns()
   end

   public new()
      cast(self,Table).new()
      cast(self,CanvasComponent).new()
      self.set_contents([])
      self.class_name := "Table"
      self.import_name := "gui"
      self.name := "table"
      self.select_mode := Select.NONE
      return
   end
end




