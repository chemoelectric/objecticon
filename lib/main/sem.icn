#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

$define LIB "objecticonipclib.so"

package ipc

import lang, io

#
# This class provides a semaphore facility.  The implementation requires
# the accompanying C library uniipclib.so to be on the library path.
#
# Instances of this class should not be created directly, but rather using the factory
# procedures {open_public}, {create_public} and {create_private}
#
class Sem(NoCopy)
   private 
      id

   #
   # Set the value of the semaphore to x
   #
   public native set_value(x)

   #
   # Get the current semaphore value.
   #
   public native get_value()

   #
   # Perform the wait operation, defined as {semop(-1)}
   #
   public wait()
      semop(-1)
   end

   #
   # Attempt a wait, defined as {semop_nowait(-1)}
   #
   public attempt()
      return semop_nowait(-1)
   end

   #
   # Perform the signal operation, defined as {semop(1)}
   #
   public signal()
      semop(1)
   end

   #
   # Perform a semop on the underlying sempahore.  If n is >0 then n is
   # added to the value.  If it is <0 then the process is suspended until
   # the value is >= abs(n), then abs(n) is subtracted.  If n is zero,
   # then the process suspends until the semaphore value is zero.
   #
   public native semop(n)

   # 
   # Peform a semop with the IPC_NOWAIT flag set.  This is the same as
   # {semop()}, but instead of suspending the call will fail.
   #
   public native semop_nowait(n)

   # 
   # Repeatedly peform {semop_nowait()}, sleeping for a short period between each try
   # until t milliseconds or {semop_nowait()} succeeds.  Fails on a timeout; otherwise
   # succeeds.
   # @param n the parameter to semop_nowait
   # @param t the timeout in milliseconds
   #
   public semop_poll(n, t)
      local c
      c := Prog.get_runtime_millis()
      repeat {
         if semop_nowait(n) then
            return 
         if Prog.get_runtime_millis() - c >= t then
            fail
         delay(50)
      }
   end

   #
   # Clean up the resources used by the semaphore.  This should be called by
   # the parent process after the semaphore is no longer needed.
   #
   public native remove()

   #
   # Return the underlying id of the semaphore.
   #
   public get_id()
      return id
   end

   private static native open_public_impl()
   private static native create_public_impl()
   private static native create_private_impl()

   private static init() 
      Class.load_library(Files.find_native_lib(LIB)) | runerr("Couldn't load dynamic library " || &why)
   end

   private new(id)
      self.id := id
      return
   end

   #
   # Get an existing public semaphore with the given key, or fail
   # if no such semaphore exists.
   #
   public static open_public(key)
      return Sem(open_public_impl(key))
   end

   #
   # Create a new public semaphore with the given key and initial value
   #
   public static create_public(key, val)
      /val := 1
      return Sem(create_public_impl(key, val))
   end

   #
   # Create a new private semaphore with the given initial value
   #
   public static create_private(val)
      /val := 1
      return Sem(create_private_impl(val))
   end
end
