# $Id$

import 
   gui, 
   ipl.lists,
   lang

class GroupsDialog(Dialog)
   public 
      c,
      group_objs,
      groups,
      member_objs,
      members,
      edit_group, 
      delete_group, 
      delete_member, 
      okay_result

   #
   # Get result flag
   #
   public get_okay_result()
      return self.okay_result
   end

   public on_cancel()
      self.dispose()
   end

   public on_okay()
      self.okay_result := 1
      self.dispose()
   end

   public on_delete_group(ev)
      local g
      g := group_objs[groups.get_selections()[1]] | fail
      ldel(c.checkbox_groups, g)
      ldel(c.button_groups, g)
      refresh_groups()
   end

   public on_delete_member(ev)
      local m, g
      g := group_objs[groups.get_selections()[1]] | fail
      m := member_objs[members.get_selections()[1]] | fail
      if is(m, gui.Toggle) & m.parent_check_box_group === g then
         m.set_parent_check_box_group()
      else if is(m, gui.Button) & m.parent_button_group === g then      
         m.set_parent_button_group()
      refresh_members()
   end

   public on_edit_group(ev)
      local g, d
      g := group_objs[groups.get_selections()[1]] | fail
      d := GroupEdit(g)
      d.show_modal(self)
      if \d.okay_result then
         refresh_groups()
   end

   public on_group_select()
      refresh_members()
   end

   public on_member_select()
      update_grey()
   end

   public update_grey()
      if *groups.get_selections() > 0 then {
         edit_group.set_is_shaded(&no)
         if *member_objs > 0 then
            delete_group.set_is_shaded(&yes)
         else
            delete_group.set_is_shaded(&no)
      } else {
         delete_group.set_is_shaded(&yes)
         edit_group.set_is_shaded(&yes)
      }

      if *members.get_selections() > 0 then
         delete_member.set_is_shaded(&no)
      else
         delete_member.set_is_shaded(&yes)
   end

   public refresh_groups()
      group_objs := c.checkbox_groups ||| c.button_groups
      groups.set_contents(cos_names(group_objs))
      groups.clear_selections()
      members.set_contents([])
      update_grey()
   end

   public refresh_members()
      member_objs := group_objs[groups.get_selections()[1]].get_members() | []
      members.set_contents(cos_names(member_objs))
      members.clear_selections()
      update_grey()
   end

   public new(c)
      local b, p, oc

      Dialog.new()
      self.c := c
      self.set_label("Groups Setup")

      set_layout(GridLayout())

      b := Border().set_constraint("eol", &yes).set_title(Label().set_label("Groups"))
      c := Component().set_layout(GridLayout())
      groups := TextList().set_size(scale(180), scale(100)).set_select_mode("one")
      groups.connect(self.on_group_select, Event.SELECTION_CHANGED)
      c.add(groups)
      p := Panel().set_constraint("x_weight", 0).set_layout(GridLayout().set_doi(0))
      edit_group := TextButton().set_label("Edit").set_constraint("eol", &yes)
      edit_group.connect(self.on_edit_group, Event.ACTION)
      p.add(edit_group)
      delete_group := TextButton().set_label("Delete").set_constraint("y_align", "t").set_constraint("y_weight", 1)
      delete_group.connect(self.on_delete_group, Event.ACTION)
      p.add(delete_group)
      c.add(p)
      b.set_content(c)
      self.add(b)

      b := Border().set_constraint("eol", &yes).set_title(Label().set_label("Members"))
      c := Component().set_layout(GridLayout())
      members := TextList().set_size(scale(180), scale(100)).set_select_mode("one")
      members.connect(self.on_member_select, Event.SELECTION_CHANGED)
      c.add(members)
      p := Panel().set_constraint("x_weight", 0).set_layout(GridLayout().set_doi(0))
      delete_member := TextButton().set_label("Delete").set_constraint("y_align", "t").set_constraint("y_weight", 1)
      delete_member.connect(self.on_delete_member, Event.ACTION)
      p.add(delete_member)
      c.add(p)
      b.set_content(c)
      self.add(b)

      refresh_groups()

      oc := OkCancel()
      oc.listen(self)
      self.add(oc)
      return
   end
end


class GroupEdit(Dialog)
   public
      c, 
      tabset,
      code_tab,
      okay_result

   public setup()
      local oc, label
      Class.get_name(c) ? {
         ="Canvas"
         label := tab(0) || " Setup"
      }
      self.set_label(label)

      set_layout(GridLayout())

      tabset := TabSet().set_constraint("eol", &yes)
      add(tabset)
      code_tab := CodeTab(c)
      tabset.add(code_tab)

      oc := OkCancel()
      oc.listen(self)
      self.add(oc)
   end

   public on_cancel()
      self.dispose()
   end

   public on_okay()
      code_tab.validate_input() | fail
      code_tab.set_vals()
      self.okay_result := 1
      self.dispose()
   end

   public new(c)
      Dialog.new()
      self.c := c
      setup(c)
      return
   end
end


