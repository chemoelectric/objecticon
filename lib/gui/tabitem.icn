#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import lang

#
# This class represents a single pane in a {TabSet}.  {Components}
# can be added to the {TabItem} using {Component}'s {add} method.
# They are then displayed and accept input when that TabItem
# is selected.
#
# Components added to the {TabItem} are positioned relative to
# the position and size of the parent {TabSet}.  Therefore for
# example {set_pos("50%", "50%")} refers to the centre of the
# {TabSet} rather than the centre of the screen.  The components
# also inherit any window attributes of the {TabSet}, such as
# font, colour and so on.
#
class TabItem(Component)
   public 
      paint,
      label_border,
      tab_x,
      tab_w

   #
   # Set the {TabItem}'s label.
   #
   public set_label(x)
      set_paint(paint_for_string(x))
   end

   public set_label_border(b)
      (\self.label_border).finally()
      self.label_border := b
      if is_initialized() then {
         self.label_border.initially(parent)
         self.parent.invalidate()
      }
   end

   public set_paint(p)
      (\self.paint).finally()
      self.paint := p
      if is_initialized() then {
         self.paint.initially(parent, self.accel)
         self.parent.invalidate()
      }
   end

   public initially()
      \self.paint | fatal(self, "no label specified")
      cast(self,Component).initially()
      # We are painted on the TabSet's attributes, so init
      # the label border and paint on it too.
      self.label_border.initially(parent)
      self.paint.initially(parent, self.accel)
   end

   public finally()
      cast(self,Component).finally()
      paint.finally()
   end

   public get_label_width()
      return paint.w + label_border.get_total_width()
   end

   public get_label_height()
      return paint.h + label_border.get_total_height()
   end

   public draw_label(W, x, y, w, h, focus)
      local r
      r := Rect(x, y, w, h)
      label_border.draw_rect(W, r)
      paint.draw_point(W, label_border.float(r, paint))
      if \focus then
         label_border.draw_focus_rect(W, r)
   end

   public set_one(f)
      case f.attr of {
         "label" : set_label(f.string_val())
         "label_border" : set_label_border(f.object_val(gui.ABorder))
         "paint" : set_paint(f.object_val(gui.Paint))
         default: return cast(self,Component).set_one(f)
      }
      return
   end

   public new(a[])
      cast(self,Component).new()
      self.label_border := EmptyBorder()
      set_fields(a)
      return
   end
end

