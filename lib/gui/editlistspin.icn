#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

#
# Selection from a list with edit
#
class EditListSpin(SelectionList,EditSpin)
   public 
      cc_ev

   public apply_selection(ev)
      local s 
      s := extract_selection() | ""
      if /ev then
         self.view.set_contents(s)
      else {
         # Note the event so that we don't set selection to &null in on_textfield below.
         cc_ev := ev
         self.view.assign_contents(s, ev)
      }
   end

   public extract_selection()
      return self.selection_list[\self.selection] 
   end

   public on_textfield(ev, src, type)
      if type = Event.CONTENT_CHANGED & ev ~=== cc_ev then
         self.selection := &null
      cast(self,EditSpin).on_textfield(ev, src, type)
   end

   #
   # Set the contents of the text to the given string; the
   # selection is set to any matching item in the list, or
   # &null if there is no match.
   #
   public set_contents(x)
      if not object_set_selection(x) then {
         self.selection := &null
         self.view.set_contents(x)
      }
      return self
   end

   public do_increment(e)
      if *selection_list = 0 then
         fail
      if /self.selection | self.selection = *self.selection_list then
         self.set_selection(1, e)
      else
         self.set_selection(self.selection + 1, e)
   end

   public do_decrement(e)
      if *selection_list = 0 then
         fail
      if /self.selection | (self.selection = 1) then
         self.set_selection(*self.selection_list, e)
      else
         self.set_selection(self.selection - 1, e)
   end

   public initially()
      \self.selection_list | runerr("no selection list specified")
      cast(self,EditSpin).initially()
   end

   public get_default_width()
      local t
      t := 0
      # Max string length + space for cursor (cf TextField's get_view() method)
      every t <:= self.cbwin.text_width((view.contents | !self.selection_list) || " ")
      return border.get_total_width() + up.get_preferred_width() + t + view.border.get_total_width()
   end
end


