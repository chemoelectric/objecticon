import io, ipl.test

procedure mkstr(n)
   local s, i, l
   l := []
   s := ""
   every 1 to ?n do {
      i := ?[10,20,100,120,200,220,300,400,500,1000,2000,3000,4000,5000,10000]
      put(l, i)
      s ||:= string(uchar(i))
   }
   return [ucs(s), l]
end

procedure check_assign_impl(s, l, i, j)
   local t,n,ln
   if i > j then i :=: j
   n := mkstr(20)
   t := s
   t[i:j] := n[1]
   ln := l[1:i] ||| n[2] ||| l[j:0]
   yes_no{"Correct length of constructed string", *t = *s - (j - i) + *n[1]}
   cmp_seq{"Correct ords of constructed string", ord(t), !ln}
end

procedure check_assign(s, l)
   check_assign_impl(s, l, 1, *s+1)
   check_assign_impl(s, l, *s+1, *s+1)
   check_assign_impl(s, l, 1, 1)
   
   every 1 to 25 do {
      check_assign_impl(s, l, ?(*s+1), ?(*s+1))
   }
end

procedure check_iter(s, l)
   cmp_seq{"ord(s) -vs ord(!s)", ord(s), ord(!s)}
   cmp_seq{"Iterator ord sequence", ord(s), !l}
   cmp_seq{"Back sequence", ord(back(s)), back(l)}
end

procedure check_substr(s, l)
   local i, j, sb, lb
   every i := 0 to *s do {
      sb := s[1 +: i]
      lb := l[1 +: i]
      yes_no{"1.Substring length", *sb = *lb}
      cmp_seq{"1.Substring ords", ord(!sb), !lb}
      sb := s[-i:0]
      lb := l[-i:0]
      yes_no{"2.Substring length", *sb = *lb}
      cmp_seq{"2.Substring ords", ord(!sb), !lb}
   }

   # Again, but with a fresh string each time, to test indexing from various points
   every i := 0 to *s do {
      s := repl(s, 1) # Allocates a new ucs_block
      sb := s[1 +: i]
      lb := l[1 +: i]
      yes_no{"1.Substring length", *sb = *lb}
      cmp_seq{"1.Substring ords", ord(!sb), !lb}
      s := repl(s, 1) # Allocates a new ucs_block
      sb := s[-i:0]
      lb := l[-i:0]
      yes_no{"2.Substring length", *sb = *lb}
      cmp_seq{"2.Substring ords", ord(!sb), !lb}
   }

   every 1 to 20 do {
      i := ?(*s+1)
      j := ?(*s+1)
      sb := s[i:j]
      lb := l[i:j]
      yes_no{"3.Substring length", *sb = *lb}
      cmp_seq{"3.Substring ords", ord(!sb), !lb}
   }
end

procedure test_cat_comp()
   local s1,s2
   every s1 := gen_odd() do {
      every s2 := gen_odd() do {
         try{image(s1)||"=="||image(s2), s1==s2}
         try{image(s1)||"||"||image(s2), s1||s2}
      }
   }
end

procedure gen_odd()
   suspend "abc" | u"abc" | 'abc' | 
      "abc\u1234" | u"abc\u1234" | 'abc\u1234"' |
      "abc\xff" | u"abc\u00ff" | 'abc\xff' | "" | u"" | ''
end

procedure main()
   local p
   every p := [ucs(""),[]] | (|mkstr(32))\50 do {
      write("Test string:", image(p[1]))
      check_iter(p[1],p[2])
      check_assign(p[1],p[2])
      check_substr(p[1],p[2])
   }
   test_cat_comp()
   write("ok")
end
