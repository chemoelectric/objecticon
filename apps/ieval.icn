import io, lang, util, ipl.options, ipl.lists

procedure create_prog(imps, links)
   local tf, prog

   imps ++:= set("ipl.ieval")  # Avoid changing imps parameter
   prog := ""
   every prog ||:= "import " || !imps || "\n"
   prog ||:= "invocable all\n_
procedure main(imports, files, opts)\n_
    ipl.ieval.Ieval(imports, files, opts).run()\n_
end\n"
   return use {
      tf := Files.make_temp_filename("ieval"),
      compile(prog, tf, links),
      save_why{Files.remove(tf)}      # save_why since oit may remove the output file on failure
   }
end

procedure compile1(prog, pf, tf, links)
   local p
   Files.string_to_file(pf, prog) | fail
   use{ p := FilterOutputStream(, "oit", ["-s", "-l", "2", "-o", tf, pf] ||| links) } | fail
   return p.succeeded()
end

procedure compile(prog, tf, links)
   local pf
   use {
      pf := Files.make_temp_filename("ieval", ".icn"),
      compile1(prog, pf, tf, links),
      Files.remove(pf)
   } | fail
   return lang.Prog.load(tf)
end

procedure main(a)
   local opts, prog, imports, links
   opts := options(a, "-i:*-l:*-wglob!-s!-g!-hlim+-elim+-llim+")
   imports := set()
   every insert(imports, !str2list(!\opts["i"]))
   links := \opts["l"] | []
   prog := create_prog(imports, links) | stop(&why)
   Prog.get_global("main", prog)(imports, a, opts)
end
