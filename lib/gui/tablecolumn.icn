#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

#
# This class provides one column within a {Table}, which
# displays a table of data.  A column has a label with a
# button which produces an event when clicked.  The column may
# be expanded or contracted by dragging the right edge of the
# button.
#
# The label is set by calling the {set_label(x)} method of the
# parent class, {TextButton}.
# 
abstract class BaseTableColumn(TextButton)
   public 
      column_width,  
      drag_offset,
      tx,
      tw,
      is_resizing

   public static const
      CHANGE_SIZE_BORDER, MIN_COLUMN_WIDTH

   private static init()
      CHANGE_SIZE_BORDER := env_scale("OI_TABLECOLUMN_CHANGE_SIZE_BORDER") | scale(4)
      MIN_COLUMN_WIDTH := env_scale("OI_TABLECOLUMN_MIN_COLUMN_WIDTH") | scale(20)
   end

   public in_resize_region(e)
      return in_region(e) &
         (self.x + self.w - CHANGE_SIZE_BORDER <= e.x < self.x + self.w)
   end

   public handle_lpress(e)
      if in_resize_region(e) then {
         self.is_resizing := &yes
         self.parent.parent.no_more_sizing := &yes
         self.drag_offset := e.x - (self.x + self.w)
      } else
         TextButton.handle_lpress(e)
   end

   public handle_ldrag(e)
      if \self.is_resizing then {
         self.w_spec := e.x - self.x - drag_offset
         self.w_spec <:= MIN_COLUMN_WIDTH
         get_table_content().invalidate_subject_width()
         get_table_content().set_internal_fields()
         self.parent.layout()
         self.parent.parent.invalidate()
      } else
         TextButton.handle_ldrag(e)
   end

   public handle_lrelease(e)
      if \self.is_resizing then {
         self.is_resizing := &no
      } else
         TextButton.handle_lrelease(e)
   end

   public get_pointer(e)
      if in_resize_region(e) then
         return "sb h double arrow"
   end

   #
   # Set the initial width of the column, in pixels.  If this is
   # not provided, then the width will be set automatically to
   # use up any available free space.
   # @param x  The width
   #
   public set_column_width(x)
      self.column_width := x
      return self
   end

   #
   # Set the column alignment
   # @param x A constant from {Align}
   public set_column_align(x)
      self.border.x_align := x
      return self
   end

   public display()
      TextButton.display()
      Gui.style.fill_shadow_rectangle(self.cbwin, x + w - Gui.FINE_WIDTH, y, Gui.FINE_WIDTH, h)
      if self === \parent.which_highlight then
         border.draw_highlight(cbwin, x, y, w - Gui.FINE_WIDTH, h)
   end

   #
   # Return the table content
   #
   public get_table_content()
      return parent.parent.table_content
   end

   #
   # Return the table view
   #
   public get_table_view()
      return parent.parent.table_content.view
   end

   #
   # The column's index in the header
   #
   public get_column_index()
      return parent.get_index(self)
   end

   #
   # The table's contents list
   #
   public get_contents()
      return parent.parent.table_content.contents
   end

   #
   # Generate the column's data, as a slice of the contents list.
   #
   public slice()
      suspend get_table_content().slice(get_column_index())
   end

   public layout()
      self.tx := self.x + border.get_l_inset()
      self.tw := self.w - border.get_total_width()
   end

   public shift(dx, dy)
      TextButton.shift(dx, dy)
      self.tx +:= dx
   end

   #
   # Draw an individual cell for this column.
   #
   # @param W the cloned window to draw into
   # @param data the data to draw
   # @param line the line number of the data
   # @param col the column number of the data
   # @param cy the y position of the cell
   # @param ch the height of the cell
   #
   public abstract draw_cell(W, data, line, col, cy, ch)

   #
   # Return the desired height of the lines for the cells in this column.  This should
   # return an integer if the heights are all the same, or a list containing the different
   # heights for each line.
   # @param W the cloned window to draw into
   #
   public abstract calculate_line_height(W)

   public new()
      TextButton.new()
      self.set_accepts_focus(&no)
      self.set_border(EmptyBorder().
                      set_l_inset(Gui.TEXT_INSET).
                      set_r_inset(Gui.TEXT_INSET).
                      set_x_align(Align.L))
      return
   end
end

#
# The basic table column, which displays simple textual data.
#
class TableColumn(BaseTableColumn)
   public draw_cell(W, data, line, col, cy, ch)
      local x1, y1
      x1 := case border.x_align of {
         Align.R : self.tx + self.tw - W.text_width(data)
         Align.C : self.tx + (self.tw - W.text_width(data)) / 2
         Align.L : self.tx
         default : runerr("Bad column alignment", border.x_align)
      }
      y1 := cy + (ch - W.get_line_height()) / 2
      W.draw_string(x1, y1 + W.get_line_ascent(), data)
   end

   public calculate_line_height(W)
      return W.get_line_height()
   end
end

#
# A table column which delegates interpretation of the data to
# an `ItemPaint` instance.
#
class ItemPaintTableColumn(BaseTableColumn)
   public
      item_paint,
      item_border

   public initially()
      \self.item_paint | runerr("ItemPaint not set")
      BaseTableColumn.initially()
      self.item_paint.initially(self)
      self.item_border.initially(self)
   end

   public finally()
      BaseTableColumn.finally()
      self.item_paint.finally()
      self.item_border.finally()
   end

   public set_item_paint(r)
      if is_initialized() then {
         (\self.item_paint).finally()
         self.item_paint := r
         self.item_paint.initially(self)
      } else
         self.item_paint := r
      return self
   end

   #
   # Set a border to draw along with each Paint instance.
   #
   public set_item_border(b)
      if is_initialized() then {
         (\self.item_border).finally()
         self.item_border := b
         self.item_border.initially(self)
      } else
         self.item_border := b
      return self
   end

   public set_column_align(x)
      BaseTableColumn.set_column_align(x)
      self.item_border.x_align := x
      return self
   end

   public calculate_line_height(W)
      local h, bh
      bh := item_border.get_total_height()
      if not(h := item_paint.get_constant_height(W) + bh) then {
         h := []
         every put(h, item_paint.get_height(W, slice()) + bh)
      }
      return h
   end

   public draw_cell(W, data, line, col, cy, ch)
      local r
      r := Rect(self.x, cy, self.w, ch)
      item_paint.draw_rect(W, data, item_border.float(r, item_paint.get_size(W, data)))
      item_border.draw_rect(W, r)
   end

   public new()
      BaseTableColumn.new()
      self.set_item_border(NullBorder().
                           set_x_align(Align.L))
      return
   end
end
