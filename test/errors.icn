import io, ipl.test
record array(a,b,c,d,e,f,g)
procedure p1()
   local x,i,a,c,s
   write("seq(\"a\") | monitor(&line) ----> ",
      fun{ &line, seq("a") })
   write("\"|\"(1,2) | monitor(&line) ----> ",
         fun{ &line,  "|"(1,2) })
   write("member(x,x) | monitor(&line) ----> ",
         fun{ &line,  member(x,x) })
   write("(set() ++ 'a') | monitor(&line) ----> ",
         fun{ &line,  (set() ++ 'a') })
   write("(every i := 1 to *a - 1 by 2 do write(image(a[i]),\" \",a[i + 1])) | monitor(&line) ----> ",
         fun{ &line,  (every i := 1 to *a - 1 by 2 do write(image(a[i])," ",a[i + 1])) })
   write("(every i := 1 to *a - 1 by 2 do write(image(a[i]),\" \",a[i + 1])) | monitor(&line) ----> ",
         fun{ &line,  (every i := 1 to *a - 1 by 2 do write(image(a[i])," ",a[i + 1])) })
   write("(c |||:= s) | monitor(&line) ----> ",
         fun{ &line,  (c |||:= s) })
   write("?&null | monitor(&line) ----> ",
         fun{ &line,  ?&null })
   write("c[1] | monitor(&line) ----> ",
         fun{ &line,  c[1] })
   write("(image + image) | monitor(&line) ----> ",
         fun{ &line,  (image + image) })
   write(".1(s[1],s := &null) | monitor(&line) ----> ",
         fun{ &line,  .1(s[1],s := &null) })
end

procedure p2()
   local x
   write("display(,[]) | monitor(&line) ----> ",
         fun{ &line,  display(,[]) })
   write("([] ~== \"x\") | monitor(&line) ----> ",
         fun{ &line,  ([] ~== "x") })
   write("(x + 1) | monitor(&line) ----> ",
         fun{ &line,  (x + 1) })
   write("\"a\"(1,2,3) | monitor(&line) ----> ",
         fun{ &line,  "a"(1,2,3) })
   write("(\"o\" + 0) | monitor(&line) ----> ",
         fun{ &line,  ("o" + 0) })
   write("(&cset ++ []) | monitor(&line) ----> ",
         fun{ &line,  (&cset ++ []) })
   write("(every 1 to \"a\") | monitor(&line) ----> ",
         fun{ &line,  (every 1 to "a") })
   write("!image | monitor(&line) ----> ",
         fun{ &line,  !image })
end

procedure p3()
   local t,c,r
   write("(0 to 0 by 0) | monitor(&line) ----> ",
         fun{ &line,  (0 to 0 by 0) })
   write("repl(\"b\",\"a\") | monitor(&line) ----> ",
         fun{ &line,  repl("b","a") })
   write("t(t) | monitor(&line) ----> ",
         fun{ &line,  t(t) })
   write("sort(&cset) | monitor(&line) ----> ",
         fun{ &line,  sort(&cset) })
   write("pull(&null) | monitor(&line) ----> ",
         fun{ &line,  pull(&null) })
   write("c[-4] | monitor(&line) ----> ",
         fun{ &line,  c[-4] })
   write("(type(type)(type)) | monitor(&line) ----> ",
         fun{ &line,  (type(type)(type)) })
   write("r[r] | monitor(&line) ----> ",
         fun{ &line,  r[r] })
   write("([] ** \"abc\") | monitor(&line) ----> ",
         fun{ &line,  ([] ** "abc") })
   write("('abc' ~= ('abc' ++ '')) | monitor(&line) ----> ",
         fun{ &line,  ('abc' ~= ('abc' ++ '')) })
end

procedure p4()
   local x,y,a,a3,a5,c
   write("(&lcase || numeric) | monitor(&line) ----> ",
         fun{ &line,  (&lcase || numeric) })
   write("x[\"a\"] | monitor(&line) ----> ",
         fun{ &line,  x["a"] })
   write("(100-()) | monitor(&line) ----> ",
         fun{ &line,  (100-()) })
   write("((1 := y) & &fail) | monitor(&line) ----> ",
         fun{ &line,  ((1 := y) & &fail) })
   write("(a[1:3] := a) | monitor(&line) ----> ",
         fun{ &line,  (a[1:3] := a) })
   write("(a[3] :=: a3[&null]) | monitor(&line) ----> ",
         fun{ &line,  (a[3] :=: a3[&null]) })
   write("a5[a5] | monitor(&line) ----> ",
         fun{ &line,  a5[a5] })
   write("pull[c] | monitor(&line) ----> ",
         fun{ &line,  pull[c] })
   write("(&subject := []) | monitor(&line) ----> ",
         fun{ &line,  (&subject := []) })
   write("([] ? []) | monitor(&line) ----> ",
         fun{ &line,  ([] ? []) })
   write("+\"a\" | monitor(&line) ----> ",
         fun{ &line,  +"a" })
end

procedure p5()
   local i,s,y
   write("(i <= []) | monitor(&line) ----> ",
         fun{ &line,  (i <= []) })
   write("([] ^ i) | monitor(&line) ----> ",
         fun{ &line,  ([] ^ i) })
   write("(s ?:= &subject[3]) | monitor(&line) ----> ",
         fun{ &line,  (s ?:= &subject[3]) })
   write("(s >>:= 0) | monitor(&line) ----> ",
         fun{ &line,  (s >>:= 0) })
   write("(s = 0) | monitor(&line) ----> ",
         fun{ &line,  (s = 0) })
   write("put(s) | monitor(&line) ----> ",
         fun{ &line,  put(s) })
   write("('abc' = ('abc' ++ '')) | monitor(&line) ----> ",
         fun{ &line,  ('abc' = ('abc' ++ '')) })
   write("=[] | monitor(&line) ----> ",
         fun{ &line,  =[] })
   write("((1 <-> y) & &fail) | monitor(&line) ----> ",
         fun{ &line,  ((1 <-> y) & &fail) })
   write("!&null | monitor(&line) ----> ",
         fun{ &line,  !&null })
   write("(2 \\ \"a\") | monitor(&line) ----> ",
         fun{ &line,  (2 \ "a") })
end

procedure p6()
   write("right(\"\",\"\") | monitor(&line) ----> ",
         fun{ &line,  right("","") })
   write("close(\"F\") | monitor(&line) ----> ",
         fun{ &line,  close("F") })
   write("trim(&lcase,[]) | monitor(&line) ----> ",
         fun{ &line,  trim(&lcase,[]) })
   write("list([]) | monitor(&line) ----> ",
         fun{ &line,  list([]) })
   write("bal([],,,\"\") | monitor(&line) ----> ",
         fun{ &line,  bal([],,,"") })
   write("pos(\"a\") | monitor(&line) ----> ",
         fun{ &line,  pos("a") })
   write("\"abcdef\" ? (tab(0) & (while write(move(\"a\"))))) | monitor(&line) ----> ",
          fun{ &line,  ("abcdef" ? (tab(0) & (while write(move("a"))))) })
   write("(2 % \"a\") | monitor(&line) ----> ",
         fun{ &line,  (2 % "a") })
end

procedure p7()
   write("(2 * \"a\") | monitor(&line) ----> ",
         fun{ &line,  (2 * "a") })
   write("(2 / \"a\") | monitor(&line) ----> ",
         fun{ &line,  (2 / "a") })
   write("(2 + \"a\") | monitor(&line) ----> ",
         fun{ &line,  (2 + "a") })
   write("(-36 ^ -9) | monitor(&line) ----> ",
         fun{ &line,  (-36 ^ -9) })
   write("(2 < \"a\") | monitor(&line) ----> ",
         fun{ &line,  (2 < "a") })
   write("(0 > &null) | monitor(&line) ----> ",
         fun{ &line,  (0 > &null) })
   write("(2 <= \"a\") | monitor(&line) ----> ",
         fun{ &line,  (2 <= "a") })
   write("(2 > \"a\") | monitor(&line) ----> ",
         fun{ &line,  (2 > "a") })
   write("(2 = \"a\") | monitor(&line) ----> ",
         fun{ &line,  (2 = "a") })
   write("(2 ~= \"a\") | monitor(&line) ----> ",
         fun{ &line,  (2 ~= "a") })
   write("(list(10)) ||| \"abc\" | monitor(&line) ----> ",
         fun{ &line,  (list(10)) ||| "abc" })
end

procedure p8()
   local x,y
   write("(x :=: \"a\") | monitor(&line) ----> ",
         fun{ &line,  (x :=: "a") })
   write("(x <-> \"b\") | monitor(&line) ----> ",
         fun{ &line,  (x <-> "b") })
   write("((x & 2 & 3 & 4) := 3) | monitor(&line) ----> ",
         fun{ &line,  ((x & 2 & 3 & 4) := 3) })
   write("((1 <- y) & &fail) | monitor(&line) ----> ",
         fun{ &line,  ((1 <- y) & &fail) })
   write("(-36. ^ -9.) | monitor(&line) ----> ",
         fun{ &line,  (-36. ^ -9.) })
end

procedure main()
#   &error := -1
   p1()
   p2()
   p3()
   p4()
   p5()
   p6()
   p7()
   p8()
   write("stop('testing stop') | monitor(&line) ----> ",
      image(stop('testing stop') | monitor(&line)) | "none")
end

procedure monitor(line)
   write("\nerror in line ",line,":")
#   write("   &error = ",&error)
   write("   &errornumber = ",&errornumber)
   write("   &errortext = ",
      image(&errortext))
   write("   &errorvalue = ", imagex(&errorvalue))
   return line
end

procedure fun(eline, e)
   local x, line
   line := @eline
   &handler := &current
   errorclear()
   if x := @e then {
      &handler := &null
      return x
   }
   &handler := &null
   if &errornumber then {
      write("\nerror in line ",line,":")
      write("   &errorcoexpr = ", imagex(&errorcoexpr))
      write("   &errornumber = ",&errornumber)
      write("   &errortext = ", image(&errortext))
      write("   &errorvalue = ", imagex(&errorvalue))
      return line
   } 
   else
      fail
end
