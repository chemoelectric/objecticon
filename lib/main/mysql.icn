#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

$define LIB "objecticonmysqllib.so"

package mysql

import lang
import util

#
# This class provides a wrapper around the MySql C API.  Nearly all the
# methods have a single underlying corresponding C function - see the MySql
# documentation for details on what the underlying function does.
#
class MySql(Error)
   public static const 
      FIELD_TYPE_DECIMAL,
      FIELD_TYPE_TINY,
      FIELD_TYPE_SHORT,
      FIELD_TYPE_LONG,
      FIELD_TYPE_FLOAT,
      FIELD_TYPE_DOUBLE,
      FIELD_TYPE_NULL,
      FIELD_TYPE_TIMESTAMP,
      FIELD_TYPE_LONGLONG,
      FIELD_TYPE_INT24,
      FIELD_TYPE_DATE,
      FIELD_TYPE_TIME,
      FIELD_TYPE_DATETIME,
      FIELD_TYPE_YEAR,
      FIELD_TYPE_NEWDATE,
      FIELD_TYPE_ENUM,
      FIELD_TYPE_SET,
      FIELD_TYPE_TINY_BLOB,
      FIELD_TYPE_MEDIUM_BLOB,
      FIELD_TYPE_LONG_BLOB,
      FIELD_TYPE_BLOB,
      FIELD_TYPE_VAR_STRING,
      FIELD_TYPE_STRING,
      FIELD_TYPE_GEOMETRY,
      MYSQL_OPT_CONNECT_TIMEOUT,
      MYSQL_OPT_COMPRESS,
      MYSQL_OPT_NAMED_PIPE,
      MYSQL_INIT_COMMAND,
      MYSQL_READ_DEFAULT_FILE,
      MYSQL_READ_DEFAULT_GROUP,
      MYSQL_SET_CHARSET_DIR,
      MYSQL_SET_CHARSET_NAME,
      MYSQL_OPT_LOCAL_INFILE,
      MYSQL_OPTION_MULTI_STATEMENTS_ON,
      MYSQL_OPTION_MULTI_STATEMENTS_OFF,
      CLIENT_LONG_PASSWORD,
      CLIENT_FOUND_ROWS,
      CLIENT_LONG_FLAG,
      CLIENT_CONNECT_WITH_DB,
      CLIENT_NO_SCHEMA,
      CLIENT_COMPRESS,
      CLIENT_ODBC,
      CLIENT_LOCAL_FILES,
      CLIENT_IGNORE_SPACE,
      CLIENT_PROTOCOL_41,
      CLIENT_INTERACTIVE,
      CLIENT_SSL,
      CLIENT_IGNORE_SIGPIPE,
      CLIENT_TRANSACTIONS,
      CLIENT_RESERVED,
      CLIENT_SECURE_CONNECTION,
      CLIENT_MULTI_STATEMENTS,
      CLIENT_MULTI_RESULTS,
      CLIENT_REMEMBER_OPTIONS

   private 
      ptr
   
   #
   # Invoke mysql_affected_rows() for the current connection.
   #
   public get_affected_rows()
      return unimysql_affected_rows(ptr)
   end

   #
   # Invoke mysql_change_user() for the current connection.
   #
   public change_user(user, password, db)
      return unimysql_change_user(ptr, user, password, db)
   end

   #
   # Invoke mysql_get_character_set_name() for the current connection.
   #
   public get_character_set_name()
      return unimysql_character_set_name(ptr)
   end

   #
   # Invoke mysql_close() for the current connection.
   #
   public close()
      return unimysql_close(ptr)
   end

   #
   # Invoke mysql_set_server_option() for the current connection.
   #
   public set_server_option(option)
      return unimysql_set_server_option(ptr, option)
   end

   #
   # Invoke mysql_sqlstate() for the current connection.
   #
   public get_sqlstate()
      return unimysql_sqlstate(ptr)
   end

   #
   # Invoke mysql_ssl_set() for the current connection.
   #
   public ssl_set(key, cert, ca, capath, cipher)
      return unimysql_ssl_set(ptr, key, cert, ca, capath, cipher)
   end

   #
   # Invoke mysql_dump_debug_info() for the current connection.
   #
   public dump_debug_info()
      return unimysql_dump_debug_info(ptr)
   end

   #
   # Invoke mysql_errno() for the current connection.
   #
   public get_errno()
      return unimysql_errno(ptr)
   end

   #
   # Invoke mysql_error() for the current connection.
   #
   public get_error()
      return unimysql_error(ptr)
   end

   #
   # Returns the result of get_error() - used for consistency with the
   # Error superclass.
   #
   public get_reason()
      return get_error()
   end

   #
   # Invoke mysql_field_count() for the current connection.
   #
   public get_field_count()
      return unimysql_field_count(ptr)
   end

   #
   # Invoke mysql_get_client_info() for the current connection.
   #
   public get_client_info()
      return unimysql_get_client_info()
   end

   #
   # Invoke mysql_get_client_version() for the current connection.
   #
   public get_client_version()
      return unimysql_get_client_version()
   end

   #
   # Invoke mysql_get_host_info() for the current connection.
   #
   public get_host_info()
      return unimysql_get_host_info(ptr)
   end

   #
   # Invoke mysql_get_proto_info() for the current connection.
   #
   public get_proto_info()
      return unimysql_get_proto_info(ptr)
   end

   #
   # Invoke mysql_get_server_info() for the current connection.
   #
   public get_server_info()
      return unimysql_get_server_info(ptr)
   end

   #
   # Invoke mysql_get_server_version() for the current connection.
   #
   public get_server_version()
      return unimysql_get_server_version(ptr)
   end

   #
   # Invoke mysql_info() for the current connection.
   #
   public get_info()
      return unimysql_info(ptr)
   end

   #
   # Invoke mysql_insert_id() for the current connection.
   #
   public get_insert_id()
      return unimysql_insert_id(ptr)
   end

   #
   # Invoke mysql_kill() for the current connection.
   #
   public kill(pid)
      return unimysql_kill(ptr)
   end

   #
   # Invoke mysql_list_dbs() for the current connection.
   #
   # @return an {MySqlRes} instance
   #
   public list_dbs(wild)
      return MySqlRes(unimysql_list_dbs(ptr, wild))
   end

   #
   # Invoke mysql_list_fields() for the current connection.
   #
   # @return an {MySqlRes} instance
   #
   public list_fields(table, wild)
      return MySqlRes(unimysql_list_fields(ptr, table, wild))
   end

   #
   # Invoke mysql_list_processes() for the current connection.
   #
   # @return an {MySqlRes} instance
   #
   public list_processes()
      return MySqlRes(unimysql_list_processes(ptr))
   end

   #
   # Invoke mysql_list_tables() for the current connection.
   #
   # @return an {MySqlRes} instance
   #
   public list_tables(wild)
      return MySqlRes(unimysql_list_tables(ptr, wild))
   end

   #
   # Invoke mysql_options() for the current connection.
   #
   public options(option, arg)
      return unimysql_options(ptr, option, arg)
   end

   #
   # Invoke mysql_ping() for the current connection.
   #
   public ping()
      return unimysql_ping(ptr)
   end

   #
   # Invoke mysql_query() for the current connection.
   #
   public query(query)
      return unimysql_query(ptr, query)
   end

   #
   # Invoke mysql_connect() for the current connection.
   #
   public connect(host, user, passwd, db, port, unix_socket, client_flag)
      return unimysql_real_connect(ptr, host, user, passwd, db, port, unix_socket, client_flag)
   end

   #
   # Invoke mysql_real_escape_string() for the current connection.  This
   # should be used to escape any strings used to create SQL.
   #
   public esc(s)
      return unimysql_real_escape_string(ptr, s)
   end

   #
   # Convenience method to escape a string and place single quotes 
   # around it
   #
   public esc_str(s)
      if /s then
         return "NULL"
      else
         return "\'" || esc(s) || "\'"
   end

   #
   # Convenience method to convert a {Time} instance to a string
   # for inclusion in an SQL statement as a DATETIME.
   #
   public esc_datetime(d)
      if /d then
         return "NULL"
      else
         return "\'" || d.format("yyyy-MM-dd HH:mm:ss") || "\'"
   end

   #
   # Convenience method to convert a {Time} instance to a string
   # for inclusion in an SQL statement as a DATE.
   #
   public esc_date(d)
      if /d then
         return "NULL"
      else
         return "\'" || d.format("yyyy-MM-dd") || "\'"
   end

   #
   # Convenience method to convert a {Time} instance to a string
   # for inclusion in an SQL statement as a TIME.
   #
   public esc_time(d)
      if /d then
         return "NULL"
      else
         return "\'" || d.format("HH:mm:ss") || "\'"
   end

   #
   # Invoke mysql_stat() for the current connection.
   #
   public get_stat()
      return unimysql_stat(ptr)
   end

   #
   # Invoke mysql_store_result() for the current connection.
   #
   # @return an {MySqlRes} instance
   #
   public store_result()
      return MySqlRes(unimysql_store_result(ptr))
   end

   #
   # Invoke mysql_thread_id() for the current connection.
   #
   public get_thread_id()
      return unimysql_thread_id(ptr)
   end

   #
   # Invoke mysql_use_result() for the current connection.
   #
   # @return an {MySqlRes} instance
   #
   public use_result()
      return MySqlRes(unimysql_use_result(ptr))
   end

   #
   # Invoke mysql_warning_count() for the current connection.
   #
   public get_warning_count()
      return unimysql_warning_count(ptr)
   end

   #
   # Invoke mysql_commit() for the current connection.
   #
   public commit()
      return unimysql_commit(ptr)
   end

   #
   # Invoke mysql_rollback() for the current connection.
   #
   public rollback()
      return unimysql_rollback(ptr)
   end

   #
   # Turn autocommit on.
   # 
   public set_autocommit()
      return autocommit(1)
   end

   #
   # Turn autocommit off.
   # 
   public clear_autocommit()
      return autocommit(0)
   end

   #
   # Invoke mysql_autocommit() for the current connection.
   #
   public autocommit(mode)
      return unimysql_autocommit(ptr, mode)
   end

   #
   # Invoke mysql_more_results() for the current connection.
   #
   public more_results()
      return unimysql_more_results(ptr)
   end

   #
   # Invoke mysql_next_result() for the current connection.
   #
   public next_result()
      return unimysql_next_result(ptr)
   end

   #
   # Invoke mysql_select_db() for the current connection.
   #
   public select_db(db)
      return unimysql_select_db(ptr, db)
   end

   #
   # Invoke mysql_shutdown() for the current connection.
   #
   public shutdown()
      return unimysql_shutdown(ptr)
   end

   private static defer unimysql_affected_rows()
   private static defer unimysql_change_user()
   private static defer unimysql_character_set_name()
   private static defer unimysql_close()
   private static defer unimysql_set_server_option()
   private static defer unimysql_sqlstate()
   private static defer unimysql_ssl_set()
   private static defer unimysql_dump_debug_info()
   private static defer unimysql_errno()
   private static defer unimysql_error()
   private static defer unimysql_field_count()
   private static defer unimysql_get_client_info()
   private static defer unimysql_get_client_version()
   private static defer unimysql_get_host_info()
   private static defer unimysql_get_proto_info()
   private static defer unimysql_get_server_info()
   private static defer unimysql_get_server_version()
   private static defer unimysql_info()
   private static defer unimysql_insert_id()
   private static defer unimysql_kill()
   private static defer unimysql_list_dbs()
   private static defer unimysql_list_fields()
   private static defer unimysql_list_processes()
   private static defer unimysql_list_tables()
   private static defer unimysql_options()
   private static defer unimysql_ping()
   private static defer unimysql_query()
   private static defer unimysql_real_connect()
   private static defer unimysql_real_escape_string()
   private static defer unimysql_stat()
   private static defer unimysql_store_result()
   private static defer unimysql_thread_id()
   private static defer unimysql_use_result()
   private static defer unimysql_warning_count()
   private static defer unimysql_commit()
   private static defer unimysql_rollback()
   private static defer unimysql_autocommit()
   private static defer unimysql_more_results()
   private static defer unimysql_next_result()
   private static defer unimysql_select_db()
   private static defer unimysql_shutdown()
   private static defer unimysql_init()

   private static init()
      FIELD_TYPE_DECIMAL := 0
      FIELD_TYPE_TINY := 1
      FIELD_TYPE_SHORT := 2
      FIELD_TYPE_LONG := 3
      FIELD_TYPE_FLOAT := 4
      FIELD_TYPE_DOUBLE := 5
      FIELD_TYPE_NULL := 6
      FIELD_TYPE_TIMESTAMP := 7
      FIELD_TYPE_LONGLONG := 8
      FIELD_TYPE_INT24 := 9 
      FIELD_TYPE_DATE := 10
      FIELD_TYPE_TIME := 11
      FIELD_TYPE_DATETIME := 12
      FIELD_TYPE_YEAR := 13
      FIELD_TYPE_NEWDATE := 14
      FIELD_TYPE_ENUM := 247
      FIELD_TYPE_SET := 248
      FIELD_TYPE_TINY_BLOB := 249
      FIELD_TYPE_MEDIUM_BLOB := 250
      FIELD_TYPE_LONG_BLOB := 251
      FIELD_TYPE_BLOB := 252
      FIELD_TYPE_VAR_STRING := 253
      FIELD_TYPE_STRING := 254
      FIELD_TYPE_GEOMETRY := 255
      MYSQL_OPT_CONNECT_TIMEOUT := 0
      MYSQL_OPT_COMPRESS := 1
      MYSQL_OPT_NAMED_PIPE := 2
      MYSQL_INIT_COMMAND := 3
      MYSQL_READ_DEFAULT_FILE := 4
      MYSQL_READ_DEFAULT_GROUP := 5
      MYSQL_SET_CHARSET_DIR := 6
      MYSQL_SET_CHARSET_NAME := 7 
      MYSQL_OPT_LOCAL_INFILE := 8
      MYSQL_OPTION_MULTI_STATEMENTS_ON := 0
      MYSQL_OPTION_MULTI_STATEMENTS_OFF := 1
      CLIENT_LONG_PASSWORD :=    1       
      CLIENT_FOUND_ROWS :=       2       
      CLIENT_LONG_FLAG :=        4       
      CLIENT_CONNECT_WITH_DB :=  8       
      CLIENT_NO_SCHEMA :=        16      
      CLIENT_COMPRESS :=         32      
      CLIENT_ODBC :=             64      
      CLIENT_LOCAL_FILES :=      128     
      CLIENT_IGNORE_SPACE :=     256     
      CLIENT_PROTOCOL_41 :=      512     
      CLIENT_INTERACTIVE :=      1024    
      CLIENT_SSL :=              2048    
      CLIENT_IGNORE_SIGPIPE :=   4096    
      CLIENT_TRANSACTIONS :=     8192    
      CLIENT_RESERVED :=         16384   
      CLIENT_SECURE_CONNECTION := 32768  
      CLIENT_MULTI_STATEMENTS := 65536   
      CLIENT_MULTI_RESULTS :=    131072  
      CLIENT_REMEMBER_OPTIONS := 2147483648  # ((ulong) (1L << 31))

      Class.set_method("unimysql_affected_rows", loadfunc(LIB, "unimysql_affected_rows"))
      Class.set_method("unimysql_change_user", loadfunc(LIB, "unimysql_change_user"))
      Class.set_method("unimysql_character_set_name", loadfunc(LIB, "unimysql_character_set_name"))
      Class.set_method("unimysql_close", loadfunc(LIB, "unimysql_close"))
      Class.set_method("unimysql_set_server_option", loadfunc(LIB, "unimysql_set_server_option"))
      Class.set_method("unimysql_sqlstate", loadfunc(LIB, "unimysql_sqlstate"))
      Class.set_method("unimysql_ssl_set", loadfunc(LIB, "unimysql_ssl_set"))
      Class.set_method("unimysql_dump_debug_info", loadfunc(LIB, "unimysql_dump_debug_info"))
      Class.set_method("unimysql_errno", loadfunc(LIB, "unimysql_errno"))
      Class.set_method("unimysql_error", loadfunc(LIB, "unimysql_error"))
      Class.set_method("unimysql_field_count", loadfunc(LIB, "unimysql_field_count"))
      Class.set_method("unimysql_get_client_info", loadfunc(LIB, "unimysql_get_client_info"))
      Class.set_method("unimysql_get_client_version", loadfunc(LIB, "unimysql_get_client_version"))
      Class.set_method("unimysql_get_host_info", loadfunc(LIB, "unimysql_get_host_info"))
      Class.set_method("unimysql_get_proto_info", loadfunc(LIB, "unimysql_get_proto_info"))
      Class.set_method("unimysql_get_server_info", loadfunc(LIB, "unimysql_get_server_info"))
      Class.set_method("unimysql_get_server_version", loadfunc(LIB, "unimysql_get_server_version"))
      Class.set_method("unimysql_info", loadfunc(LIB, "unimysql_info"))
      Class.set_method("unimysql_insert_id", loadfunc(LIB, "unimysql_insert_id"))
      Class.set_method("unimysql_kill", loadfunc(LIB, "unimysql_kill"))
      Class.set_method("unimysql_list_dbs", loadfunc(LIB, "unimysql_list_dbs"))
      Class.set_method("unimysql_list_fields", loadfunc(LIB, "unimysql_list_fields"))
      Class.set_method("unimysql_list_processes", loadfunc(LIB, "unimysql_list_processes"))
      Class.set_method("unimysql_list_tables", loadfunc(LIB, "unimysql_list_tables"))
      Class.set_method("unimysql_options", loadfunc(LIB, "unimysql_options"))
      Class.set_method("unimysql_ping", loadfunc(LIB, "unimysql_ping"))
      Class.set_method("unimysql_query", loadfunc(LIB, "unimysql_query"))
      Class.set_method("unimysql_real_connect", loadfunc(LIB, "unimysql_real_connect"))
      Class.set_method("unimysql_real_escape_string", loadfunc(LIB, "unimysql_real_escape_string"))
      Class.set_method("unimysql_stat", loadfunc(LIB, "unimysql_stat"))
      Class.set_method("unimysql_store_result", loadfunc(LIB, "unimysql_store_result"))
      Class.set_method("unimysql_thread_id", loadfunc(LIB, "unimysql_thread_id"))
      Class.set_method("unimysql_use_result", loadfunc(LIB, "unimysql_use_result"))
      Class.set_method("unimysql_warning_count", loadfunc(LIB, "unimysql_warning_count"))
      Class.set_method("unimysql_commit", loadfunc(LIB, "unimysql_commit"))
      Class.set_method("unimysql_rollback", loadfunc(LIB, "unimysql_rollback"))
      Class.set_method("unimysql_autocommit", loadfunc(LIB, "unimysql_autocommit"))
      Class.set_method("unimysql_more_results", loadfunc(LIB, "unimysql_more_results"))
      Class.set_method("unimysql_next_result", loadfunc(LIB, "unimysql_next_result"))
      Class.set_method("unimysql_select_db", loadfunc(LIB, "unimysql_select_db"))
      Class.set_method("unimysql_shutdown", loadfunc(LIB, "unimysql_shutdown"))
      Class.set_method("unimysql_init", loadfunc(LIB, "unimysql_init"))
   end

   public new()
      ptr := unimysql_init() | fail
      return
   end
end

