import io, ipl.options, util, net, ipl.printf

global fl, opts, non_ws

record Loc(str, file, line, col)

procedure try_url(s)
   if match("http://" | "https://" | "file:/", s) then
      return do_link(s, URL(s))
end

procedure try_file(x)
   if Files.access(x.file) then
      return do_link(x.str, FilePath(x.file).canonical().str(), x.line, x.col)
end

procedure do_link(x, y, line, col)
   return Files.begin_link(y, line, col) || x || Files.end_link()
end

procedure whole()
   suspend tab(many(non_ws))
end

procedure digs()
   suspend tab(many(&digits))
end

procedure to_delim()
   suspend tab(upto(':'))
end

procedure with_line_no()
   local f, l, s
   suspend s := ((f := to_delim()) || move(1) || (l := digs()) || =":") & Loc(s, f, 0 < integer(l))
end

procedure with_line_no_and_col()
   local f, l, c, s
   suspend s := ((f := to_delim()) || move(1) || (l := digs()) || =":" || (c := digs()) || =":") &
           Loc(s, f, 0 < integer(l), 0 < integer(c))
end

procedure without_line_no()
   local s
   suspend s := (to_delim() | whole()) & Loc(s, s)
end

procedure linkify(s)
   local r
   r := ""
   s ? {
      while r ||:= tab(upto(non_ws)) do
         r ||:= try_url(whole()) | try_file(with_line_no_and_col() | with_line_no() | without_line_no()) | whole()
      return r || tab(0)
   }
end

procedure do_one(f)
   local s
   repeat {
      s := f.read_line() | fail
      if /s then
         return
      if \fl then
         s := linkify(s)
      write(s)
   }
end

procedure main(a)
   local n, f
   opts := options(a, [Opt("f",, "Always output links")], 
                   "Usage: fl [OPTIONS] [FILES...]\N_
                    Copy files to stdout, inserting flowterm links")
   fl := Yes{ \opts["f"] | FileStream.stdout.is_flowterm_tty() }
   non_ws := ~' \t\f'
   if *a = 0 then
      do_one(BufferStream(FileStream.stdin))
   else {
      every n := !a do {
         use {
            f := open(n),
            do_one(f)
         } | stopf("Couldn't read from %s: %w", n)
      }
   }
end
