import
   gui(Align, CheckBox, Dialog, Dispatcher,
       Event, GridLayout, Label, Panel,
       TextButton, TextField, TextPaint, scale)

class Untitled(Dialog)
   private
      label_5,
      text_field_3,
      text_button_4,
      panel_1,
      check_box_1,
      ticker,
      label_1, 
      label_2, 
      layout_1, 
      text_button_1, 
      text_button_2, text_button_3, text_field_1, text_field_2, label_3, label_4,
      text_field_4,
      text_button_5,
      label_7,
      label_6,
      label_8

   public override component_setup()
      self.setup()
   end

   public override end_dialog()
   end

   public override init_dialog()
      ticker := Dispatcher.new_task{tick()}
      ticker.start()
   end

   public tick()
      local t, s
      repeat {
         t := win.get_geometry()
         label_1.set_label("Geom:" || t.x || "," || t.y || " " || t.width || "x" || t.height)
         t := win.get_min_size()
         label_4.set_label("Min size:" || t.width || "x" || t.height)
         t := win.get_max_size()
         label_5.set_label("Max size:" || t.width || "x" || t.height)
         label_3.set_label("Dialog size:" || w || "x" || h)
         t := win.query_root_pointer()
         label_6.set_label("Root mouse:"||t.x||","||t.y)
         t := win.query_pointer()
         label_7.set_label("Win mouse:"||t.x||","||t.y)
         t := win.get_display_size()
         s := t.width||"x"||t.height
         if t := win.get_display_size_mm() then
            s ||:= " ("|| t.width||"x"||t.height||" mm)"
         label_8.set_label("Display size:"||s)
         ticker.sleep(250)
      }
   end

   private parse_pair(s)
      local a, b
      if s ? {
         a := integer(tab(many(&digits ++ '-'))) &
            ="," &
            b := integer(tab(many(&digits ++ '-')))
      } then
         return [a, b]
   end

   public on_text_button_1(ev)
      local s
      s := text_field_1.get_contents()
      if *s = 0 then
         win.set_min_size(1, 1)
      else
         win.set_min_size!(parse_pair(s))
   end

   private on_text_button_4(ev)
      local s
      s := text_field_3.get_contents()
      if *s = 0 then
         win.set_max_size()
      else
         win.set_max_size!(parse_pair(s))
   end

   public on_text_button_2(ev)
      resize_win!(parse_pair(text_field_2.get_contents()))
   end

   public on_text_button_3(ev)
      dispose()
   end

   private on_check_box_1(ev)
      win.set_resize(check_box_1.get_status())
   end

   private on_text_button_5(ev)
      win.set_pos!(parse_pair(text_field_4.get_contents()))
   end

   private setup()
      local paint_2, paint_7, paint_11, paint_4, paint_1, paint_9, paint_6, paint_10, paint, paint_3, paint_8, paint_12, paint_5, layout_2
      self.set_resize(&yes)
      paint := TextPaint("Geom:")
      label_1 := Label().
         set_size(scale(300)).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_paint(paint)
      self.add(label_1)
      paint_1 := TextPaint("Min size:")
      label_4 := Label().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_paint(paint_1)
      self.add(label_4)
      paint_2 := TextPaint("Max size:")
      label_5 := Label().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_paint(paint_2)
      self.add(label_5)
      paint_3 := TextPaint("Dialog size:")
      label_3 := Label().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_paint(paint_3)
      self.add(label_3)
      paint_10 := TextPaint("Root mouse:")
      label_6 := Label().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_paint(paint_10)
      self.add(label_6)
      paint_11 := TextPaint("Win mouse:")
      label_7 := Label().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_paint(paint_11)
      self.add(label_7)
      paint_12 := TextPaint("Display size:")
      label_8 := Label().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_paint(paint_12)
      self.add(label_8)
      text_field_1 := TextField().
         set_size(scale(60)).
         clear_constraints().
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_contents("")
      paint_4 := TextPaint("Min size")
      text_button_1 := TextButton().
         clear_constraints().
         set_constraint("eol", &yes).
         connect(self.on_text_button_1, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_4)
      text_field_3 := TextField().
         set_size(scale(60)).
         clear_constraints().
         set_constraint("x_fill", &yes).
         set_contents("")
      paint_5 := TextPaint("Max size")
      text_button_4 := TextButton().
         clear_constraints().
         set_constraint("eol", &yes).
         connect(self.on_text_button_4, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_5)
      text_field_2 := TextField().
         set_size(scale(60)).
         clear_constraints().
         set_constraint("x_fill", &yes).
         set_contents("")
      paint_6 := TextPaint("Set size")
      text_button_2 := TextButton().
         clear_constraints().
         set_constraint("eol", &yes).
         connect(self.on_text_button_2, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_6)
      text_field_4 := TextField().
         set_size(scale(60)).
         clear_constraints().
         set_constraint("x_fill", &yes).
         set_contents("")
      paint_9 := TextPaint("Set pos")
      text_button_5 := TextButton().
         clear_constraints().
         set_constraint("eol", &yes).
         connect(self.on_text_button_5, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_9)
      layout_2 := GridLayout().
         set_doi(scale(0)).
         set_extra("cells")
      panel_1 := Panel().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_layout(layout_2).
         add(text_field_1).
         add(text_button_1).
         add(text_field_3).
         add(text_button_4).
         add(text_field_2).
         add(text_button_2).
         add(text_field_4).
         add(text_button_5)
      self.add(panel_1)
      paint_7 := TextPaint("Resizable")
      check_box_1 := CheckBox().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_align", Align.L).
         connect(self.on_check_box_1, Event.ACTION).
         set_toggles(&yes).
         set_is_checked(&yes).
         set_paint(paint_7)
      self.add(check_box_1)
      paint_8 := TextPaint("Quit")
      text_button_3 := TextButton().
         clear_constraints().
         connect(self.on_text_button_3, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_8)
      self.add(text_button_3)
      self.connect(self.dispose, Event.WINDOW_CLOSE_BUTTON)
      layout_1 := GridLayout().
         set_extra("cells")
      self.set_layout(layout_1)
   end
end


procedure main()
   local d
   d := Untitled()
   d.show_modal()
end

### Ivib-v2 layout: layouts/$.layout
