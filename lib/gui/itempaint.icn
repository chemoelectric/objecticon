package gui

import lang

class ItemPaint()
   public initially(c)
   end

   public defer get_width(W, data)
   public defer get_height(W, data)
   public defer get_size(W, data)
   public defer draw(W, data, x, y)

   public get_constant_width(W)
   end

   public get_constant_height(W)
   end

   public draw_point(W, data, p)
      self.draw(W, data, p.x, p.y)
   end

   public finally()
   end
end


class PaintAdapter(ItemPaint)
   public get_width(W, data)
      return data.w
   end

   public get_height(W, data)
      return data.h
   end

   public get_size(W, data)
      return data
   end

   public draw(W, data, x, y)
      data.draw(W, x, y)
   end
end


class TextItemPaint(ItemPaint)
   public fh

   public initially(c)
      fh := c.cbwin.get_font_height()
   end

   public get_width(W, data)
      return W.text_width(detab(data))
   end

   public get_constant_height(W)
      return fh
   end

   public get_size(W, data)
      return Size(W.text_width(detab(data)), fh)
   end

   public draw(W, data, x, y)
      draw_string_ex(W, x, y, detab(data))
   end
end


class WithCloneItemPaint(ItemPaint)
   private cw, wt, ct

   protected defer make_clone(W)

   protected get_clone(W, ignore_clip)
      (W === wt & (\ignore_clip | equals(ct, W.get_clip()))) | {
         wt := W
         ct := W.get_clip()
         (\cw).uncouple()
         cw := make_clone(W)
      }
      return cw
   end

   public finally()
      (\cw).uncouple()
      wt := ct := cw := &null
   end
end

class AttributedTextItemPaint(WithCloneItemPaint)
   private fh

   public initially(c)
      fh := get_clone(c.cbwin, 1).get_font_height()
   end

   public get_width(W, data)
      return get_clone(W, 1).text_width(detab(data))
   end

   public get_constant_height(W)
      return fh
   end

   public get_size(W, data)
      return Size(get_clone(W, 1).text_width(detab(data)), fh)
   end

   public draw(W, data, x, y)
      draw_string_ex(get_clone(W), x, y, detab(data))
   end
end


class ImageStringItemPaint(ItemPaint)
   public get_width(W, data)
      return image_width(data)
   end

   public get_height(W, data)
      return image_height(data)
   end

   public get_size(W, data)
      return Size(image_width(data), image_height(data))
   end

   public draw(W, data, x, y)
      draw_image_ex(W, x, y, data)
   end
end


class ImageWindowItemPaint(ItemPaint)
   public get_width(W, data)
      return data.get_width()
   end

   public get_height(W, data)
      return data.get_height()
   end

   public get_size(W, data)
      return Size(data.get_width(), data.get_height())
   end

   public draw(W, data, x, y)
      data.copy_to(W,,,,, x, y)
   end
end

class ImageCacheItemPaint(ItemPaint)
   public get_width(W, data)
      return ImageCache.get(data, W).get_width()
   end

   public get_height(W, data)
      return ImageCache.get(data, W).get_height()
   end

   public get_size(W, data)
      local i
      if i := ImageCache.get(data, W) then
         return Size(i.get_width(), i.get_height())
   end

   public draw(W, data, x, y)
      ImageCache.get(data, W).copy_to(W,,,,, x, y)
   end
end
