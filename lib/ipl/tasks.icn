package ipl.tasks

import ipl.lists(ldel1)

# A semaphore implementation using `io.Task`s.
#
class Semaphore()
   private readable n
   private wl

   # Perform a wait on the semaphore.
   # :Parameters :
   # :  `t` - the current `io.Task` which may be put to sleep
   # :  `timeout` - the optional timeout
   # :Fails :
   # :  on timeout/interrupt to `t`
   public wait(t, timeout)
      if n > 0 then
         n -:= 1
      else {
         put(wl, t)
         t.sleep(timeout)
         if ldel1(wl, t) then
            # Interrupted/timeout
            fail
      }
      return self
   end

   # Perform a signal on the semaphore.
   public signal()
      local t
      if t := get(wl) then
         t.notify()
      else
         n +:= 1
      return self
   end

   # Create a new semaphore with initial value `n`, default 0.
   public new(n)
      /n := 0
      self.n := n
      wl := []
      return
   end
end
