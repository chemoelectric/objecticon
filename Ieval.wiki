#summary ieval - an interactive icon expression evaluator

= ieval =
`ieval` is a program to interactively evaluate icon expressions.  Input is read from the terminal until end-of-file (control-D) is entered.  Each expression has its results sequence evaluated and printed (although see the `!q` option below).  Variables may be assigned to, and they are stored in a local environment, which may be printed by entering `!env`.  To link with library packages, use the `-i` command line option.  Packages can't be imported interactively.

An example session
{{{
$ ieval -i lang,graphics
> &version
"Object Icon Version 2.6.  Mon Aug 29 11:57:11 BST 2011"
> upto('aeiou', "The quick brown fox")
3
6
7
13
18
> w := Window.open()
object graphics.Window#1(wbp=136611152;transient_for=&null)
> w.close()
object graphics.Window#1(wbp=0;transient_for=&null)
> ^D
$
}}}

Input of an expression over several lines can be achieved by ending a line with a backslash character.  The prompt changes to `>>` and the next line is concatenated to the previous one.
= Command line options =
`ieval` accepts the following command-line options :-

 * *-i* Import the given package(s).  Several packages may be comma-separated, or several `-i` options may be given.
 * *-l* Link the given source file.  Several `-l` options may be given.
 * *-wglob* If given, then assignments to global variables (eg procedures) are allowed.
 * *-g* Use a gui interface rather than the console.
 * *-s* Read commands from standard input rather than using a line editor.
 * *-hlim* Set the history limit for the line editor (default is 500).
 * *-elim* Set the expression limit for evaluation (default is 35).
 * *-llim* Set the gui interface's log area line limit (default is 600).

Remaining arguments specify files which are processed before command line input commences.  They should contain valid expressions (which may be compound expressions).
= Useful built-in expressions =

 * *!env* Show the values stored in the environment
 * *!help* Show help
 * *!parse* Toggle parse mode, in which just the syntax structure of the command is printed
 * *!trace* Toggle tracing
 * *!wglob* Toggle the write-globals flag
 * *!traceback* Show the traceback of the last command that gave a runtime error
 * *!quiet* Don't force evaluation of all of the values in the expression, and don't output any expression value
 * *dir(x)* With no parameter, show all global variables.  With a parameter, show information about it.
 * *!hist* Show the command line history
 * *cmd(n)* Run command number `n` again.
 * *hlim(n)* Set the history limit to `n`.
 * *elim(n)* Set the expression limit to `n`.
 * *llim(n)* Set the gui log area line limit to `n`.
 * *oos* The `ObjectOutputStream` used to output results.
