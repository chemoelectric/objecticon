#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui, util

############################################################################
#
#
#
class CanvasTableDialog(CanvasComponentDialog)
   public 
      add_col,
      delete, 
      edit,   
      struct, 
      up,
      down,
      select_group

   public update_grey()
      local i
      i := struct.get_selections()[1]
      if \i <= *c.table_header.children then {
         if *c.table_header.children > 1 then
            delete.set_is_shaded(&no)
         edit.set_is_shaded(&no)
         up.set_is_shaded(No{i > 1})
         down.set_is_shaded(No{i < *c.table_header.children })
      } else {
         edit.set_is_shaded(&yes)
         delete.set_is_shaded(&yes)
         up.set_is_shaded(&yes)
         down.set_is_shaded(&yes)
      }
   end

   public on_add_col()
      local new, l, nl
      new := CanvasTableColumn()
      new.set_paint(CanvasTextPaint("Edit me"))
      new.change_canvas(c.parent_Canvas)
      new.rename()
      new.set_column_width(scale(75))
      l := struct.get_selections()
      nl := l[1] | (*c.table_header.children + 1)
      c.table_header.add(new, nl)
      c.layout()
      struct.set_contents(c.string_rep())      
      struct.ensure_line_visible(nl)
      struct.set_selections([nl])
      struct.set_cursor(nl)
      update_grey()
   end

   public on_edit()
      local i, d
      i := struct.get_selections()[1]
      d := c.table_header.children[i].dialog()
      d.show_modal(self)
      struct.set_contents(c.string_rep())
   end

   public on_delete()
      local i
      i := struct.get_selections()[1]
      c.table_header.remove_index(i)
      struct.set_contents(c.string_rep())
      struct.clear_selections()
      update_grey()
   end

   public set_vals()
      CanvasComponentDialog.set_vals()
      c.select_mode := select_group.get_select_mode()
      c.get_table_content().invalidate_subject_width()
   end

   public on_up()
      local i, t
      i := struct.get_selections()[1]
      i > 1 | fail
      t := c.table_header.children[i]
      c.table_header.remove_index(i)
      c.table_header.add(t, i - 1)
      struct.set_contents(c.string_rep())
      struct.set_selections([i - 1])
      struct.set_cursor(i - 1)
      update_grey()
   end

   public on_down()
      local i, t
      i := struct.get_selections()[1]
      i < *c.table_header.children | fail
      t := c.table_header.children[i]
      c.table_header.remove_index(i)
      c.table_header.add(t, i + 1)
      struct.set_contents(c.string_rep())
      struct.set_selections([i + 1])
      struct.set_cursor(i + 1)
      update_grey()
   end

   public setup()
      local p, t1, t2, t3, q

      CanvasComponentDialog.setup()

      p := TabItem()
      p.set_layout(GridLayout())
      add_tab_at_front(p)
      p.set_label("General")

      struct := Table()
      struct.connect(self.update_grey, Event.SELECTION_CHANGED)
      struct.set_size(scale(225), scale(100))
      struct.set_select_mode(Select.ONE)
      struct.set_contents(c.string_rep())
      p.add(struct)

      t1 := TableColumn()
      t1.set_label("Label")
      struct.add_column(t1)

      t2 := TableColumn()
      t2.set_label("Width")
      t2.set_column_align("r")
      t2.set_column_width(scale(60))
      struct.add_column(t2)

      t3 := TableColumn()
      t3.set_label("Align")
      t3.set_column_align("r")
      t3.set_column_width(scale(60))
      struct.add_column(t3)

      q := Panel().set_constraint("x_weight", 0)
      q.set_layout(GridLayout().set_doi(0))

      add_col := TextButton().set_constraint("eol", &yes)
      add_col.connect(self.on_add_col, Event.ACTION)
      add_col.set_label("Add")
      q.add(add_col)

      delete := TextButton().set_constraint("eol", &yes)
      delete.connect(self.on_delete, Event.ACTION)
      delete.set_label("Delete")
      q.add(delete)

      edit := TextButton().set_label("Edit").set_constraint("eol", &yes)
      edit.connect(self.on_edit, Event.ACTION)
      q.add(edit)

      up := TextButton().set_label("Up").set_constraint("eol", &yes)
      up.connect(self.on_up, Event.ACTION)
      q.add(up)

      down := TextButton().set_label("Down")
      down.connect(self.on_down, Event.ACTION)
      q.add(down)

      p.add(q)

      p := TabItem()
      p.set_layout(GridLayout().set_extra("borders"))
      add_tab(p)
      p.set_label("Selection")

      select_group := SelectModeList()
      p.add(select_group)
      select_group.set_select_mode(c.select_mode)

      update_grey()
   end
end




