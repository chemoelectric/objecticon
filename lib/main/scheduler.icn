package io

import lang, util, ipl.printf

# This stream wraps another stream (normally a `SocketStream`).  The
# `in` and `out` methods are invoked from the co-expression of the
# owning `Task`.  Those methods activate the `Task`'s `Scheduler`'s
# co-expression.  The stream's co-expression is re-activated only when
# the `Scheduler` determines the stream is ready for i/o.
#
class TaskStream(Stream, HasTask, HasCloseUnderlying)
   private readable
      timeout
   private const
      other

   public override in(n)
      local r
      r := task.poll([other, Poll.IN], timeout) | fail
      return if /r then 
         error(if /task.notify_flag then "Timeout" else "Notified")
      else if DescStream.poll_in_test(r[1]) then
         other.in(n)
      else {
         other.improve_why()
         whyf("Error on poll(): %w")
      }
   end

   public override out(s)
      local r
      r := task.poll([other, Poll.OUT], timeout) | fail
      return if /r then
         error(if /task.notify_flag then "Timeout" else "Notified")
      else if DescStream.poll_out_test(r[1]) then
         other.out(s)
      else {
         other.improve_why()
         whyf("Error on poll(): %w")
      }
   end

   public override close()
      if \close_underlying_flag then
         other.close() | fail
      link
   end

   public override get_mode()
      return other.get_mode()
   end

   public override seek(offset)
      return other.seek(offset)
   end

   public override tell()
      return other.tell()
   end

   public override truncate(len)
      return other.truncate(len)
   end

   # Set the timeout in ms to use.  If `&null`, then no timeout will
   # be used.
   #
   public set_timeout(timeout)
      self.timeout := /timeout | need_integer(timeout, 0)
      link
   end

   public new(other, task, timeout)
      self.other := need_Stream(other)
      self.close_underlying_flag := &yes
      self.task := need_instance(task, Task)
      set_timeout(timeout)
      return
   end
end

class Task()
   public const
      scheduler
   private readable
      time_from,
      time_until,
      poll_req
   private const
      xstate
   package
      coex,
      state,
      old_state
   package readable
      poll_err,
      poll_res,
      interrupt_why,
      notify_flag

   # If a task is currently sleeping or polling, then this alters the
   # time it will sleep for, behaving as though the original call to
   # `sleep` or `poll` had given `n` as its time parameter.
   #
   # :Parameters :
   # :  `n` - The time to wait for.  If `&null`, wait forever.
   #
   public change_time(n)
      \coex | runerr("change_time() called on a currently active task")
      n := need_integer(\n, 0)
      if is_sleeping() | is_polling() then {
         state.remove(self)
         time_until := (time_from + \n) | &null
         state.add(self)
      }
      link
   end

   # This is like `change_time()`, but the time is set to `n`
   # milliseconds from now, rather than from the time of the original
   # call.
   #
   # :Parameters :
   # :  `n` - The time to wait for.  If `&null`, wait forever.
   #
   public change_time_from_now(n)
      \coex | runerr("change_time_from_now() called on a currently active task")
      n := need_integer(\n, 0)
      if is_sleeping() | is_polling() then {
         state.remove(self)
         time_until := (Prog.get_runtime_millis() + \n) | &null
         state.add(self)
      }
      link
   end

   # Succeed iff the task is currently active.
   #
   public is_active()
      succeed /coex
   end

   # Succeed iff the task is the current task.  Note that a task may
   # be active, but not the current task, since a task may itself
   # invoke `Scheduler.work` in order to activate another task, in a
   # nested fashion.  This may happen for example when a task shows a
   # modal dialog, and hence calls `Scheduler.work` via the dispatcher
   # event loop.
   #
   public is_current()
      succeed self === scheduler.curr_task
   end

   # Succeed iff the task is currently sleeping
   public is_sleeping()
      succeed state === scheduler.sleeping
   end

   # Succeed iff the task is currently polling
   public is_polling()
      succeed state === scheduler.polling
   end

   # Succeed iff the task is currently in the ready state
   public is_ready()
      succeed state === scheduler.ready
   end

   # Succeed iff the task is dormant, meaning it is not active, and is
   # not sleeping, polling or ready, meaning it won't be scheduled by
   # the scheduler, at least until `start` is called on it.
   public is_dormant()
      succeed \coex & /state
   end

   # Suspend this task, which must be the currently scheduled task, in
   # order to carry out a `DescStream.poll`.  The parameters and
   # result are in the same form as for `DescStream.poll`.  The
   # difference between this and `DescStream.poll` is that the
   # scheduler will suspend this task whilst the poll is taking place,
   # whereas `DescStream.poll` will block.  If `timeout` is zero, then
   # there is no advantage in using this method, and `DescStream.poll`
   # is preferable.
   #
   # If the task is interrupted whilst polling this method fails with
   # `&why` set to the value of `interrupt_why`, which will be
   # non-null.
   #
   # If the task is notified whilst polling, this method returns
   # `&null`, ie it behaves as though a timeout occurred.  The
   # `notify_flag` is also set.
   #
   # :Parameters :
   # :  `l` - A list of alternating `DescStream`, flag (from `Poll`)
   #          pairs.
   # :  `timeout` - The optional timeout
   #
   public poll(l, timeout)
      is_current() | runerr("poll() called on task which is not current")
      need_list(l)
      if *l % 2 ~= 0 then
         runerr(177, l)
      timeout := need_integer(\timeout, 0)
      coex := &current
      time_from := Prog.get_runtime_millis()
      time_until := (time_from + \timeout) | &null
      poll_req := l
      poll_err := poll_res := notify_flag := interrupt_why := &null
      scheduler.now_poll(self)
      return if \interrupt_why then
         error(interrupt_why)
      else if \poll_err then
         error(poll_err)
      else
         .self.poll_res
   end

   # Suspend this task, which must be the currently scheduled task,
   # for `n` milliseconds; `&null` means indefinitely.
   #
   # This task is woken and the method returns after one of three
   # things happens :-
   #
   # 1. After `n` milliseconds passes; the method succeeds.
   # 2. After it is notified; the method succeeds and the
   #    `notify_flag` is set.
   # 3. After it is interrupted; the method fails with `&why`
   #    set to the value of `interrupt_why`, which will be
   #    non-null.
   #
   # :Parameters :
   # :  `n` - The time to wait for.  If `&null`, wait forever (or until
   #          interrupted or notified).
   # :Returns :
   # :  `self` when the task awakes; fails on interrupt
   #
   public sleep(n)
      is_current() | runerr("sleep() called on task which is not current")
      n := need_integer(\n, 0)
      coex := &current
      time_from := Prog.get_runtime_millis()
      time_until := (time_from + \n) | &null
      notify_flag := interrupt_why := &null
      scheduler.now_sleep(self)
      return if \interrupt_why then error(interrupt_why) else self
   end

   # Interrupt the task, which may not be currently active.  If the
   # task is currently sleeping or polling, then it is placed back in
   # the ready state.  This causes the original `poll` or `sleep` call
   # to fail, setting `&why` to the value given in the optional
   # parameter `why` (the default `&why` is "Interrupted").
   #
   public interrupt(why)
      \coex | runerr("interrupt() called on a currently active task")
      why := need_text(\why)
      scheduler.interrupt(self, why)
      link
   end

   # If the task is sleeping or polling, then place it immediately
   # back into the ready state.  The task must not be currently
   # active.
   #
   public notify()
      \coex | runerr("notify() called on a currently active task")
      scheduler.notify(self)
      link
   end

   # Suspend this task, which must be the currently scheduled task,
   # placing it immediately into the ready state in the scheduler.
   #
   public yield()
      is_current() | runerr("yield() called on task which is not current")
      self.coex := &current
      scheduler.now_yield(self)
      link
   end

   # Suspend this task, which must be the currently scheduled task,
   # but do not resume it.  Control reverts to the scheduler.  The
   # task may be subsequently restarted with `start`.  Note that to
   # end a task, it is not simply sufficient to fall off the end of
   # the task's co-expression, `revert` must be used.
   #
   public revert()
      is_current() | runerr("revert() called on task which is not current")
      self.coex := &current
      scheduler.now_revert()
      link
   end

   # Start the task, which may not be currently active.  If the task
   # was previously stopped in a particular state (eg sleeping), then
   # it continues from that same state.
   #
   public start()
      \coex | runerr("start() called on a currently active task")
      scheduler.start(self)
      link
   end

   # Stop the task, which may not be currently active.  This prevents
   # the scheduler from activating it.  Its present state is
   # remembered, and it may be started again in that state using
   # `start`.
   #
   public stop()
      \coex | runerr("stop() called on a currently active task")
      scheduler.stop(self)
      link
   end

   # This method swaps the values of external state previously saved,
   # by invoking the `swap()` on the xstate member (if set).
   #
   package xstate_swap()
      (\xstate).swap()
   end

   #
   # Create a new `Task`.
   #
   # :Parameters :
   # :  `scheduler` - The `Scheduler` to use to activate the task.
   # :  `coex` - The co-expression body of the task.
   # :  `xstate` - An optional instance of `State` which is used
   #        to save and restore external state when switching to and
   #        from this Task.
   #
   public new(scheduler, coex, xstate)
      self.scheduler := need_instance(scheduler, Scheduler)
      self.coex := need_coexpression(coex)
      self.xstate := need_instance(\xstate, State)
      return
   end
end

#
# A data structure for storing the ready set; it just mirrors the
# interface of Bag2 below.
#
package class Bag1()
   package const
      s

   public add(t)
      insert(s, t)
      link
   end

   public remove(t)
      delete(s, t)
      link
   end

   public check()
      local t
      every t := !s do
         t.state === self | return error("State wrong")
      return
   end
 
   public new()
      s := set()
      return
   end
end

#
# A data structure for storing the polling and sleeping sets.
#
package class Bag2()
   package const
      # Tasks with time_util set, stored in a sorted list with
      # ascending time_until.
      l,
      # A set of Tasks with time_until null.
      s

   public add(t)
      local i, j, m, v, w
      v := t.time_until
      if /v then
         insert(s, t)
      else if *l = 0 then
         put(l, t)
      else {
         i := 1
         j := *l
         while i <= j do {
            m := (i + j) / 2
            w := l[m].time_until
            if w > v then
               j := m - 1
            else if w < v then
               i := m + 1
            else {
               insert(l, m, t)
               link
            }
         }
         insert(l, if w < v then m + 1 else m, t)
      }
      link
   end

   public remove(t)
      local i, j, m, v, w
      v := t.time_until
      if /v then
         delete(s, t)
      else if t === l[1] then
         # Common case of getting the "most ready" Task.
         get(l)
      else {
         i := 1
         j := *l
         while i <= j do {
            m := (i + j) / 2
            w := l[m].time_until
            if w > v then
               j := m - 1
            else if w < v then
               i := m + 1
            else {
               if l[m] === t then {
                  delete(l, m)
                  link
               }
               i := m - 1
               while l[i].time_until = v do {
                  if l[i] === t then {
                     delete(l, i)
                     link
                  }
                  i -:= 1
               }
               i := m + 1
               while l[i].time_until = v do {
                  if l[i] === t then {
                     delete(l, i)
                     link
                  }
                  i +:= 1
               }
               break
            }
         }
         syserr("remove() failed")
      }
      link
   end

   public check()
      local t, x
      every t := !l do {
         \t.time_until | return error("Time until not set")
         if t.time_until < \x then return error("Times out of order")
         x := t.time_until
      }
      every t := !s do
         /t.time_until | return error("Time until set")
      every t := !l | !s do
         t.state === self | return error("State wrong")
      return
   end

   public new()
      l := []
      s := set()
      return
   end
end

class Scheduler()
   private readable 
      poll_timeout,
      coex,
      curr_task
   package const
      ready,
      sleeping,
      polling

   #
   # Create a new instance, using the given poll timeout (see
   # `set_poll_timeout()`).
   #
   public new(n)
      set_poll_timeout(n)
      ready := Bag1()
      sleeping := Bag2()
      polling := Bag2()
      return
   end

   #
   # Set the timeout to use when invoking `DescStream.poll` with any
   # polling tasks.  The actual interval used may in fact be smaller,
   # as determined by `calc_sleep()`.  `n` defaults to 0.
   #
   public set_poll_timeout(n)
      poll_timeout := need_integer(\n, 0) | 0
      link
   end

   package start(t)
      if /t.state then {
         if /t.old_state then
            set_state(t, ready)
         else {
            set_state(t, t.old_state)
            t.old_state := &null
         }
      }
   end

   package stop(t)
      if \t.state then {
         t.old_state := t.state
         set_state(t)
      }
   end

   private set_state(t, x)
      (\t.state).remove(t)
      t.state := x
      (\t.state).add(t)
   end

   package interrupt(t, why)
      if \t.state ~=== ready then {
         t.interrupt_why := \why | "Interrupted"
         set_state(t, ready)
      }
   end

   package notify(t)
      if \t.state ~=== ready then {
         t.notify_flag := &yes
         set_state(t, ready)
      }
   end

   package now_sleep(t)
      \coex | syserr("now_sleep() with null coex")
      set_state(t, sleeping)
      coact(, coex)
   end

   package now_poll(t)
      \coex | syserr("now_poll() with null coex")
      set_state(t, polling)
      coact(, coex)
   end

   package now_yield(t)
      \coex | syserr("now_yield() with null coex")
      set_state(t, ready)
      coact(, coex)
   end

   package now_revert()
      \coex | syserr("now_revert() with null coex")
      coact(, coex)
   end

   #
   # Test whether there are any `Task`s in the internal lists.
   #
   public empty()
      succeed *ready.s = *sleeping.l = *sleeping.s = *polling.l = *polling.s = 0
   end

   #
   # Return the number of `Task`s in the internal lists.
   #
   public size()
      return *ready.s + *sleeping.l + *sleeping.s + *polling.l + *polling.s
   end

   #
   # Check the data structures for internal consistency.
   #
   public check()
      return ready.check() & sleeping.check() &
             polling.check()
   end

   private run(t)
      local sc, st, te
      set_state(t)
      sc := coex
      st := curr_task
      coex := &current
      curr_task := t
      te := t.coex
      t.coex := &null
      # Don't specify an activator unless we have to (ie if this is a
      # new co-expression).
      t.xstate_swap()
      if Coexpression.get_activator(te) then
         coact(, te)
      else
         @te
      t.xstate_swap()
      \t.coex | runerr("Incorrect reversion to scheduler, task co-expression not set", t)
      coex === &current | syserr("Scheduler co-expression not &current")
      coex := sc
      curr_task := st
   end

   #
   # Calculate a suitable time to sleep for.  The number returned will
   # be at most `lim`, but may be lower if any sleeping or polling
   # task will be ready to resume in a shorter period of time.
   #
   public calc_sleep(lim)
      local curr_time, t, d
      if lim > 0 then {
         curr_time := Prog.get_runtime_millis()
         every t := (sleeping | polling).l[1] do {
            if d := t.time_until - curr_time then {
               if d <= 0 then
                  return 0
               lim >:= d
            }
         }
      }
      return lim
   end

   #
   # Perhaps do some work; succeed if some was done, fail if not.
   #
   public work()
      local t, r, curr_time, poll_l, x, poll_t, l
      repeat {
         if t := ?ready.s then {
            run(t)
            return
         }

         if *sleeping.l > 0 then {
            curr_time := Prog.get_runtime_millis()
            while curr_time >= sleeping.l[1].time_until do
               set_state(sleeping.l[1], ready)
            if *ready.s > 0 then
               next
         }

         (*polling.l = *polling.s = 0) | {
            l := []
            poll_l := [] ; every put(poll_l, !(!polling.l | !polling.s).poll_req)
            poll_t := calc_sleep(poll_timeout)
            if r := DescStream.poll(poll_l, poll_t) then {
               curr_time := Prog.get_runtime_millis()
               if /r then {
                  # Process timeout for each task.
                  every t := !polling.l do {
                     if curr_time >= t.time_until then
                        put(l, t)
                     else
                        break
                  }
               } else {
                  every t := !polling.l do {
                     # Extract relevant part of result
                     x := []
                     every 1 to *t.poll_req / 2 do
                        put(x, pop(r))
                     # If all zeros, it's the same as a timeout.
                     if !x ~= 0 then {
                        put(l, t)
                        t.poll_res := x
                     } else if curr_time >= t.time_until then
                        put(l, t)
                  }
                  # As above, but no timeouts
                  every t := !polling.s do {
                     x := []
                     every 1 to *t.poll_req / 2 do
                        put(x, pop(r))
                     if !x ~= 0 then {
                        put(l, t)
                        t.poll_res := x
                     }
                  }
               }
            } else {
               # poll error; forward error to each Task
               every t := !polling.l | !polling.s do {
                  put(l, t)
                  t.poll_err := &why
               }
            }
            every set_state(!l, ready)
            # If we slept in poll(), that counts as work; otherwise it does not
            if poll_t > 0 then
               return
            if *ready.s > 0 then
               next
         }

         fail
      }
   end

   #
   # Convenient method to call work(), and if no work is done, to
   # sleep for the poll timeout period, possibly adjusted by
   # `calc_sleep()`.
   #
   public work_or_sleep()
      work() | delay(calc_sleep(poll_timeout))
   end
end
