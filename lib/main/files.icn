package io

import 
   lang,
   util,
   net,
$if _UNIX | _PLAN9
   posix,
$endif
   ipl.random,
   ipl.scan,
   ipl.strings,
   ipl.pdco(List)

#
# This class has several static methods which provide
# system-independent access to the file system.
#
final abstract class Files()
   package static const 
      FS

   public static const 
      # The separator for elements of a path
      PATH_SEPARATOR,
      # A cset, being the non-filename characters which may appear in a path
      PATH_SPECIALS,
      # The separator for individual paths in a list of paths (such as the PATH
      # environment variable).
      PATHS_SEPARATOR,
      # Suffix for dynamic library
      LIB_SUFFIX,
      # Suffix for executable
      PROG_SUFFIX,
      # Name of null file
      NULL_FILE,
      # Relative filename of current directory
      CURRENT_DIR,
      # Relative filename of parent directory
      PARENT_DIR

   private static init()
$if _UNIX
      PATH_SEPARATOR := "/"
      PATH_SPECIALS := '/'
      PATHS_SEPARATOR := ":"
      LIB_SUFFIX := ".so"
      PROG_SUFFIX := ""
      NULL_FILE := "/dev/null"
      CURRENT_DIR := "."
      PARENT_DIR := ".."
      FS := UnixFileSystem()
$elsif _PLAN9
      PATH_SEPARATOR := "/"
      PATH_SPECIALS := '/'
      PATHS_SEPARATOR := " "
      LIB_SUFFIX := ""
      PROG_SUFFIX := ""
      NULL_FILE := "/dev/null"
      CURRENT_DIR := "."
      PARENT_DIR := ".."
      FS := Plan9FileSystem()
$elsif _MS_WIN32
      PATH_SEPARATOR := "\\"
      PATH_SPECIALS := ':\\/'
      PATHS_SEPARATOR := ";"
      LIB_SUFFIX := ".dll"
      PROG_SUFFIX := ".exe"
      NULL_FILE := "nul"
      CURRENT_DIR := "."
      PARENT_DIR := ".."
      FS := WindowsFileSystem()
$else
      runerr("Can't init_file_system: unknown o/s type")
$endif
   end

$if _PLAN9
   #
   # Read the given directory returning a list of `ListEntry` objects,
   # each containing the name, lstat and stat values for each entry.
   #
   # `f` is an optional parameter, providing an alternative constructor for
   # the returned objects; by default it is `ListEntry`.
   #
   public static list(s, f)
      return list1(s, f, 1)
   end

   #
   # Like `list`, but the filenames are converted to `ucs`; any that
   # can't be converted are skipped.
   #
   public static ucs_list(s, f)
      return list1(s, f, ucs)
   end

   private static list1(s, f, g)
      local l, t, st
      /f := ListEntry
      l := []
      st := stat(s) | fail
      put(l, f(g("."), st, st))
      st := stat(FilePath(s).child("..").str()) | fail
      put(l, f(g(".."), st, st))
      t := dir_read_impl(s) | fail
      every st := Stat!!t do
         put(l, f(g(st.name), st, st))
      return l
   end

   public static dir_read(s)
      local l, t
      l := []
      t := dir_read_impl(s) | fail
      every put(l, Stat!!t)
      return l
   end

   private static native dir_read_impl(s)

   public static native bind(name, old, flag)
   public static native mount(f, af, old, flag, aname)
   public static native unmount(name, old)

   public static unmount_windows()
      local s
      every s := (!Files.list("/n")).name do {
         if match("oix-win.", s) then
            unmount(, "/n/" || s)
      }
      link
   end
$else
   #
   # Read the given directory returning a list of `ListEntry` objects,
   # each containing the name, lstat and stat values for each entry.
   #
   # `f` is an optional parameter, providing an alternative constructor for
   # the returned objects; by default it is `ListEntry`.
   #
   public static list(s, f)
      local p
      return use {
         p := DirStream(s),
         list1(FilePath(s), p, f, 1)
      }
   end

   #
   # Like `list`, but the filenames are converted to `ucs`; any that
   # can't be converted are skipped.
   #
   public static ucs_list(s, f)
      local p
      return use {
         p := DirStream(s),
         list1(FilePath(s), p, f, ucs)
      }
   end

   private static list1(path, p, f, g)
      local l, s, cs, lst, st
      /f := ListEntry
      l := []
      repeat {
         s := p.read_line() | fail
         if /s then
            return l
         cs := path.child(s).str()
         lst := lstat(cs) | next
         st := if lst.mode_str[1] == "l" then
            stat(cs) | next
         else
            lst
         put(l, f(g(s), lst, st))
      }
   end
$endif

   #
   # A useful function to help sort the result of the various list
   # functions.  Sorts by ascending case-insensitive name.
   #
   public static name_cmp(d1, d2)
      local t
      t := Text.consistent_compare(d1.name, d2.name)
      # Ensure a stable sort for file systems which allow duplicate
      # names.
      if t = 0 then
         t := serial(d1) - serial(d2)
      return t
   end

   #
   # A useful function to help sort the result of the various list
   # functions.  Sorts by size in bytes, biggest first, with name
   # resolving ties.
   #
   public static size_cmp(d1, d2)
      local t
      t := d2.lstat.size - d1.lstat.size
      if t = 0 then
         t := name_cmp(d1, d2)
      return t
   end

   #
   # A useful function to help sort the result of the various list
   # functions.  Sorts by modification time, newest first, with name
   # resolving ties.
   #
   public static date_cmp(d1, d2)
      local t
      t := d2.lstat.mtime - d1.lstat.mtime
      if t = 0 then {
         t := d2.lstat.mtime_ns - d1.lstat.mtime_ns
         if t = 0 then
            t := name_cmp(d1, d2)
      }
      return t
   end

   #
   # Return the home directory.
   #
   public static get_home()
      return FS.get_home()
   end

   #
   # Return the temporary directory.
   #
   public static get_temp()
      return FS.get_temp()
   end

   #
   # Succeed iff the given file is hidden.
   #
   public static is_hidden(s)
      succeed FS.is_hidden(s)
   end

   #
   # Succeed iff the given file is a relative directory name (on Unix,
   # "." or "..").
   #
   public static is_relative_dir(s)
      succeed FS.is_relative_dir(s)
   end

   #
   # Get the roots of the file system.
   #
   public static get_roots()
      suspend FS.get_roots()
   end

   #
   # Split a list of paths (such as the $PATH variable) into its
   # constituent elements.
   #
   public static split_paths(s)
      suspend FS.split_paths(s)
   end

   #
   # Load a file into a string
   #
   public static file_to_string(fn)
      local f
      return use {
         f := FileStream(fn),
         f.read_all()
      }
   end

   #
   # Write a string to a file.
   #
   public static string_to_file(fn, s)
      local f
      return use {
         f := FileStream(fn, ior(FileOpt.WRONLY, FileOpt.TRUNC, FileOpt.CREAT)),
         f.writes1(s)
      }
   end

   #
   # Make a temporary filename.
   # :Parameters :
   # :  `prefix` - by default empty
   # :  `suffix` - by default empty
   # :  `path` - the directory, by default `get_temp()`
   # :  `len` - the number of digits in the result, default 8
   #
   public static make_temp_filename(prefix, suffix, path, len)
      local p, name
      /prefix := ""
      /suffix := ""
      /path := get_temp()
      /len := 8
      randomize()
      p := FilePath(path)
      repeat {
         ?1                                # change &random
         name := p.child(prefix || left(&random, len, "0") || suffix).str()
         if not access(name) then {
            # Touch the filename to stop anyone else using it.
            use{ FileStream(name, ior(FileOpt.WRONLY, FileOpt.CREAT)) } | fail
            return name
         }
      }
   end

   #
   # Succeed iff the two given files have the same content.
   #
   public static equal_files(s1, s2)
      local f1, f2
      stat(s1).size = stat(s2).size | fail
      return use {
         f1 := FileStream(s1),
         use {
            f2 := FileStream(s2),
            equal_files1(f1, f2)
         }
      }
   end

   private static equal_files1(f1, f2)
      local b1, b2
      repeat {
         b1 := f1.in(1048576) | fail
         if /b1 then 
            # f1 is at eof, and a further read of f2 should be at eof.
            return /f2.in(1)
         b2 := f2.read_exactly(*b1) | fail
         b1 === b2 | fail
      }
   end

   #
   # Succeed iff the given file is a directory.
   #
   public static is_directory(s)
      succeed stat(s).mode_str[1] == "d"
   end

   #
   # Move a file.  First, try to move it by renaming it.  If that
   # fails, try to copy the file then delete the original, or if that
   # fails, fail.
   #
   # :Parameters :
   # :  `s1` - the source filename
   # :  `s2` - the target filename
   #
   public static move(s1, s2)
      return rename(s1, s2) |
         (copy(s1, s2) & remove(s1))
   end

   #
   # Rename a file.
   #
   # :Parameters :
   # :  `s1` - the source filename
   # :  `s2` - the target filename
   #
   public static native rename(s1, s2)

   #
   # Create a (hard) link to a file.
   #
   # :Parameters :
   # :  `s1` - the source filename
   # :  `s2` - the target filename
   #
   public static native hardlink(s1, s2)

   #
   # Create a symlink to a file.
   #
   # :Parameters :
   # :  `s1` - the source filename
   # :  `s2` - the target filename
   #
   public static native symlink(s1, s2)

   #
   # Read a symbolic link
   #
   # :Parameters :
   # :  `s` - the source filename
   #
   public static native readlink(s)

   #
   # Return the canonicalized absolute pathname as produced by the
   # POSIX realpath function.
   #
   # :Parameters :
   # :  `s` - a filename
   #
   public static native realpath(s)

   #
   # Changes the current directory to that specified in s.
   #
   # :Parameters :
   # :  `s` - the directory
   #
   public static native chdir(s)

$if _PLAN9
   #
   # Get current working directory
   #
   public static getcwd()
      local f
      return use {
         f := FileStream.open9(".", FileOpt9.OREAD, Stream.READ),
         f.fd2path()
      }
   end
$else
   #
   # Get current working directory
   #
   public static native getcwd()
$endif

   #
   # Remove a regular file
   #
   # :Parameters :
   # :  `s` - the file
   #
   public static native remove(s)

   #
   # Remove an empty directory
   #
   # :Parameters :
   # :  `s` - the empty directory
   #
   public static native rmdir(s)

   #
   # Make a new directory
   #
   # :Parameters :
   # :  `s` - the directory path
   # :  `perm` - the permission bits, defaults to rwxr-xr-x
   #
   public static native mkdir(s, perm)

   #
   # Truncate the given file to `len` bytes.
   #
   # :Parameters :
   # :  `s1` - the source filename
   # :  `len` - the desired length
   #
   public static native truncate(s, len)

   #
   # Obtain information about the given file
   #
   # :Parameters :
   # :  `s` - the file
   # :Returns :
   # :  a `Stat` object
   #
   public static stat(s)
      return Stat!stat_impl(s)
   end

   private static native stat_impl(s)

   #
   # Obtain information about the given file without following
   # symlinks.
   #
   # :Parameters :
   # :  `s` - the file
   # :Returns :
   # :  a `Stat` object
   #
   public static lstat(s)
      return Stat!lstat_impl(s)
   end

   private static native lstat_impl(s)

$if _PLAN9
   #
   # Write selected attributes about a file.  If any of the parameters
   # are `&null`, they are left unchanged.
   #
   # :Parameters :
   # :  `s` - the file
   # :  `mode` - the mode (an integer)
   # :  `uid` - the owner id
   # :  `gid` - the group id
   # :  `atime` - the access time (an integer)
   # :  `mtime` - the modification time (an integer)
   # :  `length` - the file length
   # :  `name` - the file name
   #
   public static native wstat(s, mode, uid, gid, atime, mtime, length, name)
$else
   #
   # Write selected attributes about a file.  If any of the parameters
   # are `&null`, they are left unchanged.  The nanosecond parameters
   # are ignored unless their corresponding time fields are being set.
   #
   # :Parameters :
   # :  `s` - the file
   # :  `mode` - the mode (an integer)
   # :  `uid` - the owner name
   # :  `gid` - the group name
   # :  `atime` - the access time (an integer)
   # :  `mtime` - the modification time (an integer)
   # :  `atime_ns` - the access time nanosecond part (an integer, default 0)
   # :  `mtime_ns` - the modification time nanosecond part (an integer, default 0)
   #
   public static native wstat(s, mode, uid, gid, atime, mtime, atime_ns, mtime_ns)
$endif

   #
   # Check whether the given file can be accessed in the given mode.
   #
   public static native access(s, mode)

   #
   # This method can be used after a `posix.System.fork` and before a
   # `posix.System.exec` to close unnecessary duplicated file
   # descriptors.  The algorithm used is not perfect, but should be
   # effective in almost all cases.  Starting at descriptor number
   # `start`, descriptors are closed in sequence until `gap`
   # descriptors in succession are found to be absent from the file
   # descriptor table (in other words, attempting to close them
   # returns an error).
   #
   # :Parameters :
   # :  `gap` - the gap (default 512)
   # :  `start` - the starting descriptor number (default 3)
   #
   public static native bulk_close(gap, start)

   #
   # Copy a file.
   # :Parameters :
   # :  `s1` - the source filename
   # :  `s2` - the target filename
   #
   public static copy(s1, s2)
      local f1, f2
      link use {
         f1 := FileStream(s1),
         use {
            f2 := FileStream(s2, ior(FileOpt.WRONLY, FileOpt.TRUNC, FileOpt.CREAT)),
            f1.copy_to(f2)
         }
      }
   end

   #
   # Append file `s1` onto `s2`.
   # :Parameters :
   # :  `s1` - the source filename
   # :  `s2` - the target filename
   #
   public static append(s1, s2)
      local f1, f2
      link use {
         f1 := FileStream(s1),
         use {
            f2 := FileStream(s2, ior(FileOpt.WRONLY, FileOpt.APPEND, FileOpt.CREAT)),
            f1.copy_to(f2)
         }
      }
   end

   #
   # Given a stem filename, return another unique filename based upon it.
   #
   public static ensure_unique_filename(stem)
      local i, p, s
      access(stem) | return stem
      i := 1
      p := backto('.', stem) - 1
      repeat {
         s := stem
         if /p then
            s ||:= "_" || i
         else
            s[p] := "_" || i || s[p]
         access(s) | return s
         i +:= 1
      }
   end

   #
   # Return the extension of a filename, or fail if there is none.
   #
   public static get_extension(f)
      local i                                                     
      if 2 < (i := backto('.' ++ PATH_SPECIALS, f)\1) <= *f & any('.', f[i - 1]) then
         return f[i:0]
   end

   #
   # This procedure searches for a file on a environment-defined path.
   # It follows the same logic as the C function pathfind() in
   # mlocal.c, except that the cd check is optional.
   #
   # :Parameters :
   # :  `f` - the file to look for
   # :  `n` - the name of the environment variable holding the path;
   #          if &null then no path is searched
   # :  `cd` - the notional current directory to check before the path;
   #          may be &null, in which case no current directory
   #          test is done
   #
   public static path_find(f, n, cd)
      local p, s
      p := FilePath(f)

      # Don't search the path if we have an absolute file
      if p.is_absolute() then {
         s := p.str()
         if access(s) then
            return s
         else
            fail
      }

      # Try current directory first, if given
      if s := FilePath(\cd).append(p).str() & access(s) then
         return s

      # Don't search the path if we have a relative name
      if p.size() > 1 then
         fail

      # Search all the elements in the path
      every s := FilePath(split_paths(env_string(\n))).append(p).str() do {
         if access(s) then
            return s
      }
   end

   #
   # Find executable on the given path.  Details vary by platform, but
   # on Unix, the method is similar to `path_find` above, but a little
   # more strict.  In particular, the cd isn't tried before the
   # directories on the path.
   #
   # :Parameters :
   # :  `f` - the file to look for
   # :  `n` - the name of the environment variable holding the path,
   #          by default (on Unix) "PATH"
   #
   public static find_exe(f, n)
      return FS.find_exe(f, n)
   end

   #
   # Search for a native library on the OI_NATIVE path.
   #
   public static find_native_lib(f)
      static seen
      local t
      initial
         seen := table()
      if t := member(seen, f) then
         return t
      if t := path_find(f || LIB_SUFFIX, "OI_NATIVE") then {
         insert(seen, f, t)
         return t
      }
   end

   #
   # Return the opening escape sequence for an embedded link.  File f
   # must be a `URL` (properly url-encoded), or an absolute path.
   #
   public static begin_link(f, line, col)
      local t
      is(f, URL) | {
         f := URL(file_to_url(f)).
            set_host(&host) | runerr("Failed to convert to URL: " || &why, f)
         if \line then {
            t := table()
            insert(t, "line", need_integer(line, 1))
            if \col then
               insert(t, "col", need_integer(col, 1))
            f.set_cgi_parameters(t)
         }
      }
      return "\e[!\"" || f.str() || "\"L"
   end

   #
   # Return the closing escape sequence for an embedded link
   #
   public static end_link()
      return "\e[!L"
   end

   #
   # Return the program name, based on the last path element of `&progname`
   #
   public static get_program_name()
      return FS.get_program_name()
   end

   #
   # Given a `URL` instance, return an equivalent file name, using the
   # local file system's conversion rules.  This method fails if the
   # URL is not a "file" URL, or if the host is not local and the file
   # system cannot represent a remote file (this is true in Unix, but
   # not in Windows).
   #
   public static url_to_file(u)
      u.scheme == "file" | return error("Can only convert a file: URL")
      return FS.url_to_file(u)
   end

   #
   # Given an absolute file name, return an equivalent "file" URL (as
   # a string), using the local file system's conversion rules.
   #
   public static file_to_url(f)
      return FS.file_to_url(f)
   end

   #
   # Given an arbitrary filename, return an equivalent filename in a
   # standard case.  For case-sensitive file systems, this does
   # nothing and returns self.
   #
   public static standard_case(s)
      return FS.standard_case(s)
   end
end

#
# This class provides implementations of some of the methods in
# `Files` and `FilePath`.  It is not used directly by clients.
#
package abstract class FileSystem()
   public abstract get_path_list(s)
   public abstract filepath_str(fp)
   public abstract filepath_is_absolute(fp)
   public abstract filepath_normal(fp)
   public abstract filepath_absolute(fp, other)
   public abstract filepath_standard_case(fp)
   public abstract filepath_is_unc(fp)
   public abstract filepath_is_prefix(fp)
   public abstract standard_case(s)
   public abstract file_to_url(f)
   public abstract url_to_file(u)
   public abstract get_home()
   public abstract get_temp()
   public abstract is_hidden(s)
   public abstract is_relative_dir(s)
   public abstract get_roots()
   public abstract split_paths(s)
   public abstract get_program_name()
   public abstract find_exe(f, n)
end

#
# This class holds a result from the `Files.list` method.
#
class ListEntry()
   public const
      name,
      lstat,
      stat

   public new(name, lstat, stat)
      self.name := name
      self.lstat := lstat
      self.stat := stat
      return
   end
end

# Helper procedure to convert x to a `FilePath` (using its constructor),
# and signal a runerr if that is not possible.
#
# :Parameters :
# :  `x` - something convertible to a `FilePath`.
#
procedure need_FilePath(x)
   return if is(x, FilePath) then x else FilePath(x)
end

#
# This class manipulates file paths by treating them as a list of
# elements.
#
# Instances of this class are immutable.
#
class FilePath(ObjectOutput)
   package const l

   #
   # Return the number of elements in the path.
   #
   public size()
      return *l
   end

   #
   # Return the `i`th element in the path.
   #
   public get(i)
      return .l[i]
   end

   #
   # Generate the elements in the path.
   #
   public gen()
      suspend .!l
   end

   #
   # Generate the elements in the path in reverse order
   #
   public back()
      suspend .default.back(l)
   end

   #
   # Return a new path consisting of elements i:j of the current path
   #
   public slice(i, j)
      /i := 1
      /j := 0
      return from_list(l[i:j])
   end

   #
   # Returns the path formed by appending the elements of `other` to
   # this path.  `other` must be something convertible to a `FilePath`.
   #
   public append(other)
      return from_list(l ||| need_FilePath(other).l)
   end

   #
   # Takes a variable arguments list, and returns the path formed by
   # appending the elements of that list to this path.
   #
   public walk(a[])
      return from_list(List{ !l | need_text(!a) })
   end

   #
   # Return the parent path, ie a path with everything but the last
   # element.  Fails if and only if the path has no elements.  Note
   # that some results may not be as expected; for example :-
   # ~
   #    FilePath("/").parent()
   # ~
   # gives the empty path (with no elements).
   #
   public parent()
      return from_list(l[1:-1])
   end

   private override object_output(oo)
      oo.object_string(self, str())
   end

   #
   # Return the child path, ie a path with the same elements plus the
   # element `s`.
   #
   public child(s)
      return from_list(l ||| [need_text(s)])
   end

   #
   # Return the sibling path, ie a path with the same elements, except the
   # last one, which is replaced by `s`.  Fails if the path has no elements.
   #
   # Caution is required with this function, since some results may
   # not make much sense, especially if this path is not canonical.
   # For example :-
   # ~
   #    FilePath("/").sibling("x")        # Gives FilePath("x")
   #    FilePath("/a/b/..").sibling("y")  # Gives FilePath("/a/b/y")
   # ~
   # An alternative may be to use `walk("..", s)`.
   #
   public sibling(s)
      local t
      t := copy(l)
      (t[-1] := need_text(s)) | fail
      return from_list(t)
   end

   #
   # Return a path which represents the absolute path of this path.
   # `other` is an optional `FilePath` being the directory with which
   # to calculate the absolute path; by default it is the current
   # working directory, or, if that is not evaluable, the first root
   # directory.
   #
   public absolute(other)
      return if is_absolute() then
         self
      else {
         other := if /other then 
            FilePath(Files.getcwd() | Files.get_roots())
         else
            need_FilePath(other).absolute()
         Files.FS.filepath_absolute(self, other)
      }
   end

   #
   # Convert the path back into a string.  The result is always a string, never ucs.
   #
   public str()
      return Files.FS.filepath_str(self)
   end

   #
   # Convenient method to give ucs(str()); may fail if str() is not convertible.
   #
   public ucs()
      return default.ucs(str())
   end

   #
   # Convenient method to give Text.liberal_ucs(str()); will never fail.
   #
   public liberal_ucs()
      return Text.liberal_ucs(str())
   end

   #
   # Succeed iff this path represents an absolute path.
   #
   public is_absolute()
      succeed Files.FS.filepath_is_absolute(self)
   end

   #
   # Canonicalize a path, which means trying to turn it into a
   # standard form.  This involves (at least) getting the absolute
   # path and removing any redundant path elements.
   #
   public canonical()
      return Files.FS.filepath_normal(absolute())
   end

   #
   # Normalize a path, which means removing any redundant path
   # elements.
   #
   public normal()
      return Files.FS.filepath_normal(self)
   end

   #
   # Return a path with the elements put into a standard case.  For
   # case-sensitive file systems, this does nothing and returns self.
   #
   public standard_case()
      return Files.FS.filepath_standard_case(self)
   end

   #
   # Return another `FilePath` with the same elements, but as ucs
   # strings.  Fails if any part cannot be converted to ucs.
   #
   public ucs_path()
      local s, t
      t := []
      every s := !l do
         put(t, default.ucs(s)) | fail
      return from_list(t)
   end

   #
   # Return another `FilePath` with the same elements, but as plain
   # strings.  Always succeeds.
   #
   public str_path()
      return from_list(List{ string(!l) })
   end

   #
   # Convenient method to convert this path to a file URL (as a
   # string), using `Files.file_to_url()`, applied to the absolute
   # path converted to string.
   #
   public to_url()
      return Files.file_to_url(absolute().str())
   end

   #
   # Succeed if this instance represents a Windows UNC path, meaning
   # that its first element is a "\\".  This method always fails on
   # non-Windows systems.
   #
   public is_unc()
      return Files.FS.filepath_is_unc(self)
   end

   #
   # Succeed iff this path is an absolute directory, and one which is
   # a necessary prefix for such a path.  On Unix, this is just the
   # root directory, and on Windows it is either a drive root or the
   # three (or fewer) top-level elements of a UNC path.
   #
   public is_prefix()
      return Files.FS.filepath_is_prefix(self)
   end

   #
   # Succeed iff two FilePaths represent the same path, based on their
   # `str()` values.
   #
   public static equiv(x, y)
      succeed x.str() == y.str()
   end

   #
   # Create a new instance from a list of elements, without taking a
   # copy.
   #
   package static from_list(l)
      local i
      i := Class.create_raw_instance()
      i.l := l
      return Class.complete_raw_instance(i)
   end

   # Create a new instance from `x`, which may be another `FilePath`,
   # in which case an equivalent new instance is returned, a list of
   # strings representing the elements of the new instance, or a
   # string/ucs to parse.
   #
   public new(x)
      l := if x := text(x) then
         Files.FS.get_path_list(x)
      else if is(x, FilePath) then
         x.l
      else if type(x) == "list" then
         List{ need_text(!x) }
      else
         runerr("text, list or FilePath expected", x)
      return
   end
end

$if _PLAN9
#
# This class represents file stat information.
#
class Stat()
   public const 
      dev,
      ino,
      mode,
      mode_str,
      type,
      nlink,
      uid,
      gid,
      muid,
      rdev,
      size,
      blksize,
      blocks,
      name,
      atime,
      mtime,
      ctime,
      atime_ns,
      mtime_ns,
      ctime_ns,
      qpath,
      qvers,
      qtype

   package new(dev,
               mode,
               mode_str,
               type,
               uid,
               gid,
               muid,
               size,
               name,
               atime,
               mtime,
               qpath,
               qvers,
               qtype)
      self.dev := dev
      self.ino := 0
      self.mode := mode
      self.mode_str := mode_str
      self.type := type
      self.nlink := 1
      self.uid := uid
      self.gid := gid
      self.muid := muid
      self.rdev := 0
      self.size := size
      self.blksize := 0
      self.blocks := 0
      self.name := name
      self.atime := atime
      self.mtime := mtime
      self.ctime := mtime
      self.atime_ns := 0
      self.mtime_ns := 0
      self.ctime_ns := 0
      self.qpath := qpath
      self.qvers := qvers
      self.qtype := qtype
      return
   end
end

$else

#
# This class represents file stat information.
#
class Stat()
   public const 
      dev,
      ino,
      mode,
      mode_str,
      nlink,
      uid,
      gid,
      rdev,
      size,
      blksize,
      blocks,
      atime,
      mtime,
      ctime,
      atime_ns,
      mtime_ns,
      ctime_ns

   package new(dev,
               ino,
               mode,
               mode_str,
               nlink,
               uid,
               gid,
               rdev,
               size,
               blksize,
               blocks,
               atime,
               mtime,
               ctime,
               atime_ns,
               mtime_ns,
               ctime_ns)
      self.dev := dev
      self.ino := ino
      self.mode := mode
      self.mode_str := mode_str
      self.nlink := nlink
      self.uid := uid
      self.gid := gid
      self.rdev := rdev
      self.size := size
      self.blksize := blksize
      self.blocks := blocks
      self.atime := atime
      self.mtime := mtime
      self.ctime := ctime
      self.atime_ns := atime_ns
      self.mtime_ns := mtime_ns
      self.ctime_ns := ctime_ns
      return
   end
end
$endif

$if _UNIX | _PLAN9

package class UnixFileSystem(FileSystem)
   public override get_path_list(s)
      local l, t
      l := []
      s ? {
         put(l, ="/")
         every t := separate(tab(0), '/') do {
            if *t > 0 then
               put(l, t)
         }
      }
      return l
   end

   public override filepath_str(fp)
      local e, s
      s := ""
      every e := !fp.l do {
         if s[-1] ~== "/" then 
            s ||:= "/"
         s ||:= string(e)
      }
      return s
   end

   public override filepath_is_absolute(fp)
      succeed fp.l[1] == "/"
   end

   public override filepath_is_unc(fp)
   end

   public override filepath_is_prefix(fp)
      succeed filepath_is_absolute(fp) & *fp.l = 1
   end

   public override filepath_normal(fp)
      local e, r
      r := []
      every e := !fp.l do {
         if e == "." then
            next
         else if e == ".." then {
            # /.. -> /
            (*r = 1 & filepath_is_absolute(fp)) | {
               if *r = 0 | (r[-1] == "..") then
                  put(r, e)
               else
                  pull(r)
            }
         } else
            put(r, e)
      }
      return FilePath.from_list(r)
   end

   public override filepath_absolute(fp, other)
      return other.append(fp)
   end

   public override filepath_standard_case(fp)
      return fp
   end

   public override standard_case(s)
      return s
   end

   public override get_home()
      return env_string("HOME") | System.getpw(System.getuid()).dir | get_temp()
   end

   public override get_temp()
      return env_string("TEMP") | "/tmp"
   end

   public override is_hidden(s)
      succeed any('.', s)
   end

   public override is_relative_dir(s)
      succeed s == ("." | "..")
   end

   public override get_roots()
      return "/"
   end
   
   public override split_paths(s)
      local t
      every t := separate(s, ':') do {
         if *t = 0 then
            t ||:= "."   # Keep type of t
         suspend t
      }
   end

   public override get_program_name()
      return FilePath(&progname).get(-1)
   end

   public override file_to_url(f)
      return "file:" || URL.percent_encode(f, URL.PATH_CHAR)
   end

   public override url_to_file(u)
      u.is_local_file() | return error("Can't convert a file: URL from another host")
      return u.get_decoded_path()
   end

   public override find_exe(f, n)
      local p, s, path

      /n := "PATH"
      p := FilePath(f)

      # Anything with separators in, we just look up and ignore the
      # path.
      if p.is_absolute() | (p.size() > 1) then {
         s := p.str()
         if Files.access(s, Access.X_OK) & not Files.is_directory(s) then
            return s
         else
            fail
      }

      # Search all the elements in the path
      path := env_string(n) | ""
      every s := FilePath(split_paths(path)).append(p).str() do {
         if Files.access(s, Access.X_OK) & not Files.is_directory(s) then
            return s
      }
   end
end

$if _PLAN9

package class Plan9FileSystem(UnixFileSystem)
   public override get_home()
      return env_string("home") | get_temp()
   end

   public override get_temp()
      return "/tmp"
   end

   public override split_paths(s)
      local t
      every t := separate(s, ' ') do {
         if *t = 0 then
            t := "."
         suspend t
      }
   end

   public override find_exe(f, n)
      local p, s, path

      /n := "path"
      p := FilePath(f)

      # Anything with separators in, we just look up and ignore the
      # path.
      if p.is_absolute() | (p.size() > 1) then {
         s := p.str()
         if Files.access(s, Access.X_OK) then
            return s
         else
            fail
      }

      # Search all the elements in the path
      path := env_string(n) | ". /bin"
      every s := FilePath(split_paths(path)).append(p).str() do {
         if Files.access(s, Access.X_OK) then
            return s
      }
   end
end

$endif    # _PLAN9

$elsif _MS_WIN32

package class WindowsFileSystem(FileSystem)
   public override get_path_list(s)
      local l, t
      l := []
      s := map(s, "/", "\\")
      s ? {
         if &subject[2:4] == ":\\" then       # X:\
            put(l, move(3))
         else if &subject[2] == ":" then      # X:
            put(l, move(2))
         else if &subject[1:3] == "\\\\" then # \\X
            put(l, move(2))
         else if &subject[1] == "\\" then     # \X
            put(l, move(1))                
         every t := separate(tab(0), '\\') do {
            if *t > 0 then
               put(l, t)
         }
      }
      return l
   end

   public override filepath_str(fp)
      local e, s
      s := ""
      every e := !fp.l do {
         if *s > 0 & not any('\\:', s[-1]) then
            s ||:= "\\"
         s ||:= string(e)
      }
      return s
   end

   public override filepath_is_absolute(fp)
      succeed fp.l[1] == "\\\\" | fp.l[1][2:0] == ":\\"
   end

   public override filepath_is_unc(fp)
      succeed fp.l[1] == "\\\\"
   end

   public override filepath_is_prefix(fp)
      succeed filepath_is_absolute(fp) & (*fp.l = 1 | (filepath_is_unc(fp) & *fp.l <= 3))
   end

   public override filepath_normal(fp)
      local e, r
      r := []
      every e := !fp.l do {
         if e == "." then
            next
         else if e == ".." then {
            # Avoid, eg, c:\.. -> empty; c:\.. is in fact invalid.
            (*r = 1 & filepath_is_absolute(fp)) | {
               if *r = 0 | (r[-1] == "..") then
                  put(r, e)
               else
                  pull(r)
            }
         } else
            put(r, e)
      }
      return FilePath.from_list(r)
   end

   public override filepath_standard_case(fp)
      local r
      r := []
      every put(r, map(!fp.l))
      return FilePath.from_list(r)
   end

   public override standard_case(s)
      return map(s)
   end

   public override filepath_absolute(fp, other)
      local s
      if fp.l[1] == "\\" then {
         return if other.l[1] == "\\\\" & *other.l > 1 then
            FilePath.from_list(other.l[1:3] ||| fp.l[2:0])
         else
            FilePath.from_list([other.l[1]] ||| fp.l[2:0])
      }
      if fp.l[1][2:0] == ":" then {
         if s := getdcwd(fp.l[1][1]) then
            # Maintain the case of the original drive letter
            s[1] := fp.l[1][1]
         else
            s := fp.l[1] || "\\"
         return FilePath(s).append(FilePath.from_list(fp.l[2:0]))
      }
      return other.append(fp)
   end

   private static native getdcwd(d)

   public override get_home()
      return env_string("USERPROFILE") | get_temp()
   end

   public override get_temp()
      # Conform with what the Windows function GetTempPath() does.
      return env_string("TMP" | "TEMP" | "USERPROFILE") | "C:\\WINDOWS\\TEMP"
   end

   public override is_hidden(s)
   end

   public override is_relative_dir(s)
      succeed s == ("." | "..")
   end

   public override native get_roots()

   public override split_paths(s)
      local t
      every t := separate(s, ';') do {
         if *t = 0 then
            t ||:= "."   # Keep type of t
         suspend t
      }
   end

   public override get_program_name()
      local s
      s := FilePath(&progname).get(-1)
      if map(s[-4:0]) == ".exe" then
         s[-4:0] := ""
      return s
   end

   public override file_to_url(f)
      local h, p
      f := map(need_string(f), "\\", "/")
      # See
      #   https://blogs.msdn.microsoft.com/ie/2006/12/06/file-uris-in-windows/
      return f ? if ="//" then {
         h := tab(upto('/') | 0)
         p := tab(0)
         "file://" || URL.percent_encode(h, URL.HOST_CHAR) || URL.percent_encode(p, URL.PATH_CHAR)
      } else
         "file:/" || URL.percent_encode(f, URL.PATH_CHAR)
   end

   public override url_to_file(u)
      local f
      f := u.get_decoded_path()
      return if f[3:5] == ":/" then
         map(f[2:0], "/", "\\")
      else
         "\\\\" || u.get_decoded_host() || map(f, "/", "\\")
   end

   private executables(s)
      local x
      if Files.get_extension(s) then
         return s
      x := env_string("PATHEXT") | ".COM;.EXE;.BAT"
      suspend s || Files.split_paths(x)
   end

   public override find_exe(f, n)
      local p, s, path

      /n := "PATH"
      p := FilePath(f)

      # Try the file as given.
      every s := executables(p.str()) do
         if Files.access(s, Access.X_OK) & not Files.is_directory(s) then
            return s

      # If it has separators in, do no more.
      if p.is_absolute() | (p.size() > 1) then
         fail

      # Search all the elements in the path
      path := env_string(n) | ""
      every s := executables(FilePath(split_paths(path)).append(p).str()) do {
         if Files.access(s, Access.X_OK) & not Files.is_directory(s) then
            return s
      }
   end
end

$endif
