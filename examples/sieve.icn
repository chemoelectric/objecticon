import gui

$define PRIME_LIMIT 20000

#
# A program to calculate prime numbers in a background ticker,
# and display them in a dialog.
#
class Sieve(Dialog)
   public
      interval, 
      count_label, 
      prime_label, 
      rate_label, 
      start, 
      stop, 
      ticker

   #
   # Bring the label and ticker into line with the interval slider.
   #
   public synch_interval()
      rate_label.set_label(interval.get_value() || " ms")
      #
      # If the ticker is running, retime it.
      #
      ticker.change_sleep(interval.get_value())
   end

   #
   # Toggle the grey state of the start/stop buttons.
   #
   public toggle_buttons()
      start.toggle_is_shaded()
      stop.toggle_is_shaded()
   end

   #
   # Called when the start button has been pressed: toggle the
   # grey state and start the ticker.
   #
   public on_start()
      toggle_buttons()
      ticker.start()
   end

   #
   # Called when the stop button has been pressed: toggle the
   # grey state and stop the ticker.
   # 
   public on_stop()
      toggle_buttons()
      ticker.stop()
   end

   #
   # This method consitutes the co-expression body.
   #
   public primes()
      local prime_candidate, non_prime_set, prime_count

      non_prime_set := set()
      prime_count := 0

      every prime_candidate := 2 to  PRIME_LIMIT do {
         if not member(non_prime_set, prime_candidate) then {
            #
            # Update the UI
            #
            count_label.set_label(prime_count +:= 1)
            prime_label.set_label(prime_candidate)
            #
            # Update the non-prime set.
            #
            every insert(non_prime_set, 
                         2 * prime_candidate to PRIME_LIMIT by prime_candidate)
            #
            # Suspend the co-expression until the next tick.
            #
            ticker.sleep(interval.get_value())
         }
      }
   end

   public component_setup()
      local prime_border, rate, buttons, b, p

      self.set_label("Sieve").set_resize(&yes)
      connect(self.dispose, Event.WINDOW_CLOSE_BUTTON)
      set_layout(GridLayout())

      ticker := Dispatcher.new_task{primes()}

      p := Panel().set_layout(GridLayout())
      prime_border := Border().set_title(Label().set_label("Primes")).set_content(p).set_constraint("eol", &yes)
      p.add(Label().set_label("Prime:"))
      p.add(count_label := Label().set_size(scale(40)).set_constraint("eol", &yes).set_label("").set_constraint("x_fill", &yes).set_constraint("x_weight", 1))
      p.add(Label().set_label("Value:"))
      p.add(prime_label := Label().set_size(scale(40)).set_label("").set_constraint("x_fill", &yes).set_constraint("x_weight", 1))
      
      add(prime_border)

      rate := Panel().set_layout(GridLayout().set_doi(0)).set_constraint("eol", &yes).set_constraint("y_weight", 0)
      rate.add(Label().set_label("Rate:"))
      interval := Slider().set_range(20,2020).set_size(scale(150)).set_value(1000).set_is_horizontal(&yes)
      interval.connect(self.synch_interval, Event.VALUE_CHANGED)
      rate.add(interval)

      rate_label := Label().set_size(scale(65))
      rate_label.border.set_x_align("r")
      rate.add(rate_label)
      synch_interval()
      add(rate)

      buttons := Panel().set_layout(GridLayout().set_doi(0)).set_constraint("y_weight", 0)
      start := TextButton().set_label("Start")
      start.connect(self.on_start, Event.ACTION)
      buttons.add(start)
      stop := TextButton().set_label("Stop").set_is_shaded(&yes)
      stop.connect(self.on_stop, Event.ACTION)
      buttons.add(stop)
      b := TextButton().set_label("Quit")
      b.connect(self.dispose, Event.ACTION)
      buttons.add(b)
      add(buttons)
   end
end


procedure main()
   local d
   d := Sieve()
   d.show_modal()
end


