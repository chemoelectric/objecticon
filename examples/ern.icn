import
   gui, io, ipl.options

class ErnDialog(Dialog)
   public
      exit_button,
      skip_button,
      okay_button, 
      message_label,
      name_field,
      path,
      files

   public on_okay_button(ev)
      local s
      s := name_field.get_contents()
      if upto(Files.PATH_SPECIALS, s) then
         msg("Invalid character in filename entered")
      else {
         s := path.sibling(s).ucs()
         if Files.access(s) then
            msg("File already exists")
         else if Files.rename(path.str(), s) then {
            msg("OK")
            writes(path.str(), " -> ")
            if FileStream.stdout.is_flowterm_tty() then
               write(Files.begin_link(s), s, Files.end_link())
            else
               write(s)
            next_file()
         }
         else
            msg("Failed: " || &why)
      }
   end

   public on_exit_button(ev)
      dispose()
   end

   private on_skip_button(ev)
      next_file()
      msg()
   end

   public msg(s, n)
      message_label.set(s, n)
   end

   public next_file()
      local s, x
      if path := pop(files) then {
         s := path.get(-1)
         name_field.set_contents(s)
         # Start with text selected, but not the extension.
         name_field.move_cursor(1).move_cursor(*s + 1, &yes)
         if not Files.is_directory(path.str()) & x := Files.get_extension(s) then
            name_field.move_cursor(*s - *x, &yes)
      } else
         dispose()
   end

   public override init_dialog()
      next_file()
   end

   public override new(files)
      Dialog.new()
      setup()
      self.files := files
      return
   end

   private setup()
      local paint_2, panel_2, paint_7, layout_4, line_1, layout_1, label_1, paint_1, panel_1, paint, paint_8, layout_2
      self.set_label("Rename files")
      self.set_resize(&yes)
      paint := TextPaint("Name")
      label_1 := Label().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_constraint(Grid.X_ALIGN, Align.L).
         set_paint(paint)
      name_field := TextField().
         set_size(scale(400)).
         set_align(Align.L, Align.C).
         clear_constraints().
         set_constraint(Grid.X_ALIGN, Align.L).
         set_constraint(Grid.X_FILL, &yes).
         set_constraint(Grid.X_WEIGHT, 1.0).
         connect(self.on_okay_button, Event.ACTION).
         set_contents(u"")
      layout_1 := GridLayout().
         set_doi(scale(0)).
         set_extra("cells")
      panel_1 := Panel().
         clear_constraints().
         set_constraint(Grid.EOL, &yes).
         set_constraint(Grid.X_FILL, &yes).
         set_constraint(Grid.X_WEIGHT, 1.0).
         set_constraint(Grid.Y_FILL, &yes).
         set_constraint(Grid.Y_WEIGHT, 1.0).
         set_layout(layout_1).
         add(label_1).
         add(name_field)
      self.add(panel_1)
      line_1 := Line().
         set_size(scale(100)).
         clear_constraints().
         set_constraint(Grid.EOL, &yes).
         set_constraint(Grid.X_FILL, &yes)
      self.add(line_1)
      paint_1 := TextPaint("Okay")
      okay_button := TextButton().
         set_align(Align.L, Align.B).
         clear_constraints().
         connect(self.on_okay_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_1)
      paint_8 := TextPaint("Skip")
      skip_button := TextButton().
         clear_constraints().
         connect(self.on_skip_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_8)
      paint_2 := TextPaint("Exit")
      exit_button := TextButton().
         set_align(Align.L, Align.B).
         clear_constraints().
         connect(self.on_exit_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_2)
      paint_7 := TextPaint("")
      message_label := MessageLabel().
         set_size(scale(150)).
         set_align(Align.L, Align.B).
         set_fg("red").
         clear_constraints().
         set_constraint(Grid.X_FILL, &yes).
         set_constraint(Grid.X_WEIGHT, 1.0).
         set_paint(paint_7)
      layout_2 := GridLayout().
         set_doi(scale(0)).
         set_extra("cells")
      panel_2 := Panel().
         clear_constraints().
         set_constraint(Grid.X_ALIGN, Align.L).
         set_constraint(Grid.X_FILL, &yes).
         set_constraint(Grid.X_WEIGHT, 1.0).
         set_layout(layout_2).
         add(okay_button).
         add(skip_button).
         add(exit_button).
         add(message_label)
      self.add(panel_2)
      self.connect(self.dispose, Event.WINDOW_CLOSE_BUTTON)
      layout_4 := GridLayout().
         set_extra("cells")
      self.set_layout(layout_4)
      self.set_focus(name_field.find_focus())
   end
end

procedure main(a)
   local s, l, path
   options(a, [],
           "Usage: ern [FILE]...\N_
            Rename files using a gui")
   if *a > 0 then {
      l := []
      every s := !a do {
         s := ucs(s) | help_stop("Parameter not UTF-8")
         Files.access("" ~== s) | stop("Can't access file ", s)
         path := FilePath(s).canonical()
         if path.size() = 1 then
            stop("Can't rename a root directory ", s)
         put(l, path)
      }
      ErnDialog(l).
         show_modal()
   }
end

### Ivib-v2 layout: layouts/$.layout
