#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

#
# This class represents a single pane in a `TabSet`.  `Component`s
# can be added to the `TabItem` using `Component`'s `add` method.
# They are then displayed and accept input when that TabItem
# is selected.
#
# Components added to the `TabItem` are positioned relative to
# the position and size of the parent `TabSet`.  Therefore for
# example `set_pos("50%", "50%")` refers to the centre of the
# `TabSet` rather than the centre of the screen.  The components
# also inherit any window attributes of the `TabSet`, such as
# font, colour and so on.
#
class TabItem(Component)
   public 
      paint,
      label_border,
      tab_tooltip,
      tab_x,
      tab_w,
      remembered_focus

   #
   # Set the remembered focus component, which will received the focus
   # when the tab is selected (if the parent TabSet is configured with
   # set_remember_focus to on).
   #
   public set_remembered_focus(c)
      remembered_focus := c
      link
   end

   #
   # Set the `TabItem`'s label.
   #
   public set_label(x)
      set_paint(paint_for_string(x))
      link
   end

   public set_label_border(b)
      if is_initialized() then {
         (\self.label_border).finally()
         self.label_border := b
         self.label_border.initially(parent)
         self.parent.invalidate_tab_region()
      } else
         self.label_border := b
      link
   end

   public set_paint(p)
      if is_initialized() then {
         (\self.paint).finally()
         self.paint := p
         self.paint.initially(parent, self.accel)
         self.parent.invalidate_tab_region()
      } else
         self.paint := p
      link
   end

   #
   # Set the tab tooltip, which is displayed by the TabSet when the
   # mouse is over the tab.
   #
   public set_tab_tooltip(x)
      self.tab_tooltip := x
      link
   end

   #
   # Return the tab_tooltip, if any.
   #
   public get_tab_tooltip()
      return \self.tab_tooltip
   end

   public override initially()
      \self.paint | runerr("No label specified")
      Component.initially()
      # We are painted on the TabSet's attributes, so init
      # the label border and paint on it too.
      self.label_border.initially(parent)
      self.paint.initially(parent, self.accel)
   end

   public override finally()
      Component.finally()
      paint.finally()
      label_border.finally()
   end

   public get_label_width()
      return paint.w + label_border.get_total_width()
   end

   public get_label_height()
      return paint.h + label_border.get_total_height()
   end

   public draw_label(W, x, y, w, h, focus, highlight)
      local r
      r := Rect(x, y, w, h)
      label_border.draw_rect(W, r)
      paint.draw_rect(W, label_border.float(r, paint))
      if is_shaded() then
         Gui.style.shade_rectangle(W, x, y, w, h)
      # The focus and highlight is drawn after shading, since it relates to the parent tabset. 
      if \highlight then
         label_border.draw_highlight_rect(W, r)
      else if \focus then
         label_border.draw_focus_rect(W, r)
   end

   public override new()
      Component.new()
      self.label_border := EmptyBorder().set_focus_inset(Gui.FINE_WIDTH)
      return
   end
end
