#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

class ItemPaintList(SelectableScrollArea)
   public
      item_border,
      item_paint

   public override initially()
      \self.item_paint | runerr("ItemPaint not set")
      SelectableScrollArea.initially()
      self.item_paint.initially(self)
      self.item_border.initially(self)
   end

   public override finally()
      SelectableScrollArea.finally()
      self.item_paint.finally()
      self.item_border.finally()
   end

   #
   # Set a border to draw along with each item.
   #
   public set_item_border(b)
      if is_initialized() then {
         (\self.item_border).finally()
         self.item_border := b
         self.item_border.initially(self)
      } else
         self.item_border := b
      link
   end

   public set_item_paint(r)
      if is_initialized() then {
         (\self.item_paint).finally()
         self.item_paint := r
         self.item_paint.initially(self)
      } else
         self.item_paint := r
      link
   end

   public override calculate_line_height()
      local h, bh
      bh := item_border.get_total_height()
      if not(h := item_paint.get_constant_height(self.cbwin) + bh) then 
      {
         h := []
         every put(h, item_paint.get_height(self.cbwin, !self.contents) + bh)
      }
      return h
   end

   public override calculate_subject_width()
      local mw
      if not(mw := item_paint.get_constant_width(self.cbwin)) then {
         mw := 0
         every mw <:= item_paint.get_width(self.cbwin, !self.contents)
      }
      return mw + item_border.get_total_width()
   end

   public override draw_line_data(xp, yp, lh, i)
      local d, r
      d := contents[i]
      r := Rect(xp, yp, max(subject_width, view.w), lh)
      item_paint.draw_rect(view.cbwin, 
                           d,
                           item_border.float(r, item_paint.get_size(view.cbwin, d)))
      item_border.draw_rect(view.cbwin, r)
   end

   public override draw_line_sel_cur(x, y, w, h, sel, cur, hi, ov)
      if \sel then
         Gui.style.fill_selection_rectangle(view.cbwin, x, y, w, h)
      case \cur of {
         "f": item_border.draw_focus(view.cbwin, x, y, w, h)
         "d": item_border.draw_dashed(view.cbwin, x, y, w, h)
      }
      case \hi of {
         "t": Gui.style.fill_highlight_rectangle(view.cbwin, x, y, w, INTER_LINE_WIDTH)
         "b": Gui.style.fill_highlight_rectangle(view.cbwin, x, y + h - INTER_LINE_WIDTH, w, INTER_LINE_WIDTH)
         "m": item_border.draw_highlight(view.cbwin, x, y, w, h)
      }
      if \ov then
         Gui.style.fill_over_rectangle(view.cbwin, x, y, w, h)
   end

   public override new()
      SelectableScrollArea.new()
      self.set_item_border(NullBorder().
                           set_x_align(Align.L))
      return
   end
end

