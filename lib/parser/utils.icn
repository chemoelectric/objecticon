package parser

import util

#
# Generate the paths in a path string.
#
# @param path the path to split up
#
procedure path_elements(path)
   local dir, psep

   psep := if has_feature("UNIX" | "PLAN9") then ' :' else ' '

   if has_feature("PLAN9") then
      path := map(path, "\001", " ")

   path ? {
      repeat {
         tab(many(psep))
         if pos(0) then
            break
         if any('\"') then {
            move(1)
            dir := tab(upto('\"') | 0)
            move(1)
         } else
            dir := tab(upto(psep) | 0)
         suspend dir
      }
   }
end

#
# This procedure searches for a file on a environment-defined path.
# It follows the same logic as the C procedure in filepart.c
#
# @param f the file to look for
# @param n the name of the environment variable holding the path
#
procedure path_find(f, n)
   local p, s

   # First of all see if it exists without any search
   if stat(f) then
      return f

   p := Files.get_path(f)
   # We never append absolute paths to the search path
   if p.is_absolute() then
      fail

   # Search all the elements in the path
   every s := Files.get_path(path_elements(getenv(n))).append(p).str() do {
      if stat(s) then
         return s
   }
end

