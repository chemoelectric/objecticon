#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import lang, graphics, util

#
# Component representing the bar area
#
class BarArea(Component)
   public  
      bar_x,                   #             
      bar_y,                   #             
      bar_w,                   #             
      bar_h

   public override display()
      Gui.style.draw_raised_rectangle(self.cbwin, self.bar_x, self.bar_y, 
                                      self.bar_w, self.bar_h, 
                                      Gui.BORDER_WIDTH)
   end
end


#
# This class provides horizontal and vertical scroll bars.
#
# There are two ways to use a scroll bar.  The first way is to
# set a total_size (represented by the whole bar), a page_size
# (represented by the draggable button) and an increment_size
# (being the amount added/subtracted when the top/bottom
# button is pressed).  The value will then range from zero to
# (total_size - page_size) inclusive.  An initial value must
# be set with the `set_value()` method.  For example :-
# ~
#   vb := ScrollBar()
#   vb.set_pos("85%", "25%")      
#   vb.set_size(20, "40%")
#   vb.set_total_size(130)
#   vb.set_page_size(30)
#   vb.set_increment_size(1)
#   vb.set_value(0)
#   self.add(vb)
# ~
#
# Alternatively, a scroll bar can be used as a slider which
# ranges over a given range of values.  In this case, the
# range is set with `set_range()`.  It is still necessary to set
# the increment size and the initial value, as above, but
# page_size and total_size should not be set.
#
# Real numbers as opposed to integers can be used for the
# range settings if desired.
#
# For example :-
# ~
#   vb := ScrollBar()
#   vb.set_pos("85%", "25%")      
#   vb.set_size(20, "40%")
#   vb.set_range(2, 25)
#   vb.set_value(10)
#   vb.set_increment_size(1)
#   self.add(vb)
# ~
# An `Event.VALUE_CHANGED` event is fired whenever the value changes.
#
class ScrollBar(Component, HasOrientation, HasUseWheel)
   public 
      value,                   #             
      old_value,
      page_size,               #                 
      increment_size,          #                      
      wheel_factor,
      page_factor,
      total_size,              #                  
      hi,                      #          
      lo,                      #          
      bar_down,                #                
      is_paging,               #
      bar_down_offset,         #                       
      bar_area,                #
      b1,                      #          
      b2,                      #          
      bar_pos,                 #  Orientation independent bar pos
      bar_size,                #                
      bar_area_pos,            #  Orientation independent bararea pos
      bar_area_size,           #                     
      old_bar_area_pos,
      old_bar_area_size,
      is_range_flag,           
      shade_buttons_flag,
      repeat_ticker,
      repeat_delay

   public static const
      DEFAULT_INNER_SIZE, BAR_INDENT, DEFAULT_WHEEL_FACTOR,
      DEFAULT_PAGE_FACTOR, MIN_BAR_SIZE, RANGE_BAR_SIZE,
      DEFAULT_SHADE_BUTTONS

   private static init()
      DEFAULT_INNER_SIZE := env_scale("OI_SCROLLBAR_DEFAULT_INNER_SIZE") | scale(16)
      BAR_INDENT := env_scale_even("OI_SCROLLBAR_BAR_INDENT") | Gui.FINE_WIDTH
      DEFAULT_WHEEL_FACTOR := env_int("OI_SCROLLBAR_DEFAULT_WHEEL_FACTOR", 1) | 4
      DEFAULT_PAGE_FACTOR := env_real("OI_SCROLLBAR_DEFAULT_PAGE_FACTOR", 0.0, 1.0) | 0.9
      DEFAULT_SHADE_BUTTONS := env_flag("OI_SCROLLBAR_DEFAULT_SHADE_BUTTONS")
      MIN_BAR_SIZE := env_scale("OI_SCROLLBAR_MIN_BAR_SIZE") | scale(8)
      RANGE_BAR_SIZE := env_scale("OI_SCROLLBAR_RANGE_BAR_SIZE") | scale(24)
   end

   #
   # Set the total size which the scroll bar area represents.
   # :Parameters :
   # :  `x` - The total size
   #
   public set_total_size(x)
      x := need_numeric(x)
      # See notes as to why this is a good idea.
      if total_size ~===:= x then
         reconfigure()
      link
   end

   #
   # Return the total size.
   #
   public get_total_size()
      return self.total_size
   end

   #
   # Set the size which the bar in the scroll bar area represents.
   # :Parameters :
   # :  `x` - The size.
   #
   public set_page_size(x)
      x := need_numeric(x)
      if page_size ~=== x then {
         if x <= 0 then
            runerr("Invalid page size", x)
         page_size := x
         reconfigure()
      }
      link
   end

   #
   # Get the page size.
   #
   public get_page_size()
      return self.page_size
   end

   #
   # Get the value.
   # :Returns :
   # :  The value
   #
   public get_value()
      return self.value
   end

   #
   # Set the value representing the top of the bar in the scroll
   # bar.  The value is forced into range if it is not in range already.
   # :Parameters :
   # :  `x` - The value.
   #
   public set_value(x)
      x := need_numeric(x)
      if value ~=== x then {
         if is_live() then {
            move_value(x)
            set_pos_from_value()
         } else
            value := x
      }
      link
   end

   #
   # Set the amount to increase the value by when one of the
   # buttons is pressed.
   # :Parameters :
   # :  `x` - The increment size.
   #
   public set_increment_size(x)
      self.increment_size := need_numeric(x)
      link
   end

   #
   # Set the range of the scroll bar.  The values may
   # be integer or real.
   # :Parameters :
   # :  `lo` - The lower bound
   # :  `hi` - The upper bound
   #
   public set_range(lo, hi)
      lo := need_numeric(lo)
      hi := need_numeric(hi)
      if self.lo ~=== lo | self.hi ~=== hi then {
         if lo >= hi then
            runerr("Invalid range")
         self.is_range_flag := &yes
         self.lo := lo
         self.hi := hi
         reconfigure()
      }
      link
   end

   #
   # Configure whether to shade the up/down buttons when the bar is at
   # one or other end of its area; by default it is
   # `DEFAULT_SHADE_BUTTONS`.
   #
   public set_shade_buttons(s)
      if shade_buttons_flag ~===:= need_flag(s) then
         reconfigure()
      link
   end

   #
   # Set the wheel factor, being the number of increments to
   # move on a wheel press; by default it is `DEFAULT_WHEEL_FACTOR`
   #
   public set_wheel_factor(n)
      self.wheel_factor := need_integer(n, 1)
      link
   end

   #
   # Get the wheel factor
   #
   public get_wheel_factor()
      return self.wheel_factor
   end

   #
   # Set the page factor.  This is a real number indicating the
   # percentage of the page size to move on a page movement (a click
   # in the bar area outside the bar); by default it is
   # `DEFAULT_PAGE_FACTOR`.
   #
   # This is ignored for a range based scrollbar.
   #
   public set_page_factor(n)
      self.page_factor := need_real(n, 0.0, 1.0)
      link
   end

   #
   # Get the page factor
   #
   public get_page_factor()
      return self.page_factor
   end

   private update_grey()
      if \shade_buttons_flag then
         # This is invoke_later since we may be called whilst the button
         # is held down, and hence from a background task.  Changing the
         # shaded state calls stop() on that task (via Button.
         # on_interrupted()), which is illegal from within it.
         parent_dialog.invoke_later{{
            b1.set_is_shaded(Yes{bar_pos = bar_area_pos})
            b2.set_is_shaded(Yes{bar_pos = bar_area_pos + bar_area_size - bar_size})
         }}
   end

   private move_bar_pos(x)
      x <:= self.bar_area_pos
      x >:= self.bar_area_pos + self.bar_area_size - self.bar_size
      (self.bar_pos ~=== x) | fail
      self.bar_pos := x
      if /self.is_horizontal_flag then
         self.bar_area.bar_y := self.bar_pos
      else
         self.bar_area.bar_x := self.bar_pos        
      update_grey()
      self.bar_area.invalidate()
   end

   private move_value(x)
      self.value := x
      self.value <:= self.lo
      self.value >:= self.hi
   end

   private set_pos_from_value()
      if self.hi ~= self.lo then
         self.move_bar_pos(self.bar_area_pos + integer(((self.value - self.lo) * 
                                                        (self.bar_area_size - self.bar_size)) / (self.hi - self.lo)))
      else
         self.move_bar_pos(self.bar_area_pos)
   end

   private set_value_from_pos()
      if self.bar_area_size ~= self.bar_size then
         move_value(self.lo + ((self.hi - self.lo) * (self.bar_pos - self.bar_area_pos)) / 
                    (self.bar_area_size - self.bar_size))
      else
         move_value(self.lo)
   end

   public override get_default_height()
      if \self.is_horizontal_flag then
         return DEFAULT_INNER_SIZE + border.get_total_height()
   end

   public override get_default_width()
      if /self.is_horizontal_flag then
         return DEFAULT_INNER_SIZE + border.get_total_width()
   end

   public handle_press(e)
      local k
      start_handle(e)
      if (self.bar_area.bar_x <= e.x < self.bar_area.bar_x + self.bar_area.bar_w) & 
         (self.bar_area.bar_y  <= e.y < self.bar_area.bar_y + self.bar_area.bar_h) then {
         #
         # Click on bar; set flag and save offset between top of bar and pointer position
         #
         self.bar_down := &yes
         if /self.is_horizontal_flag then
            self.bar_down_offset := e.y - self.bar_area.bar_y
         else
            self.bar_down_offset := e.x - self.bar_area.bar_x
      } else if (if /is_horizontal_flag then bar_area.y  <= e.y < bar_area.bar_y
                 else bar_area.x  <= e.x < bar_area.bar_x) then {
         if \e.shift | e.code === Mouse.MIDDLE_PRESS then {
            self.bar_down := &yes
            self.bar_down_offset := bar_size / 2
            move_bar_pos(-bar_down_offset + if /self.is_horizontal_flag then e.y else e.x)
            set_value_from_pos()
         } else {
            k := if e.code === Mouse.RIGHT_PRESS then 1 else -1
            move_value(page_jump(k))
            set_pos_from_value()
            start_paging(k)
         }
      } else if (if /is_horizontal_flag then bar_area.bar_y + bar_area.bar_h  <= e.y <  bar_area.y + bar_area.h
                 else bar_area.bar_x + bar_area.bar_w  <= e.x <  bar_area.x + bar_area.w) then {
         if \e.shift | e.code === Mouse.MIDDLE_PRESS then {
            self.bar_down := &yes
            self.bar_down_offset := bar_size / 2
            move_bar_pos(-bar_down_offset + if /self.is_horizontal_flag then e.y else e.x)
            set_value_from_pos()
         } else {
            k := if e.code === Mouse.RIGHT_PRESS then -1 else 1
            move_value(page_jump(k))
            set_pos_from_value()
            start_paging(k)
         }
      }
      end_handle(e)
   end

   #
   # Return a new value based on a move of of `n` pages (`n` will be
   # +/- 1), ie when the user clicks in the bar area outside the
   # bar itself.
   # 
   # This may be overridden to provide custom behaviour, for example
   # to make scroll bar moves match up with keyboard page up and down.
   # The default implementation moves value by `page_factor * n *
   # page_size` for a non-range scrollbar, or just `n * page_size` for
   # a range.
   #
   public page_jump(n)
      return value + if /is_range_flag then
                         integer(page_factor * n * page_size)
                     else
                         n * page_size
   end

   #
   # Return a new value based on a move of of `n` units.  This is used
   # when the user clicks on the buttons (`n` is +/- 1), or uses the
   # scroll wheel (`n` is +/- `wheel_factor`).
   #
   # Like `page_jump`, this may be overridden to provide custom
   # behaviour.  The default implementation just moves value by `n *
   # increment_size`.
   #
   public small_jump(n)
      return value + n * increment_size
   end

   public handle_release(e)
      start_handle(e)
      self.bar_down := &null
      stop_paging()
      end_handle(e)
   end

   private repeat_tick()
      repeat {
         if Prog.get_runtime_millis() > self.repeat_delay then {
            start_handle()
            move_value(page_jump(is_paging))
            set_pos_from_value()
            end_handle()
         }
         repeat_ticker.sleep(Gui.REPEAT_RATE)
      }
   end

   public start_paging(n)
      self.is_paging := n
      self.repeat_delay := Prog.get_runtime_millis() + Gui.REPEAT_DELAY
      repeat_ticker.start()
   end

   public stop_paging()
      self.is_paging := &null
      repeat_ticker.stop()
   end

   public start_handle(e)
      old_value := value
   end

   public end_handle(e)
      if old_value ~=== value then
         fire(Event.VALUE_CHANGED, e)
   end

   public override handle_wheel_up(e)
      /self.bar_down | fail
      start_handle(e)
      move_value(small_jump(-wheel_factor))
      set_pos_from_value()
      end_handle(e)
   end

   public override handle_wheel_down(e)
      /self.bar_down | fail
      start_handle(e)
      move_value(small_jump(wheel_factor))
      set_pos_from_value()
      end_handle(e)
   end

   public handle_button_up(e)
      start_handle(e)
      move_value(if \e.shift | e.code === Mouse.MIDDLE_PRESS then
                    lo
                 else if e.code === Mouse.RIGHT_PRESS then
                    small_jump(1)
                 else
                    small_jump(-1))
      set_pos_from_value()
      end_handle(e)
   end

   public handle_button_down(e)
      start_handle(e)
      move_value(if \e.shift | e.code === Mouse.MIDDLE_PRESS then
                    hi
                 else if e.code === Mouse.RIGHT_PRESS then
                    small_jump(-1)
                 else
                    small_jump(1))
      set_pos_from_value()
      end_handle(e)
   end

   public handle_drag(e)
      \self.bar_down | fail

      start_handle(e)
      #
      # Bar dragged; compute new position
      #
      if /self.is_horizontal_flag then
         move_bar_pos(e.y - self.bar_down_offset)
      else
         move_bar_pos(e.x - self.bar_down_offset)
      set_value_from_pos()
      end_handle(e)
   end

   public handle_interrupted()
      if bar_area.is_held(Mouse.LEFT_PRESS) then
         handle_release()
   end

   public override display()
      border.draw_rect(self.cbwin, self)
      display_children()
   end

   private reconfigure()
      # Don't do anything if we haven't been positioned yet.
      is_live() | fail
      check_vals()
      calc_bar_size()
      set_pos_from_value()
      update_grey()
      bar_area.invalidate()
   end

   # Check sensible values and set lo/hi for a non-range.
   private check_vals()
      if /self.is_range_flag then {
         #
         # Not a range; compute lo, hi
         #
         self.lo := 0
         self.hi := if self.total_size > self.page_size then
            self.total_size - self.page_size
         else
            0
      }
      # Ensure value in lo..hi range.
      move_value(self.value)
   end

   private calc_bar_size()
      if /self.is_range_flag then {
         #
         # If total <= page then we produce an immovable full size bar
         # with lo = hi = 0, set above in check_vals.
         #
         self.bar_size := if self.total_size > self.page_size then
            integer((self.bar_area_size * self.page_size) / self.total_size)
         else
            self.bar_area_size 
      } else {
         #
         # Range; set bar size to constant, but leave room if bar_area_size is small.
         #
         self.bar_size := RANGE_BAR_SIZE
         self.bar_size >:= self.bar_area_size - scale(8)
      }
      #
      # Ensure bar size in range not less than MIN_BAR_SIZE, but must be within
      # bar_area_size.
      #
      self.bar_size <:= MIN_BAR_SIZE
      self.bar_size >:= self.bar_area_size

      if \self.is_range_flag then {
         #
         # For a slider, we still need the page size for clicks in the bar.
         #
         self.page_size := ((self.hi - self.lo) * self.bar_size) / (0 ~= self.bar_area_size) | 0
      }

      #
      # Set bar height/width according to orientation
      #
      if /self.is_horizontal_flag then
         self.bar_area.bar_h := self.bar_size
      else
         self.bar_area.bar_w := self.bar_size
   end

   public override initially()
      if /self.is_range_flag then {
         \self.total_size | runerr("Total size not set")
         \self.page_size | runerr("Page size not set")
      }
      # May not need increment_size if small_jump is overridden.
      if Class.get_field_defining_class(self, "small_jump") === ScrollBar & /self.increment_size then
         runerr("Increment size not set")
      \self.value | runerr("Value not set")
      check_vals()
      if /self.is_horizontal_flag then {
         b1.set_paint(ImagePaint().set_cache("gui.ARROW_UP"))
         b2.set_paint(ImagePaint().set_cache("gui.ARROW_DOWN"))
      } else {
         b1.set_paint(ImagePaint().set_cache("gui.ARROW_LEFT"))
         b2.set_paint(ImagePaint().set_cache("gui.ARROW_RIGHT"))
      }
      Component.initially()
   end

   public override layout()
      if /self.is_horizontal_flag then {
         #
         # Set button positions
         #
         b1.x := self.x + border.get_l_inset()
         b1.y := self.y + border.get_t_inset()
         b1.w := self.w - border.get_total_width()
         b1.h := max(DEFAULT_INNER_SIZE, b1.get_preferred_height(b1.w))
         b2.x := b1.x 
         b2.h := max(DEFAULT_INNER_SIZE, b2.get_preferred_height(b1.w))
         b2.y := self.y + self.h - b2.h - border.get_b_inset()
         b2.w := b1.w

         #
         # Compute bar area dimensions
         #
         bar_area.x := b1.x + BAR_INDENT
         bar_area.y := b1.y + b1.h
         bar_area.w := b1.w - 2 * BAR_INDENT
         bar_area.h := b2.y - (b1.y + b1.h)

         self.bar_area.bar_x := self.bar_area.x
         self.bar_area_pos := self.bar_area.y
         self.bar_area.bar_w := self.bar_area.w
         self.bar_area_size := self.bar_area.h
      } else {
         b1.x := self.x + border.get_l_inset()
         b1.y := self.y + border.get_t_inset()
         b1.w := max(DEFAULT_INNER_SIZE, b1.get_preferred_width())
         b1.h := self.h - border.get_total_height()
         b2.w := max(DEFAULT_INNER_SIZE, b2.get_preferred_width())
         b2.x := self.x + self.w - b2.w - border.get_r_inset()
         b2.y := b1.y
         b2.h := b1.h

         bar_area.x := b1.x + b1.w
         bar_area.y := b1.y + BAR_INDENT
         bar_area.w := b2.x - (b1.x + b1.w)
         bar_area.h := b1.h - 2 * BAR_INDENT

         self.bar_area_pos := self.bar_area.x
         self.bar_area.bar_y := self.bar_area.y
         self.bar_area_size := self.bar_area.w
         self.bar_area.bar_h := self.bar_area.h
      }

      b1.layout()      
      b2.layout()      

      # This test avoids a cosmetic problem whereby the bar would move
      # slightly as its position is recalculated from the value.
      # There is no need for this calculation unless the bar area
      # has changed size/pos.
      #
      if old_bar_area_pos ~=== bar_area_pos |
         old_bar_area_size ~=== bar_area_size then
      {
         calc_bar_size()
         set_pos_from_value()
         old_bar_area_pos := bar_area_pos
         old_bar_area_size := bar_area_size
      }
   end

   public override shift(dx, dy)
      Component.shift(dx, dy)
      if /self.is_horizontal_flag then {
         self.bar_pos +:= dy
         self.bar_area_pos +:= dy
         self.old_bar_area_pos +:= dy
      } else {
         self.bar_pos +:= dx
         self.bar_area_pos +:= dx
         self.old_bar_area_pos +:= dx
      }
      self.bar_area.bar_x +:= dx
      self.bar_area.bar_y +:= dy
   end

   #
   # Succeed if the bar is at its topmost (or leftmost) position.
   #
   public at_top()
      succeed bar_pos = bar_area_pos
   end

   #
   # Succeed if the bar is at its bottommost (or rightmost) position.
   #
   public at_bottom()
      succeed bar_pos + bar_size = bar_area_pos + bar_area_size
   end

   public override finally()
      repeat_ticker.stop()
      old_bar_area_pos := old_bar_area_size := &null
      Component.finally()
   end

   public override new()
      Component.new()
      repeat_ticker := Dispatcher.new_task{repeat_tick()}
      self.b1 := IconButton().
         set_border(NullBorder()).
         connect(self.handle_button_up, Event.BUTTON_PRESS).
         connect(self.handle_button_up, Event.BUTTON_HELD).
         set_use_middle(&yes).
         set_use_right(&yes).
         set_accepts_focus(&no)
      add(self.b1)
      self.b2 := IconButton().
         set_border(NullBorder()).
         connect(self.handle_button_down, Event.BUTTON_PRESS).
         connect(self.handle_button_down, Event.BUTTON_HELD).
         set_use_middle(&yes).
         set_use_right(&yes).
         set_accepts_focus(&no)
      add(self.b2)
      self.bar_area := BarArea().
         connect(self.handle_press, Event.MOUSE_LEFT_PRESS).
         connect(self.handle_drag, Event.MOUSE_LEFT_DRAG).
         connect(self.handle_release, Event.MOUSE_LEFT_RELEASE).
         connect(self.handle_press, Event.MOUSE_RIGHT_PRESS).
         connect(self.handle_drag, Event.MOUSE_RIGHT_DRAG).
         connect(self.handle_release, Event.MOUSE_RIGHT_RELEASE).
         connect(self.handle_press, Event.MOUSE_MIDDLE_PRESS).
         connect(self.handle_drag, Event.MOUSE_MIDDLE_DRAG).
         connect(self.handle_release, Event.MOUSE_MIDDLE_RELEASE)
      connect(handle_interrupted, Event.INTERRUPTED)
      add(self.bar_area)
      self.wheel_factor := DEFAULT_WHEEL_FACTOR
      self.page_factor := DEFAULT_PAGE_FACTOR
      self.shade_buttons_flag := DEFAULT_SHADE_BUTTONS
      set_use_wheel(&yes)
      set_border(RaisedBorder())
      return
   end
end
