import lang, io, ipl.functional, ipl.test

class A()
   private static init()
      write("A.init")
   end

   public defer df()

   public static sf() end

   public f() end
   public f2() end
end

class B(A)
   public x

   private static init()
      write("B.init")
   end

   public static h() end

   public defer g()

   public f()
      local t
      t := self.f
      return [ B.h, [self,t], [t,self], [t,t], self.f, self.f2, self.g, 
              A.f, StringStream().in, rpartial1(proc1,100) ]
   end
end

procedure proc1()
end

class Z()
end

procedure main()
   local l, e, s, t, m

   # Should output the init messages.
   decode("HA.f|CB|I1Sx|N")
   write()

   # Test checking of invalid strings
   yes_no { "Normal", decode("HA.f|CB|I1Sx|N") }
   yes_no { "No field", decode("HA.xyz|CB|I1Sx|N") }
   yes_no { "Deferred", decode("HA.df|CB|I1Sx|N") }
   yes_no { "Not implemented", decode("HZ.f|CB|I1Sx|N") }
   yes_no { "Static method", decode("HA.sf|CB|I1Sx|N") }
   yes_no { "Object expected", decode("Hio.StringStream.out|I1") }
   yes_no { "No dots in name", decode("Hnodots|Cio.StringStream|I2Ssubj|S|Spos|I1") }

   # Reference test
   write("---\nReference test")
   m := B().f
   if yes_no{ "Encode/decode", l := decode(encode([m, m, m])) } then {
      yes_no{ "Identical", l[1] === l[2] & l[1] === l[3] }
   }

   # Various items
   l := B().f()
   every e := !l do {
      write("---\n", to_stringx(e))
      if yes_no{ "Encode", s := encode(e) } then {
         if yes_no{ "Decode", t := decode(s) } then
            yes_no{ "Equal", equals(e, t) }
      }
   }
end
