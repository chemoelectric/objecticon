#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import graphics, ipl.pdco

class CirculateLabel(Label)
   public override keeps(e)
      succeed member(Key.CURSOR_V, e.code)
   end

   public on_key(e)
      case e.code of {
         Key.UP : parent.go_up(e)
         Key.DOWN : parent.go_down(e)
         Key.HOME : parent.go_to(1, e)
         Key.END : parent.go_to(*parent.selection_list, e)
      }
   end

   public override new()
      Label.new()
      self.set_label("")
      connect(self.on_key, Event.KEY_PRESS)
      # Align with the text in the textlist.
      self.set_border(EmptyBorder().
                      set_x_align(Align.L).
                      set_l_inset(Gui.TEXT_INSET).
                      set_r_inset(Gui.TEXT_INSET))
      return
   end
end


#
# Selection from a list
#
class Circulate(SelectionList, Component, HasUseWheel)
   public
      old_selection, 
      b,
      l

   private static init()
      local sz
      sz := scale(12)
      ImageCache.copy_key_with_resize("gui.CIRCULATE", "gui.CIRCULATE_12", sz, sz)
   end

   public override apply_selection()
      local s
      s := self.selection_list[\self.selection] | ""
      self.l.set_label(s)
   end

   public override get_default_height(dw)
      dw -:= border.get_total_width() + b.get_preferred_width()
      return border.get_total_height() + l.get_preferred_height(dw)
   end

   public override get_default_width()
      return border.get_total_width() +
         b.get_preferred_width() +
         MaxNN{ self.cbwin.text_width(!self.selection_list) } +
         l.border.get_total_width()
   end

   public override layout()
      #
      # Set button position and size
      #
      b.x := self.x + border.get_l_inset()
      l.y := b.y := self.y + border.get_t_inset()
      l.h := b.h := self.h - border.get_total_height()
      b.w := b.get_preferred_width()
      l.x := b.x + b.w
      l.w := self.w - border.get_total_width() - b.w
      b.layout()
      l.layout()
   end

   #
   # Display the object.
   #
   public override display()
      border.draw_rect(self.cbwin, self)
      display_children()
   end

   public override focus_changed(e) 
      l.invalidate()
   end

   #
   # The handler for the button - move the selection forward.
   #
   public on_button_pressed(ev)
      go_up(ev)
   end

   public start_change(e)
      self.old_selection := self.selection
   end

   public end_change(e)
      if self.old_selection ~=== self.selection then
         fire(Event.SELECTION_CHANGED, e)
   end

   public go_down(e)
      start_change(e)
      decrement_selection(e)
      end_change(e)
   end

   public go_up(e)
      start_change(e)
      increment_selection(e)
      end_change(e)
   end

   public go_to(x, e)
      start_change(e)
      set_selection(x, e)
      end_change(e)
   end

   public override handle_wheel_up(e)
      go_up(e)
   end

   public override handle_wheel_down(e)
      go_down(e)
   end

   public override initially()
      \self.selection_list | runerr("No selection list specified")
      Component.initially()
   end

   public override new() 
      Component.new()
      self.set_border(SunkenBorder())
      self.preferred_focus := self.l := CirculateLabel()
      self.l.set_accepts_focus(&yes)
      add(self.l)
      self.b := IconButton().
         set_accepts_focus(&no).
         set_border(CompoundBorder().
                    set_outer(RaisedBorder()).
                    set_inner(EmptyBorder().
                              set_insets(scale(2), scale(2), Gui.UNIT, Gui.UNIT))).
         set_paint(ImagePaint().
                   set_cache("gui.CIRCULATE")).
         connect(self.on_button_pressed, Event.ACTION)
      add(self.b)
      set_use_wheel(&yes)
      return
   end
end
