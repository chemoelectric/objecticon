#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import 
   parser,
   ipl.strings, 
   ipl.sort,
   io

class GroffOutputter(Outputter)
   private
      output_file

   public output()
      local c, l, s, t, u, m, meths, vars, x, fullname

      if s := \opts["o"] then
         output_file := OutputStream(s)

      every c := get_classes_in(get_packages()) do {
         l := []
         every put(l, c.get_resolved_supers().get_fq_name())
         if *l = 0 then 
            s := "(none)"
         else {
            s := ""
            every s ||:= !l || " "
            s := "\\f[HR]" || s || "\\f[R]"
         }
         t := c.get_package() | "default"
         t := "\\f[HR]" || t || "\\f[R]"
         u := c.scanned_file.filename
         u := "\\f[HR]" || u || "\\f[R]"
         write(output_file, ".HEAD \"", get_top_level_type(c), " ", c.name, "\" \"", s, "\"", " \"", t, "\"", " \"", u, "\"")
         if is(c.obj, Tree) then
            markdown1(c)

         meths := []
         vars := []
         every x := c.get_fields() do {
            if is(x, ClassVariable) then
               put(vars, x)
            else
               put(meths, x)
         }
         qsort(meths, name_sort)
         qsort(vars, name_sort)

         every m := !meths do {
            write(output_file, ".FUNC_START \"", get_access_string(m.obj), " ", m.name, "(", get_param_string(m.obj) ,")\"")
            if is(m.obj, Tree) then
               markdown1(m)
            write(output_file, ".FUNC_END")
         }
         every m := !vars do {
            write(output_file, ".FUNC_START \"", get_access_string(m.decl_obj), " ", m.name, "\"")
            if is(m.obj, Tree) then
               markdown1(m)
            write(output_file, ".FUNC_END")
         }
      }

      every c := get_others_in(get_packages()) do {
         fullname := c.name
         if is(c, ProcedureSymbol) then
            fullname ||:= "(" || get_param_string(c.obj) || ")"
         if is(c, RecordSymbol) then
            fullname ||:= "(" || get_record_field_string(c.obj) || ")"
         s := "(none)"
         t := c.get_package() | "default"
         t := "\\f[HR]" || t || "\\f[R]"
         u := c.scanned_file.filename
         u := "\\f[HR]" || u || "\\f[R]"
         write(output_file, ".HEAD \"", get_top_level_type(c), " ", c.name, "\" \"", s, "\"", " \"", t, "\"", " \"", u, "\"")
         write(output_file, ".FUNC_START \"", fullname ,"\"")
         if is(c.obj, Tree) then
            markdown1(c)
         write(output_file, ".FUNC_END")
      }

      (\output_file).close()
   end

   private markdown1(sym)
      markdown(get_comment(sym).string)
   end

   private esc(s)
      return replace(s, "\\", "\\\\")
   end

   protected override output_fragment(s)
      writes(output_file, esc(s))
   end

   protected override output_link(s)
      writes(output_file, esc(s))
   end

   protected override begin_code()
      writes(output_file, "\\f[HR]")
   end

   protected override end_code()
      writes(output_file, "\\fR")
   end

   protected override begin_bold()
      writes(output_file, "\\fB")
   end

   protected override end_bold()
      writes(output_file, "\\fR")
   end

   protected override begin_underline()
      writes(output_file, "\\fB")
   end

   protected override end_underline()
      writes(output_file, "\\fR")
   end

   protected override begin_italic()
      writes(output_file, "\\fI")
   end

   protected override end_italic()
      writes(output_file, "\\fR")
   end

   protected override output_anchor(s)
      output_fragment(s)
   end

   protected override end_line(fl)
      write(output_file)
      if \fl then
         write(output_file, ".br")
   end

   protected override begin_pre()
      write(output_file, ".nf")
      write(output_file, ".ft C")
   end

   protected override output_pre(s)
      write(output_file, esc(s))
   end

   protected override end_pre()
      write(output_file, ".ft P")
      write(output_file, ".fi")
   end

   protected override begin_ul()
      write(output_file, ".LS_SET b")
   end

   protected override end_ul()
      write(output_file, ".LS_END")
   end

   protected override begin_ol(type)
      write(output_file, ".LS_SET ", if type == "1" then "1" else "(a)")
   end

   protected override end_ol()
      write(output_file, ".LS_END")
   end

   protected override begin_li()
      write(output_file, ".LS_ITEM")
   end

   protected override end_li()
   end

   protected override begin_dt()
      write(output_file, ".P")
   end

   protected override end_dt()
   end

   protected override begin_dl()
      write(output_file, ".LS_SET c")
   end

   protected override end_dl()
      write(output_file, ".LS_END")
   end

   protected override begin_dd()
      write(output_file, ".LS_ITEM")
   end

   protected override end_dd()
   end

   protected override new_para()
      write(output_file, ".P")
   end
end

