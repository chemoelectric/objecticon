#
# $Id$
#

import gui

class MapTab(TabItem)
   public 
   tbl,
   add_button,                 # Buttons              
   delete,              #                  
   apply,               #                 
   contents,            # Table contents
   attrib_tf,
   value

   public update_grey()
      if *tbl.get_selections() > 0 then {
         attrib_tf.set_is_shaded("f")
         value.set_is_shaded("f")
         delete.set_is_shaded("f")
         apply.set_is_shaded("f")
      } else {
         attrib_tf.set_is_shaded("t")
         value.set_is_shaded("t")
         delete.set_is_shaded("t")
         apply.set_is_shaded("t")
      }
   end

   public on_add()
      #
      # Add a new value to the attributes table.
      #
      put(contents, ["Edit me", ""])
      tbl.contents_changed()
      tbl.table_content.goto_first(*contents)
      tbl.set_selections([*contents])
      tbl.set_cursor(*contents)
      attrib_tf.set_contents(contents[-1][1])
      value.set_contents(contents[-1][2])
      update_grey()
      attrib_tf.focus()
      attrib_tf.handle_select_all()
   end

   public on_tbl()
      local i
      #
      # Line in the table clicked - copy the line to the edit area.
      #
      if i := tbl.get_selections()[1] then {
         attrib_tf.set_contents(contents[i][1])
         value.set_contents(contents[i][2])
      }
      update_grey()
   end

   public on_delete()
      local i
      #
      # Delete a line from the table.
      #
      i := tbl.get_selections()[1]
      contents := contents[1 : i] ||| contents[i + 1 : 0]
      tbl.set_contents(contents)
      tbl.clear_selections()
      update_grey()
   end

   public on_apply()
      local i
      #
      # Copy the edited item back to the table. 
      #
      i := tbl.get_selections()[1]
      contents[i] := [attrib_tf.get_contents(), value.get_contents()]
      tbl.contents_changed()
      tbl.clear_selections()
      update_grey()
   end

   public set_table(t)
      self.contents := sort(t)
      tbl.set_contents(contents)
   end

   public get_table()
      local t, e
      t := table()
      every e := !self.contents do
         every insert(t, e[1], e[2])
      return t
   end

   public set_one(f)
      case f.attr of {
         "table": set_table(f.table_val())
         default: return cast(self,TabItem).set_one(f)
      }
      return
   end

   public new(a[])
      local c1, c2, p
      cast(self,TabItem).new()

      set_layout(GridLayout())

      tbl := Table("c:eol")
      tbl.connect(self.on_tbl, Event.SELECTION_CHANGED)
      tbl.set_select_mode(Select.ONE)
      tbl.set_size(200, 160)
      cast(self,Component).add(tbl)

      c1 := TableColumn()
      c1.set_column_width(100)
      c1.set_label("Key")
      tbl.add_column(c1)

      c2 := TableColumn()
      c2.set_label("Value")
      tbl.add_column(c2)

      p := Panel("c:eol", "c:y_weight=0")
      p.set_layout(GridLayout("doi=0"))
      attrib_tf := TextField("c:x_weight=0")
      attrib_tf.set_size(95)
      attrib_tf.connect(self.on_apply, Event.ACTION)
      p.add(attrib_tf)
      value := TextField()
      value.set_size(175)
      value.connect(self.on_apply, Event.ACTION)
      p.add(value)
      cast(self,Component).add(p)

      p := Panel("c:eol","c:y_weight=0")
      p.set_layout(GridLayout("doi=0"))
      add_button := TextButton()
      add_button.connect(self.on_add, Event.ACTION)
      add_button.set_label("Add")
      p.add(add_button)

      delete := TextButton()
      delete.connect(self.on_delete, Event.ACTION)
      delete.set_label("Delete")
      p.add(delete)

      apply := TextButton()
      apply.connect(self.on_apply, Event.ACTION)
      apply.set_label("Apply")
      p.add(apply)
      cast(self,Component).add(p)

      update_grey()

      set_fields(a)
      return
   end
end




