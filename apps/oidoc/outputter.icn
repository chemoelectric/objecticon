import
   lang(Class, Text),
   parser(ClassSymbol, ClassVariable, DeferredMethod, Tree, ULocal,
          UMethod, ProcedureSymbol, RecordSymbol, GlobalSymbol),
   ipl.pdco(String),
   ipl.sort(qsort),
   datastruct(SortTable),
   util(Yes)

record Item(kind, indent)

abstract class Outputter()
   public static const
      WHITESPACE,
      ID_CHAR

   protected const
      symbol_table,
      opts

   private
      stk

   private static init()
      WHITESPACE := ' \t'
      ID_CHAR := &ucase ++ &lcase ++ '_0987654321'
   end

   protected static name_sort(a, b)
      return Text.consistent_compare(a.name, b.name)
   end

   protected get_packages()
      local ps, e
      ps := SortTable(, Text.consistent_compare)
      every e := symbol_table.gen_symbols() do
         ps.insert(get_package(e))
      suspend ps.key()
   end

   protected get_package(e)
      return \(\e.scanned_file).pack | "default"
   end

   protected should_print_symbol(e)
      return should_print_package(get_package(e))
   end

   protected should_print_package(p)
      return (p == "default") | /opts["r"] | member(arg_packs, p)
   end

   protected get_symbols_in(p)
      local l, e
      if p == "default" then
         p := &null
      l := []
      every e := symbol_table.gen_symbols() do {
         if (\e.scanned_file).pack === p then
            put(l, e)
      }
      qsort(l, name_sort)
      suspend !l
   end

   protected get_classes_in(p)
      local e
      every e := get_symbols_in(p) do
         if is(e, ClassSymbol) then
            suspend e
   end

   protected get_others_in(p)
      local e
      every e := get_symbols_in(p) do
         if not is(e, ClassSymbol) then
            suspend e
   end

   private ucode_params(obj)
      local a, has_self
      # A non-static method will have an implicit self param.
      if is(obj, UMethod) & iand(obj.flags, Class.Static) = 0 then
         has_self := &yes
      every a := obj.get_locals() do {
         if iand(a.flags, ULocal.Argument) ~= 0 then {
            if \has_self then
               has_self := &null
            else
               suspend a.id
         }
      }
   end

   protected get_param_string(obj)
      local s
      if is(obj, Tree) then {
         s := String{ obj.get_args().gen().str(), ", " }
         if obj.has_varargs() then
            s ||:= "[]"
      } else {
         s := String{ ucode_params(obj), ", " }
         if iand(obj.locals[-1].flags, ULocal.Vararg) ~= 0 then
            s ||:= "[]"
      }
      return s
   end

   protected get_record_fields(obj)
      suspend if is(obj, Tree) then
         obj.get_ids().gen().str()
      else
         obj.get_fields()
   end

   protected get_record_field_string(obj)
      return String{ get_record_fields(obj), ", " }
   end

   protected get_class_prefix(c)
      local s
      s := ""
      if c.has_package_flag() then
         s ||:= "package "
      if c.is_final() then
         s ||:= "final "
      if c.is_abstract() then
         s ||:= "abstract "
      s ||:= "class"
      return s
   end

   protected get_top_level_type(c)
      local s
      s := ""
      if c.has_package_flag() then
         s ||:= "package "
      if is(c, GlobalSymbol) & c.has_readable_flag() then
         s ||:= " readable "
      if is(c, ClassSymbol) then {
         if c.is_final() then
            s ||:= "final "
         if c.is_abstract() then
            s ||:= "abstract "
      }
      s ||:= case classof(c) of {
         ProcedureSymbol : "procedure"
         RecordSymbol : "record"
         GlobalSymbol : "global"
         ClassSymbol : "class"
         default : syserr("Unknown type")
      }
      return s
   end

   protected get_access_string(obj)
      local s
      s := ""
      if is(obj, Tree) then {
         every s ||:= obj.get_access().gen().str() || " "
         if is(obj, DeferredMethod) then
            s ||:= obj.get_defer_type().str() || " "
      } else {
         if iand(obj.flags, Class.Private) ~= 0 then
            s ||:= "private "
         if iand(obj.flags, Class.Public) ~= 0 then
            s ||:= "public "
         if iand(obj.flags, Class.Protected) ~= 0 then
            s ||:= "protected "
         if iand(obj.flags, Class.Package) ~= 0 then
            s ||:= "package "
         if iand(obj.flags, Class.Static) ~= 0 then
            s ||:= "static "
         if iand(obj.flags, Class.Const) ~= 0 then
            s ||:= "const "
         if iand(obj.flags, Class.Readable) ~= 0 then
            s ||:= "readable "
         if iand(obj.flags, Class.Override) ~= 0 then
            s ||:= "override "
         if iand(obj.flags, Class.Abstract) ~= 0 then
            s ||:= "abstract "
         if iand(obj.flags, Class.Native) ~= 0 then
            s ||:= "native "
         if iand(obj.flags, Class.Optional) ~= 0 then
            s ||:= "optional "
         if iand(obj.flags, Class.Final) ~= 0 then
            s ||:= "final "
      }
      s[-1] := ""
      return s
   end

   protected get_comment_token(sym)
      return if is(sym, ClassVariable | GlobalSymbol) & sym.decl_obj.size() = 1 then
         sym.decl_obj.get_first_token()
      else
         sym.obj.get_first_token()
   end

   private get_comment_list(sym)
      local comment, l
      comment := []
      get_comment_token(sym).get_pad() ? {
         while tab(upto('#')) do {
            move(1)
            l := tab(upto('\n\r') | 0)
            # Omit pre-processor generated comments, (in the form #line ...)
            match("line ", l) | put(comment, l)
         }
      }
      #
      # Strip off any empty lines at the front and beginning of
      # the comment.
      #
      while *comment[1] = 0 do
         pop(comment)
      while *comment[-1] = 0 do
         pull(comment)

      return comment
   end

   private markdown_line(s)
      local t
      s ? {
         while t := tab(upto('/`*_~<')) do {
            output_fragment(t)
            if ="`" then {
               t := tab(upto('`\'') | 0)
               push_item("code")
               if move(1)\1 == "`" then
                  output_link(t)
               else
                  output_fragment(t)
               pop_item()
            } else if ="~~" then {
               toggle_font("code")
            } else if ="**" then {
               toggle_font("b")
            } else if not any(':/',, &pos - 1) & ="//" then {    # Try to avoid clashes with urls... http:// or file:///
               toggle_font("i")
            } else if ="__" then {
               toggle_font("u")
            } else if ="<" & match("http:"|"https:"|"file:"|"ftp:") then {
               t := tab(find(">") | 0)
               move(1)
               output_anchor(t)
            } else {
               t := move(1)
               output_fragment(t)
            }
         }
         t := tab(0)
         output_fragment(t)
      }
      # Two or more spaces at the end of a line indicate a line break.
      end_line(Yes{s[-2:0] == "  "})
      link
   end

   private toggle_font(kind)
      if stk[1].kind == kind then
         pop_item()
      else
         push_item(kind)
   end

   private pop_item()
      local e
      e := pop(stk) | fail
      case e.kind of {
         "li" : end_li()
         "ul": end_ul()
         "ol_1"|
            "ol_a"|
            "ol_A": end_ol()
         "dl": end_dl()
         "dt": end_dt()
         "dd": end_dd()
         "pre": end_pre()
         "b": end_bold()
         "u": end_underline()
         "i": end_italic()
         "code": end_code()
      }
      return e
   end

   private push_item(kind, indent)
      local e
      e := Item(kind, indent)
      push(stk, e)
      case e.kind of {
         "li" : begin_li()
         "ul": begin_ul()
         "ol_1": begin_ol("1")
         "ol_a": begin_ol("a")
         "ol_A": begin_ol("A")
         "dl": begin_dl()
         "dt": begin_dt()
         "dd": begin_dd()
         "pre": begin_pre()
         "b": begin_bold()
         "u": begin_underline()
         "i": begin_italic()
         "code": begin_code()
      }
      return e
   end

   # Find the indent level of the stack; this searches down for the
   # first one with a non-null indent, thus skipping font items (bold,
   # italic etc).
   #
   private stk_indent()
      local e, i
      every e := !stk do
         if i := \e.indent then
            return i
   end

   # Pop items off the stack whilst at or above the given indent
   # level.
   #
   private pop_indented(indent)
      while stk_indent() >= indent do
         pop_item()
   end

   # Ensure the top of the stack is an item of the given kind and
   # indent be it an existing one or a new one.
   #
   private ensure_list(kind, indent)
      local e
      while stk_indent() >= indent do {
         e := stk[1]
         if e.kind == kind & e.indent = indent then
            return e
         pop_item()
      }
      return push_item(kind, indent)
   end

   private ol_item(kind, indent, first)
      if \first then {
         # Start a new list at this level.
         pop_indented(indent)
         push_item(kind, indent)
      } else
         # Start a new list, or continue an existing one.
         ensure_list(kind, indent)
      push_item("li", indent)
      markdown_line(tab(0))
   end

   protected markdown(sym)
      local pre_mark, s, indent, l, t, item
      l := get_comment_list(sym)
      stk := []
      every !l ? {
         if t := stk[1] & t.kind == "pre" then {
            if pre_mark == &subject then
               pop_item()
            else {
               tab(min(many(WHITESPACE), t.indent))
               s := tab(0)
               output_pre(s)
            }
         } else {
            tab(many(WHITESPACE))
            indent := &pos
            if tab(many('~')) & pos(0) then {
               pre_mark := &subject
               pop_indented(indent)
               push_item("pre", indent)
            } else if ="*" & tab(many(WHITESPACE)) then {
               ensure_list("ul", indent)
               push_item("li", indent)
               markdown_line(tab(0))
            } else if item := tab(many(&digits)) & ="." & tab(many(WHITESPACE)) then {
               ol_item("ol_1", indent, Yes{ item == "1" })
            } else if item := tab(any(&lcase)) & ="." & tab(many(WHITESPACE)) then {
               ol_item("ol_a", indent, Yes{ item == "a" })
            } else if item := tab(any(&ucase)) & ="." & tab(many(WHITESPACE)) then {
               ol_item("ol_A", indent, Yes{ item == "A" })
            } else if =":" then {
               ensure_list("dl", indent)
               push_item(if tab(many(WHITESPACE)) then "dd" else "dt", indent)
               markdown_line(tab(0))
            } else if pos(0) then {
               new_para()
            } else if ="`" & pos(0) then {
               pop_indented(indent)
               new_para()
            } else {
               pop_indented(indent)
               markdown_line(tab(0))
            }
         }
      }
      while pop_item()
   end

   protected abstract output_fragment(s)
   protected abstract output_link(s)
   protected abstract output_anchor(s)
   protected abstract end_line(fl)
   protected abstract begin_pre()
   protected abstract output_pre(s)
   protected abstract end_pre()
   protected abstract begin_ul()
   protected abstract end_ul()
   protected abstract begin_code()
   protected abstract end_code()
   protected abstract begin_ol(type)
   protected abstract end_ol()
   protected abstract begin_li()
   protected abstract end_li()
   protected abstract begin_dl()
   protected abstract end_dl()
   protected abstract begin_dt()
   protected abstract end_dt()
   protected abstract begin_dd()
   protected abstract end_dd()
   protected abstract new_para()
   protected abstract begin_bold()
   protected abstract end_bold()
   protected abstract begin_underline()
   protected abstract end_underline()
   protected abstract begin_italic()
   protected abstract end_italic()

   public new(opts, symbol_table)
      self.opts := opts
      self.symbol_table := symbol_table
      return
   end
end
