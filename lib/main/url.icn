#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package net

import 
   lang,
   util,
   ipl.scan,
   ipl.strings,
   ipl.tables,
   ipl.printf

#
# This class encapsulates a URL
#
class URL(ObjectOutput)
   private readable 
      scheme,
      userinfo,
      host,
      path,
      query,
      fragment,
      port

   public static const
      RESERVED, UNRESERVED, SUB_DELIMS, CGI_UNRESERVED, PATH_CHAR, USERINFO_CHAR, SCHEME_CHAR, HOST_CHAR, QUERY_CHAR, FRAGMENT_CHAR

   private static init()
      RESERVED := ':/?#[]@!$&\'()*+,;='
      UNRESERVED := &letters ++ &digits ++ '_.\-~'
      SUB_DELIMS := '!$&\'()*+,;='
      CGI_UNRESERVED := &letters ++ &digits ++ '_.\- '
      SCHEME_CHAR := &letters ++ &digits ++ '+\-.'
      USERINFO_CHAR := UNRESERVED ++ SUB_DELIMS ++ ':'
      HOST_CHAR := UNRESERVED ++ SUB_DELIMS
      PATH_CHAR := UNRESERVED ++ SUB_DELIMS ++ ':@/'
      QUERY_CHAR := UNRESERVED ++ SUB_DELIMS ++ ':@/?'
      FRAGMENT_CHAR := QUERY_CHAR
   end

   #
   # Return the default port for the given scheme
   #
   public static get_default_port(scheme)
      return case string(scheme) of {
         "http": 80
         "https": 443
      }
   end

   #
   # Helper function to put square brackets around a hostname, if it
   # is an IPv6 literal (ie: contains a ":").
   #
   public static bracket_host(host)
      return if upto(':', host) then
         "[" || host || "]"
      else
         host
   end

   #
   # Set the scheme field.
   #
   public set_scheme(x)
      self.scheme := map(x)
      link
   end

   #
   # Get the scheme field.
   #
   public get_scheme()
      return .self.scheme
   end

   #
   # Set the port field.
   #
   public set_port(x)
      self.port := /x | need_integer(x, 0)
      link
   end

   #
   # Get the port field, or fail if it is not set.
   #
   public get_port()
      return .\self.port
   end

   #
   # Set the userinfo field.
   #
   public set_userinfo(x)
      self.userinfo := /x | need_text(x)
      link
   end

   #
   # Get the userinfo field, or fail if it is not set.
   #
   public get_userinfo()
      return .\self.userinfo
   end

   #
   # Get the userinfo field, with percent encodings decoded, or fail
   # if it is not set.
   #
   public get_decoded_userinfo()
      return percent_decode(\self.userinfo)
   end

   #
   # Get the file, which is the path followed by the query (if any).
   #
   public get_file()
      local s
      s := path
      s ||:= "?" || \query
      return s
   end

   #
   # Get the file, with percent encodings decoded.
   #
   public get_decoded_file()
      return percent_decode(get_file())
   end

   #
   # Return the path
   #
   public get_path()
      return .path
   end

   #
   # Return the path, with percent encodings decoded.
   #
   public get_decoded_path()
      return percent_decode(path)
   end

   #
   # Set the path field.
   #
   public set_path(x)
      self.path := need_text(x)
      link
   end

   #
   # Return the query field, or fail if there is no query.
   #
   public get_query()
      return .\query
   end

   #
   # Return the query field, with percent encodings decoded, or fail if there is no query.
   #
   public get_decoded_query()
      return percent_decode(\query)
   end

   #
   # Set the query field.
   #
   public set_query(x)
      self.query := /x | need_text(x)
      link
   end

   #
   # Set the fragment field.
   #
   public set_fragment(x)
      self.fragment := /x | need_text(x)
      link
   end

   #
   # Get the optional fragment field, failing if none is set.
   #
   public get_fragment()
      return .\self.fragment
   end

   #
   # Get the optional fragment field, with percent encodings decoded, failing if none is set.
   #
   public get_decoded_fragment()
      return percent_decode(\self.fragment)
   end

   #
   # Set the host field.
   #
   public set_host(x)
      self.host := /x | need_text(x)
      link
   end

   #
   # Get the host field, or fail if this is not a hierarchical url.
   #
   public get_host()
      return .\self.host
   end

   #
   # Get the host field, with percent encodings decoded, or fail if this is not a hierarchical url.
   #
   public get_decoded_host()
      return percent_decode(\self.host)
   end

   #
   # Output object
   #
   private override object_output(oo)
      oo.object_string(self, str())
   end

   #
   # Helper to caseless compare x with string s
   #
   private static cl_eq(x, s)
      succeed Text.caseless_compare(string(x), s) = 0
   end

   #
   # Convert to string representation.  The result is always a string, never ucs.
   #
   public str()
      local s
      s := string(scheme) || ":"
      if \host & not(scheme == "file" & cl_eq(host, "localhost")) then {
         s ||:= "//"
         s ||:= string(\userinfo) || "@"
         s ||:= bracket_host(string(host))
         if \port & not(port = get_default_port(scheme)) then
            s ||:= ":" || port
      }
      s ||:= string(path)
      s ||:= "?" || string(\query)
      s ||:= "#" || string(\fragment)
      return s
   end

   #
   # Convenient method to give ucs(str()); may fail if str() is not convertible.
   #
   public ucs()
      return default.ucs(str())
   end

   #
   # Convenient method to give Text.liberal_ucs(str()); will never fail.
   #
   public liberal_ucs()
      return Text.liberal_ucs(str())
   end

   #
   # Succeed iff this URL represents a local file.
   #
   public is_local_file()
      succeed scheme == "file" & cl_eq(host, "localhost" | &host)
   end

   # Extract the cgi parameters from the `file` field.  Fails if there
   # is no query in the file part.
   # :Returns :
   # :  A table, representing the keys and values of the fields.
   #
   public extract_cgi_parameters()
      return make_cgi_table(\query)
   end

   # Return a new URL with the query part set using
   # the table of CGI parameters.  The old query portion (if any) is
   # discarded.
   # :Parameters :
   # :  `cgi` - The table of keys/values.
   #
   public with_cgi_parameters(cgi)
      return from_parts(scheme, userinfo, host, port, path, make_cgi_string(cgi), fragment)
   end

   #
   # Amend the query field given a table of CGI parameters.  The old query
   # portion (if any) is discarded.
   # :Parameters :
   # :  `cgi` - The table of keys/values.
   #
   public set_cgi_parameters(cgi)
      self.query := make_cgi_string(cgi)
      link
   end

   private path_check(s)
      if *path = 0 then
         path := "/"
      else
         (path[1] == "/") | return error("Path should start with /")
      return
   end

   #
   # Create a URL by parsing the given string.  Returns a new `URL` if okay,
   # or sets &why on failure.
   #
   public new(s)
      s ? {
         scheme := 1(map(tab(many(SCHEME_CHAR))), =":") | return error("Scheme required")
         if ="//" then {
            userinfo := 1(tab(upto('@/?#')\1), ="@")
            host := if ="[" then
               1(tab(upto(']')), move(1)) | return error("Missing ] bracket")
            else
               tab(upto(':/#?') | 0)
            if *host = 0 then {
               if scheme == "file" then
                  host := "localhost"
               else
                  return error("No host")
            }
            if =":" then
               # The port can be empty
               port := integer(tab(many(&digits)))
            /port := get_default_port(scheme)
            path := tab(upto('#?') | 0)
            path_check() | fail
         } else {
            if scheme == ("http" | "https") then
               return error("// expected")
            path := tab(upto('#?') | 0)
            # Allow file URLs with no authority (see rfc8089 appendix B).
            if scheme == "file" then {
               host := "localhost"
               path_check() | fail
            }
         }
         if ="?" then
            query := tab(upto('#') | 0)
         if ="#" then
            fragment := tab(0)
      }
      return
   end

   #
   # Return a new URL relative to this URL, based on the given relative string s.
   #
   public get_relative(s)
      local new_path, new_query, new_fragment
      if s[1:3] == "//" then
         return URL(scheme || ":" || s)

      if s[1] == "#" then
         #
         # Just reference, filename doesn't change.
         # 
         return from_parts(scheme, userinfo, host, port, path, query, s[2:0])

      if *s = 0 then
         #
         # Empty string means copy the base, but drop the fragment.  see http://www.w3.org/TR/url/ s3.2.1
         # and rfc3986 s5.2.2
         # 
         return from_parts(scheme, userinfo, host, port, path, query)

      #
      # File name and possibly reference.
      #
      if s[1] == "?" then
         # eg http://a/b/c?d + ?e -> http://a/b/c?e
         s := path || s
      else if s[1] ~== "/" then
         # eg http://a/b/c?d + e -> http://a/b/e
         s ?:= strip_dot_dirs(get_path_dir() || tab(upto('?') | 0)) || tab(0)
      s ? {
         new_path := tab(upto('#?') | 0)
         if ="?" then
            new_query := tab(upto('#') | 0)
         if ="#" then
            new_fragment := tab(0)
      }
      return from_parts(scheme, userinfo, host, port, new_path, new_query, new_fragment)
   end

   #
   # Get the last portion of the path, ie that past the last "/".  May be
   # the empty string (eg for "http://abc.com/").
   #
   public get_path_last()
      path ? {
         tab(backto('/',, 0))
         return tab(0)
      }
   end

   #
   # Get the last portion of the path, with percent encodings decoded.
   #
   public get_decoded_path_last()
      return percent_decode(get_path_last())
   end

   #
   # Get the portion of the file name upto and including the last "/".  The filename
   # should always be at least a "/", so this should return at least that.
   #
   public get_path_dir()
      path ? {
         tab(backto('/',, 0))
         return tab(1)
      }
   end
   
   #
   # Get the path dir, with percent encodings decoded.
   #
   public get_decoded_path_dir()
      return percent_decode(get_path_dir())
   end

   #
   # Create a new URL from the given constituent parts.
   #
   public static from_parts(scheme, userinfo, host, port, path, query, fragment)
      local i
      i := Class.create_instance()
      i.scheme := map(scheme)
      i.userinfo := /userinfo | need_text(userinfo)
      i.host := /host | need_text(host)
      i.port := /port | need_integer(port, 0)
      i.path := need_text(path)
      i.query := /query | need_text(query)
      i.fragment := /fragment | need_text(fragment)
      return i
   end

   #
   # Create a CGI parameter string from a table
   #
   public static make_cgi_string(cgi)
      local l, s
      s := ""
      every l := !sort(cgi) do {
         if string(l[2]) then
            s ||:= cgi_encode(l[1]) || "=" || cgi_encode(l[2]) || "&"
         else
            every s ||:= cgi_encode(l[1]) || "=" || cgi_encode(!l[2]) || "&"
      }
      s[-1] := ""
      return s
   end

   #
   # Create a CGI parameter string by adding any encoding necessary.
   #
   public static cgi_encode(s)
      return map(percent_encode(s, CGI_UNRESERVED), " ", "+")
   end

   #
   # Make a cgi param table from the given string.  Note that the keys and entries are
   # always strings (never ucs).
   # :Returns :
   # :  A table, representing the keys and values of the fields.
   #
   public static make_cgi_table(s)
      local cgi, key, t
      s := need_string(s)
      cgi := table()
      # Allow ; as a separator as well as &.  See :-
      #    https://www.w3.org/TR/1999/REC-html401-19991224/appendix/notes.html#h-B.2.2
      #
      every t := separate(s, '&;') do
         if *t > 0 then
            t ? {
               key := 1(tab(upto('=')),move(1)) | tab(0)
               inserts(cgi, cgi_decode(key), cgi_decode(tab(0)))
            }
      
      return cgi
   end

   #
   # Convert a CGI parameter string by extracting any encoded
   # characters.  The result is always a string, never ucs.
   #
   public static cgi_decode(s)
      s := need_string(s)
      return percent_decode(map(s, "+", " "))
   end

   #
   # Convert a string by decoding any %xx encoding characters.  The
   # result is always a string, never ucs.
   #
   public static percent_decode(s)
      local res
      s := need_string(s)
      res := ""
      s ? {
         while res ||:= tab(upto('%')) || (move(1), char(Format.string_to_int(move(2))))
         return res || tab(0)
      }
   end

   #
   # Convert a string `s` by encoding any chars not in `c` to %xx
   # format.  The result is always a string, never ucs.  `c` defaults
   # to `UNRESERVED`.
   #
   public static percent_encode(s, c)
      local res, ch
      s := need_string(s)
      /c := UNRESERVED
      res := ""
      s ? repeat {
         res ||:= tab(many(c))
         ch := move(1) | return res
         res ||:= percent(ch)
      }
   end

   #
   # Percent encode a single character, ch.
   #
   public static percent(ch)
      return "%" || Format.int_to_string(ord(ch),, 2)
   end

   private static rmdir(s, i)
      # Never remove the root /
      return 1 < backto('/', s, i, 1)
   end

   #
   # Remove the dotted dirs from a file path, eg "/a/b/c/../g"->"/a/b/g"
   #
   public static strip_dot_dirs(s)
      local i
      while i := find("/.", s) do {
         if s[i+:4] == "/../" then
            (s[rmdir(s, i):i + 4] := "") | break
         else if s[i:0] == "/.." then
            (s[rmdir(s, i):0] := "") | break
         else if s[i+:3] == "/./" then
            s[i+:3] := "/"
         else if s[i:0] == "/." then
            s[i:0] := "/"
         else
            break
      }
      return s
   end

   #
   # Modify the percent encoding in the given string `s`.
   #
   # For currently unencoded characters, those in `c1` are left as-is,
   # others are percent-encoded.
   #
   # For currently encoded characters, those in `c2` are decoded, and
   # others are left percent-encoded.
   #
   # `c1` defaults to `UNRESERVED`, and `c2` defaults to `c1`.
   #
   # To work properly, `c1` should not include `%`.  For consistency
   # (meaning a further application would produce the same result),
   # `c2` should be a subset of `c1`.
   #
   # Example :- turn a URL with utf-8 characters into a string for
   # display, showing the utf-8 characters unescaped :-
   # ~
   #     URL.re_encode(url.str(), ~'%', ~&ascii) 
   # ~
   #
   public static re_encode(s, c1, c2)
      local res, ch
      s := need_string(s)
      /c1 := UNRESERVED
      /c2 := c1
      res := ""
      s ? repeat {
         res ||:= tab(many(c1))
         if pos(0) then
            return res
         res ||:= if ="%" & ch := char(Format.string_to_int(move(2))) then {
            if any(c2, ch) then
               ch
            else
               percent(ch)
         } else
            percent(move(1))
      }
   end

   #
   # Return a normalized version of this URL.  All percent encodings
   # are normalized, (see `re_encode` above).  Host case is lowered.
   # Dotted dirs are compacted.  All parts are of string type.  See
   # <https://en.wikipedia.org/wiki/URL_normalization>.
   #
   public normal()
      local s, u, h, p, q, f
      s := string(map(scheme))
      if \host then {
         u := re_encode(\userinfo, USERINFO_CHAR)
         h := if upto(':', host) then map(host) else re_encode(map(host), HOST_CHAR)
         p := strip_dot_dirs(re_encode(path, PATH_CHAR))
      } else
         p := re_encode(path, PATH_CHAR)
      q := if s == ("http" | "https") then
         map(re_encode(\query, CGI_UNRESERVED ++ '=&;+', CGI_UNRESERVED), " ", "+")
      else
         map(re_encode(\query, QUERY_CHAR ++ ' ', QUERY_CHAR ++ ' ' -- '=&;+'), " ", "+")
      f := re_encode(\fragment, FRAGMENT_CHAR)
      return from_parts(s, u, h, port, p, q, f)
   end

   #
   # Succeed iff two URLs represent the same URL, based on their
   # `str()` values.
   #
   public static equiv(x, y)
      succeed string(x.path) == string(y.path) & x.str() == y.str()
   end
end

# Helper procedure to convert x to a `URL`, or raise a runerr.
#
# :Parameters :
# :  `x` - something convertible to a `URL`.
#
procedure need_URL(x)
   return if is(x,URL) then x else URL(x) | runerr("URL expected: " || &why, x)
end

# options() converter procedure for a URL command line option.
#
procedure url_opt(x)
   return URL(x) | whyf("URL expected: %w")
end
