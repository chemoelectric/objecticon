import lang(Proc,Constructor,Prog), any.pack, io, ipl.test

invocable all

global c, what

procedure main()
   local i,s,p

   yes_no{"progof main", Proc.get_program(main) === &main}

   what := 50
$if _MS_WIN32
   c := Prog.load("mt_c1.exe") | stop("Couldn't load mt_c1")
$else
   c := Prog.load("mt_c1") | stop("Couldn't load mt_c1")
$endif
   Prog.get_global("main",c)()
   i := 1
   repeat {
      s := "test"||i
      p := Prog.get_global(s) | break
      write("Test ", s)
      p()
      if what ~=== 50 then
         stop("what messed up")
      i +:= 1
   }
   write("exit")
end

procedure test1()
   local p
   p := Prog.get_global("child1",c) | stop("no child1 found")
   yes_no{"progof", Proc.get_program(p) === c}
   pr_seq{"test1.p(4)", p(4)}
end

procedure test2()
   local p
   p := Prog.get_global("child2",c) | stop("no child2 found")
   pr_seq{"test2.p(4)", p(4)}
end

procedure test3()
   local p
   p := Prog.get_global("child3",c) | stop("no child3 found")
   pr_seq{"test3.p(4)", p(4)}
end

procedure back4(t)
   local x
   x := 100
   suspend x + (1 to t)
end

procedure test4()
   local p
   p := Prog.get_global("child4",c) | stop("no child3 found")
   p(back4)
end

procedure test5()
   local p,e
   p := Prog.get_global("child5",c) | stop("no child3 found")
   e := p()
   pr_seq{"test5", "x" || |@e}
end

procedure back6(t)
   suspend what + (1 to t)
end

procedure test6()
   local p,e
   p := Prog.get_global("child6",c) | stop("no child3 found")
   e := create back6(5)
   pr_seq{"test6", "y" || p(e)}
end

procedure call7(p)
   local x
   every x := p() do
      suspend what + x
end

procedure test7()
   local e, p
   p := Prog.get_global("child7",c) | stop("no child7 found")
   e := create call7(p)
   pr_seq{"test7", |@e}
end

procedure back8(l)
   every put(l, 10 to 15)
end

procedure test8()
   local l,p
   p := Prog.get_global("child8",c) | stop("no child8 found")
   l := []
   p(l, back8)
   pr_seq{"test8.l", !l}
end

record rec9(a,b,c)

procedure test9()
   local r,p
   p := Prog.get_global("child9",c) | stop("no child9 found")
   r := rec9()
   p(r)
   pr_seq{"test9.r", !r}
end

procedure test10()
   local p, r
   p := Prog.get_global("child10",c) | stop("no child10 found")
   r := p(rec9)
   pr_seq{"test10.r", !r}
end

procedure test11()
   local p, l
   p := Prog.get_global("child11",c) | stop("no child11 found")
   l := []
   p(l,put)
   pr_seq{"test11.l", !l}
end

procedure test12()
   local p,q, i
   p := Prog.get_global("rec12",c) | stop("no rec12 found")
   q := Prog.get_global("child12",c) | stop("no child12 found")
   write(image(p))
   yes_no{"progof", Constructor.get_program(p) === c}
   i := p()
   i.r := 3
   i.q := 2
   i.p := 1
   pr_seq{"test12.i2", !i}
   q(i)
   pr_seq{"test12.i2", !i}
end

procedure test13()
   local p
   p := Prog.get_global("child13",c) | stop("no child13 found")
   pr_seq{"test13", ((1 to 5) = p())}
end

procedure test14()
   local p,q,r
   p := Prog.get_global("child14a",c) | stop("no child13 found")
   q := Prog.get_global("child14b",c) | stop("no child13 found")
   r := Prog.get_global("child14c",c) | stop("no child13 found")
   pr_seq{"test14.1", ((1 to 5) = p())}
   pr_seq{"test14.2", ((1 to 5) = q())}
   pr_seq{"test14.3", ((1 to 5) = r())}
   pr_seq{"test14.4", (p() = (1 to 5))}
   pr_seq{"test14.5", (q() = (1 to 5))}
   pr_seq{"test14.6", (r() = (1 to 5))}
   pr_seq{"test14.7", (p() = q())}
   pr_seq{"test14.8", (p() = r())}
   pr_seq{"test14.9", (q() = r())}
   pr_seq{"test14.10", (r() = q())}
   pr_seq{"test14.11", (p() = p())}
   pr_seq{"test14.12", (q() = q())}
   pr_seq{"test14.13", (r() = r())}
end

procedure test15()
   local p
   p := Prog.get_global("child15",c) | stop("no child15 found")
   p()
end

procedure test16()
   local p, e
   p := Prog.get_global("child16",c) | stop("no child15 found")
   e := p()
   pr_seq{"test16.1", |@e}
   e := ^e
   pr_seq{"test16.2", |@e}
end

procedure test17()
   local p
   p := Prog.get_global("child17",c) | stop("no child17 found")
   pr_seq{"test17.p", p()}
end

procedure test18()
   local p
   p := Prog.get_global("child18",c) | stop("no child18 found")
   p()
end

procedure test19()
   local p, e
   p := Prog.get_global("child19",c) | stop("no child19 found")
   e := p()
   pr_seq{"test19.1", |@e}
   e := ^e
   pr_seq{"test19.2", |@e}
end

class Class20()
   public x, y

   public meth1()
      write("meth1 x=",x," y=",y)
   end

   public meth2()
      return Class20(3, 4)
   end

   public meth3(cb)
      cb.callme(99)
   end

   public new(x,y)
      self.x := x
      self.y := y
      return
   end
end

procedure test20()
   local i,p
   i := Class20(100,200)
   i.meth1()
   p := Prog.get_global("child20",c) | stop("no child20 found")
   p(i,Class20)
end

class Class21a()
   public x1,x2

   public meth1()
      write("21a.meth1")
   end
end

class Class21(Class21a)
   public v1,v2,v3

   public meth3()
      write("21.meth3")
   end

   public meth2(c)
      c.meth1()
   end

   public new(v1,v2,v3)
      self.v1 := v1
      self.v2 := v2
      self.v3 := v3
      return
   end
end

procedure test21()
   local r,p
   p := Prog.get_global("child21",c) | stop("no child21 found")
   r := Class21(1,2,3)
   write(r.v1)
   r.meth2(Class21a)
   r.meth3()
   p(r,Class21a)
end

procedure test22()
   local p
   p := Prog.get_global("child22",c) | stop("no child22 found")
   p(&main,&current)
end

record sometype(a,b,c)

procedure test23()
   local p, t, obj, res
   p := Prog.get_global("child23",c) | stop("no child23 found")
   t := sometype
   obj := t(1,2,3)
   print{"subtype(obj)", Constructor.get_name(obj)}
   pr_seq{"test23.obj", !obj}
   pr_seq{"test23.names", Prog.get_variable_name(!obj)}
   res := p(t, obj)
   print{"subtype(res)", Constructor.get_name(res)}
   pr_seq{"test23.res", !res}
   pr_seq{"test23.names", Prog.get_variable_name(!res)}
end

procedure test24()
   local p, t, o
   p := Prog.get_global("child24",c) | stop("no child24 found")
   t := p()
   o := t(1,2,3)
   pr_seq{"test24.o", !o}
   print{"subtype(o)", Constructor.get_name(o)}
   pr_seq{"test24.names", Prog.get_variable_name(!o)}
end

procedure test25()
end

procedure test26()
   local p, q, t1, t2
   p := Prog.get_global("any.pack.P",c) | stop("no any.pack.P found")
   q := Prog.get_global("any.pack.access_other",c) | stop("no any.pack.access_other found")

   t1 := P()
   write(image(t1))
   access_other(t1)
   q(t1)

   t2 := p() | stop("Construction failed")
   write(image(t2))
   access_other(t2)
   q(t2)
end

procedure test27()
   local c,p
$if _MS_WIN32
   c := Prog.load("mt_c3.exe") | stop("Couldn't load mt_c3")
   Prog.get_global("main",c)([1,2,3])
   c := Prog.load("mt_c3.exe")  | stop("Couldn't load mt_c3")
   Prog.get_global("main",c)([])
$else
   c := Prog.load("mt_c3") | stop("Couldn't load mt_c3")
   Prog.get_global("main",c)([1,2,3])
   c := Prog.load("mt_c3")  | stop("Couldn't load mt_c3")
   Prog.get_global("main",c)([])
$endif
   p := Prog.get_global("main",c) | stop("Couldn't access main")
   p([4,5,6])
   p([7,8,9])
end

procedure test28()
   local c
$if _MS_WIN32
   c := Prog.load("kwds.exe") | stop("Couldn't load kwds.icn")
$else
   c := Prog.load("kwds") | stop("Couldn't load kwds.icn")
$endif
   Prog.get_global("main",c)()
end

procedure test29()
   local p
   p := Prog.get_global("child29",c) | stop("no child29 found")
   &why := ""
   p()
   print{"main &why", &why}
   print{"child &why", Prog.eval_keyword("&why", Proc.get_program(p))}
end

procedure test30()
   print{"Q.f", Q.f}
   Q.f()

   # Same again in prog c
   print{"Q.f", Prog.get_global("any.pack.Q",c).f}
   Prog.get_global("any.pack.Q",c).f()
end

procedure test31()
   write("Parent scan 0:",image(&subject))
   "parent1" ? {
      write("Parent scan 1:",image(&subject))
      "parent2" ? {
         write("Parent scan 2:",image(&subject))
         every Prog.get_global("child31",c)() do
            write("Parent scan 3:",image(&subject))
         write("Parent scan 4:",image(&subject))
      }
      write("Parent scan 5:",image(&subject))
   }
   write("Parent scan 6:",image(&subject))
end

procedure test32()
   local e
   e := Prog.get_global("child32",c)()
   print{"c: &pos",Prog.eval_keyword("&pos",c)}
   print{"c: &why",Prog.eval_keyword("&why",c)}
   pr_type{"c: &file",Prog.eval_keyword("&file",c)}
   print{"c: &line",Prog.eval_keyword("&line",c)}
   print{"c: &main",Prog.eval_keyword("&main",c)}
   print{"c: &trace",Prog.eval_keyword("&trace",c)}
   print{"c: &handler",Prog.eval_keyword("&handler",c)}
   print{"c: &random",Prog.eval_keyword("&random",c)}
   print{"c: &source",Prog.eval_keyword("&source",c)}
   print{"c: &subject",Prog.eval_keyword("&subject",c)}
   print{"c: &current",Prog.eval_keyword("&current",c)}
   pr_type{"c: &progname",Prog.eval_keyword("&progname",c)}
   print{"c: &errortext",Prog.eval_keyword("&errortext",c)}
   print{"c: &errorvalue",Prog.eval_keyword("&errorvalue",c)}
   print{"c: &errornumber",Prog.eval_keyword("&errornumber",c)}
   print{"c: &errorcoexpr",Prog.eval_keyword("&errorcoexpr",c)}

   @e
   print{"e: &pos",Prog.eval_keyword("&pos",c)}
   print{"e: &why",Prog.eval_keyword("&why",c)}
   pr_type{"e: &file",Prog.eval_keyword("&file",c)}
   print{"e: &line",Prog.eval_keyword("&line",c)}
   print{"e: &main",Prog.eval_keyword("&main",c)}
   print{"e: &trace",Prog.eval_keyword("&trace",c)}
   print{"e: &handler",Prog.eval_keyword("&handler",c)}
   print{"e: &random",Prog.eval_keyword("&random",c)}
   print{"e: &source",Prog.eval_keyword("&source",c)}
   print{"e: &subject",Prog.eval_keyword("&subject",c)}
   print{"e: &current",Prog.eval_keyword("&current",c)}
   pr_type{"e: &progname",Prog.eval_keyword("&progname",c)}
   print{"e: &errortext",Prog.eval_keyword("&errortext",c)}
   print{"e: &errorvalue",Prog.eval_keyword("&errorvalue",c)}
   print{"e: &errornumber",Prog.eval_keyword("&errornumber",c)}
   print{"e: &errorcoexpr",Prog.eval_keyword("&errorcoexpr",c)}
end

procedure test33()
   local x, e, f
   x := Prog.get_global("Child33",c)
   print{"x", x}

   &why := "My oh my"
   &handler := &null
   errorclear()
   errorclear(c)
   Prog.eval_keyword("&why",c) := "Why oh why"   
   pr_seq{"Child33.fun1()", x.fun1()}
   print{"Child33.fun2()", x.fun2()}
   print{"Child33.fun3()", x.fun3()}

   Prog.eval_keyword("&handler", c) := &current
   e := create x.fun4()
   @e
   print{"&errortext", &errortext}
   print{"c: &errortext",Prog.eval_keyword("&errortext",c)}
   errorclear(c)
   print{"c: &errortext",Prog.eval_keyword("&errortext",c)}

   # f is now c's FileStream.stdout.  Calling out with a list should give err 103.
   f := x.fun5()
   e := create f.out([])
   @e
   print{"&errornumber", &errornumber}
   print{"c: &errornumber",Prog.eval_keyword("&errornumber",c)}

   &subject := "the quick brown fox"
   &pos := 4
   Prog.eval_keyword("&subject", c) := "jumped over the lazy dog"
   Prog.eval_keyword("&pos", c) := 7
   print{"Child33.fun6(5)", x.fun6(5)}
   print{"c: &pos", Prog.eval_keyword("&pos", c)}
   pr_seq{"Child33.fun6(11)", x.fun6(11)}
   # Should still be 5 since we forced tab through its results.
   print{"c: &pos", Prog.eval_keyword("&pos", c)}
   print{"&subject", &subject}
   print{"&pos", &pos}
end
