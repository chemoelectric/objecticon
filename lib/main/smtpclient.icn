#
# $Id$
#

package mail

import net, util(error)

class SmtpClient(NetClient)
   private static const 
      RFC822_HEADERS

   private static init()
      RFC822_HEADERS := set("date", "resent-date", "return-path", "received", "sender", 
                            "from", "reply-to", "resent-sender", "resent-from", 
                            "resent-reply-to", "to", "resent-to", "cc", "resent-cc", 
                            "bcc", "resent-bcc", "message-id", "resent-message-id",
                            "in-reply-to", "references", "keywords", "subject", 
                            "comments", "encrypted")
   end

   private 
      hostname,
      sent_helo

   #
   # Set the hostname to use with the EHLO command; by default {&host}.
   #
   public set_hostname(s)
      hostname := s
      return self
   end

   public open()
      local s
      open_connection() | fail
      sent_helo := &null
      s := read_response() | {
         close_connection()
         fail
      }
      if not(s[1:4] == "220") then {
         close_connection()
         return error("Failed to get initial 220: " || s)
      }
      return self
   end

   public close()
      local f
      send_command("QUIT", 221) | (f := &why)
      close_connection() | (/f := &why)
      return if /f then self else error(f)
   end

   public send_message(m)
      local s, l, mb

      if /sent_helo then {
         send_command("EHLO " || hostname, 250) | fail
         sent_helo := &yes
      } else
         send_command("RSET", 250)

      l := m.get_from() | return error("Invalid From address in message")
      if *l = 0 then
         return error("No From address in message")
      send_command("MAIL FROM: " || smtp_address(l[1]), 250) | fail

      l := get_all_mailboxes(m.get_to()) | return error("Invalid To address in message")
      if *l = 0 then
         return error("No To address in message")
      every mb := !l do 
         send_command("RCPT TO: " || smtp_address(mb), 250)  | fail

      send_command("DATA", 354) | fail
      send_headers(m) | fail

      #
      # Transform the content to change any . starting a line to ..
      #
      s := ""
      m.get_content() ? {
         if ="." then {
            s ||:= ".."
         }
         while s ||:= tab(find("\r\n.")) do {
            move(3)
            s ||:= "\r\n.."
         }
         s ||:= tab(0)
      }
      write_line(s) | fail
      send_command(".", 250) | fail

      return self
   end

   private smtp_address(mb)
      return "<" || mb.get_local_part() || "@" || mb.get_domain() || ">"
   end

   private send_command(msg, reply)
      local s, rc
      write_line(msg) | fail

      s := read_response() | fail

      rc := integer(s[1:4]) | return error("Couldn't get return code")
      return (rc = reply) | error("Server responded " || s)
   end

   private read_response()
      local s, t

      t := ""
      repeat {
         s := expect_line() | fail

         t ||:= s || "\n"

         if not(s[4] == "-") then
            return t
      }         
   end

   # Output the first header with the key only
   private send_first_header(l, m, key)
      put(l, key || ": " || m.get_first_header(key))
   end

   # Output all the headers with the key only, as separate header lines
   private send_headers_list(l, m, key)
      every put(l, key || ": " || m.gen_headers(key))
   end

   # Output all the headers for the key catenated together
   private send_catenated_header(l, m, key)
      put(l, key || ": " || m.get_catenated_headers(key))
   end

   private send_headers(m)
      local k, l

      l := []

      send_first_header(l, m, "Resent-Date")
      send_first_header(l, m, "Sender")
      send_first_header(l, m, "From")
      send_catenated_header(l, m, "Reply-To")
      send_first_header(l, m, "Resent-Sender")
      send_catenated_header(l, m, "Resent-From")
      send_catenated_header(l, m, "Resent-Reply-To")
      send_catenated_header(l, m, "To")
      send_catenated_header(l, m, "Resent-To")
      send_catenated_header(l, m, "cc")
      send_catenated_header(l, m, "Resent-cc")
      send_catenated_header(l, m, "bcc")
      send_catenated_header(l, m, "Resent-bcc")
      send_first_header(l, m, "Resent-Message-ID")
      send_first_header(l, m, "In-Reply-To")
      send_first_header(l, m, "References")
      send_first_header(l, m, "Keywords")
      send_first_header(l, m, "Subject")
      send_first_header(l, m, "Comments")
      send_first_header(l, m, "Encrypted")

      every k := m.gen_header_keys() do
         member(RFC822_HEADERS, map(k)) | send_headers_list(l, m, k)

      return write_lines(l)
   end

   public new()
      NetClient.new()
      set_port(25)
      set_server("localhost")
      set_hostname(&host)
      return
   end
end
