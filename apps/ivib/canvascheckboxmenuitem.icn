#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui, lang


############################################################################
#
#
#
class CanvasCheckBoxMenuItem(CanvasTextMenuItem,CheckBoxMenuItem)
   public set_parent_check_box_group(x)
      #
      # Set the images to the standard ones, unless custom images already set.
      #  
      if \x then
         self.set_box_paint(ImagePaint().set_cache("gui.DIAMOND_UP"), ImagePaint().set_cache("gui.DIAMOND_DOWN"))
      else
         self.set_box_paint(ImagePaint().set_cache("gui.BOX_UP"), ImagePaint().set_cache("gui.BOX_DOWN"))
      CheckBoxMenuItem.set_parent_check_box_group(x)
      return self
   end

   #
   # Generate code into Code object c.
   #
   public gen_code(c)
      self.paint_mid.gen_code(c)
      (\self.paint_right).gen_code(c)
      CanvasMenuComponent.gen_code(c)

      c.chain("set_paint_mid(" || self.paint_mid.name || ")")

      if \self.paint_right then
         c.chain("set_paint_right(" || self.paint_right.name || ")")

      # If in a cbg, then checked is set via set_which_one in the cbg's code.
      if \self.is_checked_flag & /self.parent_check_box_group then
         c.chain("set_is_checked(&yes)")
   end

   #
   # Duplicate object.
   #
   public dup()
      local c
      c := CanvasCheckBoxMenuItem()
      CanvasMenuComponent.dup_fields(c)
      # Don't copy the left image, it's not a CanvasObject, just a Paint.
      c.set_paint_mid(self.paint_mid.dup())
      c.set_paint_right((\self.paint_right).dup())
      return c
   end

   #
   # Return the I/O template.
   #
   public get_template()
      # An abbreviated set... we don't want the left Paint.
      suspend CanvasMenuComponent.get_template() |
          ["Paint mid", "paint_mid"] |
          ["Paint right", "paint_right"] |
          ["Is Checked Flag", "is_checked_flag"] |
          ["Parent CheckBoxGroup", "parent_check_box_group"]
   end

   #
   # Get a label for the menu bar display.
   #
   public get_string_label()
      local s
      s := if is(self.paint_mid, CanvasTextPaint) then
         self.paint_mid.str || "(Check)"
      else
         Class.get_name(self.paint_mid) || "(Check)"
      if \self.parent_check_box_group then
         s ||:= " G"
      if self.is_checked() then
         s ||:= " X"
      return s
   end

   public gen_cos()
      suspend CanvasMenuComponent.gen_cos() | self.paint_mid | \self.paint_right
   end

   public new()
      CanvasTextMenuItem.new()
      CheckBoxMenuItem.new()
      self.class_name := "CheckBoxMenuItem"
      self.import_name := "gui"
      self.name := "check_box_menu_item"
      return
   end
end


