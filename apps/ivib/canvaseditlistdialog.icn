#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui

############################################################################
#
#
#
class CanvasEditListDialog(CanvasComponentDialog)
   public 
      selection_list,          #                      
      set_selection,           #                     
      selection,               #                 
      set_initial_text,        #                        
      initial_text,            #                    
      group,                   #             
      filter,                  #
      default_setting,
      ucs_cb

   public validate_input()
      if (group.get_which_one() === set_selection) & not(integer(selection.get_contents())) then
         return alert_error(self, "Selection is non-integer")
      return CanvasComponentDialog.validate_input()
   end

   public set_vals()
      CanvasComponentDialog.set_vals()
      c.set_selection_list(selection_list.get_contents())
      case group.get_which_one() of {
         set_initial_text : c.set_contents(initial_text.get_contents())
         set_selection : c.set_selection(integer(selection.get_contents()))
         default_setting : c.set_selection(1) #c.set_contents(c.selection_list[1])
      }
      c.filter_str := filter.get_contents()
   end

   private on_ucs_cb()
      if ucs_cb.is_checked() then {
         selection_list.set_contents([u""])
         initial_text.set_contents(u"")
         filter.set_contents(u"")
      } else {
         selection_list.set_contents([""])
         initial_text.set_contents("")
         filter.set_contents("")
      }
   end

   public on_set_initial_text()
      selection.set_is_shaded(&yes)
      initial_text.set_is_shaded(&no) 
   end

   public on_set_selection()
      selection.set_is_shaded(&no)
      initial_text.set_is_shaded(&yes) 
   end

   public on_default_setting()
      c.set_selection(1)
      selection.set_is_shaded(&yes)
      initial_text.set_is_shaded(&yes) 
   end

   public setup()
      local p, q, l, sn

      CanvasComponentDialog.setup()

      p := TabItem()
      p.set_layout(GridLayout())
      add_tab_at_front(p)
      p.set_label("General")

      selection_list := EditableTextList()
      selection_list.set_size(scale(150), scale(250))
      selection_list.set_contents(copy(c.selection_list))
      p.add(selection_list)

      q := Panel().set_constraint("x_weight", 0)
      q.set_layout(GridLayout().set_doi(0).set_extra("borders"))

      group := CheckBoxGroup()

      set_selection := CheckBox()
      set_selection.connect(self.on_set_selection, Event.ACTION)
      set_selection.set_label("Set selection")
      q.add(set_selection)
      group.add(set_selection)

      selection := TextField().set_constraint("eol", &yes).set_filter(&digits)
      selection.set_size(scale(100))
      selection.set_contents(c.selection)
      q.add(selection)

      set_initial_text := CheckBox()
      set_initial_text.connect(self.on_set_initial_text, Event.ACTION)
      set_initial_text.set_label("Set initial_text")
      q.add(set_initial_text)
      group.add(set_initial_text)

      initial_text := TextField().set_constraint("eol", &yes)
      initial_text.set_size(scale(100))
      initial_text.set_contents(c.get_contents())
      q.add(initial_text)

      default_setting := CheckBox().set_constraint("eol", &yes)
      default_setting.connect(self.on_default_setting, Event.ACTION)
      default_setting.set_label("Default")
      q.add(default_setting)
      group.add(default_setting)

      sn := \c.selection | 1
      if c.get_contents() ~== c.selection_list[sn] then {
         group.set_which_one(set_initial_text)
         selection.set_is_shaded(&yes)
      } else if sn ~= 1 then {
         group.set_which_one(set_selection)
         initial_text.set_is_shaded(&yes)
      } else {
         group.set_which_one(default_setting)
         selection.set_is_shaded(&yes)
         initial_text.set_is_shaded(&yes)
      }

      l := Label()
      l.set_label("Filter : ")
      q.add(l)
      
      filter := TextField().set_constraint("eol", &yes)
      filter.set_size(scale(100))
      filter.set_align("l", "c")
      filter.set_contents(c.filter_str)
      q.add(filter)

      ucs_cb := CheckBox().set_label("Ucs content")
      if type(c.selection_list[1]) == "ucs" then
         ucs_cb.set_is_checked(&yes)
      ucs_cb.connect(self.on_ucs_cb, Event.ACTION)
      q.add(ucs_cb)

      p.add(q)
   end
end


