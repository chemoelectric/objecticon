package gui

import 
   ipl.wildcard,
   ipl.sort,
   ipl.lists,
   io

#
#
# File dialog class.  This class provides a standard file dialog.
#
# @example
# @ d := FileDialog()
# @ d.show_modal()
# @ write(d.get_result() | "cancelled")
#
class FileDialog(Dialog)
   public
      home_button, 
      new_button, 
      refresh_button, 
      up_button, 
      dir, 
      dlist, 
      flist, 
      pos_table,
      cancel_button, 
      file, 
      filter, 
      okay_button,
      init_dirs,                # Initial directory name
      init_files,               # Initial file name
      init_filters,
      res,                      # Resulting file path          
      message_label, 
      show_hidden_cb

   public static ucs_list(l)
      local t
      t := []
      every put(t, ucs(!l))
      return t
   end

   public component_setup()
      self.setup()

      #
      # Defaults and extra dirs.
      #
      /init_dirs := []
      every put(init_dirs, ucs(Files.getcwd() | 
                               Files.get_home() | 
                               Files.get_temp() | 
                               Files.get_roots()))
      init_dirs := lunique(ucs_list(init_dirs))

      /init_files := []
      /init_filters := [u"*"]

      init_files := ucs_list(init_files)
      init_filters := ucs_list(init_filters)

      dir.set_selection_list(init_dirs)
      file.set_selection_list(init_files)
      filter.set_selection_list(init_filters)

      dlist.set_draggable_cursor(&yes)
      dlist.set_selection_on_key_moves(&no)
      flist.set_draggable_cursor(&yes)

      pos_table := table()
   end

   public init_dialog()
      win.set_min_size(win.get_width(), win.get_height())
      goto_dir(dir.get_contents())
      # If we have a filename in the field, select it in the file list,
      # if it's there.
      synch_file()
   end

   public on_file_sel(ev)
      synch_file()
   end

   public synch_file()
      local i
      if i := flist.find_line(file.get_contents()) then {
         flist.set_cursor(i)
         flist.set_selections([i])
         flist.center_line(i)
      }
   end

   public end_dialog()
   end

   #
   # Get the directory part of the result
   #
   public get_directory()
      return (\self.res).parent().str()
   end

   #
   # Get the file part of the result
   #
   public get_file()
      return (\self.res).get(-1)
   end

   #
   # Get the result, (will fail if cancel was pressed).
   #
   public get_result()
      return (\self.res).str()
   end

   #
   # Set the initial directory.
   #
   public set_directory(s)
      self.init_dirs := [s]
      return self
   end

   #
   # Set the initial directories as a list; the first is
   # the one initially shown.
   #
   public set_directories(l)
      self.init_dirs := l
      return self
   end

   #
   # Set the initial file
   #
   public set_file(s)
      self.init_files := [s]
      return self
   end

   #
   # Set the initial files
   #
   public set_files(l)
      self.init_files := l
      return self
   end

   #
   # Set the file filter pattern list.
   #
   public set_filters(l)
      self.init_filters := l
      return self
   end

   #
   # Set the initial file/directory from a whole path.
   # 
   public set_path(s)
      local l, t
      l := Files.get_path(s)
      if t := l.parent() then
         self.init_dirs := [t.str()]
      else
         self.init_dirs := [Files.getcwd()]
      self.init_files := [l.get(-1)]
      return self
   end

   #
   # Set the result
   #
   public set_result()
      local s
      s := file.get_contents()
      if *s = 0 then {
         msg("Please enter a filename")
         fail
      }
      self.res := Files.get_path(s)
      if not self.res.is_absolute() then
         self.res := get_dir_path().append(self.res)
      return
   end

   public get_dir_path()
      return Files.get_path(dir.get_contents()).canonical()
   end

   public on_okay_button()
      self.set_result() | fail
      self.dispose()
   end

   public on_cancel_button()
      self.dispose()
   end

   public on_file()
      #
      # If return pressed in file TextField, same as okay
      #
      self.set_result() | fail
      self.dispose()
   end

   public on_dlist()
      goto_dir(get_dir_path().child(dlist.object_get_selections()[1]).str(), 1)
   end

   public on_flist()
      #
      # Clicked in file list; set TextField
      #
      file.set_contents(flist.object_get_selections()[1])
   end

   public on_dir(ev)
      goto_dir(dir.get_contents(), 1)
   end

   public on_filter(ev)
      load_dir()
      synch_file()
   end

   public on_show_hidden_cb(ev)
      pos_table := table()
      load_dir()
      synch_file()
   end

   public on_up_button(ev)
      local t
      t := self.get_dir_path()
      if t.size() > 1 then
         goto_dir(t.parent().str(), 1)
      else
         msg("At root")
   end

   public on_home_button(ev)
      goto_dir(Files.get_home(), 1)
   end

   public on_refresh_button(ev)
      load_dir()
      synch_file()
   end

   public on_new_button(ev)
      local d, s
      d := NewDirectoryDialog()
      d.show_modal(self)
      if \d.okay then {
         s := self.get_dir_path().child(d.result).str()
         if Files.mkdir(s) then
            goto_dir(s, 1)
         else
            msg("mkdir failed: " || &why)
      }
   end

   public get_pats()
      local pat, pats
      pats := []
      filter.get_contents() ? {
         until pos(0) do {
            pat := tab(upto(';') | 0)
            put(pats, wild_pat(pat))
            move(1)
         }
      }
      return pats
   end

   public msg(s)
      message_label.set_label(s)
   end

   public clear_msg()
      msg("")
   end

   public goto_dir(d, cf)
      dir.set_contents(ucs(Files.get_path(d).canonical().str()))
      if \cf then
         file.set_contents(u"")
      load_dir()
   end

   public on_dlist_cursor(ev)
      pos_table[get_dir_path().str()] := [dlist.get_cursor(), 
                                          dlist.get_line_info().first_whole]
   end

   public load_dir()
      local l, e, s

      s := get_dir_path().str()

      #
      # Update directory and file lists.
      #
      l := list_directory(s)

      dlist.set_contents(l[1])
      dlist.clear_selections()
      if e := \pos_table[s] then {
         dlist.set_cursor(e[1])
         dlist.goto_first(e[2])
      } else {
         dlist.goto_first(1)
         dlist.set_area_x(0)
         dlist.set_cursor(1)
      }

      flist.set_contents(l[2])
      flist.goto_first(1)
      flist.set_area_x(0)
      flist.clear_selections()
      flist.set_cursor(1)
   end

   #
   # Read a directory.
   #
   public list_directory(s)
      local e, dir_list, file_list, l, pats, t
      clear_msg()
      pats := get_pats()

      if not(l := Files.list(s)) then {
         msg(&why)
         return [[],[]]
      }
      dir_list := []
      file_list := []
      every e := !l do {
         if t := ucs(e[1]) & (show_hidden_cb.is_checked() | 
                              not(Files.is_hidden(t))) then 
         {
            if e[2].mode_str[1] == "d" then
               Files.is_relative_dir(t) | put(dir_list, t)
            else {
               if wild_match(!pats, t) = *t + 1 then
                  put(file_list, t)
            }
         }
      }
      return [isort(dir_list, map), isort(file_list, map)]
   end

   public new()
      cast(self,Dialog).new()
      return
   end

   private setup()
      local paint_2, panel_2, layout_7, paint_7, paint_11, layout_4, paint_4, split_content_1, split_content_2, panel_4, layout_9, paint_1, paint_9, split_1, layout_6, paint_6, paint_10, layout_3, paint_3, panel_3, paint, layout_8, paint_8, paint_5
      set_label("Select file")
      set_resize(&yes)
      paint_1 := ImagePaint().
         set_cache("gui.HOME_24")
      paint := TextPaint("Home")
      home_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint).
         connect(on_home_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_1)
      paint_3 := ImagePaint().
         set_cache("gui.UP_24")
      paint_2 := TextPaint("Up")
      up_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_2).
         connect(on_up_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_3)
      paint_5 := ImagePaint().
         set_cache("gui.NEW_FOLDER_24")
      paint_4 := TextPaint("New dir")
      new_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_4).
         connect(on_new_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_5)
      paint_7 := ImagePaint().
         set_cache("gui.REFRESH_24")
      paint_6 := TextPaint("Refresh")
      refresh_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_6).
         connect(on_refresh_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_7)
      dir := EditList().
         set_size("150").
         set_align(Align.L, Align.C).
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         connect(on_dir, Event.ACTION).
         connect(on_dir, Event.SELECTION_CHANGED).
         set_selection_list([""])
      layout_6 := GridLayout().
         set_doi(0).
         set_dii(2).
         set_extra("cells")
      panel_4 := Panel().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_layout(layout_6).
         add(home_button).
         add(up_button).
         add(new_button).
         add(refresh_button).
         add(dir)
      add(panel_4)
      dlist := TextList().
         set_size(210, 200).
         clear_constraints().
         set_constraint("r_inset", 0).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         connect(on_dlist, Event.SELECTION_CHANGED).
         connect(on_dlist_cursor, Event.CURSOR_MOVED).
         set_select_mode(Select.ONE).
         set_contents([""])
      layout_8 := GridLayout().
         set_doi(0).
         set_extra("cells")
      split_content_1 := Component().
         clear_constraints().
         set_layout(layout_8).
         add(dlist)
      flist := TextList().
         set_size(270, 200).
         clear_constraints().
         set_constraint("l_inset", 0).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         connect(on_flist, Event.SELECTION_CHANGED).
         set_select_mode(Select.ONE).
         set_contents([""])
      layout_9 := GridLayout().
         set_doi(0).
         set_extra("cells")
      split_content_2 := Component().
         clear_constraints().
         set_layout(layout_9).
         add(flist)
      split_1 := Split().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_left(split_content_1).
         set_right(split_content_2).
         set_min(100, 100)
      add(split_1)
      filter := EditList().
         set_size("150").
         set_align(Align.L, Align.B).
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         connect(on_filter, Event.ACTION).
         connect(on_filter, Event.SELECTION_CHANGED).
         set_selection_list([""])
      file := EditList().
         set_size("150").
         set_align(Align.L, Align.B).
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         connect(on_file, Event.ACTION).
         connect(on_file_sel, Event.SELECTION_CHANGED).
         set_selection_list([""])
      layout_3 := GridLayout().
         set_doi(0).
         set_extra("cells")
      panel_2 := Panel().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_layout(layout_3).
         add(filter).
         add(file)
      add(panel_2)
      paint_8 := TextPaint("Show hidden files and directories")
      show_hidden_cb := CheckBox().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_align", Align.L).
         connect(on_show_hidden_cb, Event.ACTION).
         set_toggles(&yes).
         set_paint(paint_8)
      add(show_hidden_cb)
      paint_9 := TextPaint("Okay")
      okay_button := TextButton().
         set_align(Align.L, Align.B).
         clear_constraints().
         connect(on_okay_button, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_9)
      paint_10 := TextPaint("Cancel")
      cancel_button := TextButton().
         set_align(Align.L, Align.B).
         clear_constraints().
         connect(on_cancel_button, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_10)
      paint_11 := TextPaint("")
      message_label := Label().
         set_size("130").
         set_align(Align.L, Align.B).
         set_fg("red").
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_paint(paint_11)
      layout_4 := GridLayout().
         set_doi(0).
         set_extra("cells")
      panel_3 := Panel().
         clear_constraints().
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_layout(layout_4).
         add(okay_button).
         add(cancel_button).
         add(message_label)
      add(panel_3)
      layout_7 := GridLayout().
         set_extra("cells")
      set_layout(layout_7)
      set_focus(file.find_focus())
   end
end

### Ivib-v2 layout: layouts/$.layout
