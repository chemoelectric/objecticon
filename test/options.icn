import ipl.options, ipl.test, io, ipl.strings, ipl.pdco, util

procedure err(s)
   write("\terror: ", image(s))
end

procedure usage(o)
   write("\tusage: ", imagex(o))
end

procedure ignore(x)
   succeed x == "run"
end

procedure t(line, args, opts, iproc)
   local v
   if type(args) == "string" then
      args := List{ words(args) }
   write("line ", line)
   if v := options(args, opts, usage, err, iproc) then {
      write("\tv=",to_stringx(v, 3))
      write("\targs=",to_stringx(args))
   } else
      write("\t(failed)")
end

procedure main()

   write("Simple integer")
   t(&line, ["one", "two", "-iz123", "three"], [Opt("i",integer, "Simple integer") ])
   t(&line, "one two -i123 -i234 three", [Opt("i",integer, "Simple integer") ])
   t(&line, "one two -i junk three", [Opt("i",integer, "Simple integer") ])
   t(&line, "one two -i 123 three", [Opt("i",integer, "Simple integer") ])
   t(&line, "one two -i 123 three -clear i four", [Opt("i",integer, "Simple integer") ])
   t(&line, "one two -- -i 123 three", [Opt("i",integer, "Simple integer") ])
   t(&line, "one two run -i 123 three", [Opt("i",integer, "Simple integer") ], ignore_after(ignore))
   t(&line, "one two --i=-123 three", [Opt("i",integer, "Simple integer") ])
   t(&line, "-?", [Opt("i",integer, "Simple integer") ])

   write("\nMultiple integer")
   t(&line, "one two -i123 -i234 three", [Opt("i",integer, "Multiple integer", &yes) ])
   t(&line, "one two -i123 -i234 three -ijunk four", [Opt("i",integer, "Multiple integer", &yes) ])
   t(&line, "one -alt1 100 two -i123 -i234 three -alt2 200", [Opt(["i", "alt1", "alt2"] ,integer, "Multiple integer and name", &yes) ])
   t(&line, "one --alt1=100 two --i=123 --i=234 three --alt2=200", [Opt(["i", "alt1", "alt2"] ,integer, "Multiple integer and name", &yes) ])
   t(&line, "one --alt1=100 two --i=123 --i=234 run three --alt2=200", [Opt(["i", "alt1", "alt2"] ,integer, "Multiple integer and name", &yes) ], ignore_after(ignore))
   t(&line, "one --alt1=100 two --i=123 --i=234 --clear=i three --alt2=200 four", [Opt(["i", "alt1", "alt2"] ,integer, "Multiple integer and name", &yes) ])
   t(&line, "one --alt1=100 two --i=123 --i=234 --clear=alt2 three --alt2=200 four", [Opt(["i", "alt1", "alt2"] ,integer, "Multiple integer and name", &yes) ])

   write("\nFlags")
   t(&line, "one -abc two", [Opt("a",, "A"),Opt("b",, "B"),Opt("c",, "C"),Opt("ab", string, "AB")])
   t(&line, "one -ab c two", [Opt("a",, "A"),Opt("b",, "B"),Opt("c",, "C"),Opt("ab", string, "AB")])
   t(&line, "one -ba c two", [Opt("a",, "A"),Opt("b",, "B"),Opt("c",, "C"),Opt("ab", string, "AB")])
   t(&line, "one --abc two", [Opt("a",, "A"),Opt("b",, "B"),Opt("c",, "C"),Opt("ab", string, "AB")])
   t(&line, "one --ab=c two", [Opt("a",, "A"),Opt("b",, "B"),Opt("c",, "C"),Opt("ab", string, "AB")])
   t(&line, "one -abc100 two", [Opt("a",, "A"),Opt("b",, "B"),Opt("c",integer, "C"),Opt("ab", string, "AB")])
   t(&line, "one -abc100 two", [Opt("a",string, "A"),Opt("b",, "B"),Opt("c",, "C"),Opt("ab", string, "AB")])
   t(&line, "one -abc two", [Opt("a",string, "A"),Opt("b",, "B"),Opt("c",, "C"),Opt("ab", string, "AB")])
   t(&line, "one -bca two", [Opt("a",string, "A"),Opt("b",, "B"),Opt("c",, "C"),Opt("ab", string, "AB")])
   t(&line, "one -abc two", [Opt("a",string, "A"),Opt("b",, "B"),Opt("c",, "C"),Opt("abc", string, "ABC")])

   write("\nString opts")
   t(&line, "one -a xyz two", [Opt("a",string_with("cat"), "A")])
   t(&line, "one -a xyzcatpqr two", [Opt("a",string_with("cat"), "A")])
   t(&line, "one -a cat two", [Opt("a",string_with("cat"), "A")])
   t(&line, "one -a cat two", [Opt("a",string_with("cat",3), "A")])
   t(&line, "one -a abccat two", [Opt("a",string_with("cat",3), "A")])
   t(&line, "one -a abccat two", [Opt("a",ucs_with("cat",3), "A")])

   write("\nNumber opts")
   t(&line, "one -a xyz two", [Opt("a",integer_range(1,10), "A")])
   t(&line, "one -a 0 two", [Opt("a",integer_range(1,10), "A")])
   t(&line, "one -a 5 two", [Opt("a",integer_range(-10,10), "A")])
   t(&line, "one --a=-5 two", [Opt("a",integer_range(-10,10), "A")])
   t(&line, "one --a=-5 two", [Opt("a",real_range(-10,10), "A")])
   t(&line, "one --a=5 --a=5.1 --a=-4.2 two", [Opt("a",numeric_range(-10,10), "A", &yes)])

   write("\nFlag opts")
   t(&line, "one -a xyz two", [Opt("a",flag, "A")])
   t(&line, "one -a yes -a no -a true -a false -a 1 -a 0 two", [Opt("a",flag, "A", &yes)])
end
