package graphics

import 
   lang(NoCopy),
   util(SetFields)

class Window(SetFields,NoCopy)
   private
      wbp

   public static open(a[])
      local f, w, t, display, parent
      t := []
      every f := generate_fields(a) do {
         case f.attr of {
            "display": display := f.val
            "parent": parent := f.object_val(Window)
            default: put(t, f)
         }
      }
      w := Window(wcreate(display)) | fail
      every w.apply_field(!t)
      w.wopen(parent) | fail
      return w
   end

   public clone(a[])
      local w
      w := Window(clone_impl())
      w.pre_attrib()
      w.set_fields(a)
      w.post_attrib()
      return w
   end

   public attrib(a[])
      pre_attrib()
      cast(self,SetFields).attrib!a
      post_attrib()
   end

   public static couple(w1, w2)
      return Window(couple_impl(w1, w2))
   end

   private static defer wcreate(display)
   private defer wopen(parent)
   private defer pre_attrib()
   private defer post_attrib()
   private defer clone_impl(a[])
   private static defer couple_impl(w1, w2)

   public defer toggle_fgbg()

   public defer get_ascent()
   public defer get_bg()
   public defer get_canvas()
   public defer get_cliph()
   public defer get_clipw()
   public defer get_clipx()
   public defer get_clipy()
   public defer get_depth()
   public defer get_descent()
   public defer get_display()
   public defer get_drawop()
   public defer get_dx()
   public defer get_dy()
   public defer get_fg()
   public defer get_fheight()
   public defer get_fillstyle()
   public defer get_font()
   public defer get_fwidth()
   public defer get_gamma()
   public defer get_geometry()
   public defer get_height()
   public defer get_image()
   public defer get_inputmask()
   public defer get_label()
   public defer get_linestyle()
   public defer get_linewidth()
   public defer get_maxheight()
   public defer get_maxsize()
   public defer get_maxwidth()
   public defer get_minheight()
   public defer get_minsize()
   public defer get_minwidth()
   public defer get_pattern()
   public defer get_pointer()
   public defer get_pos()
   public defer get_posx()
   public defer get_posy()
   public defer can_resize()
   public defer get_size()
   public defer get_titlebar()
   public defer get_visual()
   public defer get_width()

   public defer set_bg(v)
   public defer set_canvas(v)
   public defer set_cliph(v)
   public defer set_clipw(v)
   public defer set_clipx(v)
   public defer set_clipy(v)
   public defer set_drawop(v)
   public defer set_dx(v)
   public defer set_dy(v)
   public defer set_fg(v)
   public defer set_fillstyle(v)
   public defer set_font(v)
   public defer set_gamma(v)
   public defer set_geometry(v)
   public defer set_height(v)
   public defer set_image(v)
   public defer set_inputmask(v)
   public defer set_label(v)
   public defer set_linestyle(v)
   public defer set_linewidth(v)
   public defer set_maxheight(v)
   public defer set_maxsize(v)
   public defer set_maxwidth(v)
   public defer set_minheight(v)
   public defer set_minsize(v)
   public defer set_minwidth(v)
   public defer set_pattern(v)
   public defer set_pointer(v)
   public defer set_pos(v)
   public defer set_posx(v)
   public defer set_posy(v)
   public defer set_resize(v)
   public defer set_size(v)
   public defer set_titlebar(v)
   public defer set_width(v)

   #
   # Produces a beep or other signal to attract attention.
   #
   public defer alert(volume)

   #
   # Sets the clipping region to the specified rectangle; subsequent
   # output extending outside its bounds is discarded. If clip() is
   # called with no arguments, clipping is disabled and the entire
   # canvas is writable.
   #
   public defer clip(x, y, w, h)

   #
   # Returns the setting of mutable color i if k1 is omitted. If k1 is
   # supplied, color i is changed as specified, with an immediate
   # effect on any visible pixels of that color. Additional index and
   # color pairs may be supplied to set multiple entries with one
   # call. Color() fails if a color specification is invalid.
   #
   public defer color(a[])

   #
   #
   #
   public defer color_value(k)

   #
   # draw_arc(x, y, width, height, angle1, angle2)
   #
   public defer draw_arc(x, y, width, height, angle1, angle2)

   #
   # event() - return an event from this window, waiting if necessary.
   #
   public defer event()

   #
   # draw_circle(x, y, r, theta, alpha)
   #
   public defer draw_circle(x, y, r, theta, alpha)

   #
   # draw_curve(x1,y1,...xN,yN)
   # Draw a smooth curve through the given points.
   #
   public defer draw_curve(a[])

   #
   # draw_image(x,y,s) - draw bitmapped figure
   #
   public defer draw_image(x, y, s)

   #
   # Copy an area from this window to another window.
   #
   public defer copy_to(dest, x1, y1, w, h, x2, y2)

   #
   # draw_line(x1,y1,...xN,yN)
   #
   public defer draw_line(a[])

   #
   # draw_point(x, y)
   #
   public defer draw_point(x, y)

   #
   # draw_polygon(x1,y1,...xN,yN)
   #
   public defer draw_polygon(a[])

   #
   # draw_rectangle(x, y, width, height)
   #
   public defer draw_rectangle(x, y, width, height)

   #
   # draw_string(x, y, s)
   #
   public defer draw_string(x, y, s)

   #
   # erase_area(x,y,width,height) - clear an area of the window
   #
   public defer erase_area(x, y, width, height)

   #
   # pending(x[]) - add to and then produce a list of events pending on window
   #
   public defer pending(a[])

   #
   # fill_arc(x, y, width, height, angle1, angle2)
   #
   public defer fill_arc(x, y, width, height, angle1, angle2)

   #
   # fill_circle(x, y, r, theta, alpha)
   #
   public defer fill_circle(x, y, r, theta, alpha)

   #
   # fill_polygon(x1, y1, ...xN, yN)
   #
   public defer fill_polygon(a[])

   #
   # fill_rectangle(x, y, width, height)
   #
   public defer fill_rectangle(x, y, width, height)

   #
   # free_color(a[]) - free colors
   #
   public defer free_color(a[])

   #
   # Lower this window to the bottom of the window stack
   #
   public defer lower()

   #
   # new_color(a[]) - allocate an entry in the color map
   #
   public defer new_color(a[])

   #
   # Return the characters forming keys to palette p
   #
   public static defer palette_chars(p)

   #
   # Return color of key s1 in palette s2
   #
   public static defer palette_color(s1, s2)

   #
   # Return key of closest color to s in palette p
   #
   public defer palette_key(s1, s2)

   #
   # Produce the contents of some pixels
   #
   public defer pixel(x, y, width, height)
   
   #
   # Return the current root x, y position as a two-element list.
   #
   public defer query_root_pointer()

   #
   # Return the current display size. as a two-element list.
   #
   public defer get_display_size()

   #
   # Return the current x, y position as a two-element list, relative to
   # this window.
   #
   public defer query_pointer()

   #
   # Warp the pointer to the given location, relative to this window.
   #
   public defer warp_pointer(x, y)

   #
   # Raise window to the top of the window stack
   #
   public defer raise()

   #
   # Load image file
   #
   public defer read_image(s, x, y, p)

   #
   # Synchronize with server
   #
   public static defer sync()

   #
   # Returns the width of string s, in pixels, as drawn using the
   # current font.
   #
   public defer text_width(s)

   #
   # Frees the window. If no other bindings to the same canvas exist,
   # the window is closed.
   #
   public defer uncouple()

   #
   # Returns the value of option s2 for the program named s1 as
   # registered with the graphics system. If no such value is
   # available, or if the system provides no registry, wdefault()
   # fails.
   #
   public defer wdefault(s1, s2)

   #
   # Forces the execution of any window commands that have been
   # buffered internally and not yet executed.
   #
   public defer flush()

   #
   # Writes an image of the rectangular area (x,y,w,h) to the file
   # s. It fails if s cannot be written or if the specified area,
   # after clipping by the window's edges, has a width or height of
   # zero. The file is normally written in GIF format, but some forms
   # of file names may select different formats on some graphics
   # systems.
   #
   public defer write_image(s, x, y, w, h)

   #
   # Set the window system's selection
   #
   public defer own_selection(selection)

   #
   # Send a response to a selection request event.
   #
   public defer send_selection_response(requestor, property, target, selection, data)

   #
   # Get the window system's selection
   #
   public defer request_selection(selection, target_type)

   #
   # Close this window.
   #
   public defer close()

   #
   # A static version of {palette_key}, which does not query an
   # underlying window.
   #
   public static defer generic_palette_key(s1, s2)

   #
   # A static version of {color_value}, which does not query an
   # underlying window.
   #
   public static defer generic_color_value(k)

   public enqueue(eventcode, x, y, modkeys, interval)	
      /x := 0
      /y := 0
      x +:= get_dx()
      y +:= get_dy()
      return pending(eventcode,
                     ior(pack_modkeys(\modkeys | ""), iand(x, 16rFFFF)),
                     ior(pack_intrvl(\interval | 0), iand(y, 16rFFFF)))
   end

   # encode modifier keys
   private static pack_modkeys(s)			
      local b, c

      b := 0
      s := string(s) | runerr(103, s)		# ensure string value
      every c := !s do case c of {			# set bit for each flag
         "c":	b := ior(b, 16r10000)
         "m":	b := ior(b, 16r20000)
         "s":	b := ior(b, 16r40000)
         "r":	b := ior(b, 16r80000)
         default:	runerr(205, s)			# diagnose bad flag
      }
      return b					# return result
   end

   private static pack_intrvl(n)			
      local e

      n := integer(n) | runerr(101, n)	# ensure integer
      n <:= 0				# ensure nonnegative
      e := 0				# assume exponent of 0

      while n >= 16r1000 do {		# if too big
         n := ishift(n, -4)		# reduce significance
         e +:= 16r1000			# increase exponent
      }
      return ishift(e + n, 16)		# return shifted result
   end

   protected set_one(f)
      case f.attr of {
         "bg": set_bg(f.val)
         "canvas": set_canvas(f.val)
         "clip" : clip!(f.int_list_val())
         "cliph": set_cliph(f.val)
         "clipw": set_clipw(f.val)
         "clipx": set_clipx(f.val)
         "clipy": set_clipy(f.val)
         "drawop": set_drawop(f.val)
         "dx": set_dx(f.val)
         "dy": set_dy(f.val)
         "fg": set_fg(f.val)
         "fillstyle": set_fillstyle(f.val)
         "font": set_font(f.val)
         "gamma": set_gamma(f.val)
         "geometry": set_geometry!(f.int_list_val())
         "height": set_height(f.val)
         "image": set_image(f.val)
         "inputmask": set_inputmask(f.val)
         "label": set_label(f.val)
         "linestyle": set_linestyle(f.val)
         "linewidth": set_linewidth(f.val)
         "maxheight": set_maxheight(f.val)
         "maxsize": set_maxsize!(f.int_list_val())
         "maxwidth": set_maxwidth(f.val)
         "minheight": set_minheight(f.val)
         "minsize": set_minsize!(f.int_list_val())
         "minwidth": set_minwidth(f.val)
         "pattern": set_pattern(f.val)
         "pointer": set_pointer(f.val)
         "pos": set_pos!(f.int_list_val())
         "posx": set_posx(f.val)
         "posy": set_posy(f.val)
         "resize": set_resize(f.flag_val())
         "size": set_size!(f.int_list_val())
         "titlebar": set_titlebar(f.val)
         "width": set_width(f.val)
         default : fail
      }
      return
   end

   private new(wbp)
      self.wbp := wbp
      return
   end
end

#
# Event codes for selection events.
#
class Selection()
   public static const
      # Selection request event
      REQUEST,     
      # Selection response event
      RESPONSE,
      # Selection clear event
      CLEAR,
      # Set of any of the three event types
      EVENTS,
      PRIMARY,
      SECONDARY,
      CLIPBOARD,
      UTF8_STRING_TARGET,
      STRING_TARGET,
      TARGETS_TARGET

   private static init()
      REQUEST := -30
      CLEAR := -31
      RESPONSE := -32
      EVENTS := set(REQUEST, CLEAR, RESPONSE)
      PRIMARY := "PRIMARY"      # These 3 must correspond to X Atom names.
      SECONDARY := "SECONDARY"
      CLIPBOARD := "CLIPBOARD"
      STRING_TARGET := "STRING"
      UTF8_STRING_TARGET := "UTF8_STRING"
      TARGETS_TARGET := "TARGETS"
   end
end

#
# Event codes for mouse events.
#
class Mouse()
   public static const
      LEFT_PRESS,
      MIDDLE_PRESS,
      RIGHT_PRESS,
      PRESS,
      LEFT_RELEASE,
      MIDDLE_RELEASE,
      RIGHT_RELEASE,
      RELEASE,
      LEFT_DRAG,
      MIDDLE_DRAG,
      RIGHT_DRAG,
      DRAG,
      MOVEMENT,
      WHEEL_UP,
      WHEEL_DOWN,
      WINDOW_RESIZE,
      WINDOW_CLOSE_BUTTON,
      WHEEL,
      DRAG_OR_MOVEMENT,
      WINDOW

   private static init()
      LEFT_PRESS :=           -1
      MIDDLE_PRESS :=         -2
      RIGHT_PRESS :=          -3
      PRESS := set(LEFT_PRESS, MIDDLE_PRESS, RIGHT_PRESS)
      LEFT_RELEASE :=         -4
      MIDDLE_RELEASE :=       -5
      RIGHT_RELEASE :=        -6
      RELEASE := set(LEFT_RELEASE, MIDDLE_RELEASE, RIGHT_RELEASE)
      LEFT_DRAG :=            -7
      MIDDLE_DRAG :=          -8
      RIGHT_DRAG :=           -9
      DRAG := set(LEFT_DRAG, MIDDLE_DRAG, RIGHT_DRAG)
      MOVEMENT :=            -12
      DRAG_OR_MOVEMENT := set(LEFT_DRAG, MIDDLE_DRAG, RIGHT_DRAG, MOVEMENT)
      WHEEL_UP :=            -16
      WHEEL_DOWN :=          -17
      WHEEL := set(WHEEL_UP, WHEEL_DOWN)
      WINDOW_RESIZE :=       -10
      WINDOW_CLOSE_BUTTON := -11
      WINDOW := set(WINDOW_RESIZE, WINDOW_CLOSE_BUTTON)
   end
end

#
# Event codes for key events.
#
class Key()
   public static const
      SHIFT_TAB,
      COMPOSE,
      DO,
      DOWN,
      END,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14,
      F15,
      F16,
      F17,
      F18,
      F19,
      F20,
      F21,
      F22,
      F23,
      F24,
      FIND,
      HELP,
      HOME,
      INSERT,
      KP_DOWN,
      KP_LEFT,
      KP_RIGHT,
      KP_UP,
      L1,
      L2,
      L3,
      L4,
      L5,
      L6,
      L7,
      L8,
      L9,
      L10,
      LEFT,
      PF1,
      PF2,
      PF3,
      PF4,
      PAUSE,
      PGDN,
      PGUP,
      PRSC,
      R1,
      R2,
      R3,
      R4,
      R5,
      R6,
      R7,
      R8,
      R9,
      R10,
      R11,
      R12,
      R13,
      R14,
      R15,
      RIGHT,
      SCROLL_LOCK,
      SELECT,
      UP,
      CURSOR,
      CURSOR_V,
      CURSOR_H,
      SUPER_L,
      SUPER_R,
      MENU

   private static init()
$ifdef _X_WINDOW_SYSTEM
      SHIFT_TAB :=           65056
      COMPOSE :=             65312
      DO :=                  65383
      DOWN :=                65364
      END :=                 65367
      F1 :=                  65470
      F2 :=                  65471
      F3 :=                  65472
      F4 :=                  65473
      F5 :=                  65474
      F6 :=                  65475
      F7 :=                  65476
      F8 :=                  65477
      F9 :=                  65478
      F10 :=                 65479
      F11 :=                 65480
      F12 :=                 65481
      F13 :=                 65482
      F14 :=                 65483
      F15 :=                 65484
      F16 :=                 65485
      F17 :=                 65486
      F18 :=                 65487
      F19 :=                 65488
      F20 :=                 65489
      FIND :=                65384
      HELP :=                65386
      HOME :=                65360
      INSERT :=              65379
      KP_DOWN :=             65433
      KP_LEFT :=             65430
      KP_RIGHT :=            65432
      KP_UP :=               65431
      L1 :=                  65480  # clash with f11
      L2 :=                  65481  # clash with f12
      L3 :=                  65482
      L4 :=                  65483
      L5 :=                  65484
      L6 :=                  65485
      L7 :=                  65486
      L8 :=                  65487
      L9 :=                  65488
      L10 :=                 65489
      LEFT :=                65361
      PF1 :=                 65425
      PF2 :=                 65426
      PF3 :=                 65427
      PF4 :=                 65428
      PAUSE :=               65299
      PGDN :=                65366
      PGUP :=                65365
      PRSC :=                65377
      R1 :=                  65490
      R2 :=                  65491
      R3 :=                  65492
      R4 :=                  65493
      R5 :=                  65494
      R6 :=                  65495
      R7 :=                  65496
      R8 :=                  65497
      R9 :=                  65498
      R10 :=                 65499
      R11 :=                 65500
      R12 :=                 65501
      R13 :=                 65502
      R14 :=                 65503
      R15 :=                 65504
      RIGHT :=               65363
      SCROLL_LOCK :=         65300
      SELECT :=              65376
      UP :=                  65362
      SUPER_L :=             65515
      SUPER_R :=             65516
      MENU :=                65383
$endif
$ifdef _MS_WINDOWS
      DOWN :=               40
      END :=                35
      SCROLL_LOCK :=        145
      F1 :=                 112
      F2 :=                 113
      F3 :=                 114
      F4 :=                 115
      F5 :=                 116
      F6 :=                 117
      F7 :=                 118
      F8 :=                 119
      F9 :=                 120
      F10 :=                121
      F11 :=                122
      F12 :=                123
      F13 :=                124
      F14 :=                125
      F15 :=                126
      F16 :=                127
      F17 :=                128
      F18 :=                129
      F19 :=                130
      F20 :=                131
      F21 :=                132
      F22 :=                133
      F23 :=                134
      F24 :=                135
      HELP :=               47
      HOME :=               36
      INSERT :=             45
      LEFT :=               37
      PAUSE :=              19
      PGDN :=               34
      PGUP :=               33
      PRSC :=               44
      RIGHT :=              39
      SELECT :=             41
      UP :=                 38
      SHIFT_TAB :=          0
      COMPOSE :=            0
      DO :=                 0
      FIND :=               0
      KP_DOWN :=            0
      KP_LEFT :=            0
      KP_RIGHT :=           0
      KP_UP :=              0
      L1 :=                 0
      L2 :=                 0
      L3 :=                 0
      L4 :=                 0
      L5 :=                 0
      L6 :=                 0
      L7 :=                 0
      L8 :=                 0
      L9 :=                 0
      L10 :=                0
      PF1 :=                0
      PF2 :=                0
      PF3 :=                0
      PF4 :=                0
      R1 :=                 0
      R2 :=                 0
      R3 :=                 0
      R4 :=                 0
      R5 :=                 0
      R6 :=                 0
      R7 :=                 0
      R8 :=                 0
      R9 :=                 0
      R10 :=                0
      R11 :=                0
      R12 :=                0
      R13 :=                0
      R14 :=                0
      R15 :=                0
      SUPER_L :=            0
      SUPER_R :=            0
      MENU :=               0
$endif
$ifdef _PLAN9
      DOWN :=               63488
      END :=                61464
      SCROLL_LOCK :=        0
      F1 :=                 0
      F2 :=                 0
      F3 :=                 0
      F4 :=                 0
      F5 :=                 0
      F6 :=                 0
      F7 :=                 0
      F8 :=                 0
      F9 :=                 0
      F10 :=                0
      F11 :=                0
      F12 :=                0
      F13 :=                0
      F14 :=                0
      F15 :=                0
      F16 :=                0
      F17 :=                0
      F18 :=                0
      F19 :=                0
      F20 :=                0
      F21 :=                0
      F22 :=                0
      F23 :=                0
      F24 :=                0
      HELP :=               0
      HOME :=               61453
      INSERT :=             61460
      LEFT :=               61457
      PAUSE :=              0
      PGDN :=               61459
      PGUP :=               61455
      PRSC :=               0
      RIGHT :=              61458
      SELECT :=             0
      UP :=                 61454
      SHIFT_TAB :=          0
      COMPOSE :=            0
      DO :=                 0
      FIND :=               0
      KP_DOWN :=            63488
      KP_LEFT :=            61457
      KP_RIGHT :=           61458
      KP_UP :=              61454
      L1 :=                 0
      L2 :=                 0
      L3 :=                 0
      L4 :=                 0
      L5 :=                 0
      L6 :=                 0
      L7 :=                 0
      L8 :=                 0
      L9 :=                 0
      L10 :=                0
      PF1 :=                0
      PF2 :=                0
      PF3 :=                0
      PF4 :=                0
      R1 :=                 0
      R2 :=                 0
      R3 :=                 0
      R4 :=                 0
      R5 :=                 0
      R6 :=                 0
      R7 :=                 0
      R8 :=                 0
      R9 :=                 0
      R10 :=                0
      R11 :=                0
      R12 :=                0
      R13 :=                0
      R14 :=                0
      R15 :=                0
      SUPER_L :=            0
      SUPER_R :=            0
      MENU :=               0
$endif

      CURSOR := set(UP, DOWN, LEFT, RIGHT)
      CURSOR_V := set(UP, DOWN)
      CURSOR_H := set(LEFT, RIGHT)
   end
end
