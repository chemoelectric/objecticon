package mail

import util, lang, ipl.base64

class RFC1522()
   public static const
      Q_PRINTABLE_CHAR,
      LWSP_CHAR

   private static init()
      Q_PRINTABLE_CHAR := &letters ++ &digits
      LWSP_CHAR := ' \t'
   end

   #
   # Convert the given string using rfc1522 encoding, ie to one potentially
   # including "encoded words".
   #
   # :Parameters :
   # :  `s` - the source string, either string or ucs
   # :  `alphabet` - the cset of characters which don't need to be encoded,
   #        by default `&ascii`, minus `'=?'` if `s` contains `"=?"`, so we
   #        don't pass through things that look like encoded words but aren't.
   # :Parameters :
   # :  `delimeter` - the cset of word delimeters, by default `' \t'`.
   # :  `charset` - the charset to use, default is UTF-8 for a ucs string
   #        and ISO-8859-1 for a string.
   # :  `encoding` - either "B" (the default) or "Q"
   #
   public static encode(s, alphabet, delimeter, charset, encoding)
      local t, pre, res, i, j, k, na, adj
      /alphabet := if find("=?", s) then &ascii -- '=?' else &ascii
      /delimeter := LWSP_CHAR
      if type(s) == "ucs" then {
         /charset := "UTF-8"
         s := string(s)
      } else
         /charset := "ISO-8859-1"
      /encoding := "B"

      pre := "=?" || charset || "?" || encoding || "?"
      res := ""
      na := ~alphabet
      s ? {
         while i := upto(na) do {
            # Go back to the beginning of the word to encode.
            j := i
            while j > &pos & not any(delimeter,, j - 1) do
               j -:= 1
            # ... and go forward to the end.
            k := upto(delimeter,, j + 1) | 0

            # On decoding, whitespace-only between adjacent encoded-words
            # is ignored.  In that case therefore it must be included in
            # the encoded-word itself, and a space added to separate the
            # encoded words.
            #
            if /adj | upto(~LWSP_CHAR,,, j) then
               res ||:= tab(j)
            else
               res ||:= " "

            t := tab(k)
            res ||:= pre
            case Text.lower(encoding) of {
               "b": {
                  res ||:= base64encode(t)
               }
               "q": {
                  t ? until pos(0) do {
                     res ||:= tab(many(Q_PRINTABLE_CHAR)) |
                        (=" ", "_") |
                        "=" || Format.int_to_string(ord(move(1)), 16, 2)
                  }
               }
               default:
                  runerr("Unknown content word encoding", encoding)
            }
            res ||:= "?="
            adj := &yes
         }
         return res || tab(0)
      }
   end

   private static q_decode(s)
      local r
      r := ""
      s ? {
         while r ||:= tab(upto('_=')) do {
            r ||:= if ="_" then
               " "
            else {
               move(1)
               char(Format.string_to_int(move(2))) | return error("Bad q-encoded data")
            }
         }
         return r || tab(0)
      }
   end

   #
   # This does the reverse of `encode`.  Any encoded words are expanded and
   # the result is returned.  The result may be a ucs string if any encoded word
   # had utf-8 encoding; otherwise the result is a normal string.
   # :Parameters :
   # :  `s` - the source string.
   #
   public static decode(s)
      local charset, encoding, data, res, t, adj
      res := ""
      s ? {
         while t := tab(find("=?")) do {
            #
            # Whitespace between adjacent encoded-words must be ignored.
            #
            if /adj | upto(~LWSP_CHAR, t) then
               res ||:= t

            move(2)
            charset := tab(upto('?')) | return error("Badly formed encoded word")
            move(1)
            encoding := tab(upto('?')) | return error("Badly formed encoded word")
            move(1)
            data := tab(upto('?')) | return error("Badly formed encoded word")
            t := case Text.lower(encoding) of {
               "b": base64decode(data) | fail
               "q": q_decode(data) | fail
               default:
                  return error("Unknown content word encoding: " || encoding)
            }
            if Text.lower(charset) == "utf-8" then
               t := ucs(t) | return error("Encoded word data not proper UTF-8")
            res ||:= t
            ="?="  | return error("Encoded word did not end with ?=")
            adj := &yes
         }
         return res || tab(0)
      }
   end
end
