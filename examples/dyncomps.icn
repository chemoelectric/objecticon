import gui

class DynComps(Dialog)
   public cont, p

   public component_setup()
      self.setup()
      p := Panel().set_size(0,0)
      cont.set_inner(p)
   end

   public end_dialog()
   end

   public init_dialog()
   end

   public on_add(ev)
      local b, bn
      b := p.get_children()[-1]
      bn := TextButton().set_label("Something").set_align("l","t")
      if /b then
         bn.set_pos(20, 0)
      else
         bn.set_pos(20, b.y + b.h + 10)
      p.add(bn)
      bn.resize()
      change_size()
   end

   public on_del(ev)
      p.remove_index(-1)
      change_size()
   end

   public on_repos(ev)
      local b
      b := p.get_children()[-1] | fail
      b.set_pos(b.x_spec+10,b.y_spec+10)
      b.resize()
      change_size()
   end

   public on_resize(ev)
      local b
      b := p.get_children()[-1] | fail
      b.set_size(b.w+10,b.h+10)
      b.resize()
      change_size()
   end

   public change_size()
      local b, mx, my
      mx := my := 0
      every b := !p.children do {
         mx <:= b.x_spec + b.w
         my <:= b.y_spec + b.h
      }
      p.set_size(mx,my)
      p.set_pos(0,0)
      p.resize()

      cont.invalidate_subject_width()
      cont.invalidate_subject_height()
      cont.layout()
      cont.invalidate()
      #write("size:",p.w,",",p.h)
   end

   public on_quit(ev)
      dispose()
   end

   public new()
      cast(self,Dialog).new()
      return
   end

   private setup()
      local add, del, paint_2, paint_4, repos, layout_1, quit, paint_1, panel_1, layout, resize, paint_3, paint
      self.set_resize(&yes)
      cont := ComponentScrollArea().
         set_size("417", "226").
         set_align(Align.C, Align.T).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0)
      self.add(cont)
      paint := TextPaint("Add")
      add := TextButton().
         set_align(Align.C, Align.T).
         clear_constraints().
         connect(self.on_add, Event.ACTION).
         set_toggles(&no).
         set_paint(paint)
      paint_1 := TextPaint("Delete")
      del := TextButton().
         set_align(Align.C, Align.T).
         clear_constraints().
         connect(self.on_del, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_1)
      paint_2 := TextPaint("Resize")
      resize := TextButton().
         clear_constraints().
         connect(self.on_resize, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_2)
      paint_3 := TextPaint("Repos")
      repos := TextButton().
         clear_constraints().
         connect(self.on_repos, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_3)
      paint_4 := TextPaint("Quit")
      quit := TextButton().
         set_align(Align.C, Align.T).
         clear_constraints().
         set_constraint("eol", &yes).
         connect(self.on_quit, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_4)
      layout_1 := GridLayout().
         set_doi(0).
         set_extra("cells")
      panel_1 := Panel().
         set_align(Align.C, Align.B).
         clear_constraints().
         set_layout(layout_1).
         add(add).
         add(del).
         add(resize).
         add(repos).
         add(quit)
      self.add(panel_1)
      layout := GridLayout().
         set_extra("cells")
      self.set_layout(layout)
   end
end


procedure main()
   local d
   d := DynComps()
   d.show_modal()
end

### Ivib-v2 layout: layouts/$.layout
