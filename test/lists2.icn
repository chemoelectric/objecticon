import io,lang

record test(x,e)

procedure e_iterator(l)
   local i
   i := 1
   while i <= *l do {
      suspend l[i]
      i +:= 1
   }
end

procedure e_reviterator(l)
   local i
   i := 1
   while i <= *l do {
      suspend l[-i]
      i +:= 1
   }
end

procedure e_insert(l,i,v)
   if i > *l then fail
   every 1 to i-1 do {
      put(l, pop(l))
   }
   push(l,v)
   every 1 to i-1 do {
      push(l, pull(l))
   }
end

procedure e_delete(l,i)
   if i > *l then fail
   every 1 to i-1 do {
      put(l, pop(l))
   }
   pop(l)
   every 1 to i-1 do {
      push(l, pull(l))
   }
end

procedure mklist()
   local n,l
   n := ?40
   l := list(1)
   #write("START:",to_string(l))
   every put(l, 1 to n)
   return test(l,copy(l))
end

procedure randops(t,n)
   local i,v
   /n := 120
   every 1 to n do {
      case ?4 of {
         1: {
            i := integer(?*t.e)
            v := ?100
            insert(t.x,i,v)
            e_insert(t.e,i,v)
            equals(t.x, t.e) | stop("insert i=",i," v=",v," t=",to_string(t))
         }
         2: {
            i := integer(?*t.e)
            delete(t.x,i)
            e_delete(t.e,i)
            equals(t.x, t.e) | stop("delete i=",i," t=",to_string(t))
         }
         3: {
            v := ?100
            put(t.x,v)
            put(t.e,v)
         }
         4: {
            pop(t.x)
            pop(t.e)
         }
      }
   }
end

procedure main()
   local t, e1, e2, f1, f2, v1, v2
   every 1 to 200 do {
      t := mklist()
      e1 := create e_iterator(t.e)
      e2 := create !(t.x)
      f1 := create e_reviterator(t.e)
      f2 := create back(t.x)
      every 1 to 2* (*t.x) do {
         randops(t,?4)
         equals(t.x, t.e) | stop("equals() failed:", to_string(t.x), "\n", to_string(t.e))
         v1 := @e1 | "NONE"
         v2 := @e2 | "NONE"
         v1 === v2 | stop("! failed:", to_string(t.x), "\n", to_string(t.e), 
                          " v1=",image(v1),"  v2=",image(v2))
         v1 := @f1 | "NONE"
         v2 := @f2 | "NONE"
         v1 === v2 | stop("back() failed:", to_string(t.x), "\n", to_string(t.e), 
                          " v1=",image(v1),"  v2=",image(v2))
      }
      f1 := f2 := e1 := e2 := &null
   }
   write("OK")
end
