import gui, ipl.lists, graphics, util

class Untitled(Dialog)
   public target_list, clipboard_cb, primary_cb, data_area, get_data_button

   public override component_setup()
      self.setup()
      update_grey()
      data_area.set_wrap_mode("width")
   end

   public override end_dialog()
   end

   public override init_dialog()
   end

   public on_quit(ev)
      dispose()
   end

   public update_grey()
      local f
      f := Yes{*target_list.get_selections() = 0}
      data_area.set_is_shaded(f)
      get_data_button.set_is_shaded(f)
   end

   public on_target_list(ev)
      update_grey()
   end

   private on_get_data_response(target_type, data)
      local h
      if /data then
         data := "<Failed>"
      else {
         h := "Got " || *data || " bytes.\n"
         if *data > 4096 then {
            h ||:= "Following data truncated to 4K bytes.\n"
            data := data[1:4097]
         }
         data := h || data
      }
      data_area.set_contents_str(data)
      data_area.move_cursor(1, 1)
   end

   public on_get_data(ev)
      local ty
      ty := target_list.object_first_selection() | fail
      parent_dialog.request_selection(which_selection(),
                                      [ty],
                                      on_get_data_response)
   end

   public which_selection()
      if clipboard_cb.is_checked() then
         return Selection.CLIPBOARD
      else
         return Selection.PRIMARY
   end

   public on_get_targets(ev)
      parent_dialog.request_selection(which_selection(),
                                      [Selection.TARGETS_TARGET], 
                                      on_get_targets_response)
   end

   private on_get_targets_response(target_type, data)
      if /data then
         target_list.set_contents([])
      else
         # Strip off last \n and split
         target_list.set_contents(str2list(data[1:-1], "\n"))
   end

   private setup()
      local label_2, paint_2, panel_2, get_targets_button, paint_7, layout_4, paint_4, layout_1, label_1, paint_1, border_2, paint_6, layout_3, paint_3, border_content_1, border_content_2, border_1, layout_5, check_box_group_1, paint_5, text_button_3
      self.set_resize(&yes)
      paint_4 := TextPaint("Targets")
      label_1 := Label().
         set_pos(scale(424), scale(323)).
         clear_constraints().
         set_constraint(Grid.X_ALIGN, Align.L).
         set_paint(paint_4)
      target_list := TextList().
         set_size(scale(200), scale(150)).
         clear_constraints().
         set_constraint(Grid.EOL, &yes).
         set_constraint(Grid.X_FILL, &yes).
         set_constraint(Grid.X_WEIGHT, 1.0).
         set_constraint(Grid.Y_FILL, &yes).
         set_constraint(Grid.Y_WEIGHT, 1.0).
         connect(self.on_target_list, Event.SELECTION_CHANGED).
         set_select_mode(Select.ONE).
         set_contents([])
      paint_2 := TextPaint("Get")
      get_targets_button := TextButton().
         clear_constraints().
         set_constraint(Grid.X_ALIGN, Align.L).
         connect(self.on_get_targets, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_2)
      layout_3 := GridLayout().
         set_extra("cells")
      border_content_1 := Component().
         clear_constraints().
         set_layout(layout_3).
         add(target_list).
         add(get_targets_button)
      border_1 := Border().
         clear_constraints().
         set_constraint(Grid.X_FILL, &yes).
         set_constraint(Grid.X_WEIGHT, 1.0).
         set_constraint(Grid.Y_FILL, &yes).
         set_constraint(Grid.Y_WEIGHT, 1.0).
         set_title(label_1).
         set_content(border_content_1)
      self.add(border_1)
      paint_5 := TextPaint("Data")
      label_2 := Label().
         set_pos(scale(453), scale(179)).
         clear_constraints().
         set_constraint(Grid.X_ALIGN, Align.L).
         set_paint(paint_5)
      data_area := EditableTextList().
         set_size(scale(350), scale(250)).
         clear_constraints().
         set_constraint(Grid.EOL, &yes).
         set_constraint(Grid.X_FILL, &yes).
         set_constraint(Grid.X_WEIGHT, 1.0).
         set_constraint(Grid.Y_FILL, &yes).
         set_constraint(Grid.Y_WEIGHT, 1.0).
         set_contents([""]).
         set_is_editable(&no)
      paint_1 := TextPaint("Get")
      get_data_button := TextButton().
         clear_constraints().
         set_constraint(Grid.X_ALIGN, Align.L).
         connect(self.on_get_data, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_1)
      layout_4 := GridLayout().
         set_extra("cells")
      border_content_2 := Component().
         clear_constraints().
         set_layout(layout_4).
         add(data_area).
         add(get_data_button)
      border_2 := Border().
         clear_constraints().
         set_constraint(Grid.EOL, &yes).
         set_constraint(Grid.X_FILL, &yes).
         set_constraint(Grid.X_WEIGHT, 1.0).
         set_constraint(Grid.Y_FILL, &yes).
         set_constraint(Grid.Y_WEIGHT, 1.0).
         set_title(label_2).
         set_content(border_content_2)
      self.add(border_2)
      paint_6 := TextPaint("Primary")
      primary_cb := CheckBox().
         clear_constraints().
         set_constraint(Grid.X_ALIGN, Align.L).
         set_toggles(&yes).
         set_paint(paint_6)
      paint_7 := TextPaint("Clipboard")
      clipboard_cb := CheckBox().
         clear_constraints().
         set_constraint(Grid.X_ALIGN, Align.L).
         set_toggles(&yes).
         set_paint(paint_7)
      paint_3 := TextPaint("Quit")
      text_button_3 := TextButton().
         clear_constraints().
         set_constraint(Grid.X_ALIGN, Align.R).
         set_constraint(Grid.X_WEIGHT, 1.0).
         connect(self.on_quit, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_3)
      layout_5 := GridLayout().
         set_doi(scale(0)).
         set_extra("cells")
      panel_2 := Panel().
         clear_constraints().
         set_constraint(Grid.EOL, &yes).
         set_constraint(Grid.W, 2).
         set_constraint(Grid.X_ALIGN, Align.L).
         set_constraint(Grid.X_FILL, &yes).
         set_layout(layout_5).
         add(primary_cb).
         add(clipboard_cb).
         add(text_button_3)
      self.add(panel_2)
      self.connect(self.dispose, Event.WINDOW_CLOSE_BUTTON)
      layout_1 := GridLayout().
         set_extra("cells")
      self.set_layout(layout_1)
      check_box_group_1 := CheckBoxGroup().
         add(primary_cb).
         add(clipboard_cb).
         set_which_one(clipboard_cb)
   end
end


procedure main()
   local d
   d := Untitled()
   d.show_modal()
end

### Ivib-v2 layout: layouts/$.layout
