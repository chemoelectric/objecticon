import io, lang, util, ipl.options

procedure f(i)
   return Format.numeric_to_string(i,0,',')
end

procedure r(x,y)
   return right(f(x)||"/"||f(y), 32) ||
      right(if y > 0 then Format.numeric_to_string(100*real(x)/y,2) else "-",8)
end

procedure print_stats(prog)
   local t1, t2, t3, t1s, t1b, e, i, s1, s
   s1 := Prog.get_stack_used(prog)
   t1 := Prog.get_region_info(prog)
   t1s := t1.get_string_total()
   t1b := t1.get_block_total()
   t2 := Prog.get_allocation_info(prog)
   t3 := Prog.get_collection_info(prog)

   write()
   write("Region                        Usage                      Total    Colls")
   write("------                        --------------------        ----    -----")
   write("Stack     ", right(f(s1),22), right(t3.stack_requests,39))
   i := 1
   every e := !t1.string_regions do {
      s := "String " || i
      if \e.current then
         s ||:= " *"
      write(left(s, 10), r(e.used, e.size))
      i +:= 1
   }
   write(left("String total", 30), right(f(t2.string_total), 32), right(t3.string_requests, 9))

   i := 1
   every e := !t1.block_regions do {
      s := "Block " || i
      if \e.current then
         s ||:= " *"
      write(left(s, 10), r(e.used, e.size))
      i +:= 1
   }
   write(left("Block total", 30), right(f(t2.block_total), 32), right(t3.block_requests, 9))
   write(left("User", 62), right(t3.user_requests, 9))
   write("                                                          ----    -----")
   write(right(f(t2.get_total()),62),right(t3.get_total(),9))
end

procedure usage(opts)
   write("Usage: memorytracker [OPTIONS] program [program options/arguments]")
   write("Show program allocations")
   options_help(opts)
   exit(0)
end

procedure main(args)
   local opts, proact, e, mask, prog, totals, t, prev_code, u_flag

   opts := options(args, [Opt("u",,"Show block/string deallocations separately.")],
                   usage,, ignore_after(non_flag))
   if *args = 0 then
      help_stop("Program and optional arguments expected.")

   u_flag := opts["u"]

   prog := Prog.load(Files.find_exe(args[1]),args[2:0]) | stop(&why)

   proact := table(0)
   totals := table(0)
   mask := MonitorCodeSet.AllocMask ++ MonitorCode.Timer ++ MonitorCode.Exit
   Prog.set_event_mask(mask, prog).set_timer_interval(2000, prog)
   while e := Prog.get_event(prog) do {
      # The clumsy table insertion code is to avoid allocating huge
      # numbers of tvtbl blocks.  This is harmless, but would cause
      # regular collections, and hence disturb the stack allocation
      # figure in the monitored program.
      case e.code of {
         MonitorCode.Timer: print_stats(prog)
         MonitorCode.Exit:{}
         MonitorCode.StrDeAlc |
         MonitorCode.BlkDeAlc: {
            if \u_flag then {
               (member(proact, e.code) | proact[e.code]) +:= 1
               (member(totals, e.code) | totals[e.code]) +:= e.value
            } else {
               (member(proact, prev_code) | proact[prev_code]) -:= 1
               (member(totals, prev_code) | totals[prev_code]) +:= e.value
            }
         }
         default: {
            (member(proact, e.code) | proact[e.code]) +:= 1
            (member(totals, e.code) | totals[e.code]) +:= e.value
            prev_code := e.code
         }
      }
   }
   print_stats(prog)
   write()
   write("Summary")
   write("Code           Desc                                     N           Total")
   write("----           ----                                 -----          ------")
   t := 0
   every e := !sort(proact) do {
      write(left(MonitorCode.get_sym(e[1]),15),left(MonitorCode.get_desc(e[1]),27), 
            right(f(e[2]), 15), right(f(totals[e[1]]),16))
      t +:= totals[e[1]]
   }
   write("                                                                   ------")
   write(right(f(t), 73))
end
