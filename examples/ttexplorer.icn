import gui, io, ipl.sort, util(Time)

class TTExplorer(Dialog)
   public bits_col, date_col, file_col, size_col, tt, tree
   #
   # Given a Node n, get the full file path it represents by traversing
   # up the tree structure to the root.
   #
   public get_full_path(n)
      local l
      l := []
      repeat {
         push(l, n.get_label())
         n := n.get_parent() | break
      }
      return FilePath.from_list(l).str()
   end

   #
   # Invoked when a sub-tree is expanded (ie: the little + is
   # clicked).  An expansion event also includes contractions
   # too.
   #
   public handle_tree_expansion()
      local n

      n := tree.get_last_expanded()
      #
      # Check whether it was an expansion or a contraction.  If
      # an expansion, load the subtree and refresh the tree.
      #
      if n.is_expanded() then {
         load_subtree(n)
         tree.tree_structure_changed()
      }
   end

   private fmt_time(t)
      local x
      x := Time()
      x.set_unix_seconds(t)
      return x.format("MMM dd HH:mm:ss")
   end

   #
   # Given a Node n, load its children with the sub-directories.
   #
   public load_subtree(n)
      local s, e, r1, l, t

      s := get_full_path(n)

      l := get_directory_list(s)
      n.clear_children()
      every e := !!l do {
         if t := ucs(e[1]) then {
            r1 := TreeTableNode()
            r1.set_label(t)
            if e[2].mode_str[1] == "d" then
               r1.set_always_expandable(&yes)
            r1.set_contents([e[2].size, fmt_time(e[2].mtime), e[2].mode_str])
            n.add(r1)
         }
      }
   end

   #
   # Read a directory.
   #
   public get_directory_list(s)
      local e, dir_list, file_list, l
      if not(l := Files.list(s)) then {
         return [[],[]]
      }
      dir_list := []
      file_list := []
      every e := !l do {
         if not(Files.is_hidden(e[1])) then {
            if e[2].mode_str[1] == "d" then
               put(dir_list, e)
            else
               put(file_list, e)
         }
      }
      return [isort(dir_list, name_sort),
              isort(file_list, name_sort)]
   end

   private static name_sort(x)
      return x[1]
   end

   public component_setup()
      local root_node
      self.setup()
      tree := tt.get_table_content()
      tree.connect(self.handle_tree_expansion, Event.TREE_NODE_EXPANSION)
      root_node := TreeTableNode().set_label("/")
      load_subtree(root_node)
      tt.table_content.set_root_node(root_node)
   end

   public end_dialog()
   end

   public init_dialog()
   end

   public on_text_button_1(ev)
      dispose()
   end

# WARN : parameterless initially method
   public new()
      cast(self,Dialog).new()
      return
   end

   private setup()
      local paint_2, paint_4, layout_1, paint_1, paint_3, paint, text_button_1
      set_resize(&yes)
      paint := TextPaint("File")
      file_col := TableColumn().
         set_paint(paint).
         set_column_align(Align.L)
      paint_1 := TextPaint("Size")
      size_col := TableColumn().
         set_paint(paint_1).
         set_column_align(Align.R).
         set_column_width(75)
      paint_2 := TextPaint("Date")
      date_col := TableColumn().
         set_paint(paint_2).
         set_column_align(Align.L).
         set_column_width(100)
      paint_3 := TextPaint("Bits")
      bits_col := TableColumn().
         set_paint(paint_3).
         set_column_align(Align.L).
         set_column_width(100)
      tt := TreeTable().
         set_size("475", "265").
         set_align(Align.C, Align.T).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_select_mode(Select.ONE).
         set_contents([]).
         add_column(file_col).
         add_column(size_col).
         add_column(date_col).
         add_column(bits_col)
      add(tt)
      paint_4 := TextPaint("Quit")
      text_button_1 := TextButton().
         set_align(Align.C, Align.B).
         clear_constraints().
         connect(on_text_button_1, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_4)
      add(text_button_1)
      layout_1 := GridLayout().
         set_extra("cells")
      set_layout(layout_1)
   end
end




procedure main()
   local d
   d := TTExplorer()
   d.show_modal()
end

### Ivib-v2 layout ##
#CCanvas|I18SSuperClass Name|SDialog|SImport Name|Sgui|SButton Groups|L
#0SCheckbox Groups|L0SGen Indent|I3SGen Main|I1SGen Component Setup|I1S
#Gen Init Dialog|I1SGen Constructor|I1SDialog Struct|CCDialog|I1SWAttri
#bs|T1NSresize|I1SName|STTExplorer|SIs Component|NSWidth|NSHeight|NSChi
#ldren|L2CCanvasTable|I29SParent Canvas|X1SName|Stt|SClass Name|STreeTa
#ble|SImport Name|Sgui|SClass Variable|I1SX Fix|I1SY Fix|I1SW Fix|I1SH 
#Fix|I1SX Spec|NSY Spec|NSW Spec|S475|SH Spec|S265|SX Align|Sc|SY Align
#|St|SZ|I0STab ord|I0SIs shaded|NSWAttribs|T0NSConstraints|T5NSx_weight
#|B1.0|Sx_fill|I1Sy_weight|B1.0|Sy_fill|I1Seol|I1STooltip|NSAccel|NSLay
#out delegate|NSBorder opts|NSEvent Handlers|L0SClass Variable|I1SParen
#t Component|X1SSelect Mode|Sone|SColumns|L4CCanvasTableColumn|I10SPare
#nt Canvas|X1SName|Sfile_col|SClass Name|STableColumn|SImport Name|Sgui
#|SClass Variable|I1SPaint|CCanvasTextPaint|I6SParent Canvas|X1SName|Sp
#aint|SClass Name|STextPaint|SImport Name|Sgui|SClass Variable|NSStr|SF
#ile|SColumn Width|NSInternal Alignment|Sl|SWAttribs|T0NSEvent Handlers
#|NCCanvasTableColumn|I10SParent Canvas|X1SName|Ssize_col|SClass Name|S
#TableColumn|SImport Name|Sgui|SClass Variable|I1SPaint|CCanvasTextPain
#t|I6SParent Canvas|X1SName|Spaint_1|SClass Name|STextPaint|SImport Nam
#e|Sgui|SClass Variable|NSStr|SSize|SColumn Width|I75SInternal Alignmen
#t|Sr|SWAttribs|T0NSEvent Handlers|NCCanvasTableColumn|I10SParent Canva
#s|X1SName|Sdate_col|SClass Name|STableColumn|SImport Name|Sgui|SClass 
#Variable|I1SPaint|CCanvasTextPaint|I6SParent Canvas|X1SName|Spaint_2|S
#Class Name|STextPaint|SImport Name|Sgui|SClass Variable|NSStr|SDate|SC
#olumn Width|I100SInternal Alignment|Sl|SWAttribs|T0NSEvent Handlers|NC
#CanvasTableColumn|I10SParent Canvas|X1SName|Sbits_col|SClass Name|STab
#leColumn|SImport Name|Sgui|SClass Variable|I1SPaint|CCanvasTextPaint|I
#6SParent Canvas|X1SName|Spaint_3|SClass Name|STextPaint|SImport Name|S
#gui|SClass Variable|NSStr|SBits|SColumn Width|I100SInternal Alignment|
#Sl|SWAttribs|T0NSEvent Handlers|NCCanvasTextButton|I35SParent Canvas|X
#1SName|Stext_button_1|SClass Name|STextButton|SImport Name|Sgui|SClass
# Variable|NSX Fix|I1SY Fix|NSW Fix|NSH Fix|NSX Spec|NSY Spec|NSW Spec|
#NSH Spec|NSX Align|Sc|SY Align|Sb|SZ|I0STab ord|I0SIs shaded|NSWAttrib
#s|T0NSConstraints|T0NSTooltip|NSAccel|NSLayout delegate|NSBorder opts|
#NSEvent Handlers|L1L2SEvent.ACTION|Son_text_button_1|SClass Variable|N
#SParent Component|X1SNo click focus|NSAccepts focus Flag|I1SIs Checked
# Flag|NSIs Checkbox Flag|NSParent CheckBoxGroup|NSParent Button Group|
#NSPaint|CCanvasTextPaint|I6SParent Canvas|X1SName|Spaint_4|SClass Name
#|STextPaint|SImport Name|Sgui|SClass Variable|NSStr|SQuit|SPaint down|
#NSInitial Focus|NSEvent Handlers|L0SLayout delegate|CCanvasGridLayout|
#I8SDII val|NSDOI val|NSExtra|Scells|SName|Slayout_1|SClass Name|SGridL
#ayout|SImport Name|Sgui|SClass Variable|NSParent|X1
