package gui

import 
   util, ipl.graphics

class GridLayout(Layout)
   public 
      g,
      dii,          # Default inner padding, ie not at edge of grid
      doi,          # Default outer padding
      extra,        # Flag indicating how to allocate extra space
      debug

   # Default insets between components in a GridLayout.
   public static
      DEFAULT_OUTER_INSET,
      DEFAULT_INNER_INSET

   private static init()
      DEFAULT_OUTER_INSET := scale(10)
      DEFAULT_INNER_INSET := scale(5)
   end

   public reset()
      g := &null
   end

   public ensure_grid()
      local c, ci

      if \g then
         return

      g := Grid().
         set_dii(dii).
         set_doi(doi).
         set_extra(extra)

      every c := !parent.children do {
         if /c.x_spec then {
            ci := g.create_cell(c.constraints)
            ci.pw := c.get_preferred_width()
            ci.obj := c
         }
      }
      g.dimension()
      g.compute_preferred_col_widths()
   end

   public get_preferred_width()
      ensure_grid()
      return g.get_preferred_width()
   end

   public compute_preferred_heights()
     local i, adj
     every i := !g.info do {
        if i.ph_calc_w ~=== i.aw then {
           i.ph_calc_w := i.aw
           i.ph := i.obj.get_preferred_height(i.ph_calc_w)
           adj := 1
        }
     }
     if \adj | /i then
        g.compute_preferred_row_heights()
   end

   public get_preferred_height(pw)
      ensure_grid()
      g.compute_actual_col_widths(pw)
      compute_preferred_heights()
      return g.get_preferred_height()
   end

   public display()
      local i, cw
      use {
         cw := GetShadowClone(self.parent.cbwin).set_masked_pattern("gray"),
         {
            cw.draw_rectangle(parent.x, parent.y, parent.w, parent.h)

            every i := !g.info do {
               cw.draw_rectangle(g.a_col_x[i.x],
                                 g.a_row_y[i.y],
                                 Grid.slice(i.x, i.w, g.a_col_w),
                                 Grid.slice(i.y, i.h, g.a_row_h))
            }
         }
      }
   end

   public layout()
      local c, i

      every c := !parent.children do {
         if \c.x_spec then
            c.compute_absolutes()
      }

      ensure_grid()

      g.compute_actual_col_widths(parent.w)
      g.compute_actual_col_positions(parent.x)
      compute_preferred_heights()
      g.compute_actual_row_heights(parent.h)
      g.compute_actual_row_positions(parent.y)

      every i := !g.info do {
         i.obj.x := i.ax
         i.obj.y := i.ay
         i.obj.w := i.aw
         i.obj.h := i.ah
      }

      if \debug then
         g.print_layout()
   end

   public set_debug(s)
      self.debug := check_flag(s)
      return self
   end

   public set_dii(n)
      self.dii := n
      return self
   end

   public set_doi(n)
      self.doi := n
      return self
   end

   public set_extra(s)
      self.extra := s
      return self
   end

   public new()
      self.dii := DEFAULT_INNER_INSET
      self.doi := DEFAULT_OUTER_INSET
      self.extra := "cells"
      return
   end
end


