############################################################################
#
#	File:     factors.icn
#
#	Subject:  Procedures related to factors and prime numbers
#
#	Authors:  Ralph E. Griswold and Gregg M. Townsend
#
#	Date:     June 11, 2001
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#  This file contains procedures related to factorization and prime
#  numbers.
#
############################################################################
#
#  Notes:  Some of these procedures are not fast enough for extensive work.
#  Factoring is believed to be a hard problem. prime_factors() should only be
#  used for small numbers.
#
############################################################################
#
#  Requires: Large-integer arithmetic; prime.lst for primel() and primorial().
#
############################################################################

package ipl.factors

import
   ipl.io(dopen),
   ipl.numbers(round, exp_modulo),
   ipl.pdco(List,Product,String,Sum,UniqueEq),
   util(need_integer, use_seq)

# generate the divisors of positive integer n
procedure divisors(n)			
   local d, dlist

   n := need_integer(n, 1)

   dlist := []
   every d := seq() do {
      if d * d >= n then
         break
      if n % d = 0 then {
         push(dlist, d)
         suspend d
         }
      }
   if d * d = n then
      suspend d
   suspend n / !dlist

end

# return list of divisors of n
procedure divisorl(n)
   return List{ divisors(n) }
end

# Succeed if positive integer n is a perfect number.
procedure perfect(n)
   n := need_integer(n, 1)
   succeed Sum{ divisors(n) } = 2*n
end

# Calculate Euler's totient function for positive integer `n`.
procedure totient(n)
   local f
   n := need_integer(n, 1)
   every f := prime_factors(n) do
      n := (n * (f.p - 1)) / f.p
   return n
end

# return n! (n factorial)
procedure factorial(n)			
   n := need_integer(n, 0)

   return Product{ 1 to n }
end

# Result record for several factoring procedures.
record prime_factor(p, e)

# Generate the prime factors of positive integer i.  A sequence of
# `prime_factor` records is generated, each giving a prime and an
# exponent.  For example, `prime_factors` applied to
# ~
#     5913648 = (2^4) * (3^7) * (13^2)
# ~
# generates :-
# ~
#    prime_factor(p=2;e=4)
#    prime_factor(p=3;e=7)
#    prime_factor(p=13;e=2)
# ~
#
procedure prime_factors(i)
   local p, e

   i := need_integer(i, 1)
   if i = 1 then fail

   every p := primes() do {
      if p * p > i then
         return prime_factor(i, 1)
      e := 0
      while i % p = 0 do {
         e +:= 1
         i /:= p
      }
      if e > 0 then
         suspend prime_factor(p, e)

      if i = 1 then fail
      }
end

# This is just like `prime_factors`, but also generates intermediate
# prime numbers that aren't factors (with zero exponents).
#
procedure prime_factors0(i)
   local p, e

   i := need_integer(i, 1)
   if i = 1 then fail

   every p := primes() do {
      e := 0
      while i % p = 0 do {
         e +:= 1
         i /:= p
      }
      suspend prime_factor(p, e)

      if i = 1 then fail
      }
end

# Generate the prime factors of integer.  For example,
# `prime_factors1` applied to
# ~
#    1188 = (2^2) * (3^3) * 11
# ~
# generates
# ~
#    2, 2, 3, 3, 3 and 11
# ~
#
procedure prime_factors1(i)		
   local f
   every f := prime_factors(i) do
      suspend |f.p \ f.e
end

# generalized factorial; n x (n - i) x (n - 2i) x ...
procedure gfactorial(n, i)		
   local j

   n := need_integer(n, 0)
   i := need_integer(\i, 1) | 1
   if n = 0 then return 1

   j := n

   while n > i do {
      n -:= i
      j *:= n
      } 

   return j

end

# succeeds and returns root if i is k^j.  i and j must be positive integers.
procedure ispower(i, j)			
   local k, n

   i := need_integer(i, 1)
   j := need_integer(j, 1)

   k := (n := round(i ^ (1.0 / j))) ^ j
   if k = i then return n else fail

end

#  NOTE:  The following method for testing primality, called Baby Division,
#  is about the worst possible.  It is inappropriate for all but small
#  numbers.
#
#  see also : `probably_prime()`.
procedure isprime(n)			
   local p

   n := need_integer(n)
   if n <= 1 then fail		# 1 is not a prime
   every p := primes() do {
      if p * p > n then return
      if n % p = 0 then fail
      }
end

# Helper procedure; given a number n return the next integer to test
# for primality.
package procedure primeskip(n)
   static step

   initial {
      step := [1,6,5,4,3,2,1,4,3,2,1,2,1,4,3,2,1,2,1,4,3,2,1,6,5,4,3,2,1,2]
      }

   return n + step[n % 30 + 1]		# step past multiples of 2, 3, 5

end

# generate the prime numbers beyond n (default 1).
procedure primes(n)			
   local d
   static div

   initial {
      div := [7]			# list of known primes
      }

   n := need_integer(\n) | 1
   if n < 7 then			# handle small primes specially
      suspend n <:= (2 | 3 | 5 | 7)

   repeat {
      n := primeskip(n)

      every (d := !div) | put(div, d := primes(d)) do {  # get test divisors
         if n % d = 0 then		# if composite, try a larger candidate
            break
         if d * d > n then {		# if not divisible up to sqrt, is prime
            suspend n
            break
            }
         }
      }

end

# this is like `primes()`, but primes are calculated using `probably_prime()` below,
# so it is much faster for large `n`, over about `10^9`.
#
procedure probable_primes(n, c)			
   n := need_integer(\n) | 1
   if n < 7 then			# handle small primes specially
      suspend n <:= (2 | 3 | 5 | 7)

   repeat {
      n := primeskip(n)
      if probably_prime(n, c) then
         suspend n
   }

end

# Probabilistic prime testing.  Succeeds if `n` is "probably" prime.
# Adapted from Knuth vol. 2, 2nd ed. sec 4.5.4.
#
# `c` is the confidence level (default 50).  The algorithm will give a
# false positive (ie say a number is prime when it isn't) with
# probability about `(1/4)^c` (for c=50 this is about 10^-30).
#
procedure probably_prime(n, c)
   local j, q, k, r, y

   n := need_integer(n)
   c := need_integer(\c, 0) | 50

   if n <= 1 then fail		# 1 is not a prime
   if n < 4 then
      return

   q := n - 1
   k := 0
   while q % 2 = 0 do {
      q /:= 2
      k +:= 1
   }
   if k = 0 then    # n is even
      fail

   # Now n = 1 + q * (2^k), k > 0

   every 1 to c do {
      # Generate random r,  1 < r < n
      r := 1 + ?(n - 2)
      y := exp_modulo(r, q, n)
      every j := seq() do {
         if (j = 1 & y = 1) | (y = n - 1) then
            break
         if (j > 1 & y = 1) | (j = k) then
            fail
         y := (y ^ 2) % n
      }
   }
   return
end

# Generates the primes from a precompiled list, "primes.lst", in the
# directory indicated by the environment variable `DPATH` (see
# `dopen`).  If the sequence won't be generated to exhaustion, enclose
# the call in `util.clean` to ensure the underlying file is closed; eg
# ~
#   clean{ every write(primel() \ 20) }
# ~
procedure primel()			
   local pfile

   suspend use_seq {
      pfile := dopen("primes.lst") | runerr("Cannot open primes.lst"),
      integer(pfile.gen())
   }
end

# product of primes p, where j <= p <= i; j defaults to 1.
procedure primorial(i, j)		
   local m, k

   i := need_integer(i)
   j := need_integer(\j) | 1

   m := 1

   every k := (j <= primes()) do {
      if k <= i then m *:= k
      else return m
      }

end

package procedure factorstr(f)
   return if f.e = 1 then f.p else f.p || "^" || f.e
end

# return factors in string form
procedure sfactors(i)
   return String{ factorstr(prime_factors(i)), " " }
end

# succeeds if n is square-free
procedure squarefree(n)			
   (prime_factors(n).e > 1) | return
end

package procedure factorizations1(e)
   local f, i, x, j
   f := @e | return []
   every x := factorizations1(e) do {
      # x is a factorization of the "tail" after removing factor f.
      # If it is say [a,b,c] then the factors of the whole are
      # [f*a,b,c], [a,f*b,c], [a,b,f*c] and [f,a,b,c].
      # The variable j just avoids needless duplicates.
      j := &null
      every i := 1 to *x do {
         if j ~===:= x[i] then
            suspend sort(x[1:i]  ||| [f * j] ||| x[i+1:0])
      }
      suspend [f] ||| x
   }
end

# Generate a sequence of lists giving all the possible factorizations
# of positive integer `n`.  For example, if `n` is 24, then :-
# ~
#   [24], [2,12], [4,6], [2,2,6]
#   [3,8], [2,3,4] and [2,2,2,3]
# ~
# is generated.
#
# Notes :-
#
# * `1` is never included in any result.
# * the factors in each list are in ascending order,
# * the results are in no special order, although the first result always
#   has one element and the last all the prime factors.
# * no list is repeated,
# * each list is a distinct list instance,
# * `factorizations(1)` returns the empty list.
#
procedure factorizations(n)
   suspend UniqueEq{ factorizations1{ prime_factors1(n) } }
end
