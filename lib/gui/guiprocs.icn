#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import graphics, lang, util, xdg, ipl.strings, posix

class Event()
   public static const
      MOUSE_LEFT_PRESS,
      MOUSE_MIDDLE_PRESS,
      MOUSE_RIGHT_PRESS,
      MOUSE_LEFT_RELEASE,
      MOUSE_MIDDLE_RELEASE,
      MOUSE_RIGHT_RELEASE,
      MOUSE_LEFT_DRAG,
      MOUSE_MIDDLE_DRAG,
      MOUSE_RIGHT_DRAG,
      MOUSE_MOVEMENT,
      MOUSE_WHEEL_UP,
      MOUSE_WHEEL_DOWN,
      WINDOW_RESIZE,
      MOUSE_LEFT_DRAG_OVER,
      MOUSE_MIDDLE_DRAG_OVER,
      MOUSE_RIGHT_DRAG_OVER,
      MOUSE_LEFT_RELEASE_OVER,
      MOUSE_MIDDLE_RELEASE_OVER,
      MOUSE_RIGHT_RELEASE_OVER,
      WINDOW_CLOSE_BUTTON,
      # This event listens for all window-system generated events
      ICON,
      BUTTON_RELEASE,
      BUTTON_PRESS,
      BUTTON_HELD,
      SELECTION_CHANGED,
      CONTENT_CHANGED,
      CURSOR_MOVED,
      VALUE_CHANGED,
      ACTION,
      TREE_NODE_EXPANSION,
      SIZER_PRESS,
      SIZER_DRAG,
      SIZER_RELEASE,
      MOUSE_ENTER,
      MOUSE_EXIT,
      KEY_PRESS,
      KEY_RELEASE,
      GOT_FOCUS,
      LOST_FOCUS,
      DIALOG_DISPOSED,
      IN_POINT_CHAIN,
      POPUP_CLOSED,
      INTERRUPTED,
      RESUMED

   private static init()
      MOUSE_LEFT_PRESS := Mouse.LEFT_PRESS
      MOUSE_MIDDLE_PRESS := Mouse.MIDDLE_PRESS
      MOUSE_RIGHT_PRESS := Mouse.RIGHT_PRESS
      MOUSE_LEFT_RELEASE := Mouse.LEFT_RELEASE
      MOUSE_MIDDLE_RELEASE := Mouse.MIDDLE_RELEASE
      MOUSE_RIGHT_RELEASE := Mouse.RIGHT_RELEASE
      MOUSE_LEFT_DRAG := 11
      MOUSE_MIDDLE_DRAG := 12
      MOUSE_RIGHT_DRAG := 13
      MOUSE_MOVEMENT := Mouse.MOVEMENT
      MOUSE_WHEEL_UP := Mouse.WHEEL_UP
      MOUSE_WHEEL_DOWN := Mouse.WHEEL_DOWN
      WINDOW_RESIZE := Window.RESIZE
      WINDOW_CLOSE_BUTTON := Window.CLOSE_BUTTON
      ICON := 1
      BUTTON_RELEASE := 20
      BUTTON_PRESS := 21
      BUTTON_HELD := 22
      SELECTION_CHANGED := 40
      CONTENT_CHANGED := 50
      CURSOR_MOVED := 51
      VALUE_CHANGED := 55
      ACTION := 60
      TREE_NODE_EXPANSION := 70
      SIZER_PRESS := 80
      SIZER_DRAG := 81
      SIZER_RELEASE := 82
      MOUSE_ENTER := 94
      MOUSE_EXIT := 95
      KEY_PRESS := 100
      KEY_RELEASE := 101
      MOUSE_LEFT_DRAG_OVER := 201
      MOUSE_MIDDLE_DRAG_OVER := 202
      MOUSE_RIGHT_DRAG_OVER := 203
      MOUSE_LEFT_RELEASE_OVER := 204
      MOUSE_MIDDLE_RELEASE_OVER := 205
      MOUSE_RIGHT_RELEASE_OVER := 206
      GOT_FOCUS := 400
      LOST_FOCUS := 401
      DIALOG_DISPOSED := 500
      IN_POINT_CHAIN :=  501
      POPUP_CLOSED := 502
      INTERRUPTED := 503
      RESUMED := 504
   end
end

class Select()
   public static const 
      NONE,
      ONE,
      MANY

   private static init()
      NONE := "none"
      ONE := "one"
      MANY := "many"
   end
end

class Direction()
   public static const
      UP,
      DOWN,
      BEST

   private static init()
      UP := "up"
      DOWN := "down"
      BEST := "best"
   end
end

#
# Scale the given number using the current scale factor.
#
procedure scale(i)
   return integer(Gui.SCALE * i + 0.5)
end

#
# Scale, but don't round and convert to integer.
#
procedure scale_real(r)
   return Gui.SCALE * r
end

#
# Like `scale`, but ensure an odd number results.
#
procedure scale_odd(i)
   i := scale(i)
   if i % 2 = 0 then i +:= 1
   return i
end

#
# Like `scale`, but ensure an even number results.
#
procedure scale_even(i)
   i := scale(i)
   if i % 2 = 1 then i +:= 1
   return i
end

#
# Get a real-valued environment variable.  Fails if the variable isn't
# defined, returns the real value otherwise.  `min` and `max` provide
# optional bounds checking.
#
procedure env_real(s, min, max)
   local v
   v := System.getenv(s) | fail
   v := real(v) | runerr("Real value expected for " || s, v)
   if v < \min | v > \max then
      runerr("Value of " || s || " out of range", v)
   return v
end

#
# Get an integer-valued environment variable.  Fails if the variable isn't
# defined, returns the integer value otherwise.  `min` and `max` provide
# optional bounds checking.
#
procedure env_int(s, min, max)
   local v
   v := System.getenv(s) | fail
   v := integer(v) | runerr("Integer value expected for " || s, v)
   if v < \min | v > \max then
      runerr("Value of " || s || " out of range", v)
   return v
end

class Gui()
   public static const
      SCALE,
      UNIT

   public static 
      BORDER_WIDTH,
      CURSOR_WIDTH,
      FINE_WIDTH,
      TOOLBAR_ICON_SIZE,
      TEXT_INSET,
      X_INSET,
      Y_INSET,
      REPEAT_DELAY,            
      REPEAT_RATE,
      CURSOR_BLINK,
      IDLE_SLEEP,
      TAB_WIDTH,                 # Default tab char width
      style

   public static const 
      CONSTRAINT_SET,
      WATTRIB_SET,
      CONTEXT_WATTRIB_SET,      # attribs that affect the graphical drawing context
      PRINTABLE_1,              # Printable on a single line of text
      PRINTABLE_N               # Printable on multi lines of text


   #
   # Try to calculate a default value for SCALE
   #
   private static calc_scale1(w)
      local pix, mm, t
      pix := w.get_display_size() | fail
      mm := w.get_display_size_mm() | fail
      t := (pix[1] + pix[2]) / ((mm[1] + mm[2]) / 25.4) / 96.0
      # Round to nearest 1%
      t := integer(t * 100.0 + 0.5) / 100.0
      return (1.0 < t)
   end

   private static calc_scale()
      local w
      return use {
         w := Window(),
         calc_scale1(w)
      }
   end

   private static init()
      SCALE := env_real("OISCALE", 1.0) | calc_scale() | 1.0
      UNIT := scale(1)
      FINE_WIDTH := UNIT
      CURSOR_WIDTH := 2 * UNIT
      BORDER_WIDTH := 2 * UNIT
      TEXT_INSET := scale(3)
      X_INSET := scale(6)
      Y_INSET := scale(2)
      REPEAT_DELAY := env_int("OIRPTDELAY", 250) | 500
      REPEAT_RATE := env_int("OIRPTRATE", 50) | 100
      CURSOR_BLINK := env_int("OIBLINK", 100) | 400
      TAB_WIDTH := 8
      IDLE_SLEEP := 50
      TOOLBAR_ICON_SIZE := scale(24)
      style := Style()
      PRINTABLE_1 := '\x20-\x7e\x80-\U10ffff'
      PRINTABLE_N := '\t\n\x20-\x7e\x80-\U10ffff'
      CONSTRAINT_SET := set("x_tab", "y_tab", "eol", "x", "y", "w", "h", "l_inset", "r_inset", "t_inset", "b_inset", 
                            "x_fill", "y_fill", "x_align", "y_align", "x_weight", "y_weight")
      WATTRIB_SET := set("label", "x", "pos", "y", "resize", "size", "height", 
                         "width", "w", "h", "image", "canvas", "pointer", 
                         "display", "fg", "bg", "draw_op", "icon", "leading",
                         "font", "line_width", "geometry", "transient_for",
                         "line_style", "pattern", "clip", "unclip",
                         "dx", "dy", "input_mask", "min_width", "min_height", "min_size", "max_width", 
                         "max_height", "max_size")
      CONTEXT_WATTRIB_SET := set("fg", "bg", "draw_op", "font", "leading", "line_width", "line_style", "pattern")
   end

   public static is_constraint(s)
      return member(CONSTRAINT_SET, s)
   end

   public static is_window_attrib(s)
      return member(WATTRIB_SET, s)
   end
end

package procedure tab_ws()
   return tab(many(' \t\n\r'))
end

procedure is_image_string(v)
   v := text(v) | fail
   v ? {
      tab_ws()
      tab(many(&digits)) | fail
      tab_ws()
      ="," | fail
      return
   }
end

#
# A simple helper class for parsing an image string.
#
class ImageStringInfo()
   public
     width, height, pal, extra, data

   public new(s)
      s := string(s) | runerr(103, s)
      s ? {
         tab_ws()
         width := (0 < integer(tab(many(&digits)))) | return error("Width expected")
         tab_ws()
         ="," | return error("Comma expected")
         tab_ws()
         if any('cg') then {
            pal := (move(1) || tab(many(&digits))) | return error("Palette expected")
            tab_ws()
         }
         if any('(') then {
            move(1)
            extra := tab(upto(')')) | return error("Missing )")
            move(1)
            tab_ws()
         }
         ="," | return error("Comma expected")
         data := tab(0)
         if *data = 0 | *data % width ~= 0 then
            return error("Wrong number of image characters")
         height := *data / width
      }
      return
   end

   public static from_parts(width, pal, extra, data)
      local i
      i := Class.create_instance()
      i.width := width
      i.pal := pal
      i.extra := extra
      i.data := data
      if *data = 0 | *data % width ~= 0 then
         return error("Wrong number of image characters")
      i.height := *data / width
      return i
   end

   public to_image_string()
      local s
      s := width || ","
      s ||:= \pal
      s ||:= "(" || \extra || ")"
      return s || "," || data
   end
end

# Convert an image string to a `Pixels` object, based on the window
# `W` for hilite, shadow colours etc.
#
procedure image_string_to_Pixels(s, W)
   local q, k, v, r, w
   r := ImageStringInfo(s) | fail

   q := Pixels(r.width, r.height, Pixels.PALETTE8).
      set_data(r.data)
   # Add chars from palette, if specified.
   if \r.pal then {
      q.load_palette(r.pal) | {
         q.close()
         fail
      }
   }
   # Add extra chars
   if \r.extra then {
      r.extra ? repeat {
         tab_ws()
         k := move(1) | break
         ="=" | {
            q.close()
            return error("= expected")
         }
         v := tab(upto(';') | 0)
         v ? {
            w := tab(upto(', ') | 0)
            case w of {
               "hilite" : v := Gui.style.get_hilite_color(W)
               "shadow" : v := Gui.style.get_shadow_color(W)
               "fg" : v := W.get_fg()
               "bg" : v := W.get_bg()
               default : v := w
            }
            v ||:= tab(0)
         }
         move(1)
         q.set_palette(ord(k), v) | {
            q.close()
            return error("invalid colour in image spec: " || v)
         }
      }
   }
   return q
end

#
# Extended TextWidth function, handling tabs in s.  Returns the
# width of the string from positions i through j.
#
procedure text_width_ex(win, s, i, j, tw)
   if /i then {
      i := 1
      j := *s + 1
   } else {
      /j:= i + 1
      if j <= 0 then
         j +:= *s + 1
   }
   if not upto('\t', s) then
      return win.text_width(s[i:j])
   /tw := 8
   return win.text_width(detab(s[1:j], tw + 1)) - win.text_width(detab(s[1:i], tw + 1))
end

# Draw a string in the normal way, but including an underscore below
# the first character `k`.
#
procedure draw_string_ex(win, x, y, s, k)
   local i
   win.draw_string(x, y, s)
   if i := upto(\k, map(s)) then {
      win.fill_rectangle(x + win.text_width(s[1:i]),
                         y + win.get_font_descent() - Gui.FINE_WIDTH,
                         win.text_width(s[i]), Gui.FINE_WIDTH)
   }
end

#
# This utility takes a string or ucs and returns a string or ucs
# according to the target parameter.  Strings are assumed to be in
# iso-8859 format, rather than utf8 format.
#
procedure text_convert(s, target)
   s := text(s) | fail
   if type(s) == target then
      return s
   return case target of {
      "ucs": Text.iso_8859_1_to_ucs(s)
      "string": Text.ucs_to_iso_8859_1(s)
      default: runerr("Bad target type", target)
   }
end

#
# This utility takes a string or ucs and returns a string or ucs
# according to the target parameter.  The format of strings are
# guessed using the ucs() function; if that fails they are assumed to
# be in iso-8859 format.
#
procedure text_guess_convert(s, target)
   s := text(s) | fail
   return case target of {
      "ucs": ucs(s) | Text.iso_8859_1_to_ucs(s)
      "string": Text.ucs_to_iso_8859_1(ucs(s)) | s
      default: runerr("Bad target type", target)
   }
end

#
# Given a result from a selection request ({target_type} and {data}), produce
# a corresponding string or a ucs as appropriate.
#
procedure selection_convert(target_type, data)
   case target_type of {
      Selection.UTF8_STRING_TARGET : return ucs(data)
      Selection.STRING_TARGET : return string(data)
      default: fail
   }
end

procedure open_win_with(t)
   local w, e, v
   w := Window(t["display"]) | fail
   every e := !sort(t) do {
      v := e[2]
      case e[1] of {
         "label": w.set_label(v)
         "x": w.set_x(v)
         "pos":  w.set_pos(v[1],v[2])
         "y": w.set_y(v)
         "resize": w.set_resize(v)
         "size": w.set_size(v[1],v[2])
         "height": w.set_height(v)
         "width": w.set_width(v)
         "w": w.set_width(v)
         "h": w.set_height(v)
         "image": w.set_image(v)
         "pointer": w.set_pointer(v)
         "fg": w.set_fg(v)
         "bg": w.set_bg(v)
         "draw_op": w.set_draw_op(v)
         "icon": w.set_icon(v)
         "font": w.set_font(v)
         "leading": w.set_leading(v)
         "line_width": w.set_line_width(v)
         "geometry": w.set_geometry(v[1],v[2],v[3],v[4])
         "transient_for": w.set_transient_for(v)
         "line_style": w.set_line_style(v)
         "pattern": w.set_pattern(v)
         "clip": w.clip(v[1],v[2],v[3],v[4])
         "unclip": w.unclip()
         "dx": w.set_dx(v)
         "dy": w.set_dy(v)
         "input_mask": w.set_input_mask(v)
         "min_width": w.set_min_width(v)
         "min_height": w.set_min_height(v)
         "min_size": w.set_min_size(v[1],v[2])
         "max_width": w.set_max_width(v)
         "max_height": w.set_max_height(v)
         "max_size": w.set_max_size(v[1],v[2])
      }
   }
   w.erase_area()
   if v := member(t, "canvas") then {
      w.set_canvas(v) | {
         w.close()
         fail
      }
   }
   return w
end

procedure apply_context_table(w, t)
   local e, v
   every e := !sort(t) do {
      v := e[2]
      case e[1] of {
         "fg": w.set_fg(v)
         "bg": w.set_bg(v)
         "draw_op": w.set_draw_op(v)
         "font": w.set_font(v)
         "leading": w.set_leading(v)
         "line_width": w.set_line_width(v)
         "line_style": w.set_line_style(v)
         "pattern": w.set_pattern(v)
      }
   }
   return w
end

procedure clone_win_with(w, t)
   return apply_context_table(w.clone(), t)
end

procedure fresh_clone_win_with(w, t)
   local wt
   return use {
      wt := Window(w.get_display()).
         set_dx(w.get_dx()).
         set_dy(w.get_dy()),
      apply_context_table(w.couple(wt), t)
   }
end

#
# Produce a string which is an initial substring of s, but tries to
# fit into n pixels of width.  If truncation takes place, the result
# ends in "...".
#
procedure limit_text(W, s, n)
   local i, t
   t := s
   i := *s
   while i > 0 & W.text_width(t) > n do {
      t := s[1:i] || "..."
      i -:= 1
   }
   return t
end

#
# Given a string, font and width, return a `GridPaint` format string
# which splits the string up into multiple lines broken at the given
# width.
#
procedure split_string(s, f, n)
   local W, w, l, r
   use {
      W := Window().set_font(f),
      {
         r := ".cell\n.x_ialign l\n"
         l := ""
         every w := words(s) do {
            if *l > 0 then
               l ||:= " "
            l ||:= w
            if W.text_width(l) > n then {
               r ||:= l || "\n.br\n"
               l := ""
            }
         }
         if *l > 0 then
            r ||:= l || "\n.br\n"
      }
   }
   return r
end

abstract class HasOrientation()
   public 
      is_horizontal_flag

   #
   # Configure the orientation.
   #
   public set_is_horizontal(s)
      self.is_horizontal_flag := check_flag(s)
      return self
   end
end

#
# This is a Dialog whose only purpose is to retrieve a given selection.
# @example
# @ d := GetSelection(Selection.CLIPBOARD).show_modal()
# @ ... the clipboard is now stored in d.result (which may be null).
#
class GetSelection(Dialog)
   private readable
      result
   private
      sel

   private respond(target_type, data, e)
      result := data
      dispose()
   end

   public show()
      Dialog.show()
      # Now we have an underlying window, we can request the selection.
      request_selection(sel,
                        [Selection.UTF8_STRING_TARGET, Selection.STRING_TARGET], 
                        respond)
      return self
   end

   public new(sel)
      Dialog.new()
      set_canvas("withdrawn")
      set_size(100, 100)
      self.sel := sel
      return
   end
end

# This standardizes a toolbar button, and attempts to apply the
# optional Xdg icon (overwriting the one already set for the button).
# Failing that, or if `icon` is not given, the existing image is
# scaled to the standard size.  The button is then set to the standard
# toolbar button size.
#
procedure theme_toolbar_button(b, icon)
   local sz
   if is(b, IconButton) then
      b.set_paint(get_toolbar_theme_paint(b.paint, icon))
   else if is(b, MenuButton) then
      b.menu.set_paint_mid(b.menu.paint_mid, get_toolbar_theme_paint(icon))
   sz := Gui.TOOLBAR_ICON_SIZE + 2 * Gui.BORDER_WIDTH
   b.set_size(sz, sz)
   return b
end

package procedure get_toolbar_theme_paint(paint, icon)
   local k, w, sz
   sz := Gui.TOOLBAR_ICON_SIZE
   if k := Xdg.find_icon_and_cache(\icon, sz) then {
      w := ImageCache.get(k)
      if w.get_width() > sz then
         k := ImageCache.get_key_with_resize(k, sz, sz)
   } else if is(paint, ImagePaint) & k := \paint.image_cache then
      k := ImageCache.get_key_with_resize(k, sz, sz)
   else
      fail
   return ImagePaint().set_cache(k)
end

record Range(lo, hi)

#
# Return the intersection of the range f1-t1 and f2-t2, or
# fail if the ranges don't intersect, as a record
# with lo and hi members.  Example:
# range(2,20,10,30) = [10,20]
# 
procedure range(f1, t1, f2, t2)
   if f1 > t1 then f1 :=: t1
   if f2 > t2 then f2 :=: t2
   if t1 >= f2 & f1 <= t2 then {
      f1 <:= f2
      t1 >:= t2
      return Range(f1,t1)
   }
end

# Like `range` above, but require a result r where r.lo ~= r.hi.  This
# is useful if the ranges represent a string slice and we want a
# non-empty intersection.
#
procedure range1(f1, t1, f2, t2)
   local t
   if t := range(f1, t1, f2, t2) & t.lo ~= t.hi then
      return t
end

#
# Succeed iff the range f1-t1 is wholly contained within f2-t2
#
procedure contained(f1, t1, f2, t2)
   if f2 > t2 then f2 :=: t2
   if f2 <= f1 <= t2 & f2 <= t1 <= t2 then
      return
end

# This provides some logic to text components on whether or not their
# cursor should blink.
#
procedure dont_blink(comp)
   local c
   # If dialog is blocked, or a drag is in progress, don't blink
   if comp.parent_dialog.is_blocked() | \comp.parent_dialog.curr_drag  then
      return
   # If not in menu mode, blink
   c := comp.parent_dialog.in_menu_mode() | fail
   # If this component is the menu mode (eg SuggestField), blink
   if c === comp then
      fail
   # If this component is a child of the menu mode's popup (eg a textfield in
   # a DropDown's popup, such as Calendar), blink.
   if c.gen_popup_components() === comp.gen_parents() then
      fail
   # Otherwise, don't blink.
   return
end
