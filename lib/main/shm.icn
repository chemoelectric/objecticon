#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

$define LIB "objecticonipclib.so"

package ipc

import lang

#
# This class provides an inter process shared variable facility.  The implementation requires
# the accompanying C library objecticonipclib.so to be on the library path.
#
# Instances of this class should not be created directly, but rather using the static
# methods {open_public}, {create_public} and {create_private}
#
class Shm()
   private 
      id

   #
   # Set the value to the given object.  The object may be an arbitrary
   # Icon structure, and will be encoded into a string by the {encode()}
   # procedure.
   #
   public set_value(o)
      set_value_impl(encode(o))
   end

   private defer set_value_impl(s)

   #
   # Get the value of the object.
   #
   public get_value()
      return decode(get_value_impl())
   end

   private defer get_value_impl()

   #
   # Clean up the resources used by the variable.  This should be called by
   # the parent process after the shared variable is no longer needed.
   #
   public defer remove()

   #
   # Return the underlying id of the shared variable.
   #
   public get_id()
      return id
   end

   private static defer open_public_impl()
   private static defer create_public_impl()
   private static defer create_private_impl()

   private static init()
      Class.load_library(LIB)
   end

   private new(id)
      self.id := id
      return
   end

   #
   # Get an existing public shared variable with the given key, or fail
   # if no such shared variable exists.
   #
   public static open_public(key)
      return Shm(open_public_impl(key))
   end

   #
   # Create a new public shared variable with the given key and initial value
   #
   public static create_public(key, o)
      return Shm(create_public_impl(key, encode(o)))
   end

   #
   # Create a new private shared variable with the given initial value
   #
   public static create_private(o)
      return Shm(create_private_impl(encode(o)))
   end
end
