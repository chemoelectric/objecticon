#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui


############################################################################
#
#
#
class CanvasSliderDialog(CanvasComponentDialog)
   public 
      hi, 
      value,
      increment_size,
      lo, 
      snaps, 
      labels, 
      snaps_flag,
      labels_flag,
      ticks, 
      ticks_flag

   public validate_input()
      local hi_val, lo_val, init_val, ticks_val, labels_val, snaps_val, incr_val

      hi_val := numeric(hi.get_contents()) | return alert_error(self, "Hi is not numeric")
      lo_val := numeric(lo.get_contents()) | return alert_error(self, "Lo is not numeric")
      init_val := numeric(value.get_contents()) | return alert_error(self, "Init value is not numeric")
      incr_val := numeric(increment_size.get_contents()) | return alert_error(self, "Increment is not numeric")

      if ticks_flag.is_checked() then 
         ticks_val := numeric(ticks.get_contents()) | return alert_error(self, "Ticks is not numeric")

      if labels_flag.is_checked() then 
         labels_val := numeric(labels.get_contents()) | return alert_error(self, "Labels is not numeric")

      if snaps_flag.is_checked() then 
         snaps_val := numeric(snaps.get_contents()) | return alert_error(self, "Snaps is not numeric")

      if init_val < \lo_val | init_val > \hi_val then
         return alert_error(self, "Init value is outside range")

      return CanvasComponentDialog.validate_input()
   end

   public set_vals()
      local hi_val, lo_val, init_val, ticks_val, labels_val, snaps_val, incr_val

      hi_val := numeric(hi.get_contents())
      lo_val := numeric(lo.get_contents())
      init_val := numeric(value.get_contents())
      incr_val := numeric(increment_size.get_contents())

      if ticks_flag.is_checked() then 
         ticks_val := numeric(ticks.get_contents())

      if labels_flag.is_checked() then 
         labels_val := numeric(labels.get_contents())

      if snaps_flag.is_checked() then 
         snaps_val := numeric(snaps.get_contents())

      CanvasComponentDialog.set_vals()

      c.set_range(lo_val, hi_val)
      c.set_value(init_val)
      c.set_increment_size(incr_val)
      c.set_ticks(ticks_val)
      c.set_labels(labels_val)
      c.set_snaps(snaps_val)
   end

   public on_labels_flag(ev)
      labels.toggle_is_shaded()
   end

   public on_ticks_flag(ev)
      ticks.toggle_is_shaded()
   end

   public on_snaps_flag(ev)
      snaps.toggle_is_shaded()
   end

   public setup()
      local l, l3, l4, l5, p

      CanvasComponentDialog.setup()

      p := TabItem()
      p.set_layout(GridLayout().set_extra("borders"))
      add_tab_at_front(p)
      p.set_label("General")

      # Row 1
      l3 := Label()
      l3.set_label("Low")
      p.add(l3)
      lo := TextField()
      lo.set_size(scale(100))
      lo.set_contents("")
      p.add(lo)
      ticks_flag := CheckBox()
      ticks_flag.connect(self.on_ticks_flag, Event.ACTION)
      ticks_flag.set_label("Ticks")
      p.add(ticks_flag)
      ticks := TextField().set_constraint("eol", &yes)
      ticks.set_size(scale(100))
      ticks.set_contents("")
      p.add(ticks)

      # Row 2
      l4 := Label()
      l4.set_label("High")
      p.add(l4)
      hi := TextField()
      hi.set_size(scale(100))
      hi.set_contents("")
      p.add(hi)
      labels_flag := CheckBox()
      labels_flag.connect(self.on_labels_flag, Event.ACTION)
      labels_flag.set_label("Labels")
      p.add(labels_flag)
      labels := TextField().set_constraint("eol", &yes)
      labels.set_size(scale(100))
      labels.set_contents("")
      p.add(labels)

      # Row 3
      l := Label()
      l.set_label("Value")
      p.add(l)
      value := TextField()
      value.set_size(scale(100))
      value.set_contents("")
      p.add(value)
      snaps_flag := CheckBox()
      snaps_flag.connect(self.on_snaps_flag, Event.ACTION)
      snaps_flag.set_label("Snaps")
      p.add(snaps_flag)
      snaps := TextField().set_constraint("eol", &yes)
      snaps.set_size(scale(100))
      snaps.set_contents("")
      p.add(snaps)

      # Row 4
      l5 := Label()
      l5.set_label("Increment")
      p.add(l5)
      increment_size := TextField()
      increment_size.set_size(scale(100))
      increment_size.set_contents("")
      p.add(increment_size)

      lo.set_filter(&digits ++ '.\-')
      hi.set_filter(&digits ++ '.\-')
      value.set_filter(&digits ++ '.\-')
      ticks.set_filter(&digits ++ '.\-')
      labels.set_filter(&digits ++ '.\-')
      snaps.set_filter(&digits ++ '.\-')
      increment_size.set_filter(&digits ++ '.\-')

      hi.set_contents(c.hi)
      lo.set_contents(c.lo)
      value.set_contents(c.value)
      increment_size.set_contents(c.increment_size)

      if /c.ticks then {
         ticks.set_is_shaded(&yes)
      } else {
         ticks_flag.set_is_checked(&yes)
         ticks.set_contents(c.ticks)
      }

      if /c.labels then {
         labels.set_is_shaded(&yes)
      } else {
         labels_flag.set_is_checked(&yes)
         labels.set_contents(c.labels)
      }

      if /c.snaps then {
         snaps.set_is_shaded(&yes)
      } else {
         snaps_flag.set_is_checked(&yes)
         snaps.set_contents(c.snaps)
      }
   end
end


