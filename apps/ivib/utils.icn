#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui, ipl.graphics, io, graphics, ipl.lists

#
# Convert a list l to a string representation.
#
procedure contents_string(l)
   return "[" || list2str(l, ", ", image) || "]"
end


#
# Read icon from file s.  dialog is an instance of Dialog
#
procedure util_read_icon(dialog, s)
   if map(s)[-4:0] == (".gif"|".jpg"|".jpeg") then
      return read_gif_icon(dialog, s)
   else
      return read_string_icon(dialog, s)
end


#
# Read a standard gif icon.
#
procedure read_gif_icon(dialog, s)
   local w, raw

   w := Window.open("canvas=hidden")
   w.set_image(s) | return alert_error(dialog, "Couldn't load image file " || s)
   raw := Capture(w, "c6")
   w.close()

   return raw
end


#
# Read a standard Icon string formatted icon.
#
procedure read_string_icon(dialog, s)
   local res, x, f

   f := open(s) | return alert_error(dialog, "Couldn't open file " || s)

   res := ""
   while x := read(f) do {
      x ? {
         if ="#" then
            next

         ="\""
         res ||:= tab(0)
      }

      if res[-1] == "_" then
         res[-1] := ""
      else
         break
   }

   close(f)

   #
   # Check for reasonably valid image 
   #
   if image_height(res) then
      return res
   else   
      return alert_error(dialog, "Not a valid image")
end


#
# Check that the window attributes in list l are valid.
#
procedure util_check_attribs(dialog, t)
   local s, e
   static test_win
   initial
      test_win := Window.open("canvas=hidden") | stop("couldn't open window")

   # Check for attrib names
   every s := !sort(t) do {
      if not member(Gui.WATTRIB_SET, s[1]) then
         return alert_error(dialog, "Invalid attribute " || s[1])
   }

   # Check no attrib values give runtime errors when set.
   &handler := &current
   errorclear()
   e := create {
      every s := !sort(t) do {
         test_win.attrib(s[1] || "=" || s[2])
      }
   }
   @e
   &handler := &null
   if &errornumber then
      return alert_error(dialog, "Invalid value " || s[2] || " for attrib " || s[1])

   return
end


procedure resolve_layout_filename(src, layout)
   local t, xl

   t := Files.get_path(src)

   # Work out the expanded layout, with $ expanded to the
   # file name, less the .icn extension.
   layout ? {
      if xl := tab(upto('$')) then {
         xl ||:= t.get(-1)
         if xl[-4:0] == ".icn" then
            xl[-4:0] := ""
         move(1)
         xl ||:= tab(0)
      } else
         xl := layout
   }

   # Append the expanded layout string to the directory
   # part of the src file.
   if t := t.parent() then
      return t.append(Files.get_path(xl)).str()
   else
      return xl
end


procedure center_string(win, x, y, s, k)
   draw_string_ex(win, 
                x - win.text_width(s) / 2, 
                y - win.get_font_height() / 2, 
                s, k)
end


#
# Display an error message
#
procedure alert_error(d, a)
   if string(a) then
      a := [a]
   InfoDialog(a, "Information", "Okay").show_modal(d)
end

