import mail, util, lang, io

procedure test_folding()
   local m,i,spc,j,word,k,s,t
   m := Message()

   every i := 1 to 4 do {
      spc := repl(" ", i)
      every j := 1 to 10 do {
         word := repl("x", j)
         every k := 20 to 40 do {
            s := repl(word || spc, k) || word
            t := Message.fold(s)
            unfold(t) == s | write("Folding failed: ", image(s))
         }
      }
   }
end

procedure unfold(t)
   local s
   s := ""
   t ? {
      while s ||:= tab(find("\r\n") | 0) do {
         if pos(0) then
            return s
         move(2)
         any(' \t') | stop("CRLF followed by non-ws")
      }
   }
end

procedure test_canonical_handling()
   local m
   m := Message()
   m.set_content_transfer_encoding("quoted-printable")
   m.set_content_object("abc\ndef")
   print{"Canonical content object", m.get_content_object()}
end

procedure test_quoted_printable_impl(x)
   local qp,s,t
   qp := QuotedPrintableHandler()

   s := qp.encode_data(,x)
   t := qp.decode_data(,s)

   x == t | stop("Quoted printable test failed on:", image(x), ":s=",image(s),"t=",image(t))
end

procedure test_quoted_printable()
   local i
   every i := 1 to 200 do {
      test_quoted_printable_impl(repl(" ", i))
      test_quoted_printable_impl(repl("\n ", i))
      test_quoted_printable_impl(repl(" \n ", i))
   }

   test_quoted_printable_impl(string(&ascii))
   test_quoted_printable_impl(repl("x", 200))
   test_quoted_printable_impl("")
   test_quoted_printable_impl("\n\n\r\r\n\n")
   test_quoted_printable_impl("\r\n\n\r\r\n\n\n\r\n\r\r\n")
   test_quoted_printable_impl("")
   test_quoted_printable_impl("abc")
   test_quoted_printable_impl("abc ")
   test_quoted_printable_impl("abc  ")
   test_quoted_printable_impl("abc\n  \n   ")
end

procedure test_base64_impl(x)
   local bh,s,t

   bh := Base64Handler()

   s := bh.encode_data(,x) | stop("Couldn't encode ",x)
   t := bh.decode_data(,s) | stop("Couldn't decode ",image(s)," ",&why)

   x == t | stop("base64 failed on ", image(x), ":s=",image(s),"t=",image(t))
end

procedure test_base64()
   local m,bin,s,m2,bin2
   test_base64_impl("abc")
   test_base64_impl("  ")
   test_base64_impl("\n\n\n\n")
   test_base64_impl(string(&ascii))
   test_base64_impl(repl("x", 200))
   test_base64_impl("")

   m := Message()
   m.set_content_transfer_encoding("base64")
   bin := "hereissomebinarydata"
   m.set_decoded_content(bin) | stop("failed to encode base64 data")
   s := m.to_rfc822()
   m2 := Message()
   m2.parse(s)
   bin2 := m.get_decoded_content() | stop("base64 failed to decode content ", &why)
   bin == bin2 | stop("base64 - different binary content")
end

procedure test_mailboxes()
   test_mailbox("\"Kevin Blanchard\" <k.blanchard@viviance.com>")
   test_mailbox("Kevin Blanchard <k.blanchard@viviance.com>")
   test_mailbox("\"Ke\\(vin Blanchard\" <k.blanchard@[vi\\[viance].[doo\\(dle].[\\.com]>")
   test_mailbox("rparlett@viviance.com")
   test_mailbox("< rparlett@viviance.com >", "rparlett@viviance.com")
   test_mailbox("Muhammed.(I am  the greatest) Ali @(the)Vegas.WBA", "Muhammed.Ali@Vegas.WBA")
   test_mailbox("\":sysmail\"@  Some-Group. Some-Org", "\":sysmail\"@Some-Group.Some-Org")
   test_mailbox("<rparlett@viviance.com>", "rparlett@viviance.com")
   test_mailbox("Pompous Person <WhoZiWhatZit@Cordon-Bleu>")
   test_mailbox("Childs@WGBH.Boston")
   test_mailbox("Galloping.Gourmet@ANT.Down-Under (Australian National Television)", "Galloping.Gourmet@ANT.Down-Under")
   test_mailbox("Cheapie@Discount-Liquors")
end

procedure test_mailbox(s, c)
   local a
   /c := s
   a := Mailbox(s) | stop("Couldn't make a Mailbox from:" ,s)
   yes_no{"Mailbox rfc822 on " || s, a.to_rfc822() == c}
end

procedure test_groups()
   test_group("A group: rparlett@viviance.com, smith@nowhere.com ;")
   test_group("The Committee: Jones@Host.Net, Smith@Other.Org, Doe@Somewhere-Else ;")
   test_group("Gourmets:  Pompous Person <WhoZiWhatZit@Cordon-Bleu>, Childs@WGBH.Boston, Galloping.Gourmet@ANT.Down-Under (Australian National Television), Cheapie@Discount-Liquors ;", "Gourmets: Pompous Person <WhoZiWhatZit@Cordon-Bleu>, Childs@WGBH.Boston, Galloping.Gourmet@ANT.Down-Under, Cheapie@Discount-Liquors ;")
   test_group("Cruisers: Port@Portugal, Jones@SEA ;")
   test_group(": thing@dodo.com ;")
   test_group("Important folk: Tom Softwood <Balsa@Tree.Root>, \"Sam Irving\"@Other-Host ;")
   test_group("Standard Distribution: /main/davis/people/standard@Other-Host, \"<Jones>standard.dist.3\"@Tops-20-Host ;")
   test_group("\"A more complex gr\\<oup\": rparlett@viviance.com, \"Ke\\(vin Blanchard\" <k.blanchard@[vi\\[viance].[doo\\(dle].[\\.com]> ;")
end

procedure test_group(s, c)
   local g
   /c := s
   g := Group(s) | stop("Couldn't make a Group from:" ,s)
   yes_no{"Group rfc822 on " || s, g.to_rfc822() == c}
end

procedure test_times()
   local z1
   z1 :=Timezone("EST") | stop()
   print{"Z1.id", z1.get_id()}
   print{"Z1.offset", z1.get_offset()}

   test_time("Wed, 2 Jan 2002 18:08:03 -0500")
   test_time("17 Jan 2002 18:07:41 +0100", "Thu, 17 Jan 2002 18:07:41 +0100")
   test_time("Fri, 11 Jan 2002 15:28:03 +0100")
   test_time("Fri, 11 Jan 2002 15:28:03 PDT")
end

procedure test_time(s, c)
   local p, ti
   /c := s
   p := RFC822Parser()
   ti := p.parse_date_time(s) | stop("Couldn't parse time:", s)
   yes_no{"Time rfc822 test on " || s, c == ti.to_rfc822()}
end

procedure show_address_list(h, l)
   local i
   l := get_all_mailboxes(l)
   write("field ", h)
   every i := 1 to *l do write(i,": ",to_string(l[i]))
end

procedure testmsg1()
   local m
   m := Message()
   m.set_from(Mailbox("rparlett@viviance.com"))
   m.set_to(Mailbox("jsoap@soap.com"))
   m.add_to(Group("People: smit@kjadf.com,plog@rog.com;"))
   m.set_subject("here is the subject")
   m.set_content("here is the content")
   m.add_header("Custom", "value") 
   m.show_headers()

   every write(m.generate_all_header_lines())
end

procedure testsmtp()
   local m,t
   m := Message()
   m.set_from(Mailbox("\"Billy Bob Parlett\" <rparlett@viviance.com>"))
   m.set_to(Mailbox("\"Robert Parlett\" <rparlett@tweedle.bracknell>"))
   m.set_content("here it is")
   m.set_subject("the subject")
   m.set_header("X-Oddball", "doodle")

   t := SmtpClient()
   t.set_hostname("tweedle.bracknell")
   t.set_logging(1)
   t.connect() | stop(&why)
   t.send_message(m) | stop(&why)
   t.send_message(m) | stop(&why)
   t.disconnect() |  stop(&why)

end

procedure test_date()
   local m,t,t2
   m := Message()

   # Set a time 1 March, 2003 9:45:30am UTC
   t := Time(2003, 3, 1, 9, 45, 30, Timezone.UTC_TIMEZONE)
   m.set_date(t)
   print{"M1.date header", m.get_first_header("Date")}
   t2 := m.get_date() | stop("Couldn't get date from M1")
   yes_no{"M1.seconds check", t2.get_seconds() = t.get_seconds()}
end

procedure test_from()
   local m,s,mb,mb2
   m := Message()

   s := "\"Robert Parlett\"    <r.parlett @ somewhere.com>"
   mb := Mailbox(s) | stop("Couldn't make Mailbox")
   
   m.set_from(mb)
   yes_no{"MB1.from rfc822", m.get_first_header("From") == mb.to_rfc822()}

   mb2 := m.get_from()[1] | stop("Couldn't get mailbox from message")

   yes_no{"MB2.rfc822", mb2.to_rfc822() == mb.to_rfc822()}
end

procedure test_to()
   local m,s,g,g2
   m := Message()

   s := "Cruisers: Port@Portugal, Jones@SEA ;"
   g := Group(s) | stop("Couldn't make group:",s)

   m.set_to(g)
   yes_no{"G1.rfc822",  m.get_first_header("To") == g.to_rfc822()}

   g2 := m.get_to()[1] | stop("G2: Couldn't get group")
   yes_no{"G2.rfc822", g2.to_rfc822() == g.to_rfc822()}
end

procedure test_1521()
   local p,d,s,ct
   p := RFC822Parser()

   d := p.parse_content_disposition("attachment ; filename=\"abc.xml\"") | stop("Couldn't parse ContentDisposition")
   print{"CD1.filename", d.get_parameter("filename")}

   d := p.parse_content_disposition("attachment ; filename=abc.xml") | stop("Couldn't parse ContentDisposition")
   print{"CD2.filename", d.get_parameter("filename")}

   every s := "application/xml"| "image/jpeg ; (robert) x=1;y=2;z=3" | "junk" do
      yes_no{"Parse content type " || s, p.parse_content_type(s)}

   ct := p.parse_content_type("application/xml; (comment) x=\"hello dolly\";y=there") | stop("Couldn't parse ContentType")
   print{"CT1.type", ct.type}
   print{"CT1.subtype", ct.subtype}
   print{"CT1.param x", ct.get_parameter("x")}
   print{"CT1.param y",   ct.get_parameter("y")}
end

procedure test_message()
   local m, dt, mb

   mb := Mailbox("robert@abc.com")
   dt := Time(2003, 3, 1, 9, 45, 30, Timezone.UTC_TIMEZONE)

   m := Message("content=123")
   print{"M1.content", m.content}

   m := Message("date=",dt)
   yes_no{"M2.date header", m.get_first_header("Date")}

   m := Message("to=",mb)
   yes_no{"M3.rfc check", m.get_first_header("To") == mb.to_rfc822()}

   m := Message("reply_to=",mb)
   yes_no{"M4.rfc check",    m.get_first_header("Reply-To") == mb.to_rfc822()}

   m := Message("resent_to=",mb)
   yes_no{"M5.rfc check",    m.get_first_header("Resent-To") == mb.to_rfc822()}

   m := Message("cc=",mb)
   yes_no{"M6.rfc check",    m.get_first_header("CC") == mb.to_rfc822()}

   m := Message("resent_cc=",mb)
   yes_no{"M7.rfc check",    m.get_first_header("Resent-CC") == mb.to_rfc822()}

   m := Message("bcc=",mb)
   yes_no{"M8.rfc check",    m.get_first_header("BCC") == mb.to_rfc822()}

   m := Message("resent_bcc=",mb)
   yes_no{"M9.rfc check",    m.get_first_header("Resent-BCC") == mb.to_rfc822()}

   m := Message("from=",mb)
   yes_no{"M10.rfc check",    m.get_first_header("From") == mb.to_rfc822()}

   m := Message("sender=",mb)
   yes_no{"M11.rfc check",    m.get_first_header("Sender") == mb.to_rfc822()}

   m := Message("resent_from=",mb)
   yes_no{"M12.rfc check",    m.get_first_header("Resent-from") == mb.to_rfc822()}

   m := Message("resent_sender=",mb)
   yes_no{"M13.rfc check",    m.get_first_header("Resent-sender") == mb.to_rfc822()}

   m := Message("resent_date=",dt)
   print{"M14.date header", m.get_first_header("Resent-Date")}

   m := Message("content_type=",ContentType("text/html"))
   print{"M15.content type", m.get_first_header("Content-type")}

   m := Message("content_disposition=",ContentDisposition("attachment ; filename=abc.xml")) |
      stop("Failed to create Message")
   print{"M16.content disposition", 
            m.get_first_header("Content-disposition")}

   m := Message("content_transfer_encoding=quoted-printable")
   print{"M17.content transfer encoding", m.get_first_header("Content-Transfer-Encoding")}

   m := Message("subject=ABCD")
   print{"M18.subject", m.get_subject()}

   m := Message()
   print{"M19.subject", m.get_subject()}

end

procedure test_content_type()
   local c

   yes_no{"Bad ContentType", ContentType("junk")}
   yes_no{"Good ContentType", ContentType("junk/stuff")}
   yes_no{"Empty ContentType", ContentType()}

   c := ContentType("text/html") | stop("Couldn't create ContentType")
   print{"Content type 1", c.to_rfc1521()}

   c := ContentType()
   yes_no{"Parse content type 1", 
             c.parse("text/html; one=p-one; two=\"p-two\"; three = p-three")}
   print{"Content param one", c.get_parameter("one")}
   print{"Content param two", c.get_parameter("two")}
   print{"Content param three", c.get_parameter("three")}

   c := ContentType("text/plain; (Fred) charset=\"us-ascii\" (Plain text)") |
      stop("Couldn't create ContentType")
   print{"Content type 2", c.to_rfc1521()}

   c := ContentType()
   yes_no{"Parse content type 2", 
             c.parse("application/x-stuff; title*=us-ascii'en-us'This%20is%20%2A%2A%2Afun%2A%2A%2A")}
end

procedure test_content_disposition()
   local c, t

   t := Time(2003, 3, 1, 9, 45, 30, Timezone.UTC_TIMEZONE)

   yes_no{"Bad ContentDisposition", ContentDisposition("junk")}
   yes_no{"Good ContentDisposition", ContentDisposition("attachment; filename=junk")}
   yes_no{"Empty ContentDisposition", ContentDisposition()}

   c := ContentDisposition("attachment; filename=fred.xml") |
      stop("Couldn't create ContentDisposition")
   print{"Parameter", c.get_parameter("filename")}
   print{"Filename", c.get_filename()}

   c := ContentDisposition()
   yes_no{"CD1.Parse",
          c.parse("attachment; creation-date=\"Sat, 1 Mar 2003 09:45:30 UTC\"")}
   print{"CD1.date", c.get_parameter("creation-date")}
   yes_no{"CD1.date=t", equals(c.get_creation_date(), t)}

   c := ContentDisposition()
   c.set_creation_date(t)
   print{"CD2.date", c.get_parameter("creation-date")}

   c := ContentDisposition()
   yes_no{"CD2.parse",
             c.parse("attachment; modification-date=\"Sat, 1 Mar 2003 09:45:30 UTC\"")}
   print{"CD2.moddate", c.get_parameter("modification-date")}
   yes_no{"CD2.moddate=t", equals(c.get_modification_date(), t)}

   c := ContentDisposition()
   c.set_modification_date(t)
   print{"CD3.moddate", c.get_parameter("modification-date")}
   yes_no{"CD3.moddate=t", equals(c.get_modification_date(), t)}

   c := ContentDisposition()
   yes_no{"CD4.parse",
             c.parse("attachment; read-date=\"Sat, 1 Mar 2003 09:45:30 UTC\"")}
   print{"CD4.readdate", c.get_parameter("read-date")}
   yes_no{"CD4.readdate=t", equals(c.get_read_date(), t)}

   c := ContentDisposition()
   c.set_type("attachment")
   c.set_read_date(t)
   print{"CD5.readdate", c.get_parameter("read-date")}
   print{"CD5.rfc1521", c.to_rfc1521()}

   c := ContentDisposition()
   yes_no{"CD5.parse", c.parse("attachment; size=2000")}
   print{"CD5.size param", c.get_parameter("size")}
   print{"CD5.get_size", c.get_size()}

   c := ContentDisposition()
   c.set_size(2000)
   print{"CD6.size param", c.get_parameter("size")}
   print{"CD6.junk param", c.get_parameter("junk")}

   c := ContentDisposition()
   yes_no{"CD6.parse", c.parse("attachment; one=p-one; two=\"p-two\"; three = p-three")}
   print{"CD6.param one", c.get_parameter("one")}
   print{"CD6.param two", c.get_parameter("two")}
   print{"CD6.param three", c.get_parameter("three")}

   c := ContentDisposition()
   yes_no{"CD7.parse 1", 
             c.parse("attachment; filename=genome.jpeg; modification-date=\"Wed, 12 Feb 1997 16:29:51 -0500\"")}
   yes_no{"CD7.parse 2",
             c.parse("attachment; filename==?UTF-8?B?cm9zZV8wMDcucmFy?=")}

   yes_no{"CD7.parse 3",
             c.parse("attachment; filename*=UTF-8''filename.zip")}
end

procedure test_message1()
   local p,ct,cd,q,mp,m,s,z,img,xml

   # A part (gif)
   p := Message()
   ct := ContentType("image/gif") | stop("Couldn't construct ContentType")
   cd := ContentDisposition("attachment; filename=\"babbage.gif\"") |
      stop("Couldn't construct ContentDisposition")
   p.set_content_disposition(cd)
   p.set_content_type(ct) 
   p.set_content_transfer_encoding("base64")
   p.set_decoded_content(img := Files.file_to_string("babbage.gif"))

   # Another part
   q := Message()
   ct := ContentType("text/xml") | stop("Couldn't construct ContentType")
   cd := ContentDisposition("attachment; filename=\"some.xml\"") |
      stop("Couldn't construct ContentDisposition")
   q.set_content_disposition(cd)
   q.set_content_type(ct) 
   q.set_content_transfer_encoding("quoted-printable")
   q.set_content_object(xml := "<xml>\n<tag>\ndata<tag><xml>\n") | 
      stop("Couldn't set content object:", &why)

   mp := Multipart()
   mp.set_preamble("Preamble")
   mp.set_epilogue("Eplogue")
   mp.add_part(p)
   mp.add_part(q)

   m := Message()
   m.set_header("Content-Type", "multipart/thing")
   m.set_content_object(mp) | stop("Failed to set_content_object:",&why)
   m.set_subject("Here is some stuff")
   m.set_from(Mailbox("rparlett@localhost"))
   m.set_to(Mailbox("rparlett@localhost"))

   # Parse the string value back to a message, and see if we can extract the same
   # image and xml values.
   #
   s := m.to_rfc822()
   z := Message()
   z.parse(s)

   yes_no{"Test decoded content", 
             z.get_content_object().parts[1].get_decoded_content() == img}
   yes_no{"Test content object",
             z.get_content_object().parts[2].get_content_object() == xml}
end

procedure test_message2()
   local m,s,z,orig

   m := Message()
   m.set_content_object(orig := repl("a", 300))
   s := m.to_rfc822()
   z := Message()
   z.parse(s)
   yes_no{"Test same content object 1", z.get_content_object() == orig}

   m := Message()
   m.set_content_transfer_encoding("base64")
   m.set_content_object(orig := repl("a", 300))
   s := m.to_rfc822()
   z := Message()
   z.parse(s)
   yes_no{"Test same content object 2", z.get_content_object() == orig}

   m := Message()
   m.set_content_transfer_encoding("quoted-printable")
   m.set_content_object(orig := repl("a", 300))
   s := m.to_rfc822()
   z := Message()
   z.parse(s)
   yes_no{"Test same content object 3", z.get_content_object() == orig}
end

procedure test_message3()
   local orig,p,m,s,z,p2
   orig := "the quick brown fox"

   p := Message()
   p.set_header("Content-Type", "text/plain")
   p.set_header("From", "Robert<parlett@gyre.com>")
   p.set_content(orig)

   m := Message()
   m.set_header("Content-Type", "message/rfc822")
   m.set_content_object(p) | stop("Failed to set_content_object:",&why)

   s := m.to_rfc822()
   z := Message()
   z.parse(s)
   p2 := z.get_content_object() | stop("Couldn't get content object")

   yes_no{"Test same content", p2.get_content() == orig}
end

procedure test_message_errors()
   local m 
   m := Message()
   m.set_header("to","people: smith@xyz.com,jsoap@soap\"suds.co.uk ;")
   print{"M1.Get to",m.get_to() }
   print{"M1.Get reason", &why}

   m := Message()
   print{"M2.Get to",m.get_to() }
   print{"M2.Get reason", &why}

   m := Message()
   m.set_header("to","fred\"")
   print{"M3.Get to",m.get_to() }
   print{"M3.Get reason", &why}

   m := Message()
   m.set_header("to","fred@abc.com")
   print{"M4.Get to",m.get_to() }
end

procedure main()
   test_message1()
   test_message2()
   test_message3()
   test_message_errors()
   test_content_type()
   test_content_disposition()
   test_message()
   test_folding()
   test_times()
   test_to()
   test_mailboxes()
   test_groups()
   test_date()
   test_from()
   test_1521()
   test_canonical_handling()
   test_quoted_printable()
   test_base64()
   write("ok")
end
