#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import util, lang, io, graphics

$define X_PADDING_INC 5

#
# This class holds the several {TabItem}s, and represents a tabbed pane.
#
# A Event.SELECTION_CHANGED is fired whenever the tab is changed via
# user interaction.
#
class TabSet(Component)
   public 
      which_one,
      which_highlight,
      tab_h,
      label_h,
      line_break,
      no_click_focus_flag,
      prefer_one_row_flag,
      old_which_one,
      tabs_at_bottom_flag,
      remember_focus_flag,
      may_drag

   # Vertical layout :-
   #           border top margin
   #           label_h - max tab label height ) row 1 ) tab_h
   #           Gui.BORDER_WIDTH               )       )
   #           label_h                        ) row 2 )
   #           Gui.BORDER_WIDTH               )       )
   #           tab content height
   #           border bottom margin
   # Thus the total height is border.get_total_height() + content height
   #                            + num lines * (label_h + Gui.BORDER_WIDTH)
   # Note that on display(), a further Gui.BORDER_WIDTH is drawn above the first
   # row, inside the border top margin area.
   #
   # Horizontal layout, say for 3 tab labels. :-
   #
   #           border left margin
   #           label 1 width
   #           2 * Gui.BORDER_WIDTH
   #           label 2 width
   #           2 * Gui.BORDER_WIDTH 
   #           label 3 width
   #           border right margin
   #
   # So the width of the row is border.get_total_width() + total label width +
   #                  (num labels in row - 1) * (2 * Gui.BORDER_WIDTH)
   # Note again that an extra Gui.BORDER_WIDTH is painted inside the left and right
   # margin area.
   #

   #
   # If set, then the tabs are at the bottom, not the top.
   #
   public set_tabs_at_bottom(s)
      self.tabs_at_bottom_flag := check_flag(s)
      return self
   end

   #
   # If set, then a tab remembers if it had focus when it was
   # deselected, and restores it when it is reselected.  This only
   # really makes sense with no-click-focus set, except when switching
   # tabs programatically.
   #
   public set_remember_focus(s)
      self.remember_focus_flag := check_flag(s)
      return self
   end

   #
   # Set the no-click-focus behaviour.  If set, the component will
   # not get the focus on a left click.
   #
   public set_no_click_focus(s)
      self.no_click_focus_flag := check_flag(s)
      return self
   end

   #
   # Set the draggable tabs behaviour.  If set, the tabs can be moved.
   #
   public set_draggable_tabs(s)
      allow_drop_flag := allow_drag_flag := check_flag(s)
      return self
   end

   #
   # If this is set, the preferred width will return a value big
   # enough to accommodate a single row of tabs.
   #
   public set_prefer_one_row(s)
      self.prefer_one_row_flag := check_flag(s)
      return self
   end

   public keeps(e)
      return member(Key.CURSOR_H, e.code)
   end

   public focus_changed(e) 
      invalidate_tab_region()
   end

   public invalidate_tab_region()
      local r
      is_live() | fail
      r := if /self.tabs_at_bottom_flag then
         Rect(self.x + border.get_l_inset(), self.y + border.get_t_inset(), self.w - border.get_total_width(), self.tab_h)
      else
         Rect(self.x + border.get_l_inset(), self.y + self.h - border.get_b_inset() - self.tab_h, self.w - border.get_total_width(), self.tab_h)
      return invalidate(r)
   end

   public display_tabs_at_top()
      local l, c, ypos, nx, cc, W

      ypos := self.y + border.get_t_inset()

      use {
         W := cbwin.clone(), 
         {
            every l := !self.line_break do {
               every c := !l do {
                  if cbwin.drawable(c.tab_x - Gui.BORDER_WIDTH, ypos - Gui.BORDER_WIDTH,
                                    c.tab_w + 2 * Gui.BORDER_WIDTH, self.label_h + 2 * Gui.BORDER_WIDTH) then 
                  {
                     draw_shadow_segment("e",
                                         c.tab_x - Gui.BORDER_WIDTH + c.tab_w + 2 * Gui.BORDER_WIDTH - 1, 
                                         ypos - Gui.BORDER_WIDTH, self.label_h + 2 * Gui.BORDER_WIDTH)
                     draw_hilite_segment("w",
                                         c.tab_x - Gui.BORDER_WIDTH, ypos - Gui.BORDER_WIDTH, 
                                         self.label_h + 2 * Gui.BORDER_WIDTH)
                     draw_hilite_segment("n",
                                         c.tab_x - Gui.BORDER_WIDTH, ypos - Gui.BORDER_WIDTH, 
                                         c.tab_w + 2 * Gui.BORDER_WIDTH)

                     if cc := cbwin.drawable(c.tab_x, ypos, c.tab_w, self.label_h) then {
                        W.clip!cc
                        c.draw_label(W, 
                                     c.tab_x, 
                                     ypos, 
                                     c.tab_w, 
                                     self.label_h,
                                     Yes{ has_focus() & is_unshaded() & c === self.which_one },
                                     Yes{ c === self.which_highlight })
                     }
                  }
               }
               ypos +:= self.label_h + Gui.BORDER_WIDTH
            }
         }
      }

      #
      # Display line under tabs.
      #
      draw_hilite_segment("s",
                          self.x,
                          self.y + border.get_t_inset() + self.tab_h - 1,
                          self.which_one.tab_x - Gui.BORDER_WIDTH - self.x)

      # The x of the next one along (if any)
      nx := self.which_one.tab_x + Gui.BORDER_WIDTH + self.which_one.tab_w - 1
      draw_hilite_segment("s",
                          nx, self.y + border.get_t_inset() + self.tab_h - 1,
                          self.x + self.w - nx)
   end

   public display_tabs_at_bottom()
      local l, c, ypos, nx, cc, W

      ypos := self.y + self.h - border.get_b_inset() - self.label_h
      
      use {
         W := cbwin.clone(), 
         {
            every l := !self.line_break do {
               every c := !l do {

                  if cbwin.drawable(c.tab_x - Gui.BORDER_WIDTH, ypos - Gui.BORDER_WIDTH,
                                    c.tab_w + 2 * Gui.BORDER_WIDTH, self.label_h + 2 * Gui.BORDER_WIDTH) then 
                  {

                     draw_shadow_segment("e",
                                         c.tab_x - Gui.BORDER_WIDTH + c.tab_w + 2 * Gui.BORDER_WIDTH - 1, 
                                         ypos - Gui.BORDER_WIDTH, self.label_h + 2 * Gui.BORDER_WIDTH)
                     draw_hilite_segment("w",
                                         c.tab_x - Gui.BORDER_WIDTH, ypos - Gui.BORDER_WIDTH, 
                                         self.label_h + 2 * Gui.BORDER_WIDTH)
                     draw_hilite_segment("s",
                                         c.tab_x - Gui.BORDER_WIDTH, ypos + label_h + Gui.BORDER_WIDTH - 1, 
                                         c.tab_w + 2 * Gui.BORDER_WIDTH)

                     if cc := cbwin.drawable(c.tab_x, ypos, c.tab_w, self.label_h) then {
                        W.clip!cc
                        c.draw_label(W, 
                                     c.tab_x, 
                                     ypos, 
                                     c.tab_w, 
                                     self.label_h,
                                     Yes{ has_focus() & is_unshaded() & c === self.which_one })
                     }
                  }
               }
               ypos -:= self.label_h + Gui.BORDER_WIDTH
            }
         }
      }

      ypos +:= self.label_h + Gui.BORDER_WIDTH

      #
      # Display line under tabs.
      #
      draw_hilite_segment("n",
                          self.x, self.y + self.h - border.get_b_inset() - self.tab_h,
                          self.which_one.tab_x - Gui.BORDER_WIDTH - self.x)

      # The x of the next one along (if any)
      nx := self.which_one.tab_x + Gui.BORDER_WIDTH + self.which_one.tab_w - 1
      draw_hilite_segment("n",
                          nx, self.y + self.h - border.get_b_inset() - self.tab_h,
                          self.x + self.w - nx)
   end

   public display()
      local r
      r := get_cbwin_clip()
      
      #
      # Display outline of tabbed pane area.
      #
      border.draw_rect(self.cbwin, self)

      #
      # Display all tabs.
      #
      if /self.tabs_at_bottom_flag then {
         if r.y < self.y + border.get_t_inset() + self.tab_h then
            display_tabs_at_top()
      } else {
         if r.y + r.h > self.y + self.h - border.get_b_inset() - self.tab_h then
            display_tabs_at_bottom()
      }

      #
      # Display contents of current tab into buffer
      #
      display_child(which_one)
   end

   public draw_shadow_segment(loc, x, y, len)
      local i
      if len < Gui.BORDER_WIDTH then
         fail
      every i := 0 to Gui.BORDER_WIDTH - 1 do {
         case loc of {
            "e": Gui.style.fill_shadow_rectangle(self.cbwin, x - i, y + i, 1, len - 2 * i)
            "w": Gui.style.fill_shadow_rectangle(self.cbwin, x + i, y + i, 1, len - 2 * i)
            "n": Gui.style.fill_shadow_rectangle(self.cbwin, x + i, y + i, len - 2 * i, 1)
            "s": Gui.style.fill_shadow_rectangle(self.cbwin, x + i, y - i, len - 2 * i, 1)
         }
      }
   end

   public draw_hilite_segment(loc, x, y, len)
      local i
      if len < Gui.BORDER_WIDTH then
         fail
      every i := 0 to Gui.BORDER_WIDTH - 1 do {
         case loc of {
            "e": Gui.style.fill_hilite_rectangle(self.cbwin, x - i, y + i, 1, len - 2 * i)
            "w": Gui.style.fill_hilite_rectangle(self.cbwin, x + i, y + i, 1, len - 2 * i)
            "n": Gui.style.fill_hilite_rectangle(self.cbwin, x + i, y + i, len - 2 * i, 1)
            "s": Gui.style.fill_hilite_rectangle(self.cbwin, x + i, y - i, len - 2 * i, 1)
         }
      }
   end

   #
   # Determine which tab if any mouse is over.
   #
   public which_tab(e)
      local l, c
      in_tab_region(e) | fail
      l := if /self.tabs_at_bottom_flag then
         (e.y - (self.y + border.get_t_inset())) / (self.label_h + Gui.BORDER_WIDTH) + 1
      else
         (self.y + self.h - border.get_b_inset() - e.y - 1) / (self.label_h + Gui.BORDER_WIDTH) + 1
      every c := !self.line_break[l] do {
         if (c.tab_x - Gui.BORDER_WIDTH <= e.x < c.tab_x + c.tab_w + Gui.BORDER_WIDTH) then
            return c
      }
   end

   #
   # Ensure which_one is at front of tab lines
   #
   public adjust_lines()
      local i
      every i := 1 to *self.line_break - 1 do {
         if self.which_one === !self.line_break[i] then {
            self.line_break[i] :=: self.line_break[-1]
            break
         }
      }
   end

   public maybe_remember_focus()
      local f
      \remember_focus_flag | fail
      which_one.remembered_focus := &null
      f := parent_dialog.get_focus() | fail
      if f.gen_parents() === which_one then
         which_one.remembered_focus := f
   end

   public maybe_restore_focus()
      local f
      \remember_focus_flag | fail
      f := \which_one.remembered_focus | fail
      if f.is_live() then
         f.grab_focus()
   end

   #
   # Set which tab is currently on display.
   # @param x  The {TabItem} to be displayed.
   # @param dont_restore_flag if set, then the tab's remembered focus will not be
   #         restored (only relevant if remember_focus is on).
   #
   public set_which_one(x, dont_restore_flag)
      if which_one === x then
         return self
      if is_initialized() then {
         maybe_remember_focus()
         which_one := x
         set_hidden_flags()
         adjust_lines()
         if /dont_restore_flag then
            maybe_restore_focus()
         invalidate()
      } else
         which_one := x
      return self
   end

   public set_which_highlight(x)
      if self.which_highlight ~=== x then {
         self.which_highlight := x
         invalidate_tab_region()
      }
      return self
   end
   
   public set_hidden_flags()
      local c
      every c := !self.children do {
         if c === self.which_one then
            c.set_is_hidden(&no)
         else
            c.set_is_hidden(&yes)
      }
      return self
   end

   #
   # Return the currently selected tab
   #
   public get_which_one()
      return self.which_one
   end

   public start_handle(e)
      old_which_one := which_one
   end

   public end_handle(e)
      if old_which_one ~=== which_one then
         fire(Event.SELECTION_CHANGED, e)     
   end

   public handle_lpress(e)
      local t
      start_handle(e)
      if t := which_tab(e) & allow_navigation_to(t) then {
         set_which_one(t)
         # If t is no longer which_tab(e), then we have shuffled the
         # lines around, and moved t to the front.  It would be ugly
         # to drag the tab in this case, so it is disallowed.
         may_drag := Yes{ t === which_tab(e) }
      } else
         may_drag := &no
      end_handle(e)
   end

   public allow_navigation_to(c)
      # Always allow navigation to a tab if draggable_tabs is enabled, so that we
      # can arrange all tabs.
      return \allow_drag_flag | c.is_unshaded()
   end

   public handle_key_left(e)
      local c, i, j
      start_handle(e)
      i := get_index(which_one)
      every j := (i - 1 to 1 by -1) | (*children to i + 1 by -1) do {
         c := children[j]
         if allow_navigation_to(c) then {
            # We don't allow remembered focus, since the cursor key
            # would then be applied by the dialog on the new focus,
            # and would move off it.
            set_which_one(c, &yes)
            break
         }
      }
      end_handle(e)
   end

   public handle_key_right(e)
      local c, i, j
      start_handle(e)
      i := get_index(which_one)
      every j := (i + 1 to *children) | (1 to *children to i - 1) do {
         c := children[j]
         if allow_navigation_to(c) then {
            set_which_one(c, &yes)
            break
         }
      }
      end_handle(e)
   end

   public handle_key(e)
      if e.code === Key.LEFT then
         handle_key_left(e)
      else if e.code === Key.RIGHT then
         handle_key_right(e)
   end

   public can_drag(ev)
      if \may_drag & is_held(Mouse.LEFT_PRESS) then
         return which_one
   end

   public define_dnd_pointers(drag)
      cbwin.copy_pointer("dnd negative", Dialog.DND_NEGATIVE_POINTER)
      cbwin.copy_pointer("dnd positive", "sb h double arrow")
   end

   public drag_event(drag, e)
      local t
      drag.get_source() === self | fail
      t := which_tab(e)
      set_which_highlight(t)
      return \t
   end

   public can_drop(drag, e)
      return which_one ~=== \which_highlight
   end

   public perform_drop(drag, drop, e)
      reposition(which_one, get_index(drop.content))
      line_break := &null
      layout()
      invalidate()
      return
   end

   public drag_reset(e)
      set_which_highlight()
   end

   public in_tab_region(e)
      in_region(e) & 
         (self.x + border.get_l_inset() <= e.x < self.x + self.w - border.get_r_inset()) | fail 
      return if /self.tabs_at_bottom_flag then
         self.y + border.get_t_inset() <= e.y < self.y + border.get_t_inset() + self.tab_h
      else
         self.y + self.h - border.get_b_inset() - self.tab_h <= e.y < self.y + self.h - border.get_b_inset()
   end

   public accepts_focus(e)
      if \e then {
         if e.code === Mouse.LEFT_PRESS & \self.no_click_focus_flag then
            fail
         # Outside of tabs never gives focus.
         if member(Mouse.PRESS, e.code) & not self.in_tab_region(e) then
            fail
      }
      return Component.accepts_focus(e)
   end

   public get_tooltip(e)
      if \self.tooltip then
         return self.tooltip
      return which_tab(e).get_tab_tooltip(e)
   end

   public handle_accel(e)
      start_handle(e)
      set_which_one(find_key(e.code))
      if /self.no_click_focus_flag then
         grab_focus(e)
      end_handle(e)
   end
 
   public match_accel(e)
      return find_key(e)
   end

   #
   # Find the TabItem with the given accelerator.
   # @p
   public find_key(k)
      local m
      every m := !self.children do {
         if m.accel === k & m.is_unshaded() then
            return m
      }
   end

   #
   # Break the set of tabs up into lines, given the padding within each tab.
   # Returns a list each element of which is a list of those tabs on one line.
   #
   # @p
   public how_many_lines(pad, width)
      local t, l, cl, c, lw

      width -:= border.get_total_width()

      t := 0
      l := []
      cl := []
      every c := !self.children do {
         lw := c.get_label_width() + pad
         if *cl = 0 then {
            # First on a line
            t := lw
            put(cl, c)
         }
         else if t + lw + 2 * Gui.BORDER_WIDTH > width then {
            # New line required.
            t := lw
            put(l, cl)
            cl := [c]
         } else {
            t +:= lw + 2 * Gui.BORDER_WIDTH
            put(cl, c)
         }
      }
      #
      # Final line, if any
      #
      if t > 0 then
         put(l, cl)

      return l
   end

   public initially()
      if *self.children = 0 then
         runerr("no TabItems in TabSet")
      /self.which_one := self.children[1]
      set_hidden_flags()
      Component.initially()
   end

   public get_default_width()
      local c, mw, tw

      # Max width of tab contents.
      mw := 0
      every c := !self.children do
         mw <:= c.get_preferred_width()

      if \self.prefer_one_row_flag then {
         # Expand mw to the total tab label width if needed.
         tw := 0
         every c := !self.children do
            tw +:= c.get_label_width()
         # There is 2 * Gui.BORDER_WIDTH of decoration between each label...
         tw +:= 2 * Gui.BORDER_WIDTH * (*self.children - 1)
         mw <:= tw
      } else {
         # We should be wide enough for the widest label to be on a line on its own
         # without clipping.
         tw := 0
         every c := !self.children do
            tw <:= c.get_label_width()
         mw <:= tw
      }

      # Our border's width
      mw +:= border.get_total_width()

      return mw
   end

   public get_default_height(dw)
      local c, mh

      # Our border's width
      dw -:= border.get_total_width()

      # Max height of tab contents.
      mh := 0
      every c := !self.children do
         mh <:= c.get_preferred_height(dw)

      # The top and bottom borders.
      mh +:= border.get_total_height()

      # Note that we don't simply check prefer_one_row_flag here, because we may
      # have manually set a w_spec value, meaning we might get several rows anyway.
      # Every line occupies the label_height plus a border below.

      return mh +
         *how_many_lines(0, get_preferred_width()) * (Gui.BORDER_WIDTH + get_label_height())
   end

   public get_label_height()
      local h, c
      h := 0
      every c := !self.children do
         h <:= c.get_label_height()
      return h
   end

   # Debug functions
   #

   public dump()
      local curr_line, c, t
      write("Total available width:", self.w - border.get_total_width())
      every curr_line := !self.line_break do {
         write("Line")
         t := 0
         every c := !curr_line do {
            write("\tTab width=", c.get_label_width(),
                  " tab_x=", c.tab_x,
                  " tab_w=", c.tab_w)
            t +:= c.tab_w
         }
         t +:= 2 * Gui.BORDER_WIDTH * (*curr_line - 1)
         write("\tLine total allocated:", t)
      }
   end

   public dump_split(l,s)
      local e, f
      write("Split of lines:",s)
      every e := !l do {
         writes("Line:",*e,":\t")
         every f := !e do
            writes(f.get_label_width(),"   ")
         write()
      }
      write("----")
   end

   #
   # Does the current line_break still suffice, or do we need
   # to use the new_break? Keeping the current one if we can saves 
   # unsightly flicking of the tabs on a resize.
   #
   public keep_current_break(new_break)
      local e, t, s1, s2

      # The old one must be at least as good as the new one, line-wise
      *\self.line_break <= *new_break | fail

      # The old and new breaks must have the same elements, ie
      # no tabs added or deleted.
      s1 := set()
      s2 := set()
      every insert(s1, !!line_break)
      every insert(s2, !!new_break)
      lang.equals(s1, s2) | fail

      # The current line_break's lines must still fit in the
      # new width.
      every e := !line_break do {
         t := 0
         every t +:= (!e).get_label_width()
         t +:= 2 * Gui.BORDER_WIDTH * (*e - 1)
         if t > self.w - border.get_total_width() then
            fail
      }
      return
   end

   public layout()
      local pad, l2, n, curr_line, t, c, d

      # Cache the label height.
      self.label_h := get_label_height()

      # Determine how many lines with no padding.
      pad := 0
      l2 := how_many_lines(pad, self.w)

      # Do we need a new line break?
      if not(keep_current_break(l2)) then {
         # We do need a new line break.
         self.line_break := l2
         self.tab_h :=  (self.label_h + Gui.BORDER_WIDTH) * (*self.line_break)

         #
         # Expand padding whilst can do so and remain within the original
         # number of lines.  This should even out the tabs.
         #
         if 1 < *self.line_break < *self.children then {
            while *(l2 := how_many_lines(pad + X_PADDING_INC, self.w)) <= *self.line_break do {
               self.line_break := l2
               pad +:= X_PADDING_INC
            }
         }
      }

      #
      # Finally, space out the tabs on each line to fill up each line.
      #
      n := 1
      every curr_line := !self.line_break do {
         #
         # Work out total already used.
         #
         t := 0
         every c := !curr_line do {
            c.tab_w := c.get_label_width() + pad
            t +:= c.tab_w
         }
         # Two Gui.BORDER_WIDTHS between each tab on the line
         t +:= 2 * Gui.BORDER_WIDTH * (*curr_line - 1)

         #
         # Amount to add to each tab.
         #
         d := (self.w - border.get_total_width() - t) / *curr_line

         #
         # Add the amount, compute new total
         #
         t := 0
         every c := curr_line[1 to *curr_line - 1] do {
            c.tab_x := self.x + border.get_l_inset() + t
            c.tab_w +:= d
            t +:= c.tab_w + 2 * Gui.BORDER_WIDTH
         }
         # Rightmost tab gets the residue so that the tabs exactly
         # fit in the line.
         c := curr_line[-1]
         c.tab_x := self.x + border.get_l_inset() + t
         c.tab_w := self.w - border.get_total_width() - t

         n +:= 1
      }

      self.adjust_lines()

      #
      # Layout the children
      #
      every c := !self.children do {
         c.x := self.x + border.get_l_inset()
         c.w := self.w - border.get_total_width()
         c.y := if /self.tabs_at_bottom_flag then
            self.y + border.get_t_inset() + self.tab_h
         else
            self.y + border.get_t_inset()
         c.h := self.h - self.tab_h - border.get_total_height()
         c.layout()
      }
   end

   public shift(dx, dy)
      local c
      Component.shift(dx, dy)
       every c := !self.children do
          c.tab_x +:= dx
   end

   public new()
      Component.new()
      self.accepts_focus_flag := &yes
      self.set_constraint("x_fill", &yes)
      self.set_constraint("y_fill", &yes)
      self.set_constraint("x_weight", 1.0)
      self.set_constraint("y_weight",  1.0)
      connect(self.handle_lpress, Event.MOUSE_LEFT_PRESS)
      connect(self.handle_key, Event.KEY_PRESS)
      set_border(RaisedBorder())
      return
   end
end
