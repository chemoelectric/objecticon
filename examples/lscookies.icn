import http, lang, io, ipl.options, xdg, ipl.printf

invocable HttpClient

procedure main(a)
   local t, cookies, bak, opts, mod, k, home, l
   opts := options(a, [Opt("d", string, "Delete the given key; multiple uses allowed", &yes),
                       Opt("k", string, "Show just the given key; multiple uses allowed", &yes),
                       Opt("x",, "Expire out-of-date cookies")],
                       "Usage: lscookies [OPTIONS] [cookie-file]\N_
                        Show or edit the Object Icon cookies file\N_
                        If invoked with no options, show all the cookies")

   home := FilePath(BaseDir.ensure_data_home()) | stopf("Couldn't access data dir: %w")

   cookies := a[1] | home.child("oicookies").str()

   t := decode_from_file(cookies) | stop(&why)

   if l := \opts["d"] then {
      every k := !l do {
         if member(t, k) then {
            write("Deleted key: ", k)
            delete(t, k)
            mod := &yes
         } else
            write("No such entry: ",k)
      }
   }
   if l := \opts["k"] then {
      every k := !l do {
         if member(t, k) then
            write(image(k), "->", to_string(t[k], 3))
         else
            write("No such entry: ",k)
      }
   }
   if \opts["x"] then {
      t := Cookie.expire_cookies(t)
      write("Removed expired cookies")
      mod := &yes
   }

   # No options, so print whole table.
   if *opts = 0 then {
      to_stdout(t, 3)
      write()
   }

   if \mod then {
      bak := cookies || ".bak"
      encode_to_file(bak, t) | stopf("Couldn't encode to temp cookie file %s: %w", bak)
      # Use rename not move to ensure it's atomic
      Files.rename(bak, cookies) | stopf("Couldn't rename cookie file %s: %w", bak)
      write("Modified file written okay")
   }
end
