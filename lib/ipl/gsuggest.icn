package ipl.gsuggest

import
   gui(Align, AttributedTextItemPaint, ItemPaintPTableColumn, PTable,
       PTableColumn, SuggestField),
   http(HttpClient, HttpRequest),
   io(StringStream),
   json(JSONParser),
   net(URL),
   xml(HtmlParser)

abstract class GSuggestField(SuggestField)
   protected hc, domain

   protected close_request()
      hc.close()
   end

   protected abort_request()
      req.interrupt()
      hc.abort()
   end

   public set_domain(s)
      domain := s
      return self
   end

   public handle_tab(ev)
      # We can't do foreground requests on tab, so just trigger a background request.
      on_change(ev)
   end

   public new()
      SuggestField.new()
      set_contents(u"")
      domain := "www.google.com"
      hc := HttpClient().
         set_task(req).
         set_user_agent("AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.57")
      return
   end
end

class GoogleSuggestField(GSuggestField)
   private lang

   # Set the language, by default "en"
   public set_lang(s)
      lang := s
      return self
   end

   private textify(n)
      local e, s
      s := u""
      every e := !n.children do
         s ||:= text(e) | textify(e)
      return s
   end

   protected do_request()
      local hr, data, jp, v, s, u, hp, t, d, l
      if *contents = 0 then
         return []
      data := StringStream()
      u := URL("http://" || domain || "/complete/search").
         set_cgi_parameters(table(, 
                                  "q", contents, 
                                  "hl", lang,
                                  "client", "hp"))
      hr := HttpRequest().
         set_url(u).
         set_output_stream(data).
         set_header("Accept-Charset", "utf-8")
      hc.retrieve(hr) | fail
      s := ucs(data.str()) | fail
      s ?:= (tab(upto('[')) & tab(-1))
      jp := JSONParser()
      v := jp.parse(s) | fail
      hp := HtmlParser()
      l := []
      every t := (!v[2])[1] do {
         d := hp.parse("<html>" || t || "</html>")
         put(l, textify(d))
      }
      return l
   end

   public new()
      GSuggestField.new()
      set_lang("en")
      set_select_using_enter(&no)
      return
   end
end

class SymbolItemPaint(AttributedTextItemPaint)
   protected make_clone(W)
      return W.clone().set_fg("blue")
   end
end

class TickerSuggestField(GSuggestField)
   public create_popup()
      return PTable().
         add_column(ItemPaintPTableColumn().set_item_paint(SymbolItemPaint())).
         add_column(PTableColumn()).
         add_column(PTableColumn().set_weight(1).set_align(Align.R))
   end

   public convert_element(o)
      return o[1]
   end

   protected do_request()
      local hr, data, jp, v, s, u, e, l
      if *contents = 0 then
         return []
      data := StringStream()
      u := URL("http://" || domain || "/finance/match").
         set_cgi_parameters(table(, "q", contents))
      hr := HttpRequest().
         set_url(u).
         set_output_stream(data).
         set_header("Accept-Charset", "utf-8")
      hc.retrieve(hr) | fail
      s := ucs(data.str()) | fail
      jp := JSONParser()
      v := jp.parse(s) | fail
      l := []
      every e := !\v[u"matches"] do
         put(l, [(u"" ~== e[u"t"]), e[u"n"], e[u"e"]])
      return l
   end
end
