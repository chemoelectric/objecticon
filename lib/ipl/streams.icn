package ipl.streams

import
   io(LineBasedGeneratorStream, HasUnderlyingStream, lclose)

#
# This `Stream` takes a list of other `Stream`s.  Their lines of
# output are interspersed together to form the output.
#
class IntersperseStream(LineBasedGeneratorStream, HasUnderlyingStream)
   private
      a

   private line_gen()
      local e, s, t, u
      u := a
      while *u > 0 do {
         t := []
         every e := !u do {
            s := e.read_line() | fail
            if \s then {
               put(t, e)
               suspend s
            }
         }
         u := t
      }
      return
   end

   public override close()
      if \close_underlying_flag then
         lclose(a) | fail
      return self
   end

   public override new(a[])
      self.a := a
      return LineBasedGeneratorStream.new{line_gen()}
   end
end
