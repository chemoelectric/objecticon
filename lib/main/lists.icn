#
# $Id: sets.icn 3945 2013-02-22 20:36:44Z r.parlett $
#

package datastruct

import lang, util, ipl.pdco-(List)

#
# This is a common superclass for a list-like data structure.
#
abstract class List(HasMode, ObjectOutput, ObjectHash, ObjectEquals)
   public static const
      # An empty list instance
      EMPTY_LIST,
      # Constant indicating modifiable capability
      MODIFY,
      # Constant indicating insert capability
      INSERT,
      # Constant indicating delete capability
      DELETE

   private static init()
      EMPTY_LIST := EmptyList()
      MODIFY := 1
      INSERT := 2
      DELETE := 4
   end

   #
   # Insert a new element `x` at position `i`.  Fails if `i` is
   # invalid; otherwise succeeds and returns `self`.  Only implemented
   # with INSERT capability.
   #
   public optional insert(i, x)
   
   #
   # Delete element at position `i` from the list.  Fails if `i` is
   # invalid; otherwise succeeds and returns `self`.  Only implemented
   # with DELETE capability.
   #
   public optional delete(i)

   #
   # Return the member at position `i`.  If the list has MODIFY
   # capability, a variable is returned, otherwise a value is
   # returned.
   #
   public abstract at(i)

   #
   # Remove and return an element from the left end of list.
   #
   public get()
      return 1(.at(1), delete(1))
   end

   #
   # Remove and return an element from the right end of the list.
   #
   public pull()
      return 1(.at(-1), delete(-1))
   end

   #
   # Push an element onto the left end of the list.
   #
   public push(x)
      return insert(1, x)
   end

   #
   # Push an element onto the right end of the list.
   #
   public put(x)
      return insert(0, x)
   end

   #
   # Generate the members.  If the list has MODIFY capability,
   # variables are generated, otherwise values are generated.
   #
   public gen()
      suspend gen_from(1)
   end

   #
   # Generate the members, starting with the element at index `i`.
   # If the list has MODIFY capability, variables are generated,
   # otherwise values are generated.
   #
   public gen_from(i)
      i := cvpos_item(i, size()) | fail
      repeat {
         suspend at(i)
         if i < size() then
            i +:= 1
         else
            fail
      }
   end

   #
   # Generate the members in reverse order.  If the list has MODIFY
   # capability, variables are generated, otherwise values are
   # generated.
   #
   public back()
      suspend back_from(0)
   end

   #
   # Generate the members in reverse order, starting with the element
   # before index `i` (thus generating the elements in the range 1:i).
   # If the list has MODIFY capability, variables are generated,
   # otherwise values are generated.
   #
   public back_from(i)
      i := need_integer(i)
      i := cvpos_item(i - 1, size()) | fail
      while i > 0 do {
         suspend at(i)
         i := min(i - 1, size())
      }
   end

   #
   # Return the size of the list.
   #
   public abstract size()

   #
   # Clear the list of all elements. Always succeeds and returns
   # `self`.  Only implemented with DELETE capability.
   #
   public clear()
      while delete(1)
      link
   end

   #
   # Generate the indices i such that at(i) === x
   #
   public keyof(x)
      suspend Positions{gen(), x}
   end

   #
   # Return an icon list of the elements.
   #
   public list()
      return ipl.pdco.List{gen()}
   end

   #
   # Return an icon list of the elements in the range i:j
   #
   public slice(i, j)
      local s
      s := cvslice(i, j, size()) | fail
      return ipl.pdco.List{ gen_from(s.lo) \ (s.hi - s.lo) }
   end

   #
   # Succeed iff the size is zero.
   #
   public empty()
      succeed size() = 0
   end

   #
   # Custom equals mirrors the `equals()` behaviour for builtin lists.
   #
   private override object_equals(other, seen)
      local e, x
      other.size() = size() | fail
      e := create other.gen()
      every x := gen() do
         equals(x, @e, seen) | fail
      return not @e
   end

   #
   # Custom hash mirrors the `hash()` behaviour for builtin lists.
   #
   private override object_hash(depth)
      local n, i
      n := size()
      if depth > 1 then
         every i := hash(gen() \ 10, depth - 1) do
            n := 37 * iand(n, 16rffffff)  + i
      return n
   end

   #
   # Output object
   #
   private override object_output(oo)
      local e, sep
      if oo.simple{gen()} then {
         oo.object_start(self)
         every e := gen() do {
            if \sep then
               oo.writes1(",")
            oo.traverse(e)
            sep := &yes
         }
         oo.object_end(self)
      } else {
         oo.nl().
            object_start(self).
            iplus()
         every e := gen() do {
            if \sep then
               oo.writes1(",")
            oo.nl().
               traverse(e)
            sep := &yes
         }
         oo.iminus().
            nl().
            object_end(self)
      }
   end
end

#
# This list wraps another list to provide an unmodifiable view of it.
#
class UnmodifiableList(List)
   private const l

   public override at(i)
      return .l.at(i)
   end

   public override gen_from(i)
      suspend .l.gen_from(i)
   end

   public override back_from(i)
      suspend .l.back_from(i)
   end

   public override size()
      return l.size()
   end

   public override get_mode()
      return 0
   end

   public new(l)
      self.l := need_instance(l, List)
      return
   end
end

#
# A `List` that is just a wrapper around a builtin list
#
class BuiltinList(List)
   private const l

   public override insert(i, x)
      link default.insert(l, i, x)
   end

   public override delete(i)
      link default.delete(l, i)
   end

   public override at(i)
      return l[i]
   end

   public override get()
      return default.get(l)
   end

   public override pull()
      return default.pull(l)
   end

   public override push(x)
      default.push(l, x)
      link
   end

   public override put(x)
      default.put(l, x)
      link
   end

   public override keyof(x)
      suspend default.keyof(l, x)
   end

   public override gen()
      suspend !l
   end

   public override back()
      suspend default.back(l)
   end

   public override slice(i, j)
      return l[i:j]
   end

   public override size()
      return *l
   end

   public override clear()
      default.clear(l)
      link
   end

   public override get_mode()
      return MODIFY + INSERT + DELETE
   end

   public new(l)
      self.l := need_list(\l) | []
      return
   end
end

#
# An empty list.  An instance of this class is `List.EMPTY_LIST`.
#
class EmptyList(List)
   public override at(i)
   end

   public override size()
      return 0
   end

   public override get_mode()
      return 0
   end
end

#
# A node in a `LinkedList`.
#
package class LinkedListNode()
   public
      nxt, val

   public new(nxt, val)
      self.nxt := nxt
      self.val := val
      return
   end
end

#
# A `List` implementation based on a simple linked list.  Note some of
# the operations which suspend values may behave differently from the
# builtin list if the list is concurrently modified.
#
class LinkedList(List)
   private nhead

   public override insert(i, x)
      local n
      i := need_integer(i)
      if i <= 0 then
         i := cvpos(i, size()) | fail
      if i = 1 then
         nhead := LinkedListNode(nhead, x)
      else {
         n := node_at(i - 1) | fail
         n.nxt := LinkedListNode(n.nxt, x)
      }
      link
   end

   public override delete(i)
      local n
      i := need_integer(i)
      if i <= 0 then
         i := cvpos_item(i, size()) | fail
      if i = 1 then
         nhead := (\nhead).nxt | fail
      else {
         n := node_at(i - 1) | fail
         n.nxt := (\n.nxt).nxt | fail
      }
      link
   end

   public override at(i)
      return node_at(i).val
   end

   public override pull()
      local v, n
      \nhead | fail
      if /nhead.nxt then {
         v := nhead.val
         nhead := &null
      } else {
         n := nhead
         while \n.nxt.nxt do
            n := n.nxt
         v := n.nxt.val
         n.nxt := &null
      }
      return v
   end

   public override gen_from(i)
      local n
      n := node_at(i) | fail
      while \n do {
         suspend n.val
         n := n.nxt
      }
   end

   public override back_from(i)
      local n
      i := need_integer(i)
      n := node_at(i - 1) | fail
      repeat {
         suspend n.val
         n := before(n) | fail
      }
   end

   private before(n)
      local t
      t := nhead
      while \t do {
         if t.nxt === n then
            return t
         t := t.nxt
      }
   end

   public override size()
      local i, n
      i := 0
      n := nhead
      while \n do {
         i +:= 1
         n := n.nxt
      }
      return i
   end

   public override clear()
      nhead := &null
      link
   end

   public override get_mode()
      return MODIFY + INSERT + DELETE
   end

   #
   # Return the head value of the list, or fail if the list is empty.
   #
   public head()
      return (\nhead).val
   end

   #
   # Set the head of the list (ie its first value), or fail if this
   # list is empty.
   #
   public set_head(x)
      link ((\nhead).val := x)
   end

   #
   # Return the tail of the list, or fail if the list is empty.
   #
   public tail()
      return from_node((\nhead).nxt)
   end

   #
   # Set the tail of the list to share the elements of the list
   # `other`, or fail if this list is empty.
   #
   public set_tail(other)
      link ((\nhead).nxt := other.nhead)
   end

   #
   # Set the tail of the list to the empty list (leaving just one
   # element), or fail if this list is empty.
   #
   public clear_tail()
      link ((\nhead).nxt := &null)
   end

   #
   # Set this list to share the same elements as `other`.
   #
   public set_list(other)
      nhead := other.nhead
      link
   end

   #
   # Return a new list which shares the elements of this list from
   # (and including) element `i`.
   #
   public from(i)
      return from_node(node_at(i))
   end

   #
   # Succeed iff this list shares the same elements as list `other`.
   #
   public same(other)
      succeed nhead === other.nhead
   end

   #
   # Return the node containing element `i`, or fail if `i` is out of
   # range.
   #
   private node_at(i)
      local n
      i := need_integer(i)
      if i <= 0 then
         i := cvpos_item(i, size()) | fail
      n := nhead
      while \n & i > 1 do {
         n := n.nxt
         i -:= 1
      }
      return \n
   end

   #
   # Create an instance given a `LinkedListNode` as the list's head node.
   #
   private static from_node(n)
      local i
      i := Class.create_instance()
      i.nhead := n
      return i
   end

   #
   # Create an instance and add each of the given entries.
   #
   public new(entries[])
      every nhead := LinkedListNode(nhead, default.back(entries))
      return
   end
end

#
# A node in a `DoublyLinkedList`.
#
package class DoublyLinkedListNode()
   public
      nxt, prev, val

   public new(prev, nxt, val)
      self.prev := prev
      self.nxt := nxt
      self.val := val
      return
   end
end

#
# A `List` implementation based on a doubly linked list.  Note some of
# the operations which suspend values may behave differently from the
# builtin list if the list is concurrently modified.
#
class DoublyLinkedList(List)
   private nhead, ntail, sz

   public override insert(i, x)
      local m, n
      i := cvpos(i, sz) | fail
      if i = 1 then {
         if /nhead then
            nhead := ntail := DoublyLinkedListNode(,, x)
         else {
            n := DoublyLinkedListNode(, nhead, x)
            nhead.prev := n
            nhead := n
         }
      } else {
         m := node_at(i - 1) | fail
         n := DoublyLinkedListNode(m, m.nxt, x)
         m.nxt := n
         if m === ntail then
            ntail := n
         else
            n.nxt.prev := n
      }
      sz +:= 1
      link
   end

   public override delete(i)
      local n
      n := node_at(cvpos_item(i, sz)) | fail
      if /n.prev then
         nhead := n.nxt
      else
         n.prev.nxt := n.nxt
      if /n.nxt then
         ntail := n.prev
      else
         n.nxt.prev := n.prev
      n.prev := n.nxt := &null
      sz -:= 1
      link
   end

   public override at(i)
      return node_at(i).val
   end

   public override size()
      return .sz
   end

   public override gen_from(i)
      local n
      n := node_at(i) | fail
      while \n do {
         suspend n.val
         n := n.nxt
      }
   end

   public override back_from(i)
      local n
      i := need_integer(i)
      n := node_at(i - 1) | fail
      while \n do {
         suspend n.val
         n := n.prev
      }
   end

   public override clear()
      nhead := ntail := &null
      sz := 0
      link
   end

   public override get_mode()
      return MODIFY + INSERT + DELETE
   end

   #
   # Return the node containing element `i`, or fail if `i` is out of
   # range.
   #
   private node_at(i)
      local n
      i := cvpos_item(i, sz) | fail
      if i < sz / 2 then {
         n := nhead
         while \n & i > 1 do {
            n := n.nxt
            i -:= 1
         }
      } else {
         n := ntail
         i := sz - i + 1
         while \n & i > 1 do {
            n := n.prev
            i -:= 1
         }
      }
      return \n
   end

   #
   # Create an instance and add each of the given entries.
   #
   public new(entries[])
      sz := 0
      every insert(1, default.back(entries))
      return
   end
end

# A convenient equivalent to wrapping a BuiltinList in an
# UnmodifiableList.
#
class UnmodifiableBuiltinList(List)
   private const l

   public override at(i)
      return .l[i]
   end

   public override keyof(x)
      suspend default.keyof(l, x)
   end

   public override gen()
      suspend .!l
   end

   public override back()
      suspend .default.back(l)
   end

   public override slice(i, j)
      return l[i:j]
   end

   public override size()
      return *l
   end

   public override get_mode()
      return 0
   end

   public new(l)
      self.l := need_list(l)
      return
   end
end

#
# This class provides a view of a sublist of another `List`.  No data is
# stored directly in this list.
#
# The indices specified in the constructor use Icon list slice
# semantics, and may be zero or negative.  The indices remain
# constant, and the actual range into the underlying list is
# calculated dynamically.  Should this become out-of-range, then the
# sub-list's size is zero, and insert and delete operations fail.
#
# Example :-
# ~
#   ll := LinkedList(1,2,3,4,5)
#   # A view of the elements 3:0 of ll (3, 4, 5)
#   s := SubList(ll, 3, 0)
#   # After this s is (3, 4, 5, 99); note how the length is now 4.
#   s.put(99)
# ~
#
class SubList(List)
   private const other, lo, hi

   public override insert(i, x)
      local s
      s := cvslice() | fail
      i := cvpos(i, s.hi - s.lo) | fail
      link other.insert(i + s.lo - 1, x)
   end

   public override delete(i)
      local s
      s := cvslice() | fail
      i := cvpos_item(i, s.hi - s.lo) | fail
      link other.delete(i + s.lo - 1)
   end

   public override at(i)
      local s
      s := cvslice() | fail
      i := cvpos_item(i, s.hi - s.lo) | fail
      return other.at(i + s.lo - 1)
   end

   public override size()
      local s
      return if s := cvslice() then
         s.hi - s.lo
      else
         0
   end

   public override gen_from(i)
      local s
      s := cvslice() | fail
      i := cvpos_item(i, s.hi - s.lo) | fail
      i +:= s.lo - 1
      suspend other.gen_from(i) \ (s.hi - i)
   end

   public override back_from(i)
      local s
      s := cvslice() | fail
      i := cvpos(i, s.hi - s.lo) | fail
      i +:= s.lo - 1
      suspend other.back_from(i) \ (i - s.lo)
   end

   private cvslice()
      return util.cvslice(lo, hi, other.size())
   end

   public override get_mode()
      return other.mode()
   end

   #
   # Create a new instance using `other` as the underlying list, and
   # `lo` and `hi` as the slice to view.
   #
   public new(other, lo, hi)
      self.other := need_instance(other, List)
      self.lo := need_integer(lo)
      self.hi := need_integer(hi)
      return
   end
end
