#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import graphics, util

abstract class DropDown(Component, MenuMode)
   public
      b,                           
      view,
      popup,
      direction,
      old_focus,
      wheel_listeners

   #
   # Create the view component
   #
   public abstract create_view()

   public abstract create_popup()

   public create_button()
      return IconButton().
         set_width(ScrollArea.SCROLLBAR_SIZE).
         set_paint(ImagePaint().set_cache("gui.ARROW_DOWN"))
   end

   public close_all()
      close_popup()
   end

   public should_close(e)
      if (member(Mouse.PRESS, e.code) & 
                not(popup.in_region(e) | b.in_region(e))) then 
         return
   end

   public allow_nested(c)
      c := c.get_nesting_component()
      return c.gen_parents() === popup
   end

   public get_nesting_component()
      return self
   end

   public gen_popup_components()
      return popup
   end

   public finally()
      close_popup()
      Component.finally()
   end

   protected open_popup(ev)
      local spc_below, spc_above, spc_right, d, dim, win,
         use_direction, rs, pref_w, pref_h, x_adj

      win := parent_dialog.win
      dim := win.get_display_size()
      # Screen rectangle, in adjusted co-ordinates
      rs := Rect(-win.get_x() - win.get_dx(), -win.get_y() - win.get_dy(), dim.width, dim.height)

      # Space available for popup limited by screen size
      spc_above := self.y - rs.y
      spc_below := rs.y + rs.h - self.y - self.h
      spc_right := rs.x + rs.w - self.x

      self.popup := create_popup().
         set_wattrib_ancestor(self).
         set_z(self.parent_dialog.get_top_z())
      self.parent_dialog.add(popup)
      pref_w := popup.get_preferred_width()
      pref_h := popup.get_preferred_height()
      x_adj := max(0, pref_w - spc_right)

      use_direction := if direction == Direction.BEST then {
         if spc_below >= (pref_h | spc_above) then
            Direction.DOWN
         else
            Direction.UP
      } else
         direction

      old_focus := parent_dialog.get_focus()

      parent_dialog.
         set_focus().
         enter_menu_mode(self)

      popup.
         set_pos(win.get_dx() + x - x_adj,
                 win.get_dy() + if use_direction == Direction.DOWN then 
                     y + h
                  else
                     y - pref_h).
         set_size(pref_w, pref_h).
         resize()

      if Gui.allow_internal_popups() & parent_dialog.contains(popup) then {
         popup.invalidate()
      } else {
         # Remove popup from dialog and add to popup window.
         parent_dialog.remove(popup)
         d := PureDialog().
            set_canvas(Canvas.POPUP).
            set_width(popup.w).
            set_height(popup.h).
            set_dx(-popup.x).
            set_dy(-popup.y).
            set_x(win.get_x() + win.get_dx() + popup.x).
            set_y(win.get_y() + win.get_dy() + popup.y).
            copy_wattrib(WAttrib.DISPLAY, parent_dialog).
            add(popup)

         popup.set_pos(0, 0)
         parent_dialog.add_popup(d)
         d.show()
      }
   end

   protected close_popup()
      local f
      \self.popup | fail
      # Allow views that don't accept focus, and ensure in that case
      # the focus isn't left with the popup.
      f := view.find_focus() | old_focus
      self.parent_dialog.set_focus(f)
      if popup.parent_dialog === parent_dialog then {
         self.popup.invalidate()
         self.parent_dialog.remove(popup)
      } else {
         self.parent_dialog.remove_popup(self.popup.parent_dialog)
         self.popup.parent_dialog.dispose()
      }
      self.popup := old_focus := &null
      self.parent_dialog.exit_menu_mode(self)
      fire(Event.POPUP_CLOSED)
   end

   public on_button_press(ev)
      if \popup then
         #
         # Button pressed whilst list open; just close
         #
         close_popup()
      else
         #
         # Button pressed whilst no list; open list
         #
         open_popup(ev)
   end

   #
   # Set the direction to pop-up in.  Options are {Direction.UP}, {Direction.DOWN} or
   # {Direction.BEST} (the default).
   #
   public set_direction(s)
      self.direction := s
      return self
   end

   public layout()
      local bw

      bw := b.get_preferred_width()
      #
      # Set button position and size
      #
      b.x := self.x + self.w - bw - border.get_r_inset()
      b.y := self.y + border.get_t_inset()
      b.w := bw
      view.x := self.x + border.get_l_inset()
      view.y := self.y + border.get_t_inset()
      view.w := self.w - border.get_total_width() - bw
      b.h := view.h := self.h - border.get_total_height()
      b.layout()
      view.layout()
   end

   public get_default_width()
      return border.get_total_width() + b.get_preferred_width() + view.get_preferred_width()
   end

   public get_default_height(dw)
      dw -:= border.get_total_width() + b.get_preferred_width()
      return border.get_total_height() + view.get_preferred_height(dw)
   end

   public display()
      border.draw_rect(self.cbwin, self)
      display_children()
   end

   public focus_changed(e) 
      view.invalidate()
   end

   protected forward_key(ev, src, type)
      # In menu mode key events are forwarded to this component,
      # rather than the text list, regardless of the focus.  So we
      # must forward them ourselves.
      if /ev.release & ev.code === "\e" then
         close_all()
      else
         parent_dialog.get_focus().fire(type, ev)
   end

   public do_increment(ev)
   end

   public do_decrement(ev)
   end

   #
   # This may be overridden to monitor for changes to trigger events.  It is
   # invoked before the do_increment/do_decrement methods are called
   #
   public start_change(e)
   end

   #
   # This may be overridden to monitor for changes to trigger events.  It is
   # invoked after the do_increment/do_decrement methods are called
   #
   public end_change(e)
   end

   public go_up(e)
      start_change(e)
      do_increment(e)
      end_change(e)
   end

   public go_down(e)
      start_change(e)
      do_decrement(e)
      end_change(e)
   end

   #
   # Configure whether or not to move the selection with the mouse
   # wheel; default is yes.  Disabling the wheel is useful for
   # dropdown lists that create the list contents dynamically, by
   # overriding `open_popup`.
   #
   public set_use_wheel(s)
      check_flag(s)
      every (!\wheel_listeners).disconnect()
      wheel_listeners := if /s then
         &null
      else
         [connect(go_up, Event.MOUSE_WHEEL_UP).last_listener,
          connect(go_down, Event.MOUSE_WHEEL_DOWN).last_listener]
      return self
   end

   public new()
      Component.new()
      self.set_border(SunkenBorder())
      # Make the same width as the button in the scrollbar of the dropdown.
      self.b := create_button().
         connect(self.on_button_press, Event.BUTTON_PRESS).
         set_accepts_focus(&no)
      self.direction := Direction.BEST
      self.add(b)
      self.preferred_focus := self.view := create_view()
      self.add(view)
      self.set_constraint("x_fill", &yes)
      self.set_constraint("x_align", Align.L)
      self.set_constraint("x_weight", 1.0)
      set_use_wheel(&yes)
      every connect(self.forward_key, Event.KEY_PRESS | Event.KEY_RELEASE)
      return
   end
end

#
# This class is just a superclass of {List} and {EditList}.
#
abstract class SelectionDropDown(SelectionList, DropDown)
   public 
      max_height,
      max_width

   public on_popup_selection(ev)
      local tmp
      #
      # Selection in list - close textlist, amend label.
      #
      tmp := popup.get_selections()[1]
      close_popup()
      go_to(\tmp, ev)
   end

   public convert_element(o)
      return text(o)
   end

   public create_popup()
      return TextList()
   end

   #
   # Set the maximum height of the dropdown list; by default it is as large as is necessary
   # and can be accommodated on the screen.
   #
   public set_max_height(n)
      self.max_height := n
      return self
   end

   #
   # Set the maximum width of the dropdown list; by default it is as wide as is necessary
   # and can be accommodated on the screen.
   #
   public set_max_width(n)
      self.max_width := n
      return self
   end

   public do_increment(e)
      if *selection_list = 0 then
         fail
      if /self.selection | (self.selection = 1) then
         set_selection(*self.selection_list, e)
      else
         set_selection(self.selection - 1, e)
   end

   public do_decrement(e)
      if *selection_list = 0 then
         fail
      if /self.selection then
         set_selection(1, e)
      else
         set_selection(1 + self.selection % *self.selection_list, e)
   end

   public go_to(x, e)
      start_change(e)
      set_selection(x, e)
      end_change(e)
   end

   protected open_popup(ev)
      local max_h, max_w, spc_below, spc_above, spc_right, d, dim, win,
         use_direction, rs

      if *selection_list = 0 then
         fail

      win := parent_dialog.win
      dim := win.get_display_size()
      # Screen rectangle, in adjusted co-ordinates
      rs := Rect(-win.get_x() - win.get_dx(), -win.get_y() - win.get_dy(), dim.width, dim.height)

      # Space available for popup limited by screen size
      spc_above := self.y - rs.y
      spc_below := rs.y + rs.h - self.y - self.h
      spc_right := rs.x + rs.w - self.x

      max_h := case self.direction of {
         Direction.UP: spc_above
         Direction.DOWN: spc_below
         Direction.BEST: 
            if Gui.POPUP_LIST_DIRECTION_FACTOR * spc_below > spc_above then spc_below else spc_above
         default: runerr("Unknown direction", self.direction)
      }
      max_w := spc_right
      max_w >:= \self.max_width
      max_h >:= \self.max_height

      self.popup := create_popup().
         set_wattrib_ancestor(self).
         connect(on_popup_selection, Event.SELECTION_CHANGED).
         set_contents(self.selection_list).
         set_draggable_cursor(&yes).
         set_motion_cursor(&yes).
         set_select_mode(Select.ONE).
         set_selection_on_key_moves(&no).
         set_z(self.parent_dialog.get_top_z())
      self.parent_dialog.add(popup)
      self.popup.set_ideal_size(self.w, max_w,
                                scale(5), max_h)

      use_direction := if direction == Direction.BEST then {
         if spc_below >= (popup.h_spec | spc_above) then
            Direction.DOWN
         else
            Direction.UP
      } else
         direction

      old_focus := parent_dialog.get_focus()
      self.parent_dialog.enter_menu_mode(self)

      popup.
         set_pos(win.get_dx() + x,
                 win.get_dy() + if use_direction == Direction.DOWN then 
                    y + h
                 else
                    y - popup.h_spec).
         resize()

      if Gui.allow_internal_popups() & parent_dialog.contains(popup) then {
         popup.invalidate()
      } else {
         # Remove popup from dialog and use add to popup window.
         parent_dialog.remove(popup)
         d := PureDialog().
            set_canvas(Canvas.POPUP).
            set_width(popup.w).
            set_height(popup.h).
            set_dx(-popup.x).
            set_dy(-popup.y).
            set_x(win.get_x() + win.get_dx() + popup.x).
            set_y(win.get_y() + win.get_dy() + popup.y).
            copy_wattrib(WAttrib.DISPLAY, parent_dialog).
            add(popup)

         popup.set_pos(0, 0)
         parent_dialog.add_popup(d)
         d.show()
      }
      parent_dialog.set_focus(popup)
      # ev may be other than a mouse press if the popup is being
      # opened programatically.  Note that if ev.code is not a mouse
      # press them hold() just fails.
      parent_dialog.hold(popup.view, (\ev).code)

      if \self.selection then {
         self.popup.
            set_cursor(self.selection).
            center_line(self.selection)
      }
   end

   public initially()
      \self.selection_list | runerr("no selection list specified")
      Component.initially()
   end
end

class DropDownLabel(Label)
   public keeps(e)
      return member(Key.CURSOR_V, e.code)
   end

   public on_key(e)
      case e.code of {
         Key.UP : parent.go_up(e)
         Key.DOWN : parent.go_down(e)
         Key.HOME : if is(parent, SelectionDropDown) then
                       parent.go_to(1, e)
         Key.END : if is(parent, SelectionDropDown) then
                      parent.go_to(*parent.selection_list, e)
      }
   end

   public new()
      Label.new()
      self.set_label("")
      self.set_accepts_focus(&yes)
      self.connect(self.on_key, Event.KEY_PRESS)
      # Align with the text in the textlist.
      self.set_border(EmptyBorder().
                      set_x_align(Align.L).
                      set_l_inset(Gui.TEXT_INSET).
                      set_r_inset(Gui.TEXT_INSET))
      return
   end
end

class DropDownTextField(TextField)
   public keeps(e)
      return member(Key.CURSOR, e.code)
   end

   public on_key(e)
      case e.code of {
         Key.UP : parent.go_up(e)
         Key.DOWN : parent.go_down(e)
      }
   end

   public new()
      TextField.new()
      self.connect(self.on_key, Event.KEY_PRESS)
      self.set_border(EmptyBorder().set_l_inset(Gui.TEXT_INSET).set_r_inset(Gui.TEXT_INSET))
      return
   end
end
