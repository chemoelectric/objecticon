#
# $Id$
#

package net

$if _MS_WIN32
import 
   ssl,
   ipl.pdco
$elsif _UNIX
import 
   ssl,
   posix,
   ipl.pdco
$endif

import
   io,
   lang,
   util, 
   ipl.base64,
   ipl.scan,
   ipl.printf,
   ipl.functional

#
# Common base class for a client class which holds a connection to a
# server and communicates using CRLF-terminated lines.
#
abstract class NetClient(Connectable, HasTask)
   public static const 
      CONNECTING_EVENT,
      CONNECTED_EVENT,
      CLOSED_EVENT,
      WRITING_STRING_EVENT,
      WRITING_LINE_EVENT,
      READ_LINE_EVENT,
      READ_STRING_EVENT,
      # The timeout (in ms) for IP addresses noted to avoid; by default one minute.
      AVOID_TIMEOUT,
      # A table of addresses (string) to expiry time.
      avoid

   private static init()
      CONNECTING_EVENT := "Connecting"
      CONNECTED_EVENT := "Connected"
      CLOSED_EVENT := "Closed"
      WRITING_STRING_EVENT := "Writing string"
      WRITING_LINE_EVENT := "Writing line"
      READ_LINE_EVENT := "Read line"
      READ_STRING_EVENT := "Read string"
      AVOID_TIMEOUT := env_int("OI_NETCLIENT_AVOID_TIMEOUT", 0) | 60*1000
      avoid := table()
   end

   private readable
      path,
      server,
      port,
      timeout,
      ssl_flag,
      ssl_verify_flag,
      dont_retry_flag,
      ip_version,
      proxy,
      proxy_auth,
      proxy_type
   
   private
      connection,
      ssl_connection,
      sbuff

   # Note an address to avoid for the next `AVOID_TIMEOUT`
   # milliseconds.
   #
   public static avoid_addr(addr)
      insert(avoid, addr, Prog.get_runtime_millis() + AVOID_TIMEOUT)
      link
   end

   # Given a list of addresses, choose the first which we are not
   # currently avoiding, or the best alternative otherwise.
   #
   public static choose_addr(l)
      local e, t, now, best
      # Purge expired entries from avoid
      now := Prog.get_runtime_millis()
      every e := key(avoid) do {
         if now >= avoid[e] then
            delete(avoid, e)
      }
      every e := !l do {
         # If not avoiding this element, return it.
         t := member(avoid, e) | return e
         # Otherwise note the one with the earliest expiry.
         if /best | t < avoid[best] then
            best := e
      }
      return best
   end

   # Set the ip version option to pass during dns lookup; see
   # `SocketStream.dns_query()`.  By default, this is `&null`.
   #
   public set_ip_version(ver)
      self.ip_version := /ver | need_integer(ver)
      link
   end

   # Set the timeout in ms to use.  If `&null`, then no timeout will
   # be used.
   #
   public set_timeout(timeout)
      self.timeout := /timeout | need_integer(timeout, 0)
      link
   end

   private do_poll(for)
      return choose_poll([connection, for], timeout)
   end

$if _PLAN9
   #
   # Open the connection.
   #
   protected open_connection()
      local addr, cs, msg_addr, l
      close_connection()
      fire(CONNECTING_EVENT)
      if \ssl_flag then
         return error_dont_retry("SSL not supported")
      if \path then
         return error_dont_retry("UNIX domain not supported")
      validate_settings() | fail
      if \proxy then {
         addr := "tcp!" || proxy.host || "!" || proxy.port
         l := NetStream.cs_query(addr, ip_version, task) | return whyf("Couldn't translate address: %w")
         cs := choose_addr(l)
         msg_addr := proxy.host || " (" || cs || ")"
      } else {
         addr := "tcp!" || server || "!" || port
         l := NetStream.cs_query(addr, ip_version, task) | return whyf("Couldn't translate address: %w")
         cs := choose_addr(l)
         msg_addr := server || " (" || cs || ")"
      }

      connection := NetStream.connect(cs, timeout, task) | {
         avoid_addr(cs)
         return whyf("Couldn't connect to " || msg_addr || ": %w")
      }
      connection := NonBlockStream(connection,, 1048576, 1048576).
         set_write_on_close(NonBlockStream.DISCARD)

      if \proxy then {
         establish_proxy_connection() | {
            quietly_close_connection()
            fail
         }
      }

      fire(CONNECTED_EVENT, cs)
      link
   end
$elsif _MS_WIN32
   private dns_query(server)
      return WinsockStream.dns_query(server, ip_version)
   end

   private ip_to_addr(ip, port)
      return if upto('.', ip) then 
         "inet:" || ip || ":" || port
      else
         "inet6:[" || ip || "]:" || port
   end

   #
   # Open the connection.
   #
   protected open_connection()
      local r, domain, addr, msg_addr, l

      close_connection()
      fire(CONNECTING_EVENT)
      if \path then
         return error_dont_retry("UNIX domain not supported")
      validate_settings() | fail
      if \proxy then {
         l := dns_query(proxy.host) | return whyf("Couldn't translate proxy address: %w")
         l := List{ ip_to_addr(!l, proxy.port) }
         addr := choose_addr(l)
         domain := if match("inet:", addr) then
            ProtocolFormat.INET
         else
            ProtocolFormat.INET6
         msg_addr := proxy.host || " (" || addr || ")"
      } else {
         l := dns_query(server) | return whyf("Couldn't translate address: %w")
         l := List{ ip_to_addr(!l, port) }
         addr := choose_addr(l)
         domain := if match("inet:", addr) then
            ProtocolFormat.INET
         else
            ProtocolFormat.INET6
         msg_addr := server || " (" || addr || ")"
      }

      connection := WinsockStream(domain)
      connection.set_blocking_mode(&no) | {
         quietly_close_connection()
         return whyf_dont_retry("Couldn't put socket in non-blocking mode: %w")
      }

      connection.connect(addr) | {
         if errno() = WSAError.EWOULDBLOCK then {
            r := do_poll(Poll.OUT) | {
               quietly_close_connection()
               avoid_addr(addr)
               return whyf("Couldn't connect to %s: %w", msg_addr)
            }
            if /r then {
               close_connection()
               avoid_addr(addr)
               return whyf("Couldn't connect to %s: Timeout", msg_addr)
            }
            DescStream.poll_out_test(r[1]) | {
               close_connection()
               avoid_addr(addr)
               return whyf("Couldn't connect to %s: Socket error", msg_addr)
            }
         } else {
            quietly_close_connection()
            avoid_addr(addr)
            return whyf("Couldn't connect to %s: %w", msg_addr)
         }
      }

      if \proxy then {
         establish_proxy_connection() | {
            quietly_close_connection()
            fail
         }
      }

      if \ssl_flag then {
         ssl_available() | return error_dont_retry(&why)
         ssl_connection := SslStream(connection, server) | {
            quietly_close_connection()
            return whyf("Couldn't create SslStream: %w")
         }
         until ssl_connection.connect() do {
            ssl_maybe_poll() | {
               quietly_close_connection()
               return whyf("Couldn't perform SSL connection: %w")
            }
         }
         if \ssl_verify_flag then {
            ssl_connection.verify() | {
               quietly_close_connection()
               return whyf_dont_retry("Couldn't verify SSL connection: %w")
            }
         }
      }

      fire(CONNECTED_EVENT, addr)
      link
   end
$else
   private dns_query_impl(server)
      return SocketStream.dns_query(server, ip_version)
   end

   private dns_bg_query(p, server)
      local r
      if r := dns_query_impl(server) then
         p.send(r)
      else
         p.send(&why)
   end

   private dns_query(server)
      local p, v
      if /task then
         return dns_query_impl(server)
      p := Process{dns_bg_query(p, server)}.set_task(task)
      p.start() | fail
      if v := p.poll() then {
         p.close()
         return if type(v) == "list" then
            v
         else
            error(v)
      } else
         # poll() failed, meaning we were interrupted.  We don't want
         # to call close(), which would hang whilst p exited, so we
         # call stop() which kills it first.
         p.stop()
   end

   private ip_to_addr(ip, port)
      return if upto('.', ip) then 
         "inet:" || ip || ":" || port
      else
         "inet6:[" || ip || "]:" || port
   end

   #
   # Open the connection.
   #
   protected open_connection()
      local r, domain, addr, msg_addr, l

      close_connection()
      fire(CONNECTING_EVENT)
      validate_settings() | fail
      if \path then {
         domain := ProtocolFormat.UNIX
         msg_addr := addr := "unix:" || path
      } else if \proxy then {
         l := dns_query(proxy.host) | return whyf("Couldn't translate proxy address: %w")
         l := List{ ip_to_addr(!l, proxy.port) }
         addr := choose_addr(l)
         domain := if match("inet:", addr) then
            ProtocolFormat.INET
         else
            ProtocolFormat.INET6
         msg_addr := proxy.host || " (" || addr || ")"
      } else {
         l := dns_query(server) | return whyf("Couldn't translate address: %w")
         l := List{ ip_to_addr(!l, port) }
         addr := choose_addr(l)
         domain := if match("inet:", addr) then
            ProtocolFormat.INET
         else
            ProtocolFormat.INET6
         msg_addr := server || " (" || addr || ")"
      }

      connection := SocketStream(domain)
      connection.flag(FileOpt.NONBLOCK) | {
         quietly_close_connection()
         return whyf_dont_retry("Couldn't put socket in non-blocking mode: %w")
      }

      connection.connect(addr) | {
         if errno() = Errno.EINPROGRESS then {
            r := do_poll(Poll.OUT) | {
               quietly_close_connection()
               avoid_addr(addr)
               return whyf("Couldn't connect to %s: %w", msg_addr)
            }
            if /r then {
               close_connection()
               avoid_addr(addr)
               return whyf("Couldn't connect to %s: Timeout", msg_addr)
            }
            DescStream.poll_out_test(r[1]) | {
               close_connection()
               avoid_addr(addr)
               return whyf("Couldn't connect to %s: Socket error", msg_addr)
            }
         } else {
            quietly_close_connection()
            avoid_addr(addr)
            return whyf("Couldn't connect to %s: %w", msg_addr)
         }
      }

      if \proxy then {
         establish_proxy_connection() | {
            quietly_close_connection()
            fail
         }
      }

      if \ssl_flag then {
         ssl_available() | return error_dont_retry(&why)
         ssl_connection := SslStream(connection, server) | {
            quietly_close_connection()
            return whyf("Couldn't create SslStream: %w")
         }
         until ssl_connection.connect() do {
            ssl_maybe_poll() | {
               quietly_close_connection()
               return whyf("Couldn't perform SSL connection: %w")
            }
         }
         if \ssl_verify_flag then {
            ssl_connection.verify() | {
               quietly_close_connection()
               return whyf_dont_retry("Couldn't verify SSL connection: %w")
            }
         }
      }

      fire(CONNECTED_EVENT, addr)
      link
   end
$endif

   # After an error to an ssl function, check if it is because the
   # ssl layer needs to read/write from the underlying connection.
   # If so, poll the connection and return (so the ssl call can be
   # retried); otherwise fail.
   private ssl_maybe_poll()
      local err, r
      # Extract the ssl error no.
      &why ? {
         if tab(past("error:")) then
            err := integer(tab(many(&digits)))
      }
      case err of {
         2 : {  # SSL_ERROR_WANT_READ
            r := do_poll(Poll.IN) | return whyf("Receive poll failed: %w")
            if /r then return error("Receive failed: Timeout")
            DescStream.poll_in_test(r[1]) | return error("Receive failed: Socket error")
            return
         }
         3 : {  # SSL_ERROR_WANT_WRITE 
            r := do_poll(Poll.OUT) | return whyf("Send poll failed: %w")
            if /r then return error("Send failed: Timeout")
            DescStream.poll_out_test(r[1]) | return error("Send failed: Socket error")
            return
         }
      }
   end

   public static valid_port(i)
      succeed 0 < i < 65536
   end

   private validate_settings()
      if \path then {
         /server | runerr("Path and server set")
         /port | runerr("Path and port set")
         /proxy | runerr("Path and proxy set")
      } else {
         \server | runerr("No server set")
         \port | runerr("Server set, but no port")
         valid_port(port) | return error_dont_retry("Port out of range")
         if \proxy then
            valid_port(proxy.port) | return error_dont_retry("Proxy port out of range")
      } 
      return
   end

   private establish_proxy_connection()
      return case proxy_type of {
         &null | "http" : establish_http_proxy_connection()
         "socks5" : establish_socks5_proxy_connection()
         default: runerr("Invalid proxy type", proxy_type)
      }
   end

   private static socks5_string(s)
      s := need_string(s)
      return char(*s) || s
   end

   private establish_socks5_proxy_connection()
      local s, len, v
      static errs
      initial
         errs := ["General SOCKS server failure",
                  "Connection not allowed by ruleset",
                  "Network unreachable",
                  "Host unreachable",
                  "Connection refused",
                  "TTL expired",
                  "Command not supported",
                  "Address type not supported"]

      # Auth methods
      write_str(if \proxy_auth then "\x05\x02\x00\x02"
                               else "\x05\x01\x00") | fail
      s := exact_str(2) | fail
      v := ord(s[1])
      (v = 5) | return whyf_dont_retry("SOCKS version mismatch (%d)", v)
      case v := ord(s[2]) of {
         0 : {}     # No authentication needed
         2 : {
            # Username and password authentication
            \proxy_auth |  return error_dont_retry("Unexpected SOCKS authentication request")
            write_str("\x01" || socks5_string(proxy_auth.username) ||
                 socks5_string(proxy_auth.password)) | fail
            s := exact_str(2) | fail
            (s[2] == "\x00") | return error_dont_retry("SOCKS authentication failure")
         }
         255:
            return error_dont_retry("SOCKS authentication method(s) not accepted")
         default:
            return whyf_dont_retry("Unknown SOCKS authentication method requested (%d)", v)
      }
      # Connect request
      write_str("\x05\x01\x00\x03" || socks5_string(server) || char(port / 256) || char(port % 256)) | fail
      s := exact_str(4) | fail
      v := ord(s[2]) 
      (v = 0) | return case v of {
         1 to 6: error("SOCKS connection error: " || errs[v])
         7 to 8: error_dont_retry("SOCKS connection error: " || errs[v])
         default: whyf_dont_retry("Unknown SOCKS connection error code (%d)", v)
      }
      # The length of the address
      len := case v := ord(s[4]) of {
         1: 4
         4: 16
         3: ord(exact_str(1)) | fail
         default: return whyf_dont_retry("Incorrect SOCKS address indicator (%d)", v)
      }
      # Read and discard address and port
      exact_str(len + 2) | fail
      return
   end

   private establish_http_proxy_connection()
      local l, pr, code, s
      l := ["CONNECT " || server || ":" || port  || " HTTP/1.1"]
      put(l, "User-Agent: netclient.icn [en]")
      if \proxy_auth then
         put(l, "Proxy-Authorization: Basic " || base64encode(proxy_auth.username || ":" || proxy_auth.password))
      put(l, "Host: " || server || ":" || port)
      put(l, "")
      write_lines(l) | fail
      pr := expect_line(&yes) | fail
      if pr ? code := (tab(upto(' ')), tab(many(' ')), integer(tab(many(&digits)))) then {
         if code = 200 then {
            # Skip any headers upto and including a blank line
            repeat {
               s := expect_line(&yes) | fail
               if *s = 0 then
                  return
            }
         }
         if code = 404 then
            return error("Proxy server status error: " || pr)
      }
      return error_dont_retry("Proxy server status error: " || pr)
   end

   #
   # Call `close_connection`, saving &why.
   #
   protected quietly_close_connection()
      return save_why{ close_connection() }
   end

   #
   # Close the connection
   #
   protected close_connection()
      local f
      if \ssl_connection then {
         ssl_connection.close() | (f := &why)
         connection.close() | (f := &why)
         ssl_connection := connection := &null
         fire(CLOSED_EVENT)
      } else if \connection then {
         connection.close() | (f := &why)
         connection := &null
         fire(CLOSED_EVENT)
      }
      sbuff := ""
      return if /f then self else error(f)
   end

   #
   # Close this client and any associated connection.
   #
   public close()
      return close_connection()
   end

   #
   # Set the path to use (implies using PF_UNIX socket domain)
   #
   public set_path(s)
      path := /s | need_text(s)
      link
   end

   #
   # Set the server to use (implies using PF_INET socket domain)
   #
   public set_server(s)
      server := /s | need_text(s)
      link
   end

   #
   # Set the port
   #
   public set_port(n)
      port := /n | need_integer(n, 0)
      link
   end

   #
   # Set the proxy server to use, as a `HostPort` instance.
   #
   public set_proxy(s)
      proxy := s
      link
   end

   #
   # Set the proxy authentication, as an `Authentication` instance.
   #
   public set_proxy_auth(s)
      proxy_auth := s
      link
   end

   #
   # Set the type of proxy server to use.  Possible values are "http"
   # for HTTP with the CONNECT method (the default), or "socks5" for a
   # SOCKS5 server.
   #
   public set_proxy_type(s)
      proxy_type := s
      link
   end

   #
   # Low-level write on the connection. 
   #
   private send(s)
      local i, r
      s := need_string(s)
      if \ssl_connection then {
         while *s > 0 do {
            if i := ssl_connection.out(s) then
               s := s[i+1 : 0]
            else
               ssl_maybe_poll() | return whyf("Send SSL out() failed: %w")
         }
      } else {
         while *s > 0 do {
            r := do_poll(Poll.OUT) | return whyf("Send poll failed: %w")
            if /r then return error("Send failed: Timeout")
            DescStream.poll_out_test(r[1]) | return error("Send failed: Socket error")
            i := connection.out(s) | return whyf("Send out() failed: %w")
            s := s[i+1 : 0]
         }
      }
      link
   end

   #
   # Low-level read on the connection. 
   #
   private recv(len)
      local r, s
      if \ssl_connection then {
         repeat {
            if s := ssl_connection.in(len) then
               return s
            ssl_maybe_poll() | return whyf("Receive SSL in() failed: %w")
         }
      } else {
         r := do_poll(Poll.IN) | return whyf("Receive poll failed: %w")
         if /r then return error("Receive failed: Timeout")
         DescStream.poll_in_test(r[1]) | return error("Receive failed: Socket error")
         return connection.in(len) | whyf("Receive in() failed: %w")
      }
   end

   #
   # Write the given string to the connection.
   #
   protected write_str(s)
      fire(WRITING_STRING_EVENT, s)
      return send(s)
   end

   #
   # Write a single line to the connection, appending CRLF to the output stream.
   # 
   protected write_line(s)
      /s := ""
      fire(WRITING_LINE_EVENT, s)
      return send(s || "\r\n") 
   end

   #
   # Write several lines in one go, but firing separate events for each line.
   #
   protected write_lines(l)
      local s
      s := ""
      every s ||:= (!l) || "\r\n"
      every fire(WRITING_LINE_EVENT, !l)
      return send(s)
   end

   #
   # Read a single line from the connection, and return it.  Returns
   # `&null` on end of file.  `fl` is a flag; if set then characters
   # are read one at a time from the connection.  This avoids the
   # usual buffering taking place (although any existing buffered
   # characters are still consumed).
   #
   protected read_line(fl)
      local line, s, len
      len := if /fl then 1048576 else 1
      repeat {
         #
         # Look for a line and if found return it.
         #
         sbuff ? {
            if line := tab(find("\r\n")) then {
               move(2)
               sbuff := tab(0)
               fire(READ_LINE_EVENT, line)
               return line
            }
         }
         s := recv(len) | fail
         if /s then {
            if *sbuff = 0 then
               return
            line := sbuff
            sbuff := ""
            fire(READ_LINE_EVENT, line)
            return line
         }
         sbuff ||:= s
      }
   end

   #
   # This method is the same as `read_line`, except that on end of
   # file it fails, setting `&why`, rather than returning `&null`.
   #
   protected expect_line(fl)
      local s
      s := read_line(fl) | fail
      return \s | error("Unexpected end of file")
   end

   #
   # Read up to len bytes on the connection, returning `&null` on
   # end of file.
   #
   protected read_str(len)
      local t
      #
      # Use the line buffer if it has anything in it.
      #
      if *sbuff > 0 then {
         sbuff ? {
            t := move(len) | tab(0)
            sbuff := tab(0)
         }
      } else {
         t := recv(len) | fail
         if /t then
            return
      }
      fire(READ_STRING_EVENT, t)
      return t
   end

   #
   # This method is the same as `read_str`, except that on end of file
   # it fails, setting `&why`, rather than returning `&null`.
   #
   protected expect_str(len)
      local s
      s := read_str(len) | fail
      return \s | error("Unexpected end of file")
   end

   #
   # This calls `expect_str` several times in order to read exactly `len`
   # characters from the connection.
   #
   protected exact_str(len)
      local s, t
      len := need_integer(len, 1)
      s := ""
      while len > 0 do {
         t := expect_str(len) | fail
         s ||:= t
         len -:= *t
      }
      return s
   end

   #
   # Succeed iff the connection is currently open.
   #
   protected is_connected()
      succeed \self.connection
   end

   #
   # A flag value.  When set, indicate that the connection should be wrapped in
   # an SslStream.
   #
   public set_ssl(s)
      self.ssl_flag := need_flag(s)
      link
   end

   #
   # A flag value.  When set, indicate that the remote host's identity should be
   # verified.  By default, this flag is on.
   #
   public set_ssl_verify(s)
      self.ssl_verify_flag := need_flag(s)
      link
   end

   #
   # Set the `dont_retry_flag`, indicating an error has occurred that
   # couldn't be overcome by retrying.  Then `&why` is set to `s`.
   #
   protected error_dont_retry(s)
      dont_retry_flag := &yes
      &why := s
   end

   #
   # Like `error_dont_retry`, but take a format arguments for `whyf`.
   #
   protected whyf_dont_retry(a[])
      dont_retry_flag := &yes
      whyf!a
   end

   #
   # Clear the `dont_retry_flag`.
   #
   protected reset_dont_retry()
      dont_retry_flag := &null
      link
   end

   public override new()
      Connectable.new()
      sbuff := ""
      ssl_verify_flag := &yes
      return
   end
end

#
# Class for storing a host and a port.
#
class HostPort()
   public const
      host, port

   public new(host, port)
      self.host := need_text(host)
      self.port := need_integer(port, 0)
      return
   end
end

#
# Parse a string `s` in the form "host:port" into a `HostPort` instance.
# `def` is an optional default port value.
#
procedure parse_host_port(s, def)
   local host, port
   s ? {
      host := if ="[" then
         1(tab(upto(']')), move(1)) | return error("Missing ] bracket")
      else
         tab(upto(':') | 0)
      port := (if =":" then integer(tab(0)) else \def) | return error("Host:port expected")
      NetClient.valid_port(port) | return error("Port out of range")
   }
   return HostPort(host, port)
end

#
# Return an options() converter function for a host:port argument,
# with `def` as an optional default port.
#
procedure host_port_opt(def)
   return rpartial(parse_host_port, def)
end

#
# A class for encapsulating a username and password
#
class Authentication()
   public const
      username, password

   public new(username, password)
      self.username := need_text(username)
      self.password := need_text(password)
      return
   end
end

#
# options() converter function for an authentication argument.
#
procedure authentication_opt(s)
   return s ? Authentication( tab(upto(':')), move(1) & tab(0) ) |
      error("Username:password expected")
end

#
# options() converter function for an IP version argument.
#
procedure ip_version_opt(s)
   return integer(s) = (4 | 6 | 46 | 64 | 0) | error("IP version expected")
end

#
# options() converter function for a port number.
#
procedure port_opt(s)
   s := integer(s) | return error("Port expected")
   return if NetClient.valid_port(s) then s else error("Port out of range")
end
