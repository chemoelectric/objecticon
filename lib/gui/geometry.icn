package gui

#
# This class represents an integer x, y location.
#
class Point()
   public x, y

   public get_x()
      return x
   end

   public get_y()
      return y
   end

   public new(x, y)
      self.x := x
      self.y := y
      return
   end

   # A comparator function for points, ordering by y first, then x.
   public static cmp_yx(p, q)
      return if p.y = q.y then p.x - q.x else p.y - q.y
   end

   # A comparator function for points, ordering by x first, then y.
   public static cmp_xy(p, q)
      return if p.x = q.x then p.y - q.y else p.x - q.x
   end
end

#
# This class represents an integer width and height size.
#
class Size()
   public w, h

   public get_width()
      return w
   end

   public get_height()
      return h
   end

   #
   # Succeed if either dimension is zero or negative.
   #
   public empty()
      succeed (w | h) <= 0
   end

   public new(w, h)
      self.w := w
      self.h := h
      return
   end
end

#
# This class combines `Point` and `Size` to represent a rectangle.
#
class Rect(Point,Size)
   public str()
      return self.x || "," || self.y || "," || self.w || "," || self.h
   end

   #
   # Succeed iff the given point is inside this `Rect`.
   #
   public inside(x1, y1)
      succeed (x <= x1 < x + w) & (y <= y1 < y + h)
   end

   #
   # Succeed iff this `Rect` contains `r`.  An empty `Rect` can
   # neither contain, or be contained by, another `Rect`.
   #
   public contains(r)
      succeed (w > 0 & h > 0) & (r.w > 0 & r.h > 0) &
         (r.x >= x) & (r.y >= y) & (r.x + r.w <= x + w) & (r.y + r.h <= y + h)
   end

   #
   # Succeed iff this `Rect` touches `r`, ie intersects or abuts it.
   # An empty `Rect` can neither touch, or be touched by, another
   # `Rect`.
   #
   public touches(r)
      succeed (w > 0 & h > 0) & (r.w > 0 & r.h > 0) &
         (x <= r.x + r.w) & (x + w >= r.x) & (y <= r.y + r.h) & (y + h >= r.y)
   end

   #
   # Return the center `Point` of this `Rect`, which is assumed to be
   # non-empty.
   #
   public center()
      return Point(x + w / 2, y + h / 2)
   end

   #
   # Return the union of this `Rect` and another.  A new `Rect` is
   # returned.  Note that the union of a non-empty `Rect` and an empty
   # `Rect` is equal to the former.
   #
   #
   public union(r)
      local tx1, ty1, tx2, ty2, rx1, ry1, rx2, ry2

      (rx2 := 0 < r.w & ry2 := 0 < r.h) |
         return Rect(x, y, w, h)
      (tx2 := 0 < w & ty2 := 0 < h) |
         return Rect(r.x, r.y, r.w, r.h)

      tx1 := x
      tx2 +:= tx1
      rx1 := r.x
      rx2 +:= rx1
      tx1 >:= rx1
      tx2 <:= rx2
      tx2 -:= tx1

      ty1 := y
      ty2 +:= ty1
      ry1 := r.y
      ry2 +:= ry1
      ty1 >:= ry1
      ty2 <:= ry2
      ty2 -:= ty1

      return Rect(tx1, ty1, tx2, ty2)
   end

   #
   # Return the intersection of this `Rect` and another, or fail if
   # there is no intersection.  A new non-empty `Rect` is returned.
   #
   public intersect(r)
      local tx1, ty1, tx2, ty2, rx1, ry1, rx2, ry2

      tx1 := x
      rx1 := r.x
      tx2 := tx1 + w
      rx2 := rx1 + r.w
      tx1 <:= rx1
      tx2 >:= rx2
      tx2 -:= tx1
      if tx2 <= 0 then
         fail

      ty1 := y
      ry1 := r.y
      ty2 := ty1 + h
      ry2 := ry1 + r.h
      ty1 <:= ry1
      ty2 >:= ry2
      ty2 -:= ty1
      if ty2 <= 0 then
         fail

      return Rect(tx1, ty1, tx2, ty2)
   end

   #
   # Float the given `Size` within this `Rect`, according to the given
   # `XYAlign`, but limit the result so that it lies within this
   # `Rect`.  A `Rect` is returned, with width and height set to the
   # input values, or this `Rect`'s values, depending on whether the
   # result was so limited.
   #
   public float(s, a)
      local x1, y1, w1, h1
      if s.w > self.w then {
         x1 := self.x
         w1 := self.w
      } else {
         x1 := case a.x_align of {
            Align.C : self.x + (self.w - s.w) / 2
            Align.L : self.x
            Align.R : self.x + self.w - s.w
            default : runerr("Incorrect x_align specifier", a.x_align)
         }
         w1 := s.w
      }         

      if s.h > self.h then {
         y1 := self.y
         h1 := self.h
      } else {
         y1 := case a.y_align of {
            Align.C : self.y + (self.h - s.h) / 2
            Align.T : self.y
            Align.B : self.y + self.h - s.h
            default : runerr("Incorrect y_align specifier", a.y_align)
         }
         h1 := s.h
      }

      return Rect(x1, y1, w1, h1)
   end

   #
   # Return a new `Rect`, being this `Rect` surrounded by the given
   # padding in the x and y directions.
   #
   public pad(xa, ya)
      return Rect(x - xa, y - ya, w + 2 * xa, h + 2 * ya)
   end

   public override new(x, y, w, h)
      self.x := x
      self.y := y
      self.w := w
      self.h := h
      return
   end
end

#
# This class represents four insets, typically used around the four
# sides of a rectangle.
#
class Insets()
   public 
      l_inset, 
      r_inset,
      t_inset,
      b_inset

   #
   # Given a `Rect` r, return the inner `Rect` obtained by applying
   # the four insets.
   #
   public get_inner_rect(r)
      return Rect(r.x + l_inset, 
                  r.y + t_inset,
                  r.w - l_inset - r_inset,
                  r.h - t_inset - b_inset)
   end

   #
   # The total width, being the sum of the left and right insets.
   #
   public get_total_width()
      return l_inset + r_inset
   end

   #
   # The total width, being the sum of the top and bottom insets.
   #
   public get_total_height()
      return t_inset + b_inset
   end

   public get_l_inset()
      return l_inset
   end

   public get_t_inset()
      return t_inset
   end

   public get_r_inset()
      return r_inset
   end

   public get_b_inset()
      return b_inset
   end
end

#
# A class for storing x and y alignments.  Each value will be one of
# those enumerated in `Align`.
#
class XYAlign()
   public x_align,
          y_align

   public get_x_align()
      return x_align
   end

   public get_y_align()
      return y_align
   end
end
