#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui


############################################################################
#
# Class for representing a Tree on the canvas.
#
class CanvasTree(CanvasComponent,Tree)
   #
   # Default minimum width for the object
   #
   public min_width()
      return 65
   end

   #
   # Default minimum height for the object
   #
   public min_height()
      return 65
   end

   #
   # Generate code into Code object c.
   #
   public gen_code(c)
      cast(self,CanvasComponent).gen_code(c)
      case self.select_mode of {
         Select.NONE : c.line(self.name || ".set_select_mode(Select.NONE)")
         Select.ONE : c.line(self.name || ".set_select_mode(Select.ONE)")
         Select.MANY : c.line(self.name || ".set_select_mode(Select.MANY)")
      }
      c.add_import("gui", "Select")
      if /self.show_root_flag then
         c.line(self.name || ".set_show_root(\"f\")")
      if /self.show_root_handles_flag then
         c.line(self.name || ".set_show_root_handles(\"f\")")
   end

   public post_decode()
      cast(self,CanvasComponent).post_decode()
      tree_structure_changed()
   end

   #
   # Duplicate object.
   #
   public dup()
      local c
      c := CanvasTree()
      cast(self,CanvasComponent).dup_fields(c)
      c.select_mode := self.select_mode
      c.show_root_flag := self.show_root_flag
      c.show_root_handles_flag := self.show_root_handles_flag
      c.tree_structure_changed()
      return c
   end

   #
   # Return the I/O template.
   #
   public get_template()
      return cast(self,CanvasComponent).get_template() ||| 
         [["Select Mode", "select_mode"],
          ["Show Root Handles", "show_root_handles_flag"],
          ["Show Root", "show_root_flag"]
         ]
   end

   #
   # Open the configuration dialog box.
   #
   public dialog()
      return CanvasTreeDialog(self)
   end

   public new()
      local m, n, p
      cast(self,Tree).new()
      cast(self,CanvasComponent).new()
      self.class_name := "Tree"
      self.import_name := "gui"
      self.name := "tree"

      n := TreeNode("label=Root")
      self.set_root_node(n)
      m := TreeNode("label=Level one 1")
      n.add(m)
      p := TreeNode("label=Level two 1")
      m.add(p)
      p := TreeNode("label=Level two 2")
      m.add(p)
      p := TreeNode("label=Level two 3")
      m.add(p)
      m := TreeNode("label=Level one 2")
      n.add(m)
      m := TreeNode("label=Level one 3")
      n.add(m)
      p := TreeNode("label=Level two 1")
      m.add(p)
      p := TreeNode("label=Level two 2")
      m.add(p)
      p := TreeNode("label=Level two 3")
      m.add(p)
      m := TreeNode("label=Level one 4")
      n.add(m)
      return
   end
end




