import
   gui, io, http, net, json, ipl.options, ipl.lists, graphics,
   ipl.gsuggest(TickerSuggestField)

$load STOCK_LOGO "rpp.STOCK_LOGO.png"

global opts

class Stock()
   private readable
      parent, id, name, label, chart

   public update_price(t)
      local i, colr, n
      i := numeric(t["c"]) | fail
      colr := if i >= 0 then "dark green" else "dark red"
      n := if name[1] == "." then "." || name else name
      label.set_label(".cell eol x_align=l\n" ||
                      ".attr 'font=sans,32'\n" ||
                      n || "\n" ||
                      ".br\n" ||
                      ".cell x_align=l\n" ||
                      ".attr font=sans,16\n" ||
                      t["l"] || "\n" ||
                      ".attr 'fg=" || colr || "'\n" ||
                      "   " || t["c"] || "(" || t["cp"] || "%)\n" ||
                      ".br\n")
      id := t["id"]
   end

   public update_chart(img)
      chart.set_image(img)
   end

   private delete_sym()
      parent.delete_sym(self)
   end

   private sym_click(ev)
      local m, mi, pm
      m := Menu()
      mi := TextMenuItem().set_label("Delete")
      mi.connect(self.delete_sym, Event.ACTION)
      m.add(mi)
      pm := PopupMenu()
      pm.popup(parent, m, ev.x, ev.y)
   end

   public gen()
      suspend label | \chart
   end

   public new(parent, s)
      self.parent := parent
      self.name := s
      label := Label().
         set_label(".cell eol x_align=l\n" ||
                   ".attr 'font=sans,32'\n" ||
                   name || "\n" ||
                   ".br\n").
         set_constraint("y_fill", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         connect(self.sym_click, Event.MOUSE_RIGHT_PRESS)
      if \opts["c"] then
         chart := Image().
            set_size(212, 116).
            clear_constraints().
            set_border(EmptyBorder()).
            set_constraint("eol", &yes)
      else
         label.set_constraint("eol", &yes)

      return
   end
end

class StockDialog(Dialog)
   private
      init_syms,
      slist,
      stocks,
      stockp,
      symbol_field,
      ticker,
      httpc,
      message_label

   private do_change()
      stocks.reset_all_layouts()
      stocks.invalidate_subject_width()
      stocks.invalidate_subject_height()
      stocks.layout()
      stocks.invalidate()
   end

   public delete_sym(s)
      ldel1(slist, s)
      every stockp.remove(s.gen())
      do_change()
   end

   public add_sym(name)
      local s
      name := map(name, &lcase, &ucase)
      put(slist, s := Stock(self, name))
      every stockp.add(s.gen())
      if is_live() then {
         do_change()
      }
   end

   public component_setup()
      self.setup()
      stockp := Component().set_layout(GridLayout())
      stocks.set_inner(stockp)
      every add_sym(!init_syms)
   end

   private get_by_name(s)
      local e
      every e := !slist do
         if e.name == s then 
            return e
   end

   private get_data()
      local e, q, hr, sb, s, l, t
      if *slist = 0 then
         return
      q := ""
      every q ||:= (!slist).name || ","
      q[-1] := ""
      sb := StringStream()
      hr := HttpRequest().
         set_output_stream(sb).
         set_url(URL("http://finance.google.com/finance/info?client=ig&q=" || q))
      httpc.retrieve(hr) | fail
      sb.str() ? {
         tab(upto('[{'))
         s := tab(0)
      }
      l := JSONParser().parse(s) | fail
      every t := !l do 
         get_by_name(t["t"]).update_price(t)

      if \opts["c"] then {
         every e := !slist do {
            if \e.id then {
               sb := StringStream()
               hr := HttpRequest().
                  set_output_stream(sb).
                  set_url(URL("http://www.google.com/finance/chart?cid=" || e.id))
               httpc.retrieve(hr) | fail
               e.update_chart(sb.str())
            }
         }
      }
      return
   end

   private data_tick()
      repeat {
         if get_data() then
            clear_msg()
         else
            msg(&why)
         do_change()
         ticker.sleep(10000)
      }
   end

   public end_dialog()
      ticker.stop()
   end

   public init_dialog()
      ticker.start()
   end

   public new(a)
      Dialog.new()
      init_syms := a
      slist := []
      ticker := Dispatcher.new_task{data_tick()}
      httpc := HttpClient().set_task(ticker)
      return
   end

   private msg(s)
      message_label.set_label(s)
   end

   private clear_msg()
      msg("")
   end

   private on_close_button(ev)
      dispose()
   end

   private on_symbol_field(ev)
      add_sym(symbol_field.get_contents())
      symbol_field.set_contents("")
      # If the ticker is sleeping, wake it up.
      ticker.notify()
   end

   private setup()
      local layout_1, paint_20, border_1
      self.set_label("Quote")
      self.set_resize(&yes)
      symbol_field := TickerSuggestField().
         set_size("60").
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         connect(self.on_symbol_field, Event.ACTION).
         set_contents(u"")
      self.add(symbol_field)
      stocks := ComponentScrollArea().
         set_size(549, 308).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0)
      self.add(stocks)
      paint_20 := TextPaint("")
      border_1 := CompoundBorder().
         set_outer(SunkenBorder()).
         set_inner(EmptyBorder().
            set_l_inset(3)).
         set_x_align(Align.L)
      message_label := MessageLabel().
         set_size("100").
         set_align(Align.L, Align.B).
         set_fg("red").
         clear_constraints().
         set_constraint("b_inset", 0).
         set_constraint("l_inset", 0).
         set_constraint("r_inset", 0).
         set_constraint("x_fill", &yes).
         set_border(border_1).
         set_paint(paint_20)
      self.add(message_label)
      self.connect(self.on_close_button, Event.WINDOW_CLOSE_BUTTON)
      layout_1 := GridLayout().
         set_extra("cells")
      self.set_layout(layout_1)
      self.set_focus(symbol_field.find_focus())
   end
end

procedure main(a)
   local d
   opts := options(a, "-c!")
   insert(Dialog.ROOT_WATTRIBS, "icon", Pixels(STOCK_LOGO))
   d := StockDialog(a)
   d.show_modal()
end

### Ivib-v2 layout: layouts/$.layout
