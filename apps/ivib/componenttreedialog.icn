import gui, ipl.pdco

class ComponentTree(Tree)
   public can_drop(drag, e)
      local o
      o := Tree.can_drop(drag, e) | fail
      if ((o === root_node) | o.component.allows_add()) then
         return o
   end

   public perform_drop(drag, drop)
      local l
      l := []
      every put(l, (!drag.get_content()).component)
      root_node.component.move_components(l, drop.get_content().component)
   end

   public can_drag(ev)
      local l, e
      l := Tree.can_drag(ev) | fail
      every e := !l do {
         if (e === root_node) | 
            not(e.component.allows_positioning()) |
            not(e.component.allows_delete()) then
            fail
      }
      return l
   end

   public new()
      Tree.new()
      set_allow_drag(&yes)
      set_allow_drop(&yes)
      return
   end
end


class ComponentTreeDialog(Dialog)
   public 
      tree,
      main

   public component_setup()
      self.setup()
      tree.set_root_node(CanvasNode())
   end

   public find_node_for(c)
      local n
      every n := Seq{tree.get_root_node().traverse_all_preorder()} do {
         if n.component === c then
            return n
      }
   end

   public find_row_for(c)
      local i
      every i := 1 to *tree.contents do
         if tree.contents[i].component === c then
            return i
   end

   public synch()
      local l, e, i, n

      #write("synch")
      tree.get_root_node().component := main.canvas
      tree.get_root_node().synch()

      tree.clear_selections()
      l := []
      every e := !main.canvas.selections do {
         if n := find_node_for(e) then {
            put(l, n)
            n.expand_to_root()
         }
      }
      tree.tree_structure_changed()
      tree.object_set_selections(l)
      if i := find_row_for(main.canvas.selected) then {
         tree.set_cursor(i)
         tree.ensure_line_visible(i)
      }
   end

   public end_dialog()
   end

   public init_dialog()
      # The tree is set up here after the window is open, because synch() may need
      # to call ensure_line_visible() on the selected object, and this needs the open
      # window.
      synch()
   end

   public on_close_button(ev)
      dispose()
   end

   public on_tree_sel_change(ev)
      local l, c, i, sel, l2, e
      l := []
      every i := !tree.get_selections() do {
         c := tree.get_line(i).component
         if is(c, CanvasComponent) & c.allows_selection() then {
            put(l, c)
            if i = tree.get_cursor() then
               sel := c
         } else
            tree.deselect_line(i)
      }
      l2 := []
      every e := !main.canvas.selections do {
         if keyof(l, e) then
            put(l2, e)
      }
      every e := !l do {
         if not(keyof(l2, e)) then
            put(l2, e)
      }

      main.canvas.selections := l2
      # Don't change selected unless necessary
      if not(keyof(l2, main.canvas.selected)) then
         main.canvas.selected := \sel | l2[1] | &null
      main.update_grey()
      main.canvas.update_pos_label()
      main.canvas.invalidate()
   end

   public on_tree_press(ev)
      local n, pm
      tree.get_line_under_pointer(ev) | fail
      n := tree.object_get_cursor() | fail
      pm := PopupMenu()
      pm.popup(self, n.create_menu(), ev.x, ev.y)
    end

   public setup()
      set_label("Tree view")
      set_layout(GridLayout())
      tree := ComponentTree()
      tree.set_size(scale(320), scale(320))
      tree.connect(self.on_tree_sel_change, Event.SELECTION_CHANGED)
      tree.connect(self.on_tree_press, Event.MOUSE_RIGHT_PRESS)
      tree.set_select_mode(Select.MANY)
      self.add(tree)
      self.connect(self.on_close_button, Event.WINDOW_CLOSE_BUTTON)
   end

   public new(main)
      Dialog.new()
      self.main := main
      return
   end
end


class BaseNode(TreeNode)
   public 
      component

   public defer get_child_components()
   public defer get_name()

   public create_menu()
      return self.component.create_menu()
   end

   public synch()
      local i, c, j, n, l

      l := get_child_components()

      every i := 1 to *l do {
         c := l[i]
         if j := whereis(c, i) then {
            if j ~= i then
               children[i] :=: children[j]
         } else {
            n := CanvasComponentNode(c)
            add(n, i)
         }
         children[i].synch()
      }
      while *children > *l do
         remove_index(*children)

      if get_label() ~=== get_name() then
         set_label(get_name())
   end

   public whereis(c, from)
      local i
      /from := 1
      every i := from to *children do {
         if children[i].component === c then
            return i
      }
   end

   public new(c)
      TreeNode.new()
      self.component := c
      self.set_expanded(&yes)
      self.set_label(get_name())
      return
   end
end


class CanvasNode(BaseNode)
   public get_child_components()
      return self.component.children
   end

   public get_name()
      return "Canvas"
   end
end


class CanvasComponentNode(BaseNode)
   public get_child_components()
      local l, e
      l := []
      every e := self.component.gen_cos() do {
         if is(e, CanvasComponent) then
            put(l, e)
      }
      return l
   end

   public get_name()
      return self.component.class_name || "(" || self.component.name || ")"
   end
end




