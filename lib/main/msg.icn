#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

$define LIB "objecticonipclib.so"

package ipc

import lang, util

#
# This class provides an inter process messaging facility.  The implementation requires
# the accompanying C library objecticonipclib.so to be on the library path.
#
# Instances of this class should not be created directly, but rather using the factory
# procedures {open_public}, {create_public} and {create_private}
#
class Msg(NoCopy)
   private 
      id

   #
   # Send the given object.  The object may be an arbitrary Icon structure, and will be
   # encoded into a string by the {encode()} procedure.
   #
   public send(o)
      return send_impl(encode(o))
   end

   private defer send_impl(s)

   #
   # Receive an object from the queue, waiting if necessary.
   #
   public receive()
      return decode(receive_impl())
   end

   private defer receive_impl()

   #
   # Attempt to get an object from the queue, failing if one is not
   # ready immediately.
   #
   public attempt()
      return decode(attempt_impl())
   end

   private defer attempt_impl()

   #
   # Poll the queue for an object for t milliseconds.  If an object is
   # not received within that time, fail, otherwise return it.
   #
   public poll(t)
      local c, o
      c := Time.get_system_millis()
      repeat {
         if o := attempt() then
            return o
         if Time.get_system_millis() - c > t then
            fail
         delay(50)
      }
   end

   #
   # Clean up the resources used by the queue.  This should be called by
   # the parent process after the queue is no longer needed.
   #
   public defer remove()

   #
   # Return the underlying id of the queue.
   #
   public get_id()
      return id
   end

   private static defer open_public_impl()
   private static defer create_public_impl()
   private static defer create_private_impl()

   private static init()
      Class.load_library(LIB) | runerr("Couldn't load dynamic library " || &why)
   end

   private new(id)
      self.id := id
      return
   end

   #
   # Get an existing public queue with the given key, or fail
   # if no such queue exists.
   #
   public static open_public(key)
      return Msg(open_public_impl(key))
   end

   #
   # Create a new public queue with the given key
   #
   public static create_public(key)
      return Msg(create_public_impl(key))
   end

   #
   # Create a new private queue
   #
   public static create_private()
      return Msg(create_private_impl())
   end
end
