#
# $Id$
#

package http

import util,
   lang,
   net,
   io,
   datastruct(SortTable),
   ipl.base64,
   ipl.strings,
   ipl.scan,
   ipl.printf

#
# Little helper class to store cookie details
#
class Cookie()
   package readable
      name,
      value,
      expires, 
      domain, 
      path,
      secure,
      comment, 
      version

   #
   # This is a utility function to remove any expired cookies from
   # a table of cookies.
   #
   public static expire_cookies(cookies)
      local e, f, g, now, t
      now := Time()
      every e := !sort(cookies) do {
         every f := !sort(e[2]) do {
            every g := !sort(f[2]) do {
               t := g[2].expires
               if /t | now.after(t) then
                  delete(f[2], g[1])
            }
            if *f[2] = 0 then
               delete(e[2], f[1])
         }
         if *e[2] = 0 then
            delete(cookies, e[1])
      }
      return cookies
   end
end

# This class contains an interface for additional functions which can
# be called during a request.  It is set by setting the helper member
# of `HttpRequest`.
#
abstract class HttpRequestHelper()
   # This function is called when an 401 Unauthorized response occurs.
   # The domain and realm are passed to the function, and it should
   # return an `Authentication` instance to provide the username and
   # password so the request can be retried.  If it fails, then the
   # entire request fails.
   #
   public abstract get_authentication(httpc, dom, realm)

   # This function is called on a redirect with the request and
   # response objects.  It may modify those objects (eg by setting
   # request headers).  If the function returns, then the redirect is
   # not carried out and the whole request fails with the http error
   # of the redirect.  If the function fails, then the redirect is
   # carried out.
   #
   public abstract modify_redirect(httpc, request, response)
end

#
# An http client
#
class HttpClient(NetClient)
   public static const
      TOKEN_CHAR,
      BEGIN_EVENT,
      COMPLETE_EVENT,
      FAILED_EVENT,
      HTTP_SUCCESS_EVENT,
      HTTP_ERROR_EVENT,
      ABORTED_EVENT,
      RETRYING_EVENT,
      HEADERS_EVENT,
      PROGRESS_EVENT,
      FOUND_GZIP

   private static init()
      TOKEN_CHAR := &ascii[33:128] -- '()<>@,;:\\\"/[]?={} \t'
      BEGIN_EVENT := "Begin"
      COMPLETE_EVENT := "Complete"
      FAILED_EVENT := "Failed"
      HTTP_ERROR_EVENT := "HTTP Error"
      HTTP_SUCCESS_EVENT := "HTTP Success"
      ABORTED_EVENT := "Aborted"
      RETRYING_EVENT := "Retrying"
      HEADERS_EVENT := "Headers"
      PROGRESS_EVENT := "Progress"
$if (_UNIX | _PLAN9) & ~_CYGWIN
      FOUND_GZIP := Yes{ Files.find_exe("gunzip") }
$endif
   end

   private readable 
      request,
      response,
      previous_response,
      retries,
      retry_while_data_flag,
      length,
      read,
      http_version,
      http_error,
      keep_alive_flag,
      user_agent,
      redir_set, 
      auth,
      auth_scheme,
      basic_auth_header,
      nonce,
      nonce_count,
      cnonce,
      opaque,
      ha1,
      qop,
      realm,
      cookies,
      authentications,
      abort_flag,
      some_data_flag,
      gzip_flag,
      inflater_stream

   #
   # Set the http version to use; by default "1.1"
   #
   public set_http_version(s)
      http_version := s
      link
   end

   #
   # Set the user-agent identification
   #
   public set_user_agent(s)
      self.user_agent := s
      link
   end

   #
   # Configure whether the client uses the keep-alive feature (the
   # default is yes).
   #
   public set_keep_alive(s)
      self.keep_alive_flag := need_flag(s)
      link
   end

   #
   # This flag indicates that after a timeout, the retries count should
   # be reset if any data was received.
   #
   public set_retry_while_data(s)
      self.retry_while_data_flag := need_flag(s)
      link
   end

   #
   # Set the cookies table.
   #
   public set_cookies(m)
      self.cookies := m
      link
   end

   #
   # Get the cookies table.
   #
   public get_cookies()
      return .self.cookies
   end

   #
   # Set the authentications table.
   #
   public set_authentications(m)
      self.authentications := m
      link
   end

   #
   # Get the authentications table.
   #
   public get_authentications()
      return .self.authentications
   end

   #
   # A flag value.  When set, indicates that gzip compression may be used, if available.
   #
   public set_gzip(s)
      self.gzip_flag := need_flag(s)
      link
   end

   #
   # Get the current HttpRequest
   #
   public get_request()
      return .self.request
   end

   #
   # Get the current HttpResponse.  It generally only makes sense to
   # examine this after an HTTP error, since otherwise it may be
   # incomplete.
   #
   public get_response()
      return .\self.response
   end

   #
   # Abort the current request.
   #
   public abort()
      self.abort_flag := &yes
   end

   #
   # Helper function to put a header string into the conventional
   # capitalization used in HTTP; eg "abc-DEF" -> "Abc-Def".
   #
   public static capitalize_header(s)
      local t
      t := ""
      s ? until pos(0) do {
         t ||:= map(move(1), &lcase, &ucase) || map(tab(past("-") | 0))
      }
      return t
   end

   private add_request_headers(l)
      local e
      every e := request.gen_header_entries() do
         every put(l, capitalize_header(e.key) || ": " || !e.val)
   end

   #
   # Set the number of retries to use.  The default is two.
   #
   public set_retries(retries)
      self.retries := need_integer(retries, 0)
      link
   end

   #
   # Retrieve the given `HttpRequest` request, or fail if that
   # is not possible.
   #
   # :Parameters :
   # :  `request` - an `HttpRequest` instance
   # :Returns :
   # :  an `HttpResponse` object.
   public retrieve(request)
      local sc, e
      \request.url | runerr("URL not set")
      # Create our own copy of the request as we may modify it during
      # redirects
      self.request := HttpRequest().
         set_url(request.url).
         set_helper(request.helper).
         set_method(request.method).
         set_referer(request.referer).
         set_range(request.range_start, request.range_end)
      every e := request.gen_header_entries() do
         every self.request.add_header(e.key, !e.val)
      if /request.output_stream then
         request.method == "HEAD" | runerr("No output stream set")
      else {
         request.output_stream.can(Stream.WRITE + Stream.TRUNCATE + Stream.SEEK) | 
                        runerr("Output stream not writable, seekable and truncatable", request.output_stream)
         self.request.set_output_stream(request.output_stream)
      }
      if /request.input_stream then {
         if request.method == ("POST" | "PUT") then runerr("No input stream set on a POST or PUT")
      } else {
         \request.content_type | runerr("Content-type not set with an input stream")
         self.request.set_content_type(request.content_type)
         request.input_stream.can(Stream.READ + Stream.SEEK) | 
                        runerr("Input stream not readable and seekable", request.input_stream)
         self.request.set_input_stream(request.input_stream)
      }

      redir_set := set()
      response := previous_response := auth := auth_scheme := abort_flag := &null
      repeat {
         http_error := &null

         retrieve_page() | fail
         sc := response.get_status_code() | return on_http_error("Invalid status code in response")
         if sc = (200 | 201 | 206) then {
            fire(HTTP_SUCCESS_EVENT)
            return response
         }

         if sc = 401 then
            handle_authentication() | fail
         else if sc = (301| 302 | 303 | 307) then
            handle_redirect(sc) | fail
         else
            return on_http_error(response.get_status())
      }
   end

   private handle_redirect(sc)
      local l, s, u
      #
      # A redirection, so extract the URL if possible.
      #
      auth := auth_scheme := &null
      l := response.get_first_header("Location") | return on_http_error("No Location in a redirect response")
      if match("http://" | "https://", map(l)) then {
         u := URL(l) | return on_http_error("Invalid Location in a redirect response: " || l)
         request.set_url(u)
      } else
         #
         # It shouldn't be a relative URL, but that seems to be
         # commonplace.
         #
         request.set_url(request.url.get_relative(l))
      
      s := request.url.str()
      if member(redir_set, s) then
         return on_http_error("Circular redirection detected: " || s)
      insert(redir_set, s)

      if (\request.helper).modify_redirect(self, request, response) then
         return on_http_error(response.get_status())
         
      #
      # On a redirect, a POST becomes a GET, except for code 307.
      #
      if request.method == "POST" & sc ~= 307 then {
         request.set_method("GET").
            set_input_stream().
            set_content_type().
            unset_header("content-length").
            unset_header("content-type")
      }

      # Note this response so that it is added to the chain of
      # redirected responses in the final response.
      previous_response := response

      return
   end

   private handle_authentication()
      local s, t, k, realm, dom

      s := response.get_first_header("www-authenticate") | 
         return on_http_error("No WWW-Authenticate in a 401 response")
      t := parse_generic_header(s)

      realm := t.member("realm") | 
         return on_http_error("No realm in WWW-Authenticate header in a 401 response")
      dom := string(response.url.host)
      k := realm || " at " || dom
      if /auth then {
         # First 401 response, so see if we have a cached
         # authentication; if not then ask for one.
         (auth := member(authentications, k)) | {
            if auth := (\request.helper).get_authentication(self, dom, realm) then
               insert(authentications, k, auth)
            else
               return on_http_error("Authentication requested - please set username, password")
         }
      } else {
         # 401 response to a request with authentication, so it must
         # have been wrong.  Delete bad value from cache and ask.
         delete(authentications, k)
         if auth := (\request.helper).get_authentication(self, dom, realm) then
            insert(authentications, k, auth)
         else
            return on_http_error("Failed to authenticate - correct username, password")
      }

      if t.member("Basic") then {
         auth_scheme := "Basic"
         return setup_basic_authentication()
      }
      if t.member("Digest") then {
         auth_scheme := "Digest"
         return setup_digest_authentication(t)
      }

      return on_http_error("WWW-Authenticate header contained unknown authentication method")
   end

   private setup_basic_authentication()
      basic_auth_header := "Basic " || base64encode(auth.username || ":" || auth.password)
      return
   end

   private setup_digest_authentication(t)
      local algorithm, md5, qop_options

      self.realm := t["realm"]
      self.nonce := member(t, "nonce") | 
         return on_http_error("WWW-Authenticate digest header didn't contain a nonce")
      self.opaque := t["opaque"]

      algorithm := member(t, "algorithm") | "MD5"
      self.nonce_count := 0
      self.cnonce := "0a4f113b"
      
      #
      # Calculate HA1
      #
      md5 := MD5()
      md5.update(auth.username || ":" || realm || ":" || auth.password)
      if map(algorithm) == "md5-sess" then {
         md5.update(":" || nonce || ":" || cnonce)
      }
      self.ha1 := md5.final_str()

      #
      # Get the available qop values and select a qop.
      #
      qop_options := set()
      member(t, "qop") ? {
         while(tab(upto(TOKEN_CHAR))) do 
            insert(qop_options, map(tab(many(TOKEN_CHAR))))
      }
      self.qop := member(qop_options, "auth-int" | "auth") | &null

      return
   end

   private create_digest_authorization_header()
      local md5, nc, h, t, hentity, ha2, s

      self.nonce_count +:= 1
      nc := map(Format.int_to_string(self.nonce_count, 16, 8))
      md5 := MD5()
      #
      # Calculate HA2
      #
      md5.update(string(request.method || ":" || request.url.get_file()))
      if \qop == "auth-int" then {
         # Calculate H(entity)
         t := MD5()
         if \request.input_stream then {
            request.input_stream.seek(1) | return whyf_dont_retry("Couldn't seek on request input stream: %w")
            repeat {
               s := request.input_stream.in(1048576) | return whyf_dont_retry("Couldn't read request input stream: %w")
               if /s then
                  break
               t.update(s)
            }
         }
         hentity := t.final_str()
         md5.update(":" || hentity)
      }

      ha2 := md5.final_str()

      md5.update(ha1 || ":" || nonce || ":")
      if \self.qop then
         md5.update(nc || ":" || cnonce || ":" || qop || ":")

      md5.update(ha2)

      h := "Digest username=\"" || auth.username || "\",\r\n\t" ||
         "realm=" || realm || ",\r\n\t" ||
         "nonce=" || nonce || ",\r\n\t" ||
         "uri=\"" || request.url.get_file() || "\",\r\n\t"
      if \qop then {
         h ||:= "qop=" || qop || ",\r\n\t" ||
            "nc=" || nc || ",\r\n\t" ||
            "cnonce=" || cnonce || ",\r\n\t"
      }
      if \opaque then
         h ||:= "opaque=" || opaque || ",\r\n\t"
      h ||:= "response=\"" || md5.final_str() || "\""

      return h
   end

   #
   # Parse a string `s` as a generic header consisting of key-values.
   # The keys are comprised of `TOKEN_CHAR`s, as are the values,
   # unless enclosed in double quotes.  Examples of `s` :-
   # ~
   #      a=100 b=200; c="hello world"
   #      x="backslash escapes \" are allowed"
   # ~
   #
   public static parse_generic_header(s)
      local t, k, v

      t := SortTable(, Text.caseless_compare)
      s ? while tab(upto(TOKEN_CHAR)) do {
         k := tab(many(TOKEN_CHAR))
         if ="=" then {
            if any('\"') then
               v := parse_quoted_string(&yes)
            else
               v := tab(many(TOKEN_CHAR)) | ""
         } else
            v := &null
         t.insert(k, v)
      }
      return t
   end

   #
   # Parse a string in double quotes; a scan must be in progress with
   # &pos at a ".  &pos will be moved beyond the terminating quote.
   # 
   # :Parameters :
   # :  `omit` - if non-null, omit the quotes from the result
   public static parse_quoted_string(omit)
      local res
      if /omit then
         res := move(1)
      else {
         res := ""
         move(1)
      }
      repeat {
         res ||:= tab(upto('\\"') | 0)
         if any('\\') then
            res ||:= move(2)
         else {
            # Closing quote or end of string
            if /omit then 
               res ||:= move(1)
            else
               move(1)
            return res
         }
      }
   end

   private maybe_set_authorization_header()
      case auth_scheme of {
         "Basic":
            request.set_header("authorization", basic_auth_header)
         "Digest":
            request.set_header("authorization", create_digest_authorization_header()) | fail
      }
      return
   end

   private parse_cookie_string(s)
      local c, k, v, t, d

      s ? repeat {
         tab(upto(TOKEN_CHAR)) | break
         k := tab(many(TOKEN_CHAR))
         if ="=" then {
            if any('\"') then
               # The first one (c.value) keeps its quotes, the others don't.
               v := parse_quoted_string(c)
            else
               v := tab(upto(';') | 0)
         } else
            v := &null
         if /c then {
            c := Cookie()
            c.name := k
            c.value := v
         } else {
            case map(k) of {
               "expires" : c.expires := Time.parse(v, "E, dd-MMM-yyyy hh:mm:ss zzz")
               "path" : c.path := v
               "domain" : c.domain := v
               "secure" : c.secure := &yes
               "max-age" : {
                  if d := integer(v) then {
                     t := Time()
                     t.set_seconds(t.seconds + d)
                     c.expires := t
                  }
               }
               "comment" : c.comment := v
               "version" : c.version := integer(v)
            }
         }
      }

      return \c
   end

   private valid_cookie(c)
      local d, e

      # The path must be a prefix of the request url path
      #
      if \c.path then
         match(c.path, request.url.get_file()) | fail

      if \c.domain then {
         d := map(c.domain)
         e := map(request.url.get_host())

         # The domain must have an embedded dot
         #
         upto('.', trim(d, '.')) | fail

         # The domain must match a domain key of the request address
         #
         d == domain_keys(e) | fail

         # The prefix of the request address after discarding the
         # domain must have no embedded dots.  Eg "www.acme.co.uk"
         # can't specify ".co.uk" since "www.acme" has an embedded dot
         # - but it can specify ".acme.co.uk".
         #
         if upto('.', trim(e[1:-*d], '.')) then
            fail
      }

      return
   end

   #
   # Store any cookie values in the current page's header.
   # 
   private store_cookies()
      local c, domain, path, paths, vals, s
      every s := response.gen_headers("set-cookie") do {
         if (c := parse_cookie_string(s)) & valid_cookie(c) then {
            domain := map(\c.domain | string(request.url.get_host()))
            (paths := member(cookies, domain)) | insert(cookies, domain, paths := table())
            path := c.path
            if /path then {
               # Netscape cookies default to the full file path; rfc2109 ones
               # default to the file up to, but not including, the right-most /.
               if /c.version then
                  path := string(request.url.get_file())
               else {
                  path := string(request.url.get_path_dir())
                  if path[-1] == "/" then
                     path[-1] := ""
               }
            }
            (vals := member(paths, path)) | insert(paths, path, vals := table())
            insert(vals, map(c.name), c)
         }
      }
   end

   # 
   # Given a domain name, generate all the valid matching cookie domain
   # values.
   #
   private domain_keys(s)
      # If a numerical address, then just return s
      if many('0-9.', s) = *s + 1 then
         return s
      suspend ("." || s) | s
      s ? {
         while tab(upto('.')) do {
            suspend s[&pos:0]
            move(1)
            suspend s[&pos:0]
         }
      }
   end

   private create_cookie_header()
      local s, e, f, domain, path, c, now, ver, t

      domain := string(map(request.url.get_host()))
      path := string(request.url.get_file())
      now := Time()
      s := ""
      every e := \cookies[domain_keys(domain)] do {
         every f := back(sort(e)) do {
            if match(f[1], path) then {
               every c := (!sort(f[2]))[2] do {
                  t := c.expires
                  if /t | t.after(now) then {
                     if *s > 0 then
                        s ||:= "; "
                     s ||:= c.name
                     s ||:= "=" || \c.value
                     if \c.version then {
                        s ||:= "; $Path=\"" || \c.path || "\"" 
                        s ||:= "; $Domain=\"" || \c.domain || "\"" 
                        ver := c.version
                     }
                  }
               }
            }
         }
      }

      if \ver then
         s := "$Version=\"" || ver || "\"; " || s

      if *s > 0 then
         return s
   end

   #
   # Useful debug function
   # 
   public dump_cookies()
      local c, e, f
      every e := !sort(cookies) do {
         write("domain:", e[1])
         every f := back(sort(e[2])) do {
            write("\tpath:", f[1])
            every c := (!sort(f[2]))[2] do {
               write("\t\t", to_string(c))
            }
         }
      }
   end

   private on_http_error(s)
      &why := http_error := s
      fire(HTTP_ERROR_EVENT)
   end

   #
   # After invoking retrieve(), this method can be used to determine
   # whether a failure was caused by a network failure or an HTTP failure
   # (for example 404 not found).  In the former case this method fails; in
   # the latter case the error string is returned.
   #
   public get_http_error()
      return .\http_error
   end

   #
   # 
   private maybe_open_connection()
      local s, p, f
      s := request.url.get_decoded_host()
      p := request.url.get_port()
      f := Yes{ request.url.get_scheme() == "https" }
      if not(is_connected()) | server ~== s | port ~= p | ssl_flag ~=== f then {
         close_connection()
         set_server(s)
         set_port(p)
         set_ssl(f)
         open_connection() | fail
      }
      return
   end

   #
   # Retrieve the current request; doesn't handle redirects and so
   # on - these are handled by the caller, retrieve().
   # 
   private retrieve_page()
      local i

      i := retries
      self.read := self.length := &null
      reset_dont_retry()

      fire(BEGIN_EVENT)
      repeat {
         if tryone() then {
            store_cookies()
            close_inflater() | {
               fire(FAILED_EVENT)
               fail
            }
            if /abort_flag then {
               fire(COMPLETE_EVENT)
               return response
            }
         }

         close_connection()
         if \abort_flag then {
            close_inflater()
            error("Aborted")
            fire(ABORTED_EVENT)
            fail
         }
         if \dont_retry_flag then {
            # Since we may be closing the inflater prematurely, gzip would
            # overwrite &why with "unexpected end of file"
            save_why{close_inflater()}
            whyf("Failed and unable to retry - last reason: %w")
            fire(FAILED_EVENT)
            fail
         }

         if \retry_while_data_flag & \some_data_flag then
            i := retries
         else if (i -:= 1) < 0 then {
            save_why{close_inflater()}
            if retries > 0 then
               whyf("Gave up after %d attempts - last reason: %w", 1 + retries)
            fire(FAILED_EVENT)
            fail
         }

         fire(RETRYING_EVENT)
      }
   end

   private tryone()
      local s

      # Flag to indicate whether we read any data in this attempt.
      #
      some_data_flag := &null

      #
      # Open the connection
      #
      maybe_open_connection() | fail

      #
      # Write the request
      #
      write_request() | fail

      repeat {
         #
         # Create a response
         #
         response := HttpResponse().
            set_url(request.url).
            set_previous_response(previous_response)

         s := expect_line() | fail
         response.set_status(s)

         #
         # Read the response.
         #
         read_headers() | fail
         fire(HEADERS_EVENT)
         if \abort_flag then
            fail

         #
         # A 100 ("Continue") result means go round again and get 
         # the status/headers again - they follow immediately after
         # the end of the first headers.
         #
         (response.get_status_code() = 100) | break
      }

      #
      # A 304 ("Not Modified") or a 204 ("No Content") never has a
      # body; nor of course does a HEAD request.
      #
      if (request.method == "HEAD") | (response.get_status_code() = (204 | 304)) then
         maybe_close_connection()
      else if \ (request.range_start | request.range_end) & response.get_status_code() ~= 206 then
         return error_dont_retry("Requested for range was unsatisfiable")
      else
         read_data() | fail

      return
   end
   
   #
   # 
   private maybe_close_connection()
      #
      # Close if told to do so, or if keep_alive_flag is unset
      #
      if /keep_alive_flag | map(response.gen_headers("connection")) == "close" then
         close_connection()
   end

   private write_request()
      local rs, sz, s, f, v, l, h, p
      request.set_header("user-agent", user_agent)
      h := URL.bracket_host(request.url.get_decoded_host())
      p := request.url.get_port()
      if not(p = URL.get_default_port(request.url.get_scheme())) then
         h ||:= ":" || p
      request.set_header("host", h)
      if v := \request.referer then {
         # A referer header shouldn't include a fragment (rfc2616).
         if is(v, URL) then
            v := clone(v).set_fragment().str()
         request.set_header("referer", v)
      }
      if \gzip_flag then
         request.set_header("accept-encoding", "gzip")
      request.unset_header("cookie")
      request.set_header("cookie", create_cookie_header())
      request.set_header("connection", if \keep_alive_flag then "Keep-Alive" else "Close")

      f := (\request.range_start | 0) + (\self.read | 0)
      rs := if f > 0 then
         f || "-"
      else
         "-"
      rs ||:= \request.range_end
            
      if rs == "-" then
         request.unset_header("range")
      else
         request.set_header("range", "bytes=" || rs)

      l := [request.method || " " || request.url.get_file() || " HTTP/" || http_version]

      if \request.input_stream then {
         request.set_header("content-type", request.content_type)
         sz := request.input_stream.seek(0) - 1 | return whyf_dont_retry("Couldn't seek on request input stream: %w")
         request.set_header("content-length", sz)
         maybe_set_authorization_header() | fail
         add_request_headers(l)
         put(l, "")
         write_lines(l) | fail
         request.input_stream.seek(1) | return whyf_dont_retry("Couldn't seek on request input stream: %w")
         repeat {
            s := request.input_stream.in(1048576) | return whyf_dont_retry("Couldn't read request input stream: %w")
            if /s then
               break
            if \abort_flag then fail
            write_str(s) | fail
         }
      } else {
         maybe_set_authorization_header() | fail
         add_request_headers(l)
         put(l, "")
         write_lines(l) | fail
      }

      return
   end

   private read_headers()
      local s, key, val
      repeat {
         s := expect_line() | fail
         if *s = 0 then {
            # Add last header (if any).
            response.add_header(\key, val)
            break
         }
         s ? {
            #
            # A continuation line starts with a space or a tab.
            #
            if any(' \t') then
               val ||:= tab(0)
            else {
               # Add current header and start a new one.
               response.add_header(\key, val)
               key := tab(upto(':') | 0)
               =":"
               tab(many(' \t'))
               val := tab(0)
            }
         }
      }
      return
   end

   private close_inflater()
      if \inflater_stream then {
         (inflater_stream.close() & inflater_stream.succeeded()) | {
            inflater_stream := &null
            fail
         }
         inflater_stream := &null
      }
      return
   end

   private open_inflater()
      # x-gzip is equivalent to gzip - see
      # http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.5
      #
      # Note that we don't inflate .tar.gz and similar files.
      # These are unfortunately regularly returned with headers
      # Content-type=application/x-tar and Content-encoding=gzip,
      # rather than just Content-type=application/x-gzip.  This happens
      # even without Accept-encoding=gzip.
      #
      if \gzip_flag &
         trim(map(response.get_first_header("content-encoding"))) == ("gzip" | "x-gzip") &
         not endswith(map(response.get_filename()), ".gz" | ".tgz" | ".svgz" | ".gzip") then 
      {
         inflater_stream := FilterOutputStream(request.output_stream, "gunzip", ["-c"]) | 
            return whyf_dont_retry("Couldn't open inflater stream: %w")
      }
      return
   end

   #
   # 
   private read_data()
      #
      # See whether we are continuing a partial read.  If so, the
      # self.read and self.length values continue from the previous
      # attempt.  Otherwise, they are reset and the output stream
      # truncated.
      #
      if not(\self.read & response.get_status_code() = 206) then {
         close_inflater()
         request.output_stream.truncate(0).seek(1) | return whyf_dont_retry("Couldn't reset request output stream: %w")
         open_inflater() | fail
         self.length := integer(response.get_first_header("content-length")) | &null
         self.read := 0
      }

      #
      # Read the data.
      #
      return if trim(map(response.get_first_header("transfer-encoding"))) == "chunked" then
         read_chunked()
      else if /length then
         read_to_eof()
      else
         read_length()
   end

   #
   # 
   private read_chunked()
      local l, chunk, s
      repeat {
         l := expect_line() | fail
         l ? {
            chunk := Format.string_to_int(tab(many('0-9a-fA-F'))) |
               return error("Expected chunk-length specifier; got " || l)
         }
         if chunk = 0 then
            break
         while chunk > 0 do {
            if \abort_flag then fail
            s := expect_str(min(1048576, chunk)) | fail
            add_some(s) | fail
            chunk -:= *s
         }
         l := expect_line() | fail
         if *l > 0 then
            return error("Expected empty line at end of chunk")
      }
      #
      # Read any trailing lines, upto an empty line.
      #
      repeat {
         l := expect_line() | fail
         if *l = 0 then
            break
      }

      maybe_close_connection()

      return
   end

   private read_to_eof()
      local s
      #
      # No content length.  Read until eof, then close.
      #
      repeat {
         if \abort_flag then fail
         s := read_str(1048576) | fail
         if /s then {
            close_connection()
            return
         }
         add_some(s) | fail
      }
   end

   #
   # 
   private read_length()
      local s
      #
      # Got a content length.  Read len bytes and leave the connection
      # open - unless told to close it.
      #
      while read < length do {
         if \abort_flag then fail
         s := expect_str(min(1048576, length - read)) | fail
         add_some(s) | fail
      }

      maybe_close_connection()

      return
   end

   #
   # Return the length of the current download, or fail if unknown
   #
   public get_length()
      return .\self.length
   end

   #
   # Return the number of bytes read so far, or fail if request has not begun to read
   #
   public get_read()
      return .\self.read
   end

   private add_some(s)
      read +:= *s
      some_data_flag := &yes
      fire(PROGRESS_EVENT)
      return if \inflater_stream then
         inflater_stream.writes1(s) | whyf_dont_retry("Couldn't write to inflater stream: %w")
      else
         request.output_stream.writes1(s) | whyf_dont_retry("Couldn't write to request output stream: %w")
   end

   public override new()
      NetClient.new()
      cookies := table()
      authentications := table()
      set_timeout(12000)
      keep_alive_flag := &yes
      retries := 2
      http_version := "1.1"
      user_agent := "httpclient.icn [en]"
      gzip_flag := FOUND_GZIP
      return
   end
end
