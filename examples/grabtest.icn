import
   gui, graphics

$ifdef _PLAN9
import io
$endif

class DragLabel(Label)
   public can_drag(ev)
      return "Hello"
   end

   public new()
      Component.new()
      set_allow_drag(1)
      return
   end

end

class Untitled(Dialog)
   private
      panel_1,
      label_1,
      text_button_1,
      text_button_2,
      text_button_3,
      panel_2,
      text_button_4,
      text_button_5,
      text_button_6,
      text_display_1,
      panel_3,
      text_button_7,
      text_button_8,
      text_button_9,
      text_button_10,
      text_button_11

   private code_to_str(n)
      return case n of {
         Mouse.LEFT_PRESS: "Mouse.LEFT_PRESS"
         Mouse.MIDDLE_PRESS: "Mouse.MIDDLE_PRESS"
         Mouse.RIGHT_PRESS: "Mouse.RIGHT_PRESS"
         Mouse.LEFT_RELEASE: "Mouse.LEFT_RELEASE"
         Mouse.MIDDLE_RELEASE: "Mouse.MIDDLE_RELEASE"
         Mouse.RIGHT_RELEASE: "Mouse.RIGHT_RELEASE"
         Mouse.DRAG: "Mouse.DRAG"
         Mouse.MOVEMENT: "Mouse.MOVEMENT"
         Mouse.WHEEL_UP: "Mouse.WHEEL_UP"
         Mouse.WHEEL_DOWN: "Mouse.WHEEL_DOWN"
         Mouse.ENTER: "Mouse.ENTER"
         Mouse.EXIT: "Mouse.EXIT"
         default: "?"||image(n)
      }
   end

   private type_to_str(n)
      return case n of {
         Event.MOUSE_LEFT_PRESS: "MOUSE_LEFT_PRESS"
         Event.MOUSE_MIDDLE_PRESS: "MOUSE_MIDDLE_PRESS"
         Event.MOUSE_RIGHT_PRESS: "MOUSE_RIGHT_PRESS"
         Event.MOUSE_LEFT_RELEASE: "MOUSE_LEFT_RELEASE"
         Event.MOUSE_MIDDLE_RELEASE: "MOUSE_MIDDLE_RELEASE"
         Event.MOUSE_RIGHT_RELEASE: "MOUSE_RIGHT_RELEASE"
         Event.MOUSE_LEFT_DRAG: "MOUSE_LEFT_DRAG"
         Event.MOUSE_MIDDLE_DRAG: "MOUSE_MIDDLE_DRAG"
         Event.MOUSE_RIGHT_DRAG: "MOUSE_RIGHT_DRAG"
         Event.MOUSE_MOVEMENT: "MOUSE_MOVEMENT"
         Event.MOUSE_WHEEL_UP: "MOUSE_WHEEL_UP"
         Event.MOUSE_WHEEL_DOWN: "MOUSE_WHEEL_DOWN"
         Event.MOUSE_LEFT_DRAG_OVER: "MOUSE_LEFT_DRAG_OVER"
         Event.MOUSE_MIDDLE_DRAG_OVER: "MOUSE_MIDDLE_DRAG_OVER"
         Event.MOUSE_RIGHT_DRAG_OVER: "MOUSE_RIGHT_DRAG_OVER"
         Event.MOUSE_LEFT_RELEASE_OVER: "MOUSE_LEFT_RELEASE_OVER"
         Event.MOUSE_MIDDLE_RELEASE_OVER: "MOUSE_MIDDLE_RELEASE_OVER"
         Event.MOUSE_RIGHT_RELEASE_OVER: "MOUSE_RIGHT_RELEASE_OVER"
         Event.WINDOW_RESIZE: "WINDOW_RESIZE"
         Event.WINDOW_CLOSE_BUTTON: "WINDOW_CLOSE_BUTTON"
         Event.ICON: "ICON"
         Event.BUTTON_RELEASE: "BUTTON_RELEASE"
         Event.BUTTON_PRESS: "BUTTON_PRESS"
         Event.BUTTON_HELD: "BUTTON_HELD"
         Event.SELECTION_CHANGED: "SELECTION_CHANGED"
         Event.CONTENT_CHANGED: "CONTENT_CHANGED"
         Event.CURSOR_MOVED: "CURSOR_MOVED"
         Event.VALUE_CHANGED: "VALUE_CHANGED"
         Event.ACTION: "ACTION"
         Event.TREE_NODE_EXPANSION: "TREE_NODE_EXPANSION"
         Event.SIZER_PRESS: "SIZER_PRESS"
         Event.SIZER_DRAG: "SIZER_DRAG"
         Event.SIZER_RELEASE: "SIZER_RELEASE"
         Event.MOUSE_ENTER: "MOUSE_ENTER"
         Event.MOUSE_EXIT: "MOUSE_EXIT"
         Event.KEY_PRESS: "KEY_PRESS"
         Event.KEY_RELEASE: "KEY_RELEASE"
         Event.GOT_FOCUS: "GOT_FOCUS"
         Event.LOST_FOCUS: "LOST_FOCUS"
         Event.DIALOG_DISPOSED: "DIALOG_DISPOSED"
         Event.IN_POINT_CHAIN: "IN_POINT_CHAIN"
         Event.POPUP_CLOSED: "POPUP_CLOSED"
         Event.INTERRUPTED: "INTERRUPTED"
         Event.RESUMED: "RESUMED"
         default: "?"||image(n)
      }
   end

   private ev_to_str(ev)
      local s
      if /ev then return "&null"
      s := code_to_str(ev.code)||" (" ||ev.x||","||ev.y||") " || ev.time
      if \ev.shift then s ||:= " shift"
      if \ev.lock then s ||:= " lock"
      if \ev.ctrl then s ||:= " ctrl"
      if \ev.meta then s ||:= " meta"
      if \ev.meta2 then s ||:= " meta2"
      if \ev.meta3 then s ||:= " meta3"
      if \ev.meta4 then s ||:= " meta4"
      if \ev.meta5 then s ||:= " meta5"
      if \ev.release then s ||:= " rel"
      return s
   end

   private on_event(ev)
      if not text_button_10.is_checked() then
         text_display_1.log([ev_to_str(ev)],100)
   end

   public component_setup()
      self.setup()
      connect(on_event, Event.ICON)
   end

   public end_dialog()
   end

   public init_dialog()
   end

   private on_text_button_3(ev)
      dispose()
   end

   private on_text_button_7(ev)
      FileDialog().show_modal(self)
   end

   private on_test_button_event(ev,src,type)
      if not text_button_10.is_checked() then
         text_display_1.log(["B:t="||type_to_str(type)||" e="||ev_to_str(ev)],100)
   end

   private on_text_button_8(ev)
   end

   private on_text_button_9(ev)
      own_selection(Selection.CLIPBOARD, StaticTextSelectionOwner(text_display_1.get_contents_str()))
   end

   private on_text_button_8p(ev)
   end

   private on_text_button_10(ev)

   end

   private on_text_button_1(ev)
      if text_button_1.is_checked() then
         win.grab_pointer()
      else
         win.ungrab_pointer()
   end

   private on_text_button_5(ev)
      text_button_6.set_is_checked(&no)
$ifdef _PLAN9
      Files.string_to_file(win.get_dir() || "/wctl", "keepabove")
$endif
   end

   private on_text_button_6(ev)
      text_button_5.set_is_checked(&no)
$ifdef _PLAN9
      Files.string_to_file(win.get_dir() || "/wctl", "keepbelow")
$endif
   end

   private on_rpress(ev)
      local m, pm, mi, i
      m := Menu()
      every i := 1 to 7 do {
         mi := TextMenuItem().set_label("Popup " || i)
         m.add(mi)
      }
      pm := PopupMenu()
      pm.popup(self, m, ev.x, ev.y)
   end

   private setup()
      local paint_2, paint_14, paint_7, layout_4, paint_11, paint_4, paint_9, paint_13, paint_6, layout_3, paint_10, paint_8, border_1, paint_12, layout_2
      self.set_resize(&yes)
      self.set_size(scale(506), scale(393))
      text_display_1 := TextDisplay().
         set_size(scale(299), scale(260)).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_contents([])
      self.add(text_display_1)
      paint_13 := TextPaint("Tooltip")
      paint_14 := TextPaint("Tooltip")
      text_button_11 := TextButton().
         clear_constraints().
         set_tooltip(paint_14).
         set_toggles(&no).
         set_paint(paint_13)
      paint_6 := TextPaint("Above")
      text_button_5 := TextButton().
         clear_constraints().
         connect(self.on_text_button_5, Event.ACTION).
         set_toggles(&yes).
         set_paint(paint_6)
      paint_7 := TextPaint("Below")
      text_button_6 := TextButton().
         clear_constraints().
         connect(self.on_text_button_6, Event.ACTION).
         set_toggles(&yes).
         set_paint(paint_7)
      paint_2 := TextPaint("Grab")
      text_button_1 := TextButton().
         clear_constraints().
         connect(self.on_text_button_1, Event.ACTION).
         set_toggles(&yes).
         set_paint(paint_2)
      paint_12 := TextPaint("DnD")
      border_1 := PlainBorder()
      label_1 := DragLabel().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_border(border_1).
         set_paint(paint_12)
      layout_3 := GridLayout().
         set_doi(scale(0)).
         set_extra("cells")
      panel_2 := Panel().
         clear_constraints().
         set_constraint("eol", &yes).
         set_layout(layout_3).
         add(text_button_11).
         add(text_button_5).
         add(text_button_6).
         add(text_button_1).
         add(label_1)
      self.add(panel_2)
      paint_4 := TextPaint("Quit")
      text_button_3 := TextButton().
         clear_constraints().
         connect(self.on_text_button_3, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_4)
      paint_10 := TextPaint("Copy")
      text_button_9 := TextButton().
         clear_constraints().
         connect(self.on_text_button_9, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_10)
      paint_11 := TextPaint("Pause")
      text_button_10 := TextButton().
         clear_constraints().
         connect(self.on_text_button_10, Event.ACTION).
         set_toggles(&yes).
         set_paint(paint_11)
      paint_8 := TextPaint("Modal")
      text_button_7 := TextButton().
         clear_constraints().
         connect(self.on_text_button_7, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_8)
      paint_9 := TextPaint("Test")
      text_button_8 := TextButton().
         clear_constraints().
         connect(self.on_test_button_event, &null).
         connect(self.on_text_button_8, Event.ACTION).
         connect(self.on_text_button_8p, Event.BUTTON_PRESS).
         set_toggles(&no).
         set_paint(paint_9)
      layout_4 := GridLayout().
         set_doi(scale(0)).
         set_extra("cells")
      panel_3 := Panel().
         clear_constraints().
         set_layout(layout_4).
         add(text_button_3).
         add(text_button_9).
         add(text_button_10).
         add(text_button_7).
         add(text_button_8)
      self.add(panel_3)
      self.connect(self.dispose, Event.WINDOW_CLOSE_BUTTON)
      self.connect(self.on_rpress, Event.MOUSE_RIGHT_PRESS)
      layout_2 := GridLayout().
         set_extra("cells")
      self.set_layout(layout_2)
   end
end

procedure main()
   local d
   d := Untitled()
   d.show_modal()
end

### Ivib-v2 layout: layouts/$.layout
