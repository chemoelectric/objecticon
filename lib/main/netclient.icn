#
# $Id$
#

package net

$ifdef _PLAN9
import 
   util, 
   io
$else
import 
   util, 
   io,
   posix
$endif

#
# Common base class for a client class which holds a connection to a
# server and communicates using CRLF-terminated lines.
#
# @field timeout=integer: see {set_timeout}
# @field server=string: see {set_server}
# @field path=string: see {set_path}
# @field port=integer: see {set_port}
# @field task=object: see {set_task}
#
class NetClient(Connectable, SetFields)
   public static const 
      CONNECTING_EVENT,
      CONNECTED_EVENT,
      CLOSED_EVENT,
      WRITING_STRING_EVENT,
      WRITING_LINE_EVENT,
      READ_LINE_EVENT,
      READ_STRING_EVENT,
      EVENT_TABLE
   
   private static init()
      CONNECTING_EVENT := "Connecting"
      CONNECTED_EVENT := "Connected"
      CLOSED_EVENT := "Closed"
      WRITING_STRING_EVENT := "Writing string"
      WRITING_LINE_EVENT := "Writing line"
      READ_LINE_EVENT := "Read line"
      READ_STRING_EVENT := "Read string"
      EVENT_TABLE := table(,
                           "connecting", CONNECTING_EVENT,
                           "connected", CONNECTED_EVENT,
                           "closed", CLOSED_EVENT,
                           "writing_string", WRITING_STRING_EVENT,
                           "writing_line", WRITING_LINE_EVENT,
                           "read_line", READ_LINE_EVENT,
                           "read_string", READ_STRING_EVENT)
   end

   private readable
      path,
      server,
      port,
      timeout,
      task,
      ssl_flag

   private
      connection,
      ssl_connection,
      sbuff

   # 
   # Fail and set the error code, and close the connection.
   #
   protected error_and_close(a)
      error(a)
      close()
   end

   # Set the timeout in ms to use.  If {&null}, then no timeout will
   # be used.
   #
   public set_timeout(timeout)
      self.timeout := timeout
   end

$ifdef _PLAN9
   #
   # Open the connection.
   #
   protected open()
      local addr
      close() | fail
      addr := "tcp!" || server || "!" || port
      connection := NetStream.dial(addr) | return error("Couldn't connect to " || addr || ": " || &why)
      sbuff := ""
      fire(CONNECTED_EVENT)
      return
   end
$else
   private do_poll(for)
      return if \task then
         task.poll([connection, for], timeout)
      else
         DescStream.poll([connection, for], timeout)
   end

   #
   # Open the connection.
   #
   protected open()
      local r, domain, addr

      if \server then {
         domain := ProtocolFormat.INET
         addr := "inet:" || server || ":" || port
      } else if \path then {
         domain := ProtocolFormat.UNIX
         addr := "unix:" || path
      } else
         runerr("Neither server/port nor path set")

      close()
      connection := SocketStream.socket(domain)
      # Connecting in non-blocking mode is too complicated for SSL.
      if /ssl_flag then
         connection.flag(FileOpt.NONBLOCK) | fail
      fire(CONNECTING_EVENT)
      connection.connect(addr) | {
         if errno() = Errno.EINPROGRESS then {
            r := do_poll(Poll.OUT) | {
               close()
               return error("Couldn't connect to " || addr || ": " || &why)
            }
            if /r then {
               close()
               return error("Couldn't connect to " || addr || " (timeout)")
            }
            r[1] = Poll.OUT | {
               close()
               return error("Couldn't connect to " || addr || " (socket error)")
            }
         } else {
            close()
            return error("Couldn't connect to " || addr || ": " || &why)
         }
      }
      if \ssl_flag then
         ssl_connection := SslStream(connection) | {
            close()
            return error("Couldn't open SSL connection: " || &why)
         }

      sbuff := ""
      fire(CONNECTED_EVENT)
      return
   end
$endif

   #
   # Close the connection
   #
   public close()
      if \ssl_connection then {
         ssl_connection.close()
         fire(CLOSED_EVENT)
         ssl_connection := connection := &null
      } else if \connection then {
         connection.close()
         fire(CLOSED_EVENT)
         connection := &null
      }
      return
   end

   #
   # Set the path to use (implies using PF_UNIX socket domain)
   #
   public set_path(s)
      path := s
   end

   #
   # Set the server to use (implies using PF_INET socket domain)
   #
   public set_server(s)
      server := s
   end

   #
   # Set the port
   #
   public set_port(n)
      port := n
   end

$ifdef _PLAN9
   #
   # Low-level write on the connection. 
   #
   private send(s)
      local i
      while *s > 0 do {
         i := connection.out(s) | fail
         s := s[i+1 : 0]
      }
      return
   end

   #
   # Low-level read on the connection. 
   #
   private recv(len)
      return connection.in(len)
   end
$else
   #
   # Low-level write on the connection. 
   #
   private send(s)
      local i, r

      while *s > 0 do {
         r := do_poll(Poll.OUT) | return error("Send poll failed: " || &why)
         if /r then return error("Send failed (timeout)")
         r[1] = Poll.OUT | return error("Send failed (socket error)")
         i := if \ssl_connection then
            ssl_connection.out(s) | fail
         else
            connection.out(s) | fail
         s := s[i+1 : 0]
      }
      return
   end

   #
   # Low-level read on the connection. 
   #
   private recv(len)
      local r
      r := do_poll(Poll.IN) | return error("Receive poll failed: " || &why)
      if /r then return error("Receive failed (timeout)")
      r[1] = Poll.IN | return error("Receive failed (socket error)")
      return if \ssl_connection then
         ssl_connection.in(len)
      else
         connection.in(len)
   end
$endif

   #
   # Write the given string to the connection.
   #
   protected write_str(s)
      fire(WRITING_STRING_EVENT, s)
      return send(s)
   end

   #
   # Write a single line to the connection, appending CRLF to the output stream.
   # 
   protected write_line(s)
      /s := ""
      fire(WRITING_LINE_EVENT, s)
      return send(s || "\r\n") 
   end

   #
   # Read a single line from the connection, and return it.
   #
   protected read_line()
      local line

      repeat {
         #
         # Look for a line and if found return it.
         #
         sbuff ? {
            if line := tab(find("\r\n")) then {
               move(2)
               sbuff := tab(0)
               fire(READ_LINE_EVENT, line)
               return line
            }
         }
         sbuff ||:= recv(1048576) | fail
      }
   end

   #
   # Read up to len bytes on the connection.
   #
   protected read_str(len)
      local t
      #
      # Use the line buffer if it has anything in it.
      #
      if *sbuff > 0 then {
         sbuff ? {
            t := move(len) | tab(0)
            sbuff := tab(0)
         }
      } else {
         t := recv(len) | fail
      }
      fire(READ_STRING_EVENT, t)
      return t
   end

   protected is_open()
      if \self.connection then
         return
   end

   protected eof()
      return if \ssl_connection then
         ssl_connection.eof()
      else
         connection.eof()
   end

   #
   # Set an {IoGroup} to use when creating the connection object.
   # This allows several clients to be used together in a non-blocking
   # fashion (using co-expressions for each task).
   #
   public set_task(g)
      self.task := g
   end

   #
   # A flag value.  When set, indicate that the connection should be wrapped in
   # an SslStream.
   #
   public set_ssl(s)
      self.ssl_flag := check_flag(s)
   end

   protected set_one(f)
      case f.attr of {
         "timeout": set_timeout(f.int_val())
         "server": set_server(f.string_val())
         "path": set_path(f.string_val())
         "port": set_port(f.int_val())
         "task": set_task(f.object_val(Task))
         "ssl": set_ssl(f.flag_val())
         default: return try_event(f, EVENT_TABLE)
      }
      return
   end

   protected new(a[])
      cast(self,Connectable).new()
      sbuff := ""
      set_fields(a)
      return
   end
end
