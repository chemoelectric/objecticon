#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import util, graphics, ipl.pdco

#
# This class represents a tree object.  A `Event.TREE_NODE_EXPANSION` event occurs when
# a node is expanded/contracted.  Also, the events generated by the parent class
# `SelectableScrollArea` are inherited.
#
abstract class BaseTree(SelectableScrollArea)
   public 
      root_node,
      default_icon_paint,
      fixed_col_w,
      col_w,
      img_w,
      img_h,
      plus,
      minus,
      last_expanded,
      show_root_flag,
      show_root_handles_flag

   public static const
      COL_PAD               # X spacing around node images (if used)

   private static init()
      local sz
      sz := scale(16)
      ImageCache.copy_key_with_resize("gui.CLOSED_FOLDER", "gui.CLOSED_FOLDER_16", sz, sz)
      ImageCache.copy_key_with_resize("gui.OPEN_FOLDER", "gui.OPEN_FOLDER_16", sz, sz)
      ImageCache.copy_key_with_resize("gui.FILE", "gui.FILE_16", sz, sz)
      COL_PAD := scale(2)
   end
   
   public abstract get_node_data_width(n)

   public abstract draw_node_data(n, xp, yp)

   public invalidate_node_images()
      col_w := img_w := img_h := &null
      invalidate_line_height()
      link
   end

   public override initially()
      # Ensure we start off with an up-to-date representation.
      tree_structure_changed()
      SelectableScrollArea.initially()
      self.plus.initially(self)
      self.minus.initially(self)
      plus.w = minus.w | runerr("Handle image widths differ")
      plus.h = minus.h | runerr("Handle image heights differ")
      every (!default_icon_paint).initially(self)
   end

   public override finally()
      SelectableScrollArea.finally()
      self.plus.finally()
      self.minus.finally()
      every (!default_icon_paint).finally()
   end

   #
   # Expand all the nodes in the `Tree`.  Nodes with no children
   # are not expanded unless the force flag is set to &yes.
   #
   public expand(force)
      if \root_node then {
         root_node.expand(force)
         tree_structure_changed()
      }
      link
   end

   #
   # Set the default icons for each `Node` in the `Tree`.  The parameters should be
   # three distinct `Paint` objects.
   #
   public set_default_icon_paint(i1, i2, i3)
      if is_initialized() then {
         every (!default_icon_paint).finally()
         self.default_icon_paint := [i1, i2, i3]
         every (!default_icon_paint).initially(self)
         invalidate_node_images()
         compute_and_invalidate()
      } else
         self.default_icon_paint := [i1, i2, i3]
      link
   end

   # Set the handle `Paint`s (ie the little + and - icons).  The two
   # parameters should be distinct instances.
   #
   public set_handle_paint(p, m)
      if is_initialized() then {
         every (plus | minus).finally()
         self.plus := p
         self.minus := m
         every (plus | minus).initially(self)
         invalidate()
         plus.w = minus.w | runerr("Handle image widths differ")
         plus.h = minus.h | runerr("Handle image heights differ")
      } else {
         self.plus := p
         self.minus := m
      }
      link
   end

   #
   # Set the root node of the `Tree`.
   #
   public set_root_node(r)
      root_node := r
      if /r then
         set_contents([])
      else {
         root_node.is_expanded_flag := &yes
         invalidate_node_images()
         set_contents(flatten())
         set_selections([])
      }
      link
   end

   #
   # Get the root node of the tree
   #
   public get_root_node()
      return root_node
   end

   public tree_structure_changed()
      local sels
      if \root_node then {
         sels := object_get_selections()
         set_contents(flatten())
         object_set_selections(sels)
      }
      link
   end

   #
   # Set whether root handles are shown (default yes).
   #
   public set_show_root_handles(s)
      self.show_root_handles_flag := need_flag(s)
      self.tree_structure_changed()
      link
   end

   #
   # Set whether the root is shown (default yes).
   #
   public set_show_root(s)
      self.show_root_flag := need_flag(s)
      self.tree_structure_changed()
      link
   end

   #
   # Use a fixed column width, and let the node draw the icons
   #
   public set_fixed_col_w(w)
      self.fixed_col_w := need_integer(w, 0)
      link
   end

   public compute_img_wh()
      local n, icon_paint
      if /fixed_col_w then {
         img_w := img_h := 0
         every n := Seq{(\root_node).traverse_all_preorder()} do {
            icon_paint := \n.icon_paint | default_icon_paint
            img_w <:= icon_paint[1].w
            img_w <:= icon_paint[2].w
            img_w <:= icon_paint[3].w
            img_h <:= icon_paint[1].h
            img_h <:= icon_paint[2].h
            img_h <:= icon_paint[3].h
         }

         #
         # The column width is slightly wider than the bitmap width
         #
         col_w := img_w + 2 * COL_PAD
      } else
         col_w := fixed_col_w
   end

   #
   # This method returns a flat list of all the `Nodes` in the tree that are
   # currently displayed.
   # :Returns :
   # :  A list of nodes.
   #
   public flatten()
      local l, sub
      l := []
      if \self.show_root_flag then {
         if \self.show_root_handles_flag then
            flatten2(l, root_node, "n")
         else
            flatten2(l, root_node, "")
      } else {
         if \self.show_root_handles_flag then {
            if *root_node.children = 1 then {
               flatten2(l, root_node.children[1], "n")
            } else {
               flatten2(l, root_node.children[1], "d")
               every sub := root_node.children[2 to *root_node.children - 1] do 
                  flatten2(l, sub, "f")
               flatten2(l, root_node.children[-1], "u")
            }
         } else {
            every flatten2(l, !root_node.children, "")
         }
      }

      return l
   end

   public flatten2(l, n, dl)
      local sub
      n.draw_line := dl
      n.depth := *dl
      put(l, n)
      if n.is_expanded() then {
         every sub := n.children[1 to *n.children - 1] do 
            flatten2(l, sub, dl || "f")
         flatten2(l, n.children[-1], dl || "u")
      }
   end

   public override handle_lpress(e)
      local l, l_off, N, curr_sel, curr_cursor, yp, xp
      if l := get_line_under_pointer(e) then {
         l_off := get_cum_line_height(l) - get_area_y()
         N := self.contents[l]
         if (N.depth > 0) & (*N.children > 0) | \N.always_expandable_flag then {
            #
            # Check for click on little +/- icon.
            #
            yp := self.view.y + get_height_for_line(l) / 2 + l_off - plus.h / 2
            xp := self.get_subject_x() + N.depth * col_w - col_w / 2  - plus.w / 2
            if (xp <= e.x < xp + plus.w) & (yp <= e.y < yp + plus.h) then {
               curr_sel := *get_selections()
               curr_cursor := self.cursor
               N.toggle_expanded()
               self.last_expanded := N
               tree_structure_changed()
               parent_dialog.release(self.view, Mouse.LEFT_PRESS)
               if curr_cursor ~=== self.cursor then
                  fire(Event.CURSOR_MOVED, e)
               # Just monitor the number of selections to detect a
               # change.  This gives a different to result to what we
               # would get with start_handle/end_handle, which is
               # based on selected line numbers.
               if *get_selections() ~= curr_sel then
                  fire(Event.SELECTION_CHANGED, e)
               fire(Event.TREE_NODE_EXPANSION, e)
               return
            }
         }
      }
      SelectableScrollArea.handle_lpress(e)
   end

   public get_last_expanded()
      return self.last_expanded
   end

   public override draw_line(xp, yp, lh, i, sel, cur, hi, ov)
      local N, dashed, lp, j, icon_paint, img, little, y0, thick, thick2

      y0 := yp + lh / 2
      thick := Gui.FINE_WIDTH
      thick2 := thick / 2
      N := contents[i]
      use {
         dashed := view.cbwin.clone(),
         {
            dashed.set_masked_pattern("gray")
            lp := xp
            every j := 1 to N.depth - 1 do {
               if N.draw_line[j] == ("f"|"d") then
                  dashed.fill_rectangle(lp + col_w / 2 - thick2, yp, thick, lh)
               
               lp +:= col_w
            }
            if N.depth > 0 then {
               case N.draw_line[N.depth] of {
                  "d": dashed.fill_rectangle(lp + col_w / 2 - thick2, y0, thick, lh / 2 + 1)
                  "f": dashed.fill_rectangle(lp + col_w / 2 - thick2, yp, thick, lh)
                  "u": dashed.fill_rectangle(lp + col_w / 2 - thick2, yp, thick, lh / 2 + 1)
               }
               dashed.fill_rectangle(lp + col_w / 2, y0 - thick2, col_w + 1, thick)

               lp +:= col_w
            }

            icon_paint := \N.icon_paint | default_icon_paint
            if (*N.children = 0) & /N.always_expandable_flag then
               img := icon_paint[3]
            else {
               if \N.is_expanded_flag then {
                  img := icon_paint[2]
                  little := minus
                  if *N.children > 0 then
                     dashed.fill_rectangle(lp + col_w / 2 - thick2, y0, thick, lh / 2 + 1)
               } else {
                  img := icon_paint[1]
                  little := plus
               }
               # Erase first as the little +/- are not opaque images, and we may have drawn a line here.
               view.cbwin.erase_area(lp - col_w / 2 - plus.w / 2, y0 - plus.h / 2, plus.w, plus.h)
               little.draw(view.cbwin, lp - col_w / 2 - plus.w / 2, y0 - plus.h / 2)
            }
            if /fixed_col_w then {
               (\img).draw(view.cbwin, lp + col_w / 2 - img.w / 2, y0 - img.h / 2)
               draw_node_data(N, lp + col_w, yp, lh)
               draw_line_sel_cur(lp + col_w, yp, get_node_data_width(N), lh, sel, cur, hi, ov)
            } else {
               draw_node_data(N, lp, yp, lh)
               draw_line_sel_cur(lp, yp, get_node_data_width(N), lh, sel, cur, hi, ov)
            }
         }
      }
   end

   public override new()
      SelectableScrollArea.new()
      set_handle_paint(ImagePaint().set_cache("gui.PLUS"),
                       ImagePaint().set_cache("gui.MINUS"))
      set_default_icon_paint(ImagePaint().set_cache("gui.CLOSED_FOLDER"), 
                             ImagePaint().set_cache("gui.OPEN_FOLDER"),
                             ImagePaint().set_cache("gui.FILE"))
      show_root_flag := show_root_handles_flag := &yes
      return
   end
end

#
# The basic tree, which displays simple textual node data.
#
class Tree(BaseTree)
   public override calculate_line_height()
      local res
      if /col_w then
         compute_img_wh()
      res:= view.cbwin.get_line_height()
      #
      # Ensure the line height is slightly greater than the
      # bitmap height
      #
      res <:= \img_h + 2 * Gui.Y_INSET
      return res
   end

   public override calculate_subject_width()
      local mw, n
      mw := 0
      if /fixed_col_w then {
         every n := !self.contents do
            mw <:= col_w * n.depth + col_w + view.cbwin.text_width(n.label)
      } else {
         every n := !self.contents do
            mw <:= col_w * n.depth + view.cbwin.text_width(n.label)
      }

      return mw + 2 * Gui.TEXT_INSET
   end

   public override get_node_data_width(n)
      return view.cbwin.text_width(n.label) + 2 * Gui.TEXT_INSET
   end

   public override draw_node_data(n, xp, yp)
      local W
      W := view.cbwin
      W.draw_string(xp + Gui.TEXT_INSET,
                    yp + (line_height + W.get_font_ascent() - W.get_font_descent()) / 2,
                    n.label)
   end
end

#
# A tree which delegates interpretation of the node data to
# an `ItemPaint` instance.
#
class ItemPaintTree(BaseTree)
   public
      item_paint,
      item_border

   public override initially()
      \self.item_paint | runerr("ItemPaint not set")
      BaseTree.initially()
      self.item_paint.initially(self)
      self.item_border.initially(self)
   end

   public override finally()
      BaseTree.finally()
      self.item_paint.finally()
      self.item_border.finally()
   end

   public set_item_paint(r)
      if is_initialized() then {
         (\self.item_paint).finally()
         self.item_paint := r
         self.item_paint.initially(self)
      } else
         self.item_paint := r
      link
   end

   #
   # Set a border to draw along with each Paint instance.
   #
   public set_item_border(b)
      if is_initialized() then {
         (\self.item_border).finally()
         self.item_border := b
         self.item_border.initially(self)
      } else
         self.item_border := b
      link
   end

   public override calculate_line_height()
      local h, h1, bh
      if /col_w then
         compute_img_wh()
      bh := item_border.get_total_height()
      if h := item_paint.get_constant_height(view.cbwin) + bh then {
         #
         # Ensure the line height is slightly greater than the
         # bitmap height
         #
         h <:= \img_h + 2 * Gui.Y_INSET
      } else {
         h := []
         every h1 := item_paint.get_height(view.cbwin, (!self.contents).label) + bh do {
            h1 <:= \img_h + 2 * Gui.Y_INSET
            put(h, h1)
         }
      }
      return h
   end

   public override calculate_subject_width()
      local cw, mw, n
      mw := 0
      if /fixed_col_w then {
         if cw := item_paint.get_constant_width(self.cbwin) then {
            every n := !self.contents do
               mw <:= col_w * n.depth + col_w + cw
         } else {
            every n := !self.contents do
               mw <:= col_w * n.depth + col_w + item_paint.get_width(view.cbwin, n.label)
         }
      } else {
         if cw := item_paint.get_constant_width(self.cbwin) then {
            every n := !self.contents do
               mw <:= col_w * n.depth + cw
         } else {
            every n := !self.contents do
               mw <:= col_w * n.depth + item_paint.get_width(view.cbwin, n.label)
         }
      }

      return mw + item_border.get_total_width()
   end

   public override get_node_data_width(n)
      return (item_paint.get_constant_width(self.cbwin) | 
              item_paint.get_width(view.cbwin, n.label)) + item_border.get_total_width()
   end

   public override draw_node_data(n, xp, yp, lh)
      local r, s
      s := item_paint.get_size(view.cbwin, n.label)
      r := Rect(xp, yp, s.w + item_border.get_total_width(), lh)
      item_paint.draw_rect(view.cbwin, n.label, item_border.float(r, s))
      item_border.draw_rect(view.cbwin, r)
   end

   public override draw_line_sel_cur(x, y, w, h, sel, cur, hi, ov)
      if \sel then
         Gui.style.fill_selection_rectangle(view.cbwin, x, y, w, h)
      case \cur of {
         "f": item_border.draw_focus(view.cbwin, x, y, w, h)
         "d": item_border.draw_dashed(view.cbwin, x, y, w, h)
      }
      case \hi of {
         "t": Gui.style.fill_highlight_rectangle(view.cbwin, x, y, w, INTER_LINE_WIDTH)
         "b": Gui.style.fill_highlight_rectangle(view.cbwin, x, y + h - INTER_LINE_WIDTH, w, INTER_LINE_WIDTH)
         "m": item_border.draw_highlight(view.cbwin, x, y, w, h)
      }
      if \ov then
         Gui.style.fill_over_rectangle(view.cbwin, x, y, w, h)
   end

   public override new()
      BaseTree.new()
      self.set_item_border(NullBorder().
                           set_x_align(Align.L))
      return
   end
end
