import parser

class Comment()
   public const
      comment,
      fields,
      keys

   private list_extract(sym)
      return if sym.decl_obj.size() = 1 then
         sym.decl_obj.get_first_token().get_pad()
      else
         sym.obj.get_first_token().get_pad()
   end

   private get_comment_str(sym)
      return if is(sym, ClassVariable | GlobalSymbol) then
         list_extract(sym)
      else
         sym.obj.get_first_token().get_pad()
   end

   public new(sym)
      local s, l, key, val, m
      comment := []
      fields := table()
      keys := []
      get_comment_str(sym) ? {
         while s := tab(upto('#')) do {
            move(1)
            l := tab(upto('\n\r') | 0)
            l ? {
               if (tab(many(' \t')), ="@") then {
                  if key := tab(many(&lcase)) then {
                     val := [tab(0)]
                     (m := member(fields, key)) | {
                        put(keys, key)
                        insert(fields, key, m := [])
                     }
                     put(m, val)
                  } else if \val then {
                     #
                     # Continuation - add to end of last field.
                     #
                     put(val, tab(0))
                  } else
                     put(comment, l)
               } else
                  put(comment, l)
            }
         }
      }
      #
      # Strip off any empty lines at the front and beginning of
      # the comment.
      #
      while *comment[1] = 0 do
         pop(comment)
      while *comment[-1] = 0 do
         pull(comment)

      return
   end
end
