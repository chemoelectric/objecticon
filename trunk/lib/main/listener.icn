#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package util

#
# This simply holds information about a single listener.
#
class Listener()
   private readable 
      proc,
      coex,
      type,
      saved_type

   private static const
      NO_TYPE

   private static init()
      NO_TYPE := []
   end

   #
   # Return the procedure (or method pointer) which is invoked on an
   # event.
   #
   public get_proc()
      return proc
   end

   #
   # The type for which we are listening, or &null implying
   # we are listening for all types.
   #
   public get_type()
      return type
   end

   private fire_coex()
      @^coex
   end

   #
   # Disable this listener, so that it doesn't fire on any event, but
   # remains connected.
   #
   public disable()
      if type ~=== NO_TYPE then {
         saved_type := type
         type := NO_TYPE
      }
      return self
   end

   #
   # After a call to {disable}, reset the listener so that it can
   # begin firing again.
   #
   public reenable()
      if type === NO_TYPE then {
         type := saved_type
         saved_type := &null
      }
      return self
   end

   package new(proc, type)
      if default.type(proc) == "co-expression" then {
         self.coex := proc
         self.proc := self.fire_coex
      } else
         self.proc := proc
      self.type := type
      return
   end
end
