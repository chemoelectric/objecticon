package ipl.gsuggest

import
   gui(Dispatcher, Event, SuggestField),
   http(HttpClient, HttpRequest),
   io(StringStream),
   ipl.pdco(List),
   ipl.strings(replace),
   json(JSONParser),
   net(URL)

class GSuggestField(SuggestField)
   protected hc, domain
   private req, last, mod

   public finally()
      req.stop()
      hc.close()
      cast(self,SuggestField).finally()
   end

   public initially()
      cast(self,SuggestField).initially()
      req.start()
   end

   public synch_contents()
      cast(self,SuggestField).synch_contents()
      mod := &null
   end

   public set_domain(s)
      domain := s
      return self
   end

   private requests()
      local l, last
      repeat {
         while /mod do
            req.sleep()
         last := self.contents
         if l := do_req(last) then {
            # If contents have changed, or user has selected from list, skip.
            (last == self.contents & \mod) | next
            open_textlist(l)
         }
         mod := &null
      }
   end

   protected defer do_req()

   public on_change(ev)
      req.change_sleep(0)
      mod := 1
   end

   public new()
      cast(self,SuggestField).new()
      connect(on_change, Event.CONTENT_CHANGED)
      req := Dispatcher.new_task{requests()}
      domain := "www.google.com"
      hc := HttpClient().
         set_task(req).
         set_user_agent("AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.57")
      return
   end
end

class GoogleSuggestField(GSuggestField)
   protected do_req(query)
      local hr, data, jp, v, s, u
      data := StringStream()
      u := URL.parse("http://" || domain || "/complete/search").
         set_cgi_parameters(table(, "q", query))
      hr := HttpRequest().
         set_url(u).
         set_data_stream(data).
         set_header("Accept-Charset", "utf-8")
      hc.retrieve(hr) | fail
      s := ucs(data.str()) | fail
      s ?:= (tab(upto('[')) & tab(-1))
      jp := JSONParser()
      v := jp.parse(s) | fail
      return List{(!v[2])[1]}
   end
end

class TickerSuggestField(GSuggestField)
   public extract_selection()
      return tl.object_get_selections()[1] ? tab(find(" ("))
   end

   protected do_req(query)
      local hr, data, jp, v, s, u, e, l
      data := StringStream()
      u := URL.parse("http://" || domain || "/finance/match").
         set_cgi_parameters(table(, "q", query))
      hr := HttpRequest().
         set_url(u).
         set_data_stream(data).
         set_header("Accept-Charset", "utf-8")
      hc.retrieve(hr) | fail
      s := ucs(data.str()) | fail
      # Google has a habit of using illegal \x escape sequences
      s := replace(s, "\\x", "\\u00")
      jp := JSONParser()
      v := jp.parse(s) | fail
      l := []
      every e := !\v[u"matches"] do
         put(l, (u"" ~== e[u"t"]) || " (" || e[u"n"] || ")")
      return l
   end
end
