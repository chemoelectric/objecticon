#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import xml(xml_escape), parser, util(Files)

link sort

class HtmlOutputter(Outputter)
   private output_dir, done_files, subclass_table

   private get_serial_no(sym)
      static serial_no_gen, sym_serial_no_table
      initial {
         serial_no_gen := 0
         sym_serial_no_table := table()
      }
      /sym_serial_no_table[sym] := (serial_no_gen +:= 1)
      return sym_serial_no_table[sym]
   end

   public output()
      local nav, fname, index, s, all_classes_table, all_others_table,
         begin, c, all

      done_files := set()
      output_dir := \opts["o"] | stop("Please specify an output directory")
      fname := output_dir || "/index.html"
      index := open(fname, "w") | stop("Couldn't open ", fname)
      write(index, "<html>")
      write(index, "<title>")
      write(index, "Generated Documentation")
      write(index, "</title>")
      write(index, "</head>")
      write(index, "<frameset cols=\"20%,80%\">")
      write(index, "<frameset rows=\"30%,70%\">")
      write(index, "<frame src=\"nav.html\" name=\"navFrame\">")
      write(index, "<frame src=\"all.html\" name=\"listFrame\">")
      write(index, "</frameset>")
      write(index, "<frame src=\"begin.html\" name=\"displayFrame\">")
      write(index, "</frameset>")
      write(index, "<noframes>")
      write(index, "<h2>")
      write(index, "Frame Alert</h2>")
      write(index, "<p>")
      write(index, "This document is designed to be viewed using the frames feature.")
      write(index, "If you see this message, you are using a non-frame-capable web client.")
      write(index, "</html>")
      close(index)

      all_classes_table := table()
      all_others_table := table()
      subclass_table := table()
      every c := symbol_table.gen_symbols() do {
         if is(c, ClassSymbol) then {
            /all_classes_table[c.name] := []
            put(all_classes_table[c.name], c)
            every s := c.get_supers() do {
               /subclass_table[s] := []
               put(subclass_table[s], c)
            }
         } else {
            /all_others_table[c.name] := []
            put(all_others_table[c.name], c)
         }
      }

      fname := output_dir || "/nav.html"
      nav := open(fname, "w") | stop("Couldn't open ", fname)
      write(nav, "<html><body>")
      write(nav, "<h1>Packages</h1><p>")
      write(nav, "<a href=\"all.html\" target=\"listFrame\">All</a><p>")
      every s := get_packages() do {
         write(nav, "<a href=\"", s || "_list.html" || "\" target=\"listFrame\">", s, "</a><br>")
         output_package(s)
      }
      write(nav, "</body></html>")
      close(nav)

      fname := output_dir || "/begin.html"
      begin := open(fname, "w") | stop("Couldn't open ", fname)
      write(begin, "<html><body>")
      write(begin, "<h1>Object Icon generated documentation</h1>")
      write(begin, "This is the automatically generated documentation for the following packages.<p>")
      every s := get_packages() do {
         write(begin, "<a href=\"", s || "_list.html" || "\" target=\"listFrame\">", s, "</a><br>")
      }
      write(begin, "</body></html>")
      close(begin)

      fname := output_dir || "/all.html"
      all := open(fname, "w") | stop("Couldn't open ", fname)

      write(all, "<html><body>")
      write(all, "<h1>All packages</h1><p>")
      write(all, "<h1>Classes</h1><p>")
      every c := !(!sort(all_classes_table))[2] do {
         write(all, "<a href=\"", get_serial_no(c) || ".html\" target=\"displayFrame\">", c.name, "</a><br>")
      }
      write(all, "<p><h1>Other Symbols</h1><p>")
      every c := !(!sort(all_others_table))[2] do {
         write(all, "<a href=\"", get_serial_no(c) || ".html\" target=\"displayFrame\">", c.name, "</a><br>")
      }
      close(all)
   end

   # Output the summary list for one package set
   private output_package(s)
      local f, fname, c
      fname := output_dir || "/" || s || "_list.html"
      f := open(fname, "w") | stop("couldn't open " || fname)
      write(f, "<html><head><title>", s, "</title></head><body>")
      write(f, "<h1>Package ", s, "</h1><p>")
      write(f, "<h1>Classes</h1><p>")
      every c := get_classes_in(s) do {
         output_class(c)
         write(f, "<a href=\"", get_serial_no(c) || ".html\" target=\"displayFrame\">", c.name, "</a><br>")
      }
      write(f, "<p><h1>Other Symbols</h1><p>")
      every c := get_others_in(s) do {
         output_other(c)
         write(f, "<a href=\"", get_serial_no(c) || ".html\" target=\"displayFrame\">", c.name, "</a><br>")
      }
      close(f)
   end

   # Output one class description
   private output_class(c)
      local s, f, fname, supers, o, subs, d, overrides, meths, m, vars, mm, x

      fname := output_dir || "/" || get_serial_no(c) || ".html"
      f := open(fname, "w") | stop("couldn't open " || fname)
      write(f, "<html><head><title>", c.name, "</title></head><body>")
      write(f, "<h1>Class ", c.name, "</h1>")
      if c.obj.is_final() then
         write(f, "final<p>")
      write(f, "<dl>")

      # Superclass list
      supers := []
      every o := c.get_supers() do {
         put(supers, "<a href=\"" || get_serial_no(o) || ".html\" target=\"displayFrame\">" || o.get_fq_name() || "</a>")
      }
      if *supers > 0 then {
         write(f, "<dt>Superclasses :</dt><dd>")
         every write(f, !supers, "<br>")
         write(f, "</dd>")
      }

      # Subclass list
      subs := []
      every d := !\subclass_table[c] do {
         put(subs, "<a href=\"" || get_serial_no(d) || ".html\">" || d.get_fq_name() || "</a>")
      }
      if *subs > 0 then {
         write(f, "<dt>Subclasses :</dt><dd>")
         every write(f, !subs, "<br>")
         write(f, "</dd>")
      }

      s := c.get_package() | "default"
      write(f, "<dt>Package :</dt><dd><a href=\"", s || "_list.html" || "\" target=\"listFrame\">", s, "</a></dd>")
      output_file(c.obj.get_first_token().filename)
      write(f, "</dl><p>")

      comment_and_fields(f, c)
      write(f, "<p>")

      pretty_heading(f, "Class summary")
      overrides := table()
      do_inherited(f, c, overrides)

      meths := []
      vars := []
      every x := c.get_fields() do {
         if is(x, ClassVariable) then
            put(vars, x)
         else
            put(meths, x)
      }
      meths := isort(meths, name_sort)
      vars := isort(vars, name_sort)

      if *meths > 0 then {
         tbl_start(f, "Methods defined in this class")
         every m := !meths do {
            write(f,"<a href=\"#" || get_serial_no(m) || "\">" || m.name || "()</a>")
         }
         tbl_end(f)
      }

      if *vars > 0 then {
         tbl_start(f, "Variables defined in this class")
         every m := !vars do {
            write(f,"<a href=\"#" || get_serial_no(m) || "\">" || m.name || "</a>")
         }
         tbl_end(f)
      }

      write(f, "<p>")

      if *meths > 0 then {
         pretty_heading(f, "Method detail")
         every m := !meths do {
            write(f, "<a name=\"", get_serial_no(m), "\"/>")
            write(f, "<h3>", m.name, "(", get_param_string(m.obj) ,")</h3>")
            write(f, get_access_string(m.obj), "<p>")
            write(f, "<dl>")
            if member(overrides, m.name) then {
               o := overrides[m.name]
               mm := o.get_field(m.name) | stop("Internal error")
               write(f,"<dd>Overrides <a href=\"" || get_serial_no(o) || ".html#" || get_serial_no(mm) || "\">" || mm.name || "()</a> in <a href=\"", get_serial_no(o), ".html\" target=\"displayFrame\">", o.get_fq_name(), "</a></dd>")
            }
            write(f, "<dd>")
            comment_and_fields(f, m)
            write(f, "</dd>")
            write(f, "</dl><hr>")
         }
      }

      if *vars > 0 then {
         pretty_heading(f, "Variable detail")
         every m := !vars do {
            write(f, "<a name=\"", get_serial_no(m), "\"/>")
            write(f, "<h3>", m.name, "</h3>")
            write(f, get_access_string(m.decl_obj), "<p>")
            write(f, "<dl>")
            write(f, "<dd>")
            comment_and_fields(f, m)
            write(f, "</dd>")
            write(f, "</dl><hr>")
         }
      }

      write(f, "</body></html>")
      close(f)
   end

   private do_inherited(f, c, overrides)
      local l, m, d, x, tm, tv
      l := []
      every push(l, c ~=== c.get_implemented_classes())

      tm := table()
      tv := table()
      every x := c.get_implemented_fields() do {
         if is(x, ClassVariable) then {
            /tv[x.defining_class] := []
            put(tv[x.defining_class], x)
         } else {
            /tm[x.defining_class] := []
            put(tm[x.defining_class], x)
         }
      }

      every d := !l do {
         # Note any overridden fields
         every x := c.get_fields() do {
            if d.get_field(x.name) then
               overrides[x.name] := d
         }

         if *\tm[d] > 0 then {
            tbl_start(f, "Methods inherited from " || d.get_fq_name())
            every m := !isort(tm[d], name_sort) do {
               write(f,"<a href=\"" || get_serial_no(d) || ".html#" || get_serial_no(m) || "\">" || m.name || "()</a>")
            }
            tbl_end(f)
         }
         if *\tv[d] > 0 then {
            tbl_start(f, "Variables inherited from " || d.get_fq_name())
            every m := !isort(tv[d], name_sort) do {
               write(f,"<a href=\"" || get_serial_no(d) || ".html#" || get_serial_no(m) || "\">" || m.name || "</a>")
            }
            tbl_end(f)
         }
      }
   end

   private pretty_heading(f, s)
      write(f, "<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\" width=\"100%\">")
      write(f, "<tr bgcolor=\"#ccccff\">")
      write(f, "<td colspan=1><font size=\"+2\">")
      write(f, "<b>", s, "</b></font></td>")
      write(f, "</tr>")
      write(f, "</table>")
   end

   private tbl_start(f, s)
      write(f, "<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\" width=\"100%\">")
      write(f, "<tr bgcolor=\"\#eeeeff\">")
      write(f, "<td><b>",s,"</b></td></tr>")
      write(f, "<tr bgcolor=\"white\"><td>")
   end

   private tbl_end(f)
      write(f, "</td></tr></table>")
   end

   private comment_and_fields(f, c)
      local el, com
      com := Comment(c)
      every html_unbracket(f, !com.comment, c)
      write(f, "<dl>")
      every el := !sort(com.fields) do
         html_fields(f, c, el[1], el[2])
      write(f, "<dt><a href=\"", get_serial_no(c.obj.get_first_token().filename) || ".html#", c.obj.get_first_token().line , "\" target=\"displayFrame\">Source</a></dt>")
      write(f, "</dl>")
   end

   private html_fields(f, c, key, vals)
      local name, l
      case key of {
         "param" : {
            write(f, "<dt>Parameters :</dt>")
            every l := !vals do {
               l[1] ? {
                  tab(many(whitespace_cset))
                  name := tab(many(id_cset))
                  l[1] := tab(0)
               }
               writes(f, "<dd>", name, " - ")
               every html_unbracket(f, !l, c)
               write(f, "</dd>")
            }
         }

         "return" : {
            write(f, "<dt>Returns :</dt>")
            write(f, "<dd>")
            every html_unbracket(f, !vals[1], c)
            write(f, "</dd>")
         }

         "generate" : {
            write(f, "<dt>Generates :</dt>")
            write(f, "<dd>")
            every html_unbracket(f, !vals[1], c)
            write(f, "</dd>")
         }

         "fail" : {
            write(f, "<dt>Fails :</dt>")
            write(f, "<dd>")
            every html_unbracket(f, !vals[1], c)
            write(f, "</dd>")
         }

         "example" : {
            write(f, "<dt>Example :</dt><dd><pre>")
            every l := !vals do
               every write(f, l[2 to *l])
            write(f, "</pre></dd>")
         }
      }
   end

   private html_unbracket(f, s, c)
      local r, t
      r := ""
      s ? {
         tab(many(whitespace_cset))
         while r ||:= xml_escape(tab(upto('{')), '<>&') do {
            move(1)
            t := tab(upto('}') | 0)
            move(1)
            r ||:= create_link(t, c)
         }
         r ||:= xml_escape(tab(0), '<>&')
      }
      if *r = 0 then
         r := "<p>"
      write(f, r)
   end

   private resolve_link(sym, name)
      local i, j, d
      name := (name ? tab(upto('(') | 0))
      if is(sym, ClassField) &
         i := sym.defining_class.get_implemented_field(name) then
            return i
      if is(sym, ClassSymbol) &
         i := sym.get_implemented_field(name) then
            return i
      if i := symbol_table.resolve(sym.scanned_file, name) then
         return i

      #
      # Is it in the form <Class>.<Field> ?
      every d := find(".", name)
      if \d & (i := symbol_table.resolve(sym.scanned_file, name[1:d])) & 
              is(i, ClassSymbol) &
              (j := i.get_implemented_field(name[d+1:0])) then
         return j
   end

   #
   # Get a link (if possible) for the string s.  c is the current comment.
   #
   private create_link(s, c)
      local o
      o := resolve_link(c, s) | return s
      if is(o, ClassField) then {
         # Link within the parent class's page
         return "<a href=\"" || get_serial_no(o.defining_class) || ".html#" || 
            get_serial_no(o) || "\">" || s || "</a>"
      } else {
         # Link to the absolute page
         return "<a href=\"" || get_serial_no(o) || ".html\" target=\"displayFrame\">" || s || "</a>"
      }
   end

   private output_file(filename)
      local f, fname, line_no, g, s

      if member(done_files, filename) then
         return
      insert(done_files, filename)

      fname := output_dir || "/" || get_serial_no(filename) || ".html"
      f := open(fname, "w") | stop("couldn't open " || fname)
      g := open(filename) | stop("couldn't open " || filename)

      write(f, "<html><head><title>", Files.get_path(filename).get_last(), "</title></head><body><pre>")

      line_no := 0
      while s := read(g) do {
         line_no +:= 1
         writes(f, "<a name=\"", line_no, "\"/>")
         write(f, xml_escape(s, '<>&'))
      }

      write(f, "</pre></body></html>")
      close(f)
      close(g)
   end

   private output_other(c)
      local s, f, fname, type, fullname
      fullname := c.name
      case classof(c) of {
         ProcedureSymbol : {
            type := "procedure"
            fullname := c.name || "(" || get_param_string(c.obj) || ")"
         }
         RecordSymbol : type := "record"
         GlobalSymbol : type := "global"
         default : stop("Unknown type:", image(c))
      }

      fname := output_dir || "/" || get_serial_no(c) || ".html"
      f := open(fname, "w") | stop("couldn't open " || fname)
      write(f, "<html><head><title>", c.name, "</title></head><body>")
      write(f, "<h1>", fullname, "</h1>")
      write(f, "<dl>")
      s := c.get_package() | "default"
      write(f, "<dt>Package :</dt><dd><a href=\"", s || "_list.html" || "\" target=\"listFrame\">", s, "</a></dd>")
      output_file(c.obj.get_first_token().filename)
      write(f, "<dt>Type :</dt><dd>", type, "</dd>")
      write(f, "</dl><p>")
      comment_and_fields(f, c)
      write(f, "<p>")
      write(f, "</body></html>")
      close(f)
   end
end

