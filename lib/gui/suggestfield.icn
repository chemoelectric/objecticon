package gui

import graphics, util, lang

# This class is a {TextField} which provides suggested completions in
# a popup list based on partial input.
#
abstract class SuggestField(TextField, MenuMode)
   public 
      tl,
      direction,
      max_height,
      max_width,
      select_using_enter_flag,
      forward_home_end_flag     # Forward home/end key to list?

   protected
      req, 
      req_held,
      req_doing,
      last,
      mod,
      applied_event,
      list_data

   #
   # Set the direction to pop-up in.  Options are {Direction.UP}, {Direction.DOWN} or
   # {Direction.BEST} (the default).
   #
   public set_direction(s)
      self.direction := s
      return self
   end

   #
   # Forward home/end key to list?  Default is yes.
   #
   public set_forward_home_end(s)
      self.forward_home_end_flag := check_flag(s)
      return self
   end

   #
   # If set, the enter key is used to select from the list, rather than items being selected
   # using the cursor keys.
   #
   public set_select_using_enter(s)
      self.select_using_enter_flag := check_flag(s)
      return self
   end

   public create_popup()
      return TextList()
   end

   #
   # Set the maximum height of the dropdown list; by default it is as large as is necessary
   # and can be accommodated on the screen.
   #
   public set_max_height(n)
      self.max_height := n
      return self
   end

   #
   # Set the maximum width of the dropdown list; by default it is as wide as is necessary
   # and can be accommodated on the screen.
   #
   public set_max_width(n)
      self.max_width := n
      return self
   end

   public on_textlist_selection(e)
      synch_contents(e)
      member(Key.NAVIGATE, e.code) | close_textlist()
   end

   public synch_contents(ev)
      local s
      s := convert_element(tl.object_get_selections()[1]) | contents[1:1]
      assign_contents(s, applied_event := ev, toggle_flag(select_using_enter_flag))
   end

   public convert_element(o)
      return text(o)
   end

   private requests()
      local l
      repeat {
         until mod === 1 do {
            req_held := &yes
            req.sleep()
            req_held := &null
         }
         mod := &null
         req_doing := &yes
         l := do_request() | &null
         req_doing := &null
         # If finally() has been called, close any request resources,
         # and stop the task.
         if /cbwin then {
            close_request()
            req.revert()
         }
         if \l then {
            # If contents have changed, skip, and repeat request if
            # mod = 1, or go to sleep if mod = 2
            if \mod then
               next
            open_textlist(l)
         }
      }
   end

   # This method is implemented to provide the list of suggestions, based on
   # the current contents of the textfield.
   #
   protected abstract do_request()

   # This method is called to abort a request in progress; do_request() should then
   # fail.
   #
   protected abort_request()
   end

   # This is invoked whilst {do_request} is not in progress to allow
   # any resources which remain open between {do_request} calls to be
   # closed.  Note that {do_request} may later be invoked again.
   #
   protected close_request()
   end

   public on_change(ev)
      if applied_event === ev then
         mod := 2
      else if *contents = 0 & not(ev.code === (Key.DOWN | "\t")) then
         keep_closed()
      else {
         mod := 1
         # Wakeup req if waiting
         if \req_held then
            req.notify()
      }
   end

   private open_textlist(data)
      local max_h, max_w, spc_below, spc_above, spc_right, d, dim, win,
         use_direction, rs

      # If the list is already open with the same data, do nothing.
      # This avoids the flickering of opening and closing the popup.
      if equals(data, list_data) then
         return

      close_textlist()

      # If no data, or the focus has moved away, leave closed.
      if (*data = 0) | (parent_dialog.get_focus() ~=== self) then
         return

      list_data := copy(data)
      win := parent_dialog.win
      dim := win.get_display_size()
      # Screen rectangle, in adjusted co-ordinates
      rs := Rect(-win.get_x() - win.get_dx(), -win.get_y() - win.get_dy(), dim.width, dim.height)

      # Space available for popup limited by screen size
      spc_above := self.y - rs.y
      spc_below := rs.y + rs.h - self.y - self.h
      spc_right := rs.x + rs.w - self.x

      max_h := case self.direction of {
         Direction.UP: spc_above
         Direction.DOWN: spc_below
         Direction.BEST: 
            if Gui.POPUP_LIST_DIRECTION_FACTOR * spc_below > spc_above then spc_below else spc_above
         default: runerr("Unknown direction", self.direction)
      }
      max_w := spc_right
      max_w >:= \self.max_width
      max_h >:= \self.max_height

      self.tl := create_popup().
         set_wattrib_ancestor(self).
         connect(self.on_textlist_selection, Event.SELECTION_CHANGED).
         set_contents(data).
         set_cursor().
         set_accepts_focus(&no).
         set_draggable_cursor(&yes).
         set_motion_cursor(&yes).
         set_always_show_focus_cursor(&yes).
         set_select_mode(Select.ONE).
         set_z(self.parent_dialog.get_top_z())

      if \select_using_enter_flag then
         tl.set_selection_on_key_moves(&no)

      self.parent_dialog.add(tl)
      self.tl.set_ideal_size(self.w, max_w,
                             scale(5), max_h)

      use_direction := if direction == Direction.BEST then {
         if spc_below >= (tl.h_spec | spc_above) then
            Direction.DOWN
         else
            Direction.UP
      } else
         direction

      self.parent_dialog.enter_menu_mode(self)

      tl.
         set_pos(win.get_dx() + x,
                 win.get_dy() + if use_direction == Direction.DOWN then 
                    y + h
                  else
                    y - tl.h_spec).
         resize()

      if Gui.allow_internal_popups() &
         parent_dialog.contains(tl) then {
         tl.invalidate()
      } else {
         # Remove tl from dialog and use add to popup window.
         parent_dialog.remove(tl)
         d := PureDialog().
            set_canvas(Canvas.POPUP).
            set_width(tl.w).
            set_height(tl.h).
            set_dx(-tl.x).
            set_dy(-tl.y).
            set_x(win.get_x() + win.get_dx() + tl.x).
            set_y(win.get_y() + win.get_dy() + tl.y).
            copy_wattrib(WAttrib.DISPLAY, parent_dialog).
            add(tl)

         tl.set_pos(0, 0)
         parent_dialog.add_popup(d)
         d.show()
      }
   end

   private close_textlist()
      \tl | fail
      if tl.parent_dialog === parent_dialog then {
         tl.invalidate()
         parent_dialog.remove(tl)
      } else {
         parent_dialog.remove_popup(tl.parent_dialog)
         tl.parent_dialog.dispose()
      }
      list_data := tl := &null
      parent_dialog.exit_menu_mode(self)
      fire(Event.POPUP_CLOSED)
   end

   public get_nesting_component()
      return self
   end

   public gen_popup_components()
      return tl
   end

   public allow_nested(c)
   end

   public close_all()
      keep_closed()
   end

   public should_close(e)
      if member(Mouse.PRESS, e.code) & not(tl.in_region(e)) then 
         return
   end

   # Close the textlist (if it is open), and stop any running
   # background request from re-opening it (until the next key
   # modification).
   #
   public keep_closed()
      close_textlist()
      if \req_doing then
         abort_request()
      mod := &null
   end

   public initially()
      TextField.initially()
      mod := &null
      req.start()
   end

   public finally()
      if \req_doing then
         abort_request()
      else {
         close_request()
         req.stop()
      }
      close_textlist()
      TextField.finally()
   end

   public keeps(e)
      return member(Key.CURSOR, e.code)
   end

   public was_applied(ev)
      return ev === applied_event
   end

   public handle_return(e)
      if \select_using_enter_flag & \tl then
         tl.fire(Event.KEY_PRESS, e)
      TextField.handle_return(e)
      keep_closed()
   end

   public handle_key_up(e)
      if \tl then
         tl.fire(Event.KEY_PRESS, e)
   end

   public handle_key_page_up(e)
      if \tl then
         tl.fire(Event.KEY_PRESS, e)
   end

   public handle_key_page_down(e)
      if \tl then
         tl.fire(Event.KEY_PRESS, e)
   end

   public handle_key_down(e)
      if \tl then {
         if tl.get_cursor() then
            tl.fire(Event.KEY_PRESS, e)
         else {
            tl.set_cursor(1)
            if /select_using_enter_flag then {
               tl.set_selections([1])
               synch_contents(e)
            }
         }
      } else if *contents = 0 then
         on_change(e)
   end

   public handle_key_home(e)
      if \tl & \forward_home_end_flag then
         tl.fire(Event.KEY_PRESS, e)
      else
         TextField.handle_key_home(e)
   end

   public handle_key_end(e)
      if \tl & \forward_home_end_flag then
         tl.fire(Event.KEY_PRESS, e)
      else
         TextField.handle_key_end(e)
   end

   public handle_key(e)
      case e.code of {
         "\e" : close_all()
         Key.UP : handle_key_up(e)
         Key.DOWN : handle_key_down(e)
         Key.PGUP : handle_key_page_up(e)
         Key.PGDN : handle_key_page_down(e)
         default:
            TextField.handle_key(e)
      }
   end

   public new()
      TextField.new()
      connect(on_change, Event.CONTENT_CHANGED)
      req := Dispatcher.new_task{requests()}
      self.direction := Direction.BEST
      self.forward_home_end_flag := &yes
      return
   end
end
