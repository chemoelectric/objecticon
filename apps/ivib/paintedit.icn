import gui, io, lang, ipl.lists

class PaintEdit(Dialog)
   public 
      c, 
      tabset,
      code_tab,
      okay_result

   #
   # Add the tab to the TabSet
   #
   public add_tab(t) 
      tabset.add(t)
   end

   #
   # Add the tab to the TabSet, as the first item
   #
   public add_tab_at_front(t) 
      tabset.add(t, 1)
   end

   public setup()
      local oc, label
      Class.get_name(c) ? {
         ="Canvas"
         label := tab(0) || " Setup"
      }
      self.set_label(label)

      set_layout(GridLayout())

      tabset := TabSet().set_constraint("eol", &yes)
      add(tabset)
      code_tab := CodeTab(c)
      tabset.add(code_tab)

      oc := OkCancel()
      oc.listen(self)
      self.add(oc)
   end

   public on_cancel()
      self.dispose()
   end

   public validate_input()
      code_tab.validate_input() | fail
      return
   end

   public on_okay()
      self.validate_input() | fail
      self.set_vals(c)
      self.okay_result := &yes
      self.dispose()
   end

   public set_vals()
      code_tab.set_vals()
   end

   public new(c)
      Dialog.new()
      self.c := c
      setup()
      return
   end
end


class ImagePaintEdit(PaintEdit)
   public 
      fill_dim,
      max_w, 
      max_h, 
      max_w_field, 
      max_h_field,
      img,
      img_field,
      cache_cb

   public on_max_w()
      max_w_field.toggle_is_shaded()
   end

   public on_max_h()
      max_h_field.toggle_is_shaded()
   end

   public set_vals()
      PaintEdit.set_vals()
      c.max_w := if max_w.is_checked() then
         integer(max_w_field.get_contents())
      else
         &null

      c.max_h := if max_h.is_checked() then
         integer(max_h_field.get_contents())
      else
         &null

      c.fill_dimensions := fill_dim.get_value()

      if cache_cb.is_checked() then {
         c.image_cache := img_field.get_contents()
         c.image_str := &null
      } else {
         c.image_cache := &null
         c.image_str := img_field.get_contents()
      }
   end

   public on_file_browse()
      local fd, s, l, p
      fd := FileDialog().
         add_image_preview().
         set_existing_file_mode(FileDialog.REQUIRE)
      l := []
      s := img_field.get_contents()
      if is_image_file(s) then {
         p := FilePath(s).canonical()
         put(l, p.parent().str())                             
         fd.set_file(p.get(-1))                               
      }
      put(l, Ivib.last_icon_dir)
      fd.set_directories(l)
      fd.set_filters(["*.gif;*.png;*.jpg","*"])
      fd.show_modal(self)
      if s := fd.get_result() then {
         Ivib.last_icon_dir := fd.get_directory()
         self.img.set_image(s)
         img_field.set_contents(s)
      }
   end

   public on_name_browse()
      local d, s
      d := NamedImageDialog(img_field.get_contents())
      d.show_modal(self)
      if s := d.get_result() then {
         self.img.set_image(s)
         img_field.set_contents(s)
      }
   end

   public on_img_field()
      img.set_image(img_field.get_contents())
   end

   public setup()
      local p, q
      PaintEdit.setup()

      p := TabItem().set_label("General")
      p.set_layout(GridLayout().set_extra("borders"))
      add_tab_at_front(p)

      max_w := CheckBox().set_label("Max width :")
      max_w.connect(self.on_max_w, Event.ACTION)
      p.add(max_w)
      max_w_field := TextField().set_size(scale(130)).set_filter(&digits).set_constraint("eol", &yes)
      p.add(max_w_field)
      if \c.max_w then {
         max_w.set_is_checked(&yes)
         max_w_field.set_contents(c.max_w)
      } else
         max_w_field.set_is_shaded(&yes)

      max_h := CheckBox().set_label("Max height :")
      max_h.connect(self.on_max_h, Event.ACTION)
      p.add(max_h)
      max_h_field := TextField().set_size(scale(130)).set_filter(&digits).set_constraint("eol", &yes)
      p.add(max_h_field)
      if \c.max_h then {
         max_h.set_is_checked(&yes)
         max_h_field.set_contents(c.max_h)
      } else
         max_h_field.set_is_shaded(&yes)

      p.add(Label().set_label("Fill dimensions :"))
      fill_dim := RangeSpin().
         set_range(0, 2).
         set_value(c.fill_dimensions)
      p.add(fill_dim)

      p := TabItem().set_label("Images")
      p.set_layout(GridLayout())
      add_tab_at_front(p)

      q := Component().set_layout(GridLayout().set_doi(0)).set_constraint("eol", &yes).set_constraint("x_fill", &yes).set_constraint("x_weight", 1.0)
      img := Image().set_size(scale(60),scale(60))
      img.clear_constraints()
      q.add(img)
      q.add(img_field := TextField().set_size(scale(200)).connect( on_img_field, Event.CONTENT_CHANGED))
      p.add(q)

      q := Component().set_layout(GridLayout().set_doi(0)).set_constraint("x_align", "l")
      q.add(TextButton().set_label("File...").connect(on_file_browse, Event.ACTION))
      q.add(TextButton().set_label("Name...").connect(on_name_browse, Event.ACTION))
      q.add(cache_cb := CheckBox().set_label("Cache"))
      p.add(q)

      if \c.image_str then {
         img.set_image(c.image_str)
         img_field.set_contents(c.image_str)
      }
      if \c.image_cache then {
         img.set_image(c.image_cache)
         img_field.set_contents(c.image_cache)
         cache_cb.set_is_checked(&yes)
      }
   end

end



class GridPaintEdit(PaintEdit)
   public 
      res,
      input,
      output, 
      clipboard,
      ucs_cb

   public on_input(ev)
      render()
   end

   public init_dialog()
      render()
   end

   public set_vals()
      PaintEdit.set_vals()
      c.fmt := list2str(input.contents, "\n")
   end

   public render(ev)
      output.set_spec(input.get_contents_str())
   end

   private on_ucs_cb()
      if ucs_cb.is_checked() then
         input.set_contents([u""])
      else
         input.set_contents([""])
      render()
   end

   public on_input_rpress(ev)
      local m, i, pm
      m := Menu()
      i := TextMenuItem().set_label("Save to...")
      i.connect(self.on_save_input, Event.ACTION)
      m.add(i)
      i := TextMenuItem().set_label("Load from...")
      i.connect(self.on_load_input, Event.ACTION)
      m.add(i)
      i := TextMenuItem().set_label("Image file...")
      i.connect(self.on_insert_image_file, Event.ACTION)
      m.add(i)
      i := TextMenuItem().set_label("Image name...")
      i.connect(self.on_insert_image_name, Event.ACTION)
      m.add(i)
      i := TextMenuItem().set_label("Debug")
      i.connect(self.on_debug, Event.ACTION)
      m.add(i)
      # Add the standard text edit menu options.
      m.add(MenuSeparator())
      m.move_all(input.create_context_menu(ev))
      pm := PopupMenu()
      pm.popup(self, m, ev.x, ev.y)
   end

   public on_debug()
      output.d.g.print_layout()
   end

   public on_save_input()
      local d, fn
      d := FileDialog().set_existing_file_mode(FileDialog.WARN)
      d.show_modal(self)
      fn := d.get_result() | fail
      Files.string_to_file(fn, input.get_contents_str()) | 
         return alert_error(self, ["Couldn't save to " || fn, &why])
   end

   public on_load_input()
      local d, fn, s
      d := FileDialog().set_existing_file_mode(FileDialog.REQUIRE)
      d.show_modal(self)
      fn := d.get_result() | fail
      s := Files.file_to_string(fn) | return alert_error(self, ["Couldn't load from " || fn, &why])
      if ucs_cb.is_checked() then
         s := ucs(s) | return alert_error(self, ["Input not in ucs format"])
      input.set_contents_str(s)
   end

   public on_insert_image_file(e)
      local d, s
      d := FileDialog().
         add_image_preview().
         set_existing_file_mode(FileDialog.REQUIRE).
         set_directory(Ivib.last_icon_dir).
         set_filters(["*.gif;*.png;*.jpg","*"])
      d.show_modal(self)
      if s := d.get_result() then {
         Ivib.last_icon_dir := d.get_directory()
         s := ".img " || s || "\n"
         if ucs_cb.is_checked() then
            s := ucs(s)
         input.insert_string(s, e)
      }
   end

   public on_insert_image_name(e)
      local d, s
      d := NamedImageDialog()
      d.show_modal(self)
      if s := d.get_result() then {
         s := ".img " || s || "\n"
         input.insert_string(s, e)
      }
   end

   public setup()
      local p
      PaintEdit.setup()

      p := TabItem().set_label("Edit")
      p.set_layout(GridLayout())
      add_tab_at_front(p)

      input := EditableTextList().
         set_constraint("x_weight", 0.0).
         set_size(scale(250),scale(200)).
         set_move_on_rpress(&no).
         set_menu_on_rpress(&no)

      self.set_focus(input.find_focus())
      input.connect(self.on_input, Event.CONTENT_CHANGED)
      input.connect(self.on_input_rpress, Event.MOUSE_RIGHT_PRESS)
      input.set_contents_str(\c.fmt)

      output := ShowGridPaint().
         set_size(scale(150),scale(200)).
         set_constraint("eol", &yes)

      p.add(Split().set_left(input).set_right(output).set_constraint("eol", &yes))

      ucs_cb := CheckBox().set_label("Ucs content")
      if type(c.fmt) == "ucs" then
         ucs_cb.set_is_checked(&yes)
      ucs_cb.connect(self.on_ucs_cb, Event.ACTION)
      p.add(ucs_cb)
   end
end


class ShowGridPaint(DrawScrollArea)
   public d

   public calculate_subject_width()
      return (\d).w | 0
   end

   public calculate_subject_height()
      return (\d).h | 0
   end

   public get_default_vertical_increment()
      return scale(10)
   end

   public get_default_horizontal_increment()
      return scale(10)
   end

   public draw()
      (\d).draw(view.cbwin, 
                view.x - get_area_x(), 
                view.y - get_area_y())
   end

   public finally()
      DrawScrollArea.finally()
      (\d).finally()
   end

   public set_spec(s)
      (\d).finally()
      d := GridPaint(s)
      d.initially(self)
      d.draw_grid()
      invalidate_subject_width()
      invalidate_subject_height()
      compute_and_invalidate()
      return self
   end
end

class NamedImageDialog(Dialog)
   public 
      curr,
      lst, 
      result

   private get_names()
      local l, s
      l := []
      every s := key(ImageCache.names) do {
         if (s == "ivib.icon") | not match("ivib.", s) then
            put(l, s)
      }
      return sort(l)
   end

   public setup()
      local oc
      set_label("Select image")
      set_layout(GridLayout())

      lst := TextList().set_size(scale(250),scale(300)).set_select_mode("one").set_constraint("eol", &yes).set_contents(get_names())
      lst.object_set_selections([\curr])
      lst.set_cursor(lst.get_selections()[1])
      set_focus(lst)
      self.add(lst)
      oc := OkCancel()
      oc.listen(self)
      self.add(oc)
   end

   public init_dialog()
      lst.center_line(lst.get_selections()[1])
   end

   public on_cancel()
      self.dispose()
   end

   public on_okay()
      result := lst.object_get_selections()[1] | return alert_error(self, "No image selected")
      self.dispose()
   end

   public get_result()
      return \self.result
   end

   public new(curr)
      Dialog.new()
      self.curr := curr
      setup()
      return
   end
end
