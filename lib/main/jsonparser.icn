package json

import 
   lang,
   util,
   exception

class JSONParser()
   public static const 
      WS_CHAR,
      UNESCAPED_CHAR

   private
      utf8_flag,
      true,
      false,
      null

   private static init()
      WS_CHAR := ' \t\n\r'
      UNESCAPED_CHAR := '\x20-\x21\x23-\x5B\x5D-\U10FFFF'
   end

   #
   # Set a value to represent json "true"; by default `&yes`.
   #
   public set_true(x)
      self.true := x
      link
   end

   #
   # Set a value to represent json "false"; by default `&no`.
   #
   public set_false(x)
      self.false := x
      link
   end

   #
   # Set a value to represent json "null"; by default `&null`.
   #
   public set_null(x)
      self.null := x
      link
   end

   private parse_number()
      local s
      s := (="-" | "") || 
         (="0" | (tab(any('123456789')) || (tab(many(&digits)) | ""))) ||
         ((="." || tab(many(&digits))) | "") ||
         ((=(u"e" | u"E") || (tab(any('+\-')) | "") || tab(many(&digits))) | "") | err("Invalid number")
      return numeric(s) | err("Number out of range")
   end

   private parse_string()
      local s, ch, i
      ="\"" | err("\" expected")
      s := ""
      repeat {
         s ||:= string(tab(many(UNESCAPED_CHAR)))
         if pos(0) then
            err("Unclosed quote")
         if ="\"" then
            break
         if ="\\" then {
            ch := move(1) | err("Unclosed quote")
            s ||:= case string(ch) of {
               "\"": "\""
               "\\": "\\"
               "/": "/"
               "b": "\b"
               "f": "\f"
               "n": "\n"
               "r": "\r"
               "t": "\t"
               "u": {
                  i := (0 <= Format.string_to_int(move(4))) | err("Invalid \\u escape")
                  if \utf8_flag then
                     Text.utf8_seq(i | 63)
                  else
                     char(i | 63)
               }
               default: err("Invalid escape char in string: " || ch)
            }
         } else
            err("Invalid char in string: " || image(&subject[&pos]))
      }
      return if \utf8_flag then ucs(s) else s
   end

   private parse_value()
      return if ="false" then
         false
      else if ="true" then
         true
      else if ="null" then
         null
      else if any('[') then
         parse_array()
      else if any('{') then
         parse_object()
      else if any('-' ++ &digits) then
         parse_number()
      else if any('\"') then
         parse_string()
      else
         err("Unexpected char: " || &subject[&pos])
   end

   private next_token()
      tab(many(WS_CHAR))
   end

   private parse_array()
      local res
      res := []
      ="["
      next_token()
      if ="]" then
         return res
      repeat {
         put(res, parse_value())
         next_token()
         if ="]" then
            return res
         ="," | err(", expected")
         next_token()
      }
      return res
   end

   private parse_object()
      local res, m, v
      res := table()
      ="{"
      next_token()
      if ="}" then
         return res
      repeat {
         m := parse_string()
         next_token()
         =":" | err(": expected")
         next_token()
         v := parse_value()
         next_token()
         insert(res, m, v)
         if ="}" then
            return res
         ="," | err(", expected")
         next_token()
      }
      return res
   end

   private end_check(o)
      next_token()
      pos(0) | err("Extraneous input: " || tab(0))
      return o
   end

   private parse_impl()
      next_token()
      return if any('[') then
         parse_array()
      else if any('{') then
         parse_object()
      else
         err("[ or { expected")
   end

   private err(s)
      s ||:= " (char " || &pos || ")"
      throw(s)
   end

   public parse(s)
      s := need_text(s)
      utf8_flag := Yes{ type(s) == "ucs" }
      return s ? clean{try1{ end_check(parse_impl()) }}
   end

   public new()
      true := &yes
      false := &no
      return
   end
end
