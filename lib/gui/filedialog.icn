package gui

import 
   ipl.wildcard,
   ipl.sort,
   ipl.lists,
   ipl.filegui,
   ipl.pdco,
   ipl.functional,
   util,
   io

#
# Extend `ListEntry` to add formatted date and size strings.
#
class ListEntryEx(ListEntryWithIcon)
   public const
      fmt_date,
      fmt_size

   public new(name, lstat, stat, fmt_date, fmt_size)
      self.name := name
      self.lstat := lstat
      self.stat := stat
      self.fmt_date := fmt_date
      self.fmt_size := fmt_size
      return
   end
end

class FileDialogPos()
   public const
      cursor_name,
      area_y

   public new(cursor_name, area_y)
      self.cursor_name := cursor_name
      self.area_y := area_y
      return
   end
end

class IconFilesItemPaintSize(IconFilesItemPaint)
   public get_string(data)
      return data.fmt_size
   end
end

class IconFilesItemPaintDate(IconFilesItemPaint)
   public get_string(data)
      return data.fmt_date
   end
end

#
#
# File dialog class.  This class provides a standard file dialog.
#
# @example
# @ d := FileDialog()
# @ d.show_modal()
# @ write(d.get_result() | "cancelled")
#
class FileDialog(Dialog)
   public
      show_hidden_menu_item,
      tools_menu_button,
      tools_menu,
      date_button,
      name_button,
      size_button,
      home_button, 
      prev_button,
      next_button,
      up_button, 
      dir, 
      dlist, 
      flist, 
      ascending,
      sorter,
      history,
      history_pos,
      pos_table,
      loaded_dir_path,
      cancel_button, 
      file, 
      filter, 
      okay_button,
      init_dirs,                # Initial directory name
      init_files,               # Initial file name
      init_filters,
      res,                      # Resulting file path          
      message_label, 
      existing_file_mode,
      multiple_files_flag,
      single_file_overlay_item,
      multiple_files_overlay_item,
      file_overlay,
      file_label

   public static const
      WARN, IGNORE, REQUIRE, DISALLOW
   
   private static init()
      WARN := "warn"
      IGNORE := "ignore"
      REQUIRE := "require"
      DISALLOW := "disallow"
   end

   public set_existing_file_mode(s)
      existing_file_mode := s
      return self
   end

   public set_multiple_files(s)
      self.multiple_files_flag := check_flag(s)
      return self
   end

   public static ucs_list(l)
      local t
      t := []
      every put(t, ucs(!l))
      return t
   end

   public component_setup()
      #
      # Defaults and extra dirs.
      #
      /init_dirs := []
      /init_files := []
      /init_filters := [u"*"]
      dir.set_selection_list(get_favourites_directories()).set_selection(1)
      filter.set_selection_list(ucs_list(init_filters)).set_selection(1)
      if /multiple_files_flag then {
         file.set_selection_list(ucs_list(init_files)).set_selection(1)
         flist.set_select_mode(Select.ONE)
         file_overlay.set_which_one(single_file_overlay_item)
      } else {
         flist.set_select_mode(Select.MANY)
         file_overlay.set_which_one(multiple_files_overlay_item)
      }
      pos_table := table()
      res := &null
   end

   public init_dialog()
      if /multiple_files_flag then
         set_focus(file.find_focus())
      win.set_min_size(win.get_width(), win.get_height())
      goto_dir(dir.get_contents())
   end

   public check_existing()
      local f
      clear_msg()
      /multiple_files_flag | fail
      f := get_current_selection().str() | fail
      if Files.is_directory(f) then
         msg("Directory")
      else if existing_file_mode === (WARN | DISALLOW) & Files.access(f) then
         msg("Existing file")
   end

   public on_file_content(ev)
      check_existing()
      synch_file()
   end

   public synch_file()
      local i
      if /multiple_files_flag then {
         if i := Positions{(!flist.contents).name, file.get_contents()} then {
            flist.
               set_cursor(i).
               set_selections([i]).
               center_line(i)
         } else
            flist.clear_selections()
      } else {
         flist.clear_selections()
         update_file_label()
      }
   end

   public end_dialog()
   end

   #
   # Get the directory part of the result.  In multiple files mode,
   # this returns the directory which is common to each of the
   # selected files.  The result is always a string, never ucs.
   #
   public get_directory()
      \self.res | fail
      return if /multiple_files_flag then
         res.parent().str()
      else
         loaded_dir_path.str()
   end

   #
   # Get the file part of the result; the result is always a string,
   # never ucs. Not applicable in multiple files mode.
   #
   public get_file()
      return string((\self.res).get(-1))
   end

   #
   # Get the result, (will fail if cancel was pressed).  This will
   # return a non-empty list in multiple files mode.
   #
   public get_result()
      \self.res | fail
      return if /multiple_files_flag then
         res.str()
      else
         ipl.pdco.List{(!res).str()}
   end

   #
   # Get the result, as a `FilePath` (will fail if cancel was
   # pressed).  This will return a non-empty list of `FilePath`s in
   # multiple files mode.
   #
   public get_result_path()
      return \self.res
   end

   #
   # Keep the directory last selected by this dialog.
   #
   public keep_directory()
      return set_directory(get_dir_path().str())
   end

   #
   # Set the initial directory.  It should be in canonical form.
   #
   public set_directory(s)
      self.init_dirs := [s]
      return self
   end

   #
   # Set the initial directories as a list; the first is the one
   # initially shown.  Each entry should be in canonical form.
   #
   public set_directories(l)
      self.init_dirs := l
      return self
   end

   #
   # Set the initial file
   #
   public set_file(s)
      self.init_files := [s]
      return self
   end

   #
   # Set the initial files
   #
   public set_files(l)
      self.init_files := l
      return self
   end

   #
   # Set the file filter pattern list.
   #
   public set_filters(l)
      self.init_filters := l
      return self
   end

   #
   # Set the initial file/directory from a whole path.
   # 
   public set_path(s)
      local l
      l := FilePath(s).canonical()
      self.init_dirs := [l.parent().str()]
      self.init_files := [l.get(-1)]
      return self
   end

   #
   # Get the current file selected based on the file and dir fields;
   # do not call in multiple file selection mode.
   #
   public get_current_selection()
      local s, f
      s := file.get_contents()
      if *s = 0 then
         fail
      f := FilePath(s)
      if not f.is_absolute() then
         f := FilePath(dir.get_contents()).append(f)
      return f.canonical()
   end

   public on_okay_button()
      local f, fs, sel
      if /multiple_files_flag then {
         f := get_current_selection() | {
            msg("Please enter a filename")
            fail
         }
         fs := f.str()
         if Files.is_directory(fs) then {
            msg("Selected file is a directory")
            fail
         }
         case existing_file_mode of {
            REQUIRE: {
               if not Files.access(fs) then {
                  msg("Selected file doesn't exist")
                  fail
               }
            }
            DISALLOW: {
               if Files.access(fs) then {
                  msg("Selected file already exists")
                  fail
               }
            }
         }
         self.res := f
      } else {
         sel := flist.object_get_selections()
         if *sel = 0 then {
            msg("Please select a file")
            fail
         }
         self.res := ipl.pdco.List{loaded_dir_path.child((!sel).name)}
      }
      self.dispose()
   end

   public get_dir_path()
      return FilePath(dir.get_contents()).canonical()
   end

   public on_cancel_button()
      self.dispose()
   end

   public on_file()
      #
      # If return pressed in file TextField, same as okay
      #
      on_okay_button()
   end

   public on_dlist()
      goto_dir(loaded_dir_path.child(dlist.object_get_selections()[1].name).str())
   end

   public update_file_label()
      local n
      file_label.set_label(case n := *flist.get_selections() of {
         0:  "No files selected"
         1:  "One file selected"
         default:  n || " files selected"
      })
   end

   public on_flist()
      #
      # Clicked in file list; set TextField
      #
      clear_msg()
      dir.set_contents(loaded_dir_path.liberal_ucs())
      if /multiple_files_flag then
         file.set_contents(flist.object_get_selections()[1].name)
      else
         update_file_label()
      check_existing()
   end

   public on_dir(ev)
      if member(EditList.NAVIGATE, ev.code) then
         goto_dir(dir.get_contents())
      else
         check_existing()
   end

   public on_filter(ev)
      if member(EditList.NAVIGATE, ev.code) then
         refresh_dir()
   end

   public on_show_hidden_menu_item(ev)
      pos_table := table()
      refresh_dir()
   end

   public on_up_button(ev)
      if loaded_dir_path.size() > 1 then
         goto_dir(loaded_dir_path.parent().str())
      else
         msg("At root")
   end

   public on_home_button(ev)
      goto_dir(Files.get_home())
   end

   public on_refresh_menu_item(ev)
      refresh_dir()
   end

   public on_prev_button(ev)
      local s
      (history_pos < *history) | fail
      s := history[history_pos +:= 1]
      update_grey()
      goto_dir(s, &yes)
   end
   
   public on_next_button(ev)
      local s
      (history_pos > 1) | fail
      s := history[history_pos -:= 1]
      update_grey()
      goto_dir(s, &yes)
   end

   public update_grey()
      prev_button.set_is_shaded(if history_pos < *history then &no else &yes)
      next_button.set_is_shaded(if history_pos > 1 then &no else &yes)
   end

   public on_new_dir_menu_item(ev)
      local d, s
      d := NameDialog().set_label("New Directory")
      d.show_modal(self)
      \d.result | fail
      s := loaded_dir_path.child(d.result).str()
      if Files.mkdir(s) then
         goto_dir(s)
      else
         msg("mkdir failed: " || &why)
   end

   public get_favourites_directories()
      local t
      t := copy(init_dirs)
      every put(t,
                Files.getcwd() | 
                FavouriteDirectoriesDialog.gen_directories())
      return lunique(ucs_list(t))
   end

   public on_favourite_dirs_menu_item(ev)
      local d
      d := FavouriteDirectoriesDialog()
      d.show_modal(self)
      \d.okay | fail
      dir.synch_set_selection_list(get_favourites_directories())
   end

   public get_pats()
      local pat, pats
      pats := []
      filter.get_contents() ? repeat {
         pat := tab(upto(';') | 0)
         put(pats, Wildcard(pat))
         move(1) | break
      }
      return pats
   end

   public msg(s)
      message_label.set(s)
   end

   public clear_msg()
      msg()
   end

   public refresh_dir()
      dir.set_contents(loaded_dir_path.liberal_ucs())
      save_pos()
      load_dir(loaded_dir_path.str())
      restore_pos()
   end

   public save_pos()
      insert(pos_table,
             (\loaded_dir_path).str(),
             FileDialogPos(dlist.object_get_cursor().name, dlist.get_area_y()))
   end

   public restore_pos()
      local e, i
      if e := member(pos_table, loaded_dir_path.str()) then {
         if i := Positions{(!dlist.contents).name, e.cursor_name} then
            dlist.set_cursor(i)
         dlist.set_area_y(e.area_y)
      }
   end

   public goto_dir(d, nav)
      local p
      save_pos()
      dir.set_contents(FilePath(d).canonical().liberal_ucs())
      p := get_dir_path()
      load_dir(p.str())
      loaded_dir_path := p
      restore_pos()
      if /nav then {
         every 1 to history_pos - 1 do
            pop(history)
         push(history, dir.get_contents())
         history_pos := 1
         update_grey()
      }
   end

   public load_dir(s)
      local l

      #
      # Update directory and file lists.
      #
      l := list_directory(s) | {
         msg(&why)
         dlist.set_contents([])
         flist.set_contents([])
         fail
      }

      clear_msg()

      dlist.
         set_contents(l[1]).
         set_area_x(0).
         set_area_y(0).
         clear_selections().
         set_cursor(1)

      flist.
         set_contents(l[2]).
         set_area_x(0).
         set_area_y(0).
         clear_selections().
         set_cursor(1)

      synch_file()
      check_existing()
   end

   #
   # Read a directory.
   #
   public list_directory(s)
      local e, dir_list, file_list, l, pats, t, tf, z, zf, n, now
      pats := get_pats()
      l := Files.ucs_list(s, ListEntryWithIcon) | fail
      dir_list := []
      file_list := []
      now := Time.get_system_seconds()
      every e := !l do {
         n := e.name
         if show_hidden_menu_item.is_checked() | not(Files.is_hidden(n)) then {
            if e.stat.mode_str[1] == "d" then
               Files.is_relative_dir(n) | put(dir_list, e)
            else if (!pats).match(n) = *n + 1 then {
               t := e.lstat.mtime
               tf := if now - t > 180 * 86400 then
                  Time(t + Time.SYSTEM_BASE_OFFSET).format("MMM d yyyy")
               else
                  Time(t + Time.SYSTEM_BASE_OFFSET).format("MMM d HH:mm")
               tf := n || " (" || tf || ")"
               z := e.lstat.size
               zf := if z < 1024 then
                  Format.numeric_to_string(z, 0, ',') || "B"
               else if z < 1024*1024 then
                  Format.numeric_to_string(z/1024.0, 1, ',') || "KB"
               else
                  Format.numeric_to_string(z/(1024.0*1024.0), 1, ',') || "MB"
               zf := n || " (" || zf || ")"
               put(file_list, ListEntryEx(n, e.lstat, e.stat, tf, zf))
            }
         }
      }
      qsort(file_list, if /ascending then sorter else flip(sorter))
      qsort(dir_list, Files.name_cmp)
      return [dir_list, file_list]
   end

   public new()
      Dialog.new()
      self.setup()
      tools_menu.set_border_mid(NullBorder())
      # Try themed icon buttons
      theme_toolbar_button(prev_button, "go-previous")
      theme_toolbar_button(next_button, "go-next")
      theme_toolbar_button(home_button, "go-home")
      theme_toolbar_button(up_button, "go-up")
      theme_toolbar_button(tools_menu_button, "applications-system")

      dlist.
         set_draggable_cursor(&yes).
         set_selection_on_key_moves(&no).
         set_item_paint(IconFilesItemPaint()).
         set_item_border(EmptyBorder().
                             set_insets(Gui.TEXT_INSET, Gui.TEXT_INSET, 0, 0).
                             set_x_align(Align.L))
      flist.
         set_draggable_cursor(&yes).
         set_item_border(EmptyBorder().
                             set_insets(Gui.TEXT_INSET, Gui.TEXT_INSET, 0, 0).
                             set_x_align(Align.L))
      sorter := Files.name_cmp
      synch_paints()
      existing_file_mode := IGNORE
      history := []
      history_pos := 0
      update_grey()
      return
   end

   private synch_paints()
      local cp, np, sp, dp, sz
      sz := Gui.TOOLBAR_ICON_SIZE
      cp := CompoundPaint().set_top(ImagePaint().set_cache(if /ascending then "gui.TINY_ARROW_DOWN" else "gui.TINY_ARROW_UP"))
      np := ImagePaint().set_cache(ImageCache.get_key_with_resize("gui.FONT_24", sz, sz))
      sp := ImagePaint().set_cache(ImageCache.get_key_with_resize("gui.FILESIZE_24", sz, sz))
      dp := ImagePaint().set_cache(ImageCache.get_key_with_resize("gui.CLOCK_24", sz, sz))
      case sorter of {
         Files.name_cmp: {
            name_button.set_paint(cp.set_bottom(np))
            date_button.set_paint(dp)
            size_button.set_paint(sp)
            flist.set_item_paint(IconFilesItemPaint())
         }
         Files.size_cmp: {
            name_button.set_paint(np)
            date_button.set_paint(dp)
            size_button.set_paint(cp.set_bottom(sp))
            flist.set_item_paint(IconFilesItemPaintSize())
         }
         Files.date_cmp: {
            name_button.set_paint(np)
            date_button.set_paint(cp.set_bottom(dp))
            size_button.set_paint(sp)
            flist.set_item_paint(IconFilesItemPaintDate())
         }
      }
   end

   private on_date_button(ev)
      if sorter === Files.date_cmp then
         ascending := toggle_flag(ascending)
      else
         sorter := Files.date_cmp
      synch_paints()
      refresh_dir()
   end

   private on_name_button(ev)
      if sorter === Files.name_cmp then
         ascending := toggle_flag(ascending)
      else
         sorter := Files.name_cmp
      synch_paints()
      refresh_dir()
   end

   private on_size_button(ev)
      if sorter === Files.size_cmp then
         ascending := toggle_flag(ascending)
      else
         sorter := Files.size_cmp
      synch_paints()
      refresh_dir()
   end

   private setup()
      local paint_2, layout_7, paint_14, paint_45, layout_11, layout_4, paint_11, paint_37, paint_42, refresh_menu_item, panel_4, paint_29, split_content_1, split_content_2, paint_9, split_1, paint_31, paint_3, layout_8, paint_15, paint_46, paint_12, paint_43, new_dir_menu_item, paint_35, panel_2, paint_27, paint_32, favourite_dirs_menu_item, layout_9, paint_47, paint_1, layout_6, paint_13, paint_44, layout_10, layout_3, paint_10, paint_36, paint, panel_3, paint_28, paint_30, paint_48
      self.set_label("Select file")
      self.set_resize(&yes)
      self.set_size(scale(700), scale(500))
      paint_45 := ImagePaint().
         set_cache("gui.CONFIGURE_24")
      paint_42 := TextPaint("New directory...")
      new_dir_menu_item := TextMenuItem().
         connect(on_new_dir_menu_item, Event.ACTION).
         set_paint_mid(paint_42)
      paint_43 := TextPaint("Favourite dirs...")
      favourite_dirs_menu_item := TextMenuItem().
         connect(on_favourite_dirs_menu_item, Event.ACTION).
         set_paint_mid(paint_43)
      paint_44 := TextPaint("Show hidden files")
      show_hidden_menu_item := CheckBoxMenuItem().
         connect(on_show_hidden_menu_item, Event.ACTION).
         set_paint_mid(paint_44)
      paint_46 := TextPaint("Refresh")
      refresh_menu_item := TextMenuItem().
         connect(on_refresh_menu_item, Event.ACTION).
         set_paint_mid(paint_46)
      tools_menu := Menu().
         set_paint_mid(paint_45).
         add(new_dir_menu_item).
         add(favourite_dirs_menu_item).
         add(show_hidden_menu_item).
         add(refresh_menu_item)
      paint_47 := TextPaint("Tools")
      tools_menu_button := MenuButton().
         clear_constraints().
         set_tooltip(paint_47).
         set_menu(tools_menu)
      paint_1 := ImagePaint().
         set_cache("gui.HOME_24")
      paint := TextPaint("Home")
      home_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint).
         connect(self.on_home_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_1)
      paint_3 := ImagePaint().
         set_cache("gui.UP_24")
      paint_2 := TextPaint("Up")
      up_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_2).
         connect(self.on_up_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_3)
      paint_12 := ImagePaint().
         set_cache("gui.PREV_24")
      paint_13 := TextPaint("Prev")
      prev_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_13).
         connect(self.on_prev_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_12)
      paint_14 := ImagePaint().
         set_cache("gui.NEXT_24")
      paint_15 := TextPaint("Next")
      next_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_15).
         connect(self.on_next_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_14)
      paint_28 := ImagePaint().
         set_cache("gui.FONT_24")
      paint_27 := TextPaint("Sort by name")
      name_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_27).
         connect(self.on_name_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_28)
      paint_30 := ImagePaint().
         set_cache("gui.CLOCK_24")
      paint_29 := TextPaint("Sort by date")
      date_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_29).
         connect(self.on_date_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_30)
      paint_32 := ImagePaint().
         set_cache("gui.FILESIZE_24")
      paint_31 := TextPaint("Sort by size")
      size_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(paint_31).
         connect(self.on_size_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(paint_32)
      paint_36 := TextPaint("Directory")
      dir := EditList().
         set_size(scale(150)).
         set_align(Align.L, Align.C).
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_tooltip(paint_36).
         connect(self.on_dir, Event.ACTION).
         connect(self.on_dir, Event.CONTENT_CHANGED).
         set_selection_list([""])
      layout_6 := GridLayout().
         set_doi(0).
         set_dii(2).
         set_extra("cells")
      panel_4 := Panel().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_layout(layout_6).
         add(tools_menu_button).
         add(home_button).
         add(up_button).
         add(prev_button).
         add(next_button).
         add(name_button).
         add(date_button).
         add(size_button).
         add(dir)
      self.add(panel_4)
      dlist := ItemPaintList().
         set_size(scale(210), scale(200)).
         clear_constraints().
         set_constraint("r_inset", 0).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         connect(self.on_dlist, Event.SELECTION_CHANGED).
         set_select_mode(Select.ONE).
         set_contents([])
      layout_8 := GridLayout().
         set_doi(0).
         set_extra("cells")
      split_content_1 := Component().
         clear_constraints().
         set_layout(layout_8).
         add(dlist)
      flist := ItemPaintList().
         set_size(scale(270), scale(200)).
         clear_constraints().
         set_constraint("l_inset", 0).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         connect(self.on_flist, Event.SELECTION_CHANGED).
         set_select_mode(Select.ONE).
         set_contents([])
      layout_9 := GridLayout().
         set_doi(0).
         set_extra("cells")
      split_content_2 := Component().
         clear_constraints().
         set_layout(layout_9).
         add(flist)
      split_1 := Split().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_left(split_content_1).
         set_right(split_content_2).
         set_min(scale(100), scale(100))
      self.add(split_1)
      paint_35 := TextPaint("Filter")
      filter := EditList().
         set_size(scale(150)).
         set_align(Align.L, Align.B).
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_tooltip(paint_35).
         connect(self.on_filter, Event.ACTION).
         connect(self.on_filter, Event.CONTENT_CHANGED).
         set_selection_list([""])
      layout_10 := GridLayout().
         set_doi(0).
         set_extra("cells")
      paint_37 := TextPaint("File")
      file := EditList().
         set_size(scale(150)).
         set_align(Align.L, Align.B).
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_tooltip(paint_37).
         connect(self.on_file, Event.ACTION).
         connect(self.on_file_content, Event.CONTENT_CHANGED).
         set_selection_list([""])
      single_file_overlay_item := OverlayItem().
         set_layout(layout_10).
         add(file)
      layout_11 := GridLayout().
         set_doi(0).
         set_extra("cells")
      paint_48 := TextPaint("Label")
      file_label := Label().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_paint(paint_48)
      multiple_files_overlay_item := OverlayItem().
         set_layout(layout_11).
         add(file_label)
      file_overlay := OverlaySet().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         add(single_file_overlay_item).
         add(multiple_files_overlay_item).
         set_which_one(single_file_overlay_item)
      layout_3 := GridLayout().
         set_doi(0).
         set_extra("cells")
      panel_2 := Panel().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_layout(layout_3).
         add(filter).
         add(file_overlay)
      self.add(panel_2)
      paint_9 := TextPaint("Okay")
      okay_button := TextButton().
         set_align(Align.L, Align.B).
         clear_constraints().
         connect(self.on_okay_button, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_9)
      paint_10 := TextPaint("Cancel")
      cancel_button := TextButton().
         set_align(Align.L, Align.B).
         clear_constraints().
         connect(self.on_cancel_button, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_10)
      paint_11 := TextPaint("")
      message_label := MessageLabel().
         set_size(scale(130)).
         set_align(Align.L, Align.B).
         set_fg("red").
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_paint(paint_11)
      layout_4 := GridLayout().
         set_doi(0).
         set_extra("cells")
      panel_3 := Panel().
         clear_constraints().
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_layout(layout_4).
         add(okay_button).
         add(cancel_button).
         add(message_label)
      self.add(panel_3)
      layout_7 := GridLayout().
         set_extra("cells")
      self.set_layout(layout_7)
   end
end

### Ivib-v2 layout: layouts/$.layout
