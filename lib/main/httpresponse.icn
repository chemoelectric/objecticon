#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package http

import util, mail, net

#
# This class encapsulates an HTTP response.
#
class HttpResponse(MimeHeaders)
   private readable 
      url, 
      status,
      previous_response

   #
   # Set the url
   #
   public set_url(url)
      self.url := need_URL(url)
      return self
   end

   #
   # Return the status of the page
   # :Returns :
   # :  The status eg "HTTP/1.1 200 OK"
   #
   public get_status()
      return .status
   end

   #
   # Return the integer status code, extracted by parsing the status.
   #
   public get_status_code()
      # see rfc2616
      # Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF
      status ? {
         tab(upto(' '))
         tab(many(' '))
         return integer(tab(many(&digits)))
      }
   end

   #
   # Set the status
   #
   public set_status(s)
      self.status := s
      return self
   end

   #
   # Return the filename contained in the Content-Disposition header, if
   # present; fail otherwise.
   #
   public get_content_disposition_filename()
      local v
      v := ContentDisposition.parse_rfc2616(get_first_header("content-disposition")).get_parameter("filename*" | "filename") | fail
      return if is(v, ExtValue) then
         v.value
      else
         v
   end

   #
   # Return the result of `get_content_disposition_filename()`, or
   # failing that the filename contained in the `url` (which may be
   # the empty string).
   #
   public get_filename()
      return get_content_disposition_filename() | url.get_decoded_path_last()
   end

   #
   # Return the previous response, or fail if there was none.  A chain
   # of responses will arise, for example, when there are
   # redirections.
   #
   public get_previous_response()
      return .\previous_response
   end

   #
   # Set the previous response
   #
   public set_previous_response(other)
      self.previous_response := other
      return self
   end
end
