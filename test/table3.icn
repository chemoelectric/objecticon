import io, lang, datastruct, ipl.random, ipl.test, ipl.pdco(Length)

procedure methods(x)
   local i, y
   write()
   write("Testing methods of ", imagex(x))

   if is(x,Table) then {
      print{"size()", x.size()}
      if is(x,WeakrefTable) then
         every x.insert([1 to 10], ?0)
      else if x.can(Table.INSERT) then
         every x.insert(1 to 10, ?0)

      print{"key()", Length{ x.key() }}
      print{"gen()", Length{ x.gen() }}
      print{"keyval()", Length{ x.keyval() }}

      if x.can(Table.ORDER) then {
         print{"back_key()", Length{ x.back_key() }}
         print{"back()", Length{ x.back() }}
         print{"back_keyval()", Length{ x.back_keyval() }}
         print{"select(0)", x.select(0)}

         every i := 1 to x.size() do {
            if y := x.select(i) then {
               unless i = x.rank(y) then
                  write("rank of ", imagex(y), " not equal to ", i)
            } else
               write("Failed to select ", i)
         }
      }

      if x.can(Table.DELETE) then {
         x.delete(1)
         x.clear()
         print{"size() after clear()", x.size()}
      }

   } else if is(x,Set) then {
      print{"size()", x.size()}
      if x.can(Set.INSERT) then
         every x.insert(1 to 10)

      print{"gen()", Length{ x.gen() }}

      if x.can(Set.ORDER) then {
         print{"back()", Length{ x.back() }}
         print{"select(0)", x.select(0)}

         every i := 1 to x.size() do {
            if y := x.select(i) then {
               unless i = x.rank(y) then
                  write("rank of ", imagex(y), " not equal to ", i)
            } else
               write("Failed to select ", i)
         }
      }

      if x.can(Set.DELETE) then {
         x.delete(1)
         x.clear()
         print{"size() after clear()", x.size()}
      }

   } else if is(x,List) then {
      print{"Size=", x.size()}
      if x.can(Set.INSERT) then
         every x.insert(0, 1 to 10)

      print{"gen()", Length{ x.gen() }}
      print{"back()", Length{ x.back() }}
      print{"at(0)", x.at(0)}

      every i := 1 to x.size() do {
         if y := x.at(i) then {
            unless i = x.keyof(y) then
               write("keyof of ", imagex(y), " not equal to ", i)
         } else
            write("Failed to at() ", i)
      }

      if x.can(Set.DELETE) then {
         x.delete(1)
         x.clear()
         print{"size() after clear()", x.size()}
      }

   }
end

procedure test_ord(t1,t2)
   local i, l, e
   write(">>>test_ord(",image(classof(t1)),")")
   l := []
   every i := 1 to 50 do {
      every put(l, [i, i]|[table(i),i]|[[i], i]|[set(i), i])
   }
   shuffle(l)
   every e := !l do
      t1.insert(e[1], e[2])
   t1.add("ONE") +:= 1
   t1.add("TWO")
   t1.add("THREE") := 100

   shuffle(l)
   every e := !l do
      t2.insert(e[1], e[2])
   t2.add("THREE") := 100
   t2.add("TWO")
   t2.add("ONE") +:= 1

   yes_no{"equals(t1,t2)", equals(t1,t2)}
   yes_no{"t1.size() = t2.size()", t1.size()=t2.size()}
   yes_no{"hash(t1) = hash(t2)", hash(t1)=hash(t2)}
   yes_no{"equals(t1,clone(t1))", equals(t1,clone(t1))}
   yes_no{"equals(t2,clone(t2))", equals(t2,clone(t2))}
   yes_no{"equals(TableSet(t1),TableSet(t2))", equals(TableSet(t1),TableSet(t2))}
   yes_no{"hash(TableSet(t1))=hash(TableSet(t2))", hash(TableSet(t1))=hash(TableSet(t2))}
   shuffle(l)
   every t1.delete((!l)[1] | "ONE" | "TWO" | "THREE")
   every t2.delete((!l)[1] | "ONE" | "TWO" | "THREE")

   yes_no{"t1.size()=0", t1.size()=0}
   yes_no{"t2.size()=0", t2.size()=0}
end

procedure test_cl()
   local t1, t2, s, l
   write(">>>test_cl()")
   l := ["Abc","DEf","GHI","Jkl"]
   t1 := SortTable(0, Text.caseless_compare)
   every s := !l | map(!l) | map(!l,&lcase,&ucase) do
      t1.add(s) +:= 1
   every s := !l do {
      print{"get("||imagex(s)||")", t1.get(s)}
   }
   t2 := SortTable(0, Text.caseless_compare)
   every t2.insert(!l, 3)
   yes_no{"equals(t1,t2)", equals(t1,t2)}
   yes_no{"t1.size() = t2.size()", t1.size()=t2.size()}
   yes_no{"hash(t1) = hash(t2)", hash(t1)=hash(t2)}
   yes_no{"equals(t1,clone(t1))", equals(t1,clone(t1))}
   yes_no{"equals(t2,clone(t2))", equals(t2,clone(t2))}
   yes_no{"equals(TableSet(t1),TableSet(t2))", equals(TableSet(t1),TableSet(t2))}
   yes_no{"hash(TableSet(t1))=hash(TableSet(t2))", hash(TableSet(t1))=hash(TableSet(t2))}
   every t1.delete(!l)
   every t2.delete(map(!l))
   yes_no{"t1.size()=0", t1.size()=0}
   yes_no{"t2.size()=0", t2.size()=0}
end

procedure test_eq()
   local t1, e, l
   write(">>>test_eq()")
   l := [ [], 0, &null, 100, table(100), [1,2,3], table(0,1,2,3,4), 
         [ [1,2], [3,4] ], set(1,2,3), SortTable("abc", Text.caseless_compare,"dog",100,"cat",200)]
   t1 := EqTable(0)
   every e := !l | !clone(l) do {
      t1.add(e) +:= 1
   }
   every e := !l do {
      print{"get("||imagex(e)||")", t1.get(e)}
   }
   yes_no{"equals(t1,clone(t1))", equals(t1,clone(t1))}
   every t1.delete(!l)
   yes_no{"t1.size()=0", t1.size()=0}
end

procedure test_set()
   local s, b
   write(">>>test_set()")
   s := set()
   every 1 to 20 do insert(s, ?100)
   b := BuiltinSet(s, 1,100,2,200)
   b.insert(300)
   b.delete(2)
   cmp_seq{"m1", member(s,1) & &null, b.member(1) & &null}
   cmp_seq{"m2", member(s,999), b.member(999)}
   cmp_seq{"gen", !s, b.gen()}
   yes_no{"sort=", equals(sort(s), b.sort())}
   cmp_seq{"size", *s, b.size()}
end

procedure test_list_a(c)
   local l1, l2, u, s
   write(image(c))
   l1 := c()
   l2 := c()
   every l1.put(1 to 5)
   l2.put(4)
   l2.put(5)
   l2.push(2)
   l2.push(1)
   l2.insert(3,99)
   l2.delete(3,99)
   l2.insert(3,3)
   yes_no{"l1=l2", equals(l1, l2)}
   cmp_seq{"l1.gen()", l1.gen(), 1 to 5}
   cmp_seq{"l1.back()", l1.back(), 5 to 1 by -1}
   cmp_seq{"l1.gen(3)", l1.gen(3), 3 to 5}
   cmp_seq{"l1.back(3)", l1.back(3), 2 | 1}
   u := UnmodifiableList(l1)
   cmp_seq{"u.gen()", l1.gen(), u.gen() }
   try{"u.at(1) := 2", u.at(1) := 2 }
   s := SubList(l1, 2, 4)
   cmp_seq{"s.gen()", s.gen(), 2|3}
   cmp_seq{"s.back()", s.back(), 3|2}
end

procedure test_list()
   write(">>>test_list()")
   test_list_a(LinkedList)
   test_list_a(DoublyLinkedList)
   test_list_a(BuiltinList)
end

procedure main()
   methods(UnmodifiableTable(SortTable(,,1,2,3,4)))
   methods(SortTable())
   methods(EqTable())
   methods(BuiltinTable())
   methods(EmptyTable())
   methods(WeakrefTable())
   methods(UnmodifiableBuiltinTable(table(1,2,3)))

   methods(UnmodifiableSet(TableSet(SortTable(,,1,2,3,4))))
   methods(TableSet(SortTable(,,1,2,3,4)))
   methods(EqSet())
   methods(EmptySet())
   methods(BuiltinSet())
   methods(UnmodifiableBuiltinSet(set(10,20)))

   methods(UnmodifiableList(LinkedList(1,2,3)))
   methods(EmptyList())
   methods(BuiltinList())
   methods(LinkedList())
   methods(DoublyLinkedList())
   methods(UnmodifiableBuiltinList([1,2,3,4]))
   methods(SubList(DoublyLinkedList(10,20,30,40,50,60,70),3,6))

   test_ord(EqTable(0),EqTable(0))
   test_ord(SortTable(0),SortTable(0))
   test_ord(BuiltinTable(table(0)),BuiltinTable(table(0)))
   test_cl()
   test_eq()
   test_set()
   test_list()
end
