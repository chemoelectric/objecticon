import gui, io, util, lang, graphics

class FontTestDialog(Dialog)
   private
      fsys,
      range_button,
      range_list,
      range_message,
      quit_button, 
      viewer, 
      font_name, 
      font_size, 
      weight_list, 
      slant_list, 
      icon_tab, 
      tab_set, 
      name_label, 
      command_field, 
      spacing_list,
      serif_list,
      width_list,
      native_list,
      native_tab,
      native_field,
      font_label,
      size_label,
      default_tab,
      oifont_label,
      oifontsize_label

   public component_setup()
      local t
      self.setup()
      # Work out what the underlying font system is.
      t := Window()
      t.get_font() ? (fsys := tab(upto(':')))
      t.close()
      case fsys of {
         "p9": command_field.set_contents("/bin/du -a /lib/font/bit | /bin/awk '{print $2}' | grep '*.font' | sort")
         "fc": command_field.set_contents("fc-list : family style spacing")
         default: native_tab.set_is_shaded(&yes)
      }
      oifont_label.set_label(Window.get_default_font())
      oifontsize_label.set_label(Window.get_default_font_size())

      range_list.set_selection_list(["32-127 (ascii)",
                                     "128-255 (latin)",
                                     "U+0100-U+017F (latin ex A)",
                                     "U+0180-U+024F (latin ex B)",
                                     "U+1E00-U+1EFF (latin ex +)",
                                     "U+0400-U+04FF (cyrillic)",
                                     "U+0531-U+0589 (armenian)",
                                     "U+05BE-U+05F4 (hebrew)",
                                     "U+0370-U+03FF (greek)",
                                     "U+20A0-U+20CF (currency syms)",
                                     "U+30A0-U+30FF (katakana)"
                                     ])
   end

   public end_dialog()
   end

   public init_dialog()
      synch_range()
      synch_font()
   end

   public on_quit_button(ev)
      dispose()
   end

   public synch_font()
      local s, cw
      case tab_set.get_which_one() of {
         icon_tab: {
            s := font_name.get_contents()
            s ||:= "," || ("-" ~== serif_list.object_get_selection())
            s ||:= "," || ("-" ~== weight_list.object_get_selection())
            s ||:= "," || ("-" ~== slant_list.object_get_selection())
            s ||:= "," || ("-" ~== spacing_list.object_get_selection())
            s ||:= "," || ("-" ~== width_list.object_get_selection())
            s ||:= "," || ("-" ~== font_size.get_contents())
            name_label.set_label(s)
         }
         default_tab: {
            s := Window.get_default_font()
         }
         native_tab: {
            s := fsys || ":" || native_field.get_contents()
         }
      }
      viewer.set_font(s)
      if cw := viewer.get_clone() then {
         font_label.set_label(ucs(cw.get_font()))
         size_label.set_label("Height=" || cw.get_font_height() || ", " ||
                              "Ascent=" || cw.get_font_ascent() || ", " ||
                              "Descent=" || cw.get_font_descent() || ", " ||
                              "Width=" || cw.get_font_width())
         cw.close()
      } else {
         font_label.set_label("-")
         size_label.set_label("-")
      }
   end

   public on_native_list(ev)
      native_field.set_contents(native_list.object_get_selections()[1])
      synch_font()
   end

   public on_get_list(ev)
      local p, l
      p := open(command_field.get_contents(), "pr") | fail
      l := []
      while put(l, ucs(p.read()))
      p.close()
      native_list.set_contents(l)
   end

   private synch_range()
      local c
      if c := parse_range(range_list.get_contents()) then {
         range_message.set_label("Okay")
         viewer.set_text(ucs(c))
      } else
         range_message.set_label(&why)
   end

   private parse_range(s)
      local i, j
      s ? {
         if any(&digits) then
            i := integer(tab(many(&digits)))
         else if ="U+" then
            i := integer("16r" || move(4)) | return error("Bad range")
         ="-" | return error("- expected")
         if any(&digits) then
            j := integer(tab(many(&digits)))
         else if ="U+" then
            j := integer("16r" || move(4)) | return error("Bad range")
      }
      i <= j | return error("From bigger than to")
      if j - i > 300 then
         return error("Range too big")
      return Text.create_cset(i,j)
   end

   private setup()
      local paint_2, layout_7, paint_14, layout_4, paint_11, label_4, panel_4, layout_1, label_1, paint_9, panel_1, paint_6, paint_18, paint_23, paint_3, layout_8, paint_15, paint_20, label_8, layout_5, paint_12, label_5, panel_5, label_2, panel_2, paint_7, paint_19, paint_24, paint_4, layout_9, paint_16, paint_21, paint_1, layout_6, paint_13, layout_10, label_6, layout_3, paint_10, paint, panel_3, paint_8, paint_5, paint_17, paint_22, text_button_1
      self.set_resize(&yes)
      paint := TextPaint("Font")
      label_1 := Label().
         clear_constraints().
         set_constraint("anchor", "w").
         set_constraint("x_align", Align.L).
         set_paint(paint)
      paint_16 := TextPaint(u"")
      font_label := Label().
         set_size(scale(40)).
         clear_constraints().
         set_constraint("anchor", "w").
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_paint(paint_16)
      paint_1 := TextPaint("Size")
      label_2 := Label().
         clear_constraints().
         set_constraint("anchor", "w").
         set_constraint("x_align", Align.L).
         set_constraint("x_weight", 0.0).
         set_paint(paint_1)
      paint_2 := TextPaint("")
      size_label := Label().
         set_size(scale(40)).
         clear_constraints().
         set_constraint("anchor", "w").
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_paint(paint_2)
      layout_1 := GridLayout().
         set_doi(scale(0)).
         set_extra("cells")
      panel_1 := Panel().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_layout(layout_1).
         add(label_1).
         add(font_label).
         add(label_2).
         add(size_label)
      self.add(panel_1)
      viewer := Viewer().
         set_size(scale(583), scale(109)).
         clear_constraints().
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0)
      layout_7 := GridLayout().
         set_doi(scale(0)).
         set_extra("cells")
      panel_3 := Panel().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_layout(layout_7).
         add(viewer)
      self.add(panel_3)
      paint_12 := TextPaint("Display range")
      label_5 := Label().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_paint(paint_12)
      range_list := EditList().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         connect(self.synch_range, Event.ACTION).
         connect(self.synch_range, Event.SELECTION_CHANGED).
         set_selection_list([""])
      paint_11 := TextPaint("Set")
      range_button := TextButton().
         clear_constraints().
         connect(self.synch_range, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_11)
      paint_13 := TextPaint("")
      range_message := Label().
         set_size(scale(150)).
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_paint(paint_13)
      layout_9 := GridLayout().
         set_doi(scale(0)).
         set_extra("cells")
      panel_5 := Panel().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_align", Align.L).
         set_constraint("x_weight", 1.0).
         set_layout(layout_9).
         add(label_5).
         add(range_list).
         add(range_button).
         add(range_message)
      self.add(panel_5)
      paint_3 := TextPaint("Icon spec")
      layout_6 := GridLayout().
         set_extra("cells")
      paint_6 := TextPaint("family")
      font_name := EditList().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_tooltip(paint_6).
         connect(self.synch_font, Event.CONTENT_CHANGED).
         set_selection_list(["fixed", "mono", "typewriter", "sans", "serif"])
      paint_14 := TextPaint("serif")
      serif_list := List().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_tooltip(paint_14).
         connect(self.synch_font, Event.SELECTION_CHANGED).
         set_selection_list(["-", "sans", "serif"])
      paint_7 := TextPaint("weight")
      weight_list := List().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_tooltip(paint_7).
         connect(self.synch_font, Event.SELECTION_CHANGED).
         set_selection_list(["-", "medium", "demibold", "bold", "light"])
      paint_8 := TextPaint("slant")
      slant_list := List().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_tooltip(paint_8).
         connect(self.synch_font, Event.SELECTION_CHANGED).
         set_selection_list(["-", "italic", "oblique", "roman"])
      paint_9 := TextPaint("spacing")
      spacing_list := List().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_tooltip(paint_9).
         connect(self.synch_font, Event.SELECTION_CHANGED).
         set_selection_list(["-", "mono", "proportional"])
      paint_15 := TextPaint("width")
      width_list := List().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_tooltip(paint_15).
         connect(self.synch_font, Event.SELECTION_CHANGED).
         set_selection_list(["-", "condensed", "narrow", "normal", "wide", "extended"])
      paint_10 := TextPaint("size")
      font_size := EditList().
         set_size(scale(100)).
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_tooltip(paint_10).
         connect(self.synch_font, Event.CONTENT_CHANGED).
         set_selection_list(["-", "8", "10", "12", "16", "24", "32", "48"]).
         set_filter('+\-.0123456789')
      layout_3 := GridLayout().
         set_doi(scale(0)).
         set_extra("cells")
      panel_2 := Panel().
         clear_constraints().
         set_constraint("eol", &yes).
         set_layout(layout_3).
         add(font_name).
         add(serif_list).
         add(weight_list).
         add(slant_list).
         add(spacing_list).
         add(width_list).
         add(font_size)
      paint_4 := TextPaint("")
      name_label := Label().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_paint(paint_4)
      icon_tab := TabItem().
         set_paint(paint_3).
         set_layout(layout_6).
         add(panel_2).
         add(name_label)
      paint_20 := TextPaint("Default")
      layout_10 := GridLayout().
         set_extra("cells")
      paint_21 := TextPaint("OIFONT")
      label_6 := Label().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_paint(paint_21)
      paint_22 := TextPaint("Label")
      oifont_label := Label().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_align", Align.L).
         set_paint(paint_22)
      paint_23 := TextPaint("OIFONTSIZE")
      label_8 := Label().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_paint(paint_23)
      paint_24 := TextPaint("Label")
      oifontsize_label := Label().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_paint(paint_24)
      default_tab := TabItem().
         set_paint(paint_20).
         set_layout(layout_10).
         add(label_6).
         add(oifont_label).
         add(label_8).
         add(oifontsize_label)
      paint_5 := TextPaint("Native spec")
      layout_5 := GridLayout().
         set_extra("cells")
      native_list := TextList().
         set_size(scale(200), scale(150)).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         connect(self.on_native_list, Event.SELECTION_CHANGED).
         set_select_mode(Select.ONE).
         set_contents([])
      paint_17 := TextPaint("List command")
      label_4 := Label().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_paint(paint_17)
      command_field := TextField().
         set_size(scale(60)).
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         connect(self.on_get_list, Event.ACTION).
         set_contents("fc-list")
      paint_18 := TextPaint("Get list")
      text_button_1 := TextButton().
         clear_constraints().
         connect(self.on_get_list, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_18)
      layout_8 := GridLayout().
         set_doi(scale(0)).
         set_extra("cells")
      panel_4 := Panel().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_layout(layout_8).
         add(label_4).
         add(command_field).
         add(text_button_1)
      native_field := TextField().
         set_size(scale(60)).
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         connect(self.synch_font, Event.CONTENT_CHANGED).
         set_contents(u"")
      native_tab := TabItem().
         set_paint(paint_5).
         set_layout(layout_5).
         add(native_list).
         add(panel_4).
         add(native_field)
      tab_set := TabSet().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         connect(self.synch_font, Event.SELECTION_CHANGED).
         add(icon_tab).
         add(default_tab).
         add(native_tab).
         set_which_one(icon_tab)
      self.add(tab_set)
      paint_19 := TextPaint("Quit")
      quit_button := TextButton().
         set_align(Align.C, Align.B).
         clear_constraints().
         connect(self.on_quit_button, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_19)
      self.add(quit_button)
      self.connect(self.dispose, Event.WINDOW_CLOSE_BUTTON)
      layout_4 := GridLayout().
         set_extra("cells")
      self.set_layout(layout_4)
   end
end


class Viewer(DrawScrollArea)
   public font, text

   public set_font(f)
      self.font := f
      invalidate_subject_width()
      invalidate_subject_height()
      compute_and_invalidate()
   end

   public set_text(s)
      self.text := s
      invalidate_subject_width()
      invalidate_subject_height()
      compute_and_invalidate()
   end

   public get_clone()
      local t
      \font | fail
      t := view.cbwin.clone()
      if t.set_font(font) then
         return t
      t.close()
   end

   public calculate_subject_width()
      local cw,sw
      cw := get_clone() | return 50
      sw := cw.text_width(self.text)
      cw.close()
      return sw + 20
   end

   public calculate_subject_height()
      local cw,fh
      cw := get_clone() | return 50
      fh := cw.get_font_height()
      cw.close()
      return fh + 20
   end

   public get_default_vertical_increment()
      return 10
   end

   public get_default_horizontal_increment()
      return 10
   end

   public draw(r)
      local px, py, cw, fh, ah, dh

      cw := get_clone() | fail

      px := view.x - get_area_x() + 10
      py := view.y - get_area_y() + 10

      fh := cw.get_font_height()
      ah := cw.get_font_ascent()
      dh := cw.get_font_descent()
      cw.set_fg("dark green")
      cw.draw_rectangle(px, py, get_subject_width()-20 , ah)
      cw.set_fg("red")
      cw.draw_rectangle(px, py+ah, get_subject_width()-20, dh)
      cw.set_fg("black")
      cw.draw_string(px, py + cw.get_font_ascent(), self.text)

      cw.close()
   end

   public new()
      DrawScrollArea.new()
      set_use_default_keys(&yes)
      self.text := ""
      return
   end
end



procedure main()
   local d
   d := FontTestDialog()
   d.show_modal()
end

### Ivib-v2 layout: layouts/$.layout
