#
# Test that coexpressions dereference local variables correctly when 
# activating or returning
#

procedure p1()
   local z
   z := 40
   return create z
end

procedure p2()
   static z
   z := 40
   return create z
end

global g1
procedure p3()
   return create g1
end

procedure q1()
   local z
   z := 40
   return create coact(z)
end

procedure q2()
   static z
   z := 40
   return create coact(z)
end

procedure q3()
   return create coact(g1)
end

procedure r1()
   local z
   z := 40
   return create z@&source
end

procedure r2()
   static z
   z := 40
   return create z@&source
end

procedure r3()
   return create g1@&source
end


procedure s1()
   local z
   z := 40
   return create proc("@",2)(z,&source)
end

procedure s2()
   static z
   z := 40
   return create proc("@",2)(z,&source)
end

procedure s3()
   return create proc("@",2)(g1,&source)
end

procedure main()
   local e, l1,l2,l3, t, v

   e := p1()
   try{"p1", @e := 100}
   e := p2()
   try{"p2", @e := 100}
   e := p3()
   try{"p3", @e := 100}

   e := p1()
   try{"p1a", !e := 100}
   e := p2()
   try{"p2a", !e := 100}
   e := p3()
   try{"p3a", !e := 100}

   e := q1()
   try{"q1", @e := 100}
   e := q2()
   try{"q2", @e := 100}
   e := q3()
   try{"q3", @e := 100}

   # Fiddly, since &source muddles up the return to try{}.
   e := r1()
   try{"r1", {t := &source ; if v := @e := 100 then coact(v,t) else coact(,t,,&yes)} }
   e := r2()
   try{"r2", {t := &source ; if v := @e := 100 then coact(v,t) else coact(,t,,&yes)} }
   e := r3()
   try{"r3", {t := &source ; if v := @e := 100 then coact(v,t) else coact(,t,,&yes)} }

   e := s1()
   try{"s1", {t := &source ; if v := @e := 100 then coact(v,t) else coact(,t,,&yes)} }
   e := s2()
   try{"s2", {t := &source ; if v := @e := 100 then coact(v,t) else coact(,t,,&yes)} }
   e := s3()
   try{"s3", {t := &source ; if v := @e := 100 then coact(v,t) else coact(,t,,&yes)} }

   e := create l1
   try{"L1", @e := 100}

   e := create { l1@&source }
   try{"L2", {t := &source ; if v := @e := 100 then coact(v,t) else coact(,t,,&yes)} }

   e := create { coact(l1) }
   try{"L3", @e := 100}

   e := create { proc("@",2)(l1,&source) }
   try{"L4", {t := &source ; if v := @e := 100 then coact(v,t) else coact(,t,,&yes)} }

   e := create l1|l2|l3
   try{"L5", {every !e := 0 ; "ok" }}
end
