############################################################################
#
#	File:     strings.icn
#
#	Subject:  Procedures for manipulating strings
#
#	Author:   Ralph E. Griswold
#
#	Date:     June 10, 2001
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################

package ipl.strings

import lang(Prog,Text), util

# Concatenates an arbitrary number of strings.
procedure cat(args[])			
   local result

   result := ""

   every result ||:= !args

   return result

end

# Returns the number of instances of characters in `c` in `s`.
procedure charcnt(s, c)			
   local count

   count := 0

   s ? {
      while tab(upto(c)) do
         count +:= *tab(many(c))
      }

   return count

end

# Collates the characters of `s1` and `s2`.  For example,
# ~
#    collate("abc", "def")
# ~
# produces `"adbecf"`.
#
procedure collate(s1, s2)		
   local length, ltemp, rtemp
   static llabels, rlabels, clabels, blabels, half

   initial {
      llabels := "ab"
      rlabels := "cd"
      blabels := llabels || rlabels
      clabels := "acbd"
      half := 2
      ltemp := left(&cset, *&cset / 2)
      rtemp := right(&cset, *&cset / 2)
      clabels := collate(ltemp, rtemp)
      llabels := ltemp
      rlabels := rtemp
      blabels := string(&cset)
      half := *llabels
      }

   length := *s1
   if length <= half then
      return map(left(clabels, 2 * length), left(llabels, length) ||
         left(rlabels, length), s1 || s2)
   else return map(clabels, blabels, left(s1, half) || left(s2, half)) ||
      collate(right(s1, length - half), right(s2, length - half))

end

# Generates the combinations of characters from `s` taken `i` at a time.
procedure comb(s, i)			
   local j

   if i < 1 then fail
   suspend if i = 1 then !s
      else s[j := 1 to *s - i + 1] || comb(s[j + 1:0], i - 1)

end

# Compresses consecutive occurrences of characters in `c` that occur
# in `s`; `c` defaults to `&cset`.
procedure compress(s, c)		
   local result, s1

   /c := &uset

   result := ""

   s ? {
      while result ||:= string(tab(upto(c))) do {
         result ||:= string(s1 := move(1))
         tab(many(s1))
         }
      return result || tab(0)
      }
end

# Produces the common prefix of list of strings `L`: the longest
# initial substring shared by all, which may be the empty string.
#
procedure coprefix(L)
   local i, s, e
   every i := seq() do {
      s := L[1][i] | break
      every e := !L do
         e[i] == s | break break
   }
   return L[1][1:i]
end

# Produces the common suffix list of strings `L`: the longest trailing
# substring shared by all, which may be the empty string.
#
procedure cosuffix(L)
   local i, s, e
   every i := seq(-1, -1) do {
      s := L[1][i] | break
      every e := !L do
         e[i] == s | break break
   }
   return L[1][i + 1:0]
end

# Produces the characters of `s` in lexical order.
procedure csort(s)			
   local c, s1

   s1 := s[1:1]

   every c := !cset(s) do
      every find(c, s) do
         s1 ||:= c

   return s1

end

# Produces a string consisting of every other character of `s`. If `i`
# is odd, the odd-numbered characters are selected, while if `i` is
# even, the even-numbered characters are selected.  The default value
# of `i` is 1.
#
procedure decollate(s, i)		
   local ssize
   static dsize, image, object

   initial {
      image := collate(left(&cset, *&cset / 2), left(&cset, *&cset / 2))
      object := left(&cset, *&cset / 2)
      dsize := *image
      }

   /i := 1

   i %:= 2
   ssize := *s

   if ssize + i <= dsize then
      return map(object[1+:(ssize + i) / 2], image[(i + 1)+:ssize], s)
   else return map(object[1+:(dsize - 2) / 2], image[(i + 1)+:dsize - 2],
      s[1+:(dsize - 2)]) || decollate(s[dsize - 1:0], i)

end

# Deletes occurrences of characters in `c` from `s`.
procedure deletec(s, c)			
   return replacec(s, c, "")
end

# Deletes all characters of `s` at positions specified in `L`.
procedure deletep(s, L)

   L := sort(L)

   while s[pull(L)] := ""

   return s

end

# Deletes occurrences of `s2` in `s1`.
#
procedure deletes(s1, s2)		
   return replace(s1, s2, "")
end

# Returns count of the number of different characters in `s`.
procedure diffcnt(s)			

   return *cset(s)

end

# Replicates `s` to length `n`.
procedure extend(s, n)			
   local i

   if *s = 0 then fail

   i := n / *s
   if n % *s > 0 then i +:= 1

   return left(repl(s, i), n)

end

# Returns characters of `s` in order of decreasing frequency
procedure fchars(s)			
   local counts, clist, bins, blist, result

   counts := table(0)
   every counts[!s] +:= 1
   clist := sort(counts, 4)

   bins := table('')
   while bins[pull(clist)] ++:= pull(clist)
   blist := sort(bins, 3)

   result := s[1:1]
   while result ||:= pull(blist) do
      pull(blist)

   return result

end

# Interleaves characters `s2` extended to the length of `s1` with `s1`.
procedure interleave(s1, s2)		

   return collate(s1, extend(s2, *s1)) | fail

end

# Succeeds and returns `s` if it is a palindrome.
procedure ispal(s)			

   if s == reverse(s) then return s else fail

end

# Returns the length of the longest string in `L`.  If `p` is given,
# it is applied to each string as as a "length" procedure.  The
# default for `p` is :-
# ~
#      Prog.get_operator("*", 1)
# ~
procedure maxlen(L, p)			
   local i

   if *L = 0 then fail

   /p := Prog.get_operator("*", 1)

   i := 0

   every i <:= p(!L)

   return i

end

# Produces a "meandering" string that contains all n-tuples of
# characters of `s`.
procedure meander(alpha, n)		
   local result, trial, t, i, c

   i := *alpha
   t := n - 1
   result := repl(alpha[1], t)			# base string

   while c := alpha[i] do {			# try a character
      result ? {				# get the potential n-tuple
         tab(-t)
         trial := tab(0) || c
         }
      if result ? find(trial) then 		# duplicate, work back
         i -:= 1
      else {
         result ||:= c				# add it
         i := *alpha				# and start from end again
         }
      }

   return result[n:0]

end

# Returns the collation of the strings in `L`.
procedure multicoll(L)			
   local result, i, j

   result := ""

   every i := 1 to *L[1] do		# no other longer if legal
      every j := 1 to *L do
         result ||:= L[j][i]

   return result

end

# Produces the unique characters of `s` in the order that they first
# appear in `s`.
#
procedure ochars(w)			
   local out, c

   out := w[1:1]

   every c := !w do
	if not find(c, out) then
	    out ||:= c

   return out

end

# Inserts values in a numerical string so that adjacent digits follow
# an odd-even pattern.
#
procedure odd_even(s)			
   local result, i, j


   every i := integer(!s) do {
      if /result then result := i
      else if (i % 2) = (j % 2) then result ||:= (j + 1) || i
      else result ||:= i
      j := i
      }

   return result

end

# Generates all the `n`-character palindromes from the characters in `s`.
#
procedure palins(s, n)			
   local c, lpart, mpart, rpart, h, p

   if n = 1 then suspend !s
   else if n = 2 then
      every c := !s do suspend c || c
   else if n % 2 = 0 then {		# even
      h := (n - 2) / 2
      every p := palins(s, n - 2) do {
         p ? {
            lpart := move(h)
            rpart := tab(0)
            }
         every c := !s do {
            mpart := c || c
            suspend lpart || mpart || rpart
            }
         }
      }
   else {				# odd
      h := (n - 1) / 2
      every p := palins(s, n - 1) do {
         p ? {
            lpart := move(h)
            rpart := tab(0)
            }
         every suspend lpart || !s || rpart
         }
      }
    
end

# Generates all the permutations of the string `s`.
procedure permutes(s)			
   local i

   if *s = 0 then return s
   suspend s[i := 1 to *s] || permutes(s[1:i] || s[i+1:0])

end

# Trims characters from beginning of `s`.
procedure pretrim(s, c)			

   /c := ' '

   s ? {
      tab(many(c))
      return tab(0)
      }

end

# Returns `s1` concatenated with `s2` and the reversal of `s1` to
# produce a palindroid; the values of `i` determine "end conditions"
# for the reversal:
#   *  0       pattern palindrome; the default
#   *  1       pattern palindrome with center duplicated
#   *  2       true palindrome with center not duplicated
#   *  3       true palindrome with center duplicated
#
#  `s2` defaults to the empty string, in which case the result is a
#  full palindrome.
#
procedure reflect(s1, i, s2)			

   /i :=0
   /s2 := ""

   return s1 || s2 || reverse(
      case i of {
         0:   s1[2:-1]		# pattern palindrome
         1:   s1[2:0]		# pattern palindrome with first character at end
         2:   s1[1:-1]		# true palindrome with center character unduplicated
         3:   s1		# true palindrome with center character duplicated
         }
      )

end

# Replaces all occurrences of `s2` in `s1` by `s3`; `s2` may not be
# the empty string.
#
# The result type is the type of `s1`.
#
procedure replace(s1, s2, s3)		
   local result, i

   s1 := need_text(s1)
   # s1 and s2 must be the same type so that i (=*s2) is correct
   s2 := same_string_type(s2, s1)
   s3 := string(same_string_type(s3, s1))
   i := *s2
   if i = 0 then runerr("Empty string given to replace", s2)    # would loop on empty string
   result := ""
   s1 ? {
      while result ||:= string(tab(find(s2))) do {
         result ||:= s3
         move(i)
         }
      return result || tab(0)
      }

end

# Performs multiple replacements in the style of of `replace()`, where
# multiple argument pairs may be given, as in
# ~
#     replacem(s, "a", "bc", "d", "cd")
# ~
# which replaced all "a"s by "bc"s and all "d"s by "cd"s.
# Replacements are performed one after another, not in parallel.
#
procedure replacem(s, pairs[])		

   while s := replace(s, get(pairs), get(pairs))

   return s

end

# Replace each occurence in string `s` of a character in cset `c` by
# the string `t` (which may be of any length).  For example :-
# ~
#     replacec("The sum is $2000.00", &digits, "*")
#     gives "The sum is $****.**"
# ~
#
# If `t` is the empty string, then this is equivalent to `deletec`.
#
# The result type is the type of `s`.
#
procedure replacec(s, c, t)
   local result

   s := need_text(s)
   c := need_cset(c)
   t := string(same_string_type(t, s))
   result := ""
   s ? {
      while result ||:= string(tab(upto(c))) do
         result ||:= repl(t, *tab(many(c)))
      return result || tab(0)
    }

end

# Replicates each character of c by the amount given by the values in
# `L`.
#
procedure replc(s, L)			
   local result

   result := s[1:1]

   every result ||:= repl(!s, get(L))

   return result

end

# Rotates `s` `i` characters to the left (negative `i` produces
# rotation to the right); the default value of `i` is 1.
#
procedure rotate(s, i)			

   if s == "" then return s
   /i := 1
   if i = 0 then return s
   else if i < 0 then i +:= *s
   i %:= *s

   return s[(i + 1):0] || s[1:(i + 1)]

end

# Produces the unique characters of `s` in lexical order.
procedure schars(s)			

   return string(cset(s))

end

# Scrambles (shuffles) the characters of `s` randomly.
procedure scramble(s)			
   local i

   s := string(s) | fail

   every i := *s to 2 by -1 do
      s[?i] :=: s[i]

   return s

end

# Selects characters of `s` that are at positions given in `L`.
procedure selectp(s, L)			
   local result

   result := s[1:1]

   every result ||:= s[!L]

   return result

end

# Generates column-sized chunks (length <= `n`) of string `s` broken
# at spans of cset `c`.
#
# Defaults:   `n`    80  
#             `c`    `' \t\r\n\v\f'`
#
# Example:
# ~
#     every write(">  ", slugs(msg, 50))
# ~
procedure slugs(s, n, c)  		
   local i, t

   (/n := 80) | (n := 0 < integer(n)) | runerr(101, n)
   /c := ' \t\r\n\v\f'

   n +:= 1
   while *s > 0 do s ? {
      if *s <= n then
         return trim(s, c)
      if tab(i := (n >= upto(c))) then {
         tab(many(c))
         while tab(i := (n >= upto(c))) do {
            tab(many(c))
            }
         suspend .&subject[1:i]
         }
      else {
         t := tab(n | 0)
         suspend t
         }
      s := tab(0)
      }
   fail
end

# Sequence consisting of the closure of `s` starting with the empty
# string and continuing in lexical order as given in `s`
#
procedure starseq(s)		

   /s := ""

   suspend s[1:1] | (starseq(s) || !s)

end

# Produces a count of the number of non-overlapping times `s1` occurs
# in `s2`; fails is `s1` is null.
#
procedure strcnt(s1, s2)		
   local j, i

   if *s1 = 0 then fail			# null string would loop

   j := 0
   i := *s1

   s2 ? {
      while tab(find(s1)) do {
         j +:= 1
         move(i)
         }
      return j
      }

end

# Generates all the substrings of `s` with lengths from `i` to `j`,
# inclusive; `i` defaults to 1, `j` to `*s`.
#
procedure substrings(s, i, j)		

   /i := 1
   /j := *s

   s ? {
      every tab(1 to *s) do
         suspend move(i to j)
      }

end

# Transposes `s1` according to label `s2` and transposition `s3`.
procedure transpose(s1, s2, s3)		
   local n, result

   s1 := need_text(s1)
   s2 := same_string_type(s2, s1)
   s3 := same_string_type(s3, s1)

   n := *s2
   result := ""

   s1 ? {
      while result ||:= string(map(s3, s2, move(n)))
      return result || tab(0)
      }

end

# Generate words formed of adjacent characters in `wc`
#
# :Parameters :
# :  `s` - the subject string
# :  `wc` - cset of word characters
#
procedure words_in(s, wc)
   s ? while tab(upto(wc)) do
      suspend tab(many(wc)) \ 1
end

# Generate "words" from string `s` separated by chars in `sep`.
#
# :Parameters :
# :  `s` - the subject string
# :  `sep` - cset of the separator chars, default ' \t\r\n\v\f'
#
procedure words(s, sep)
   sep := ~\sep | ~' \t\r\n\v\f'
   suspend words_in(s, sep)
end

# Succeed if `s1` ends with the string `s2`
#
procedure endswith(s1, s2)
   succeed s1[-*s2:0] == s2
end

#
# Separate a string `s` into parts separated by (single) chars in `sep`.
#
# :Parameters :
# :  `s` - the string to convert
# :  `sep` - cset of the separator chars, default ','
#
procedure separate(s, sep)
   local t
   /sep := ','
   s ? {
      while t := tab(upto(sep)) do {
         suspend t
         move(1)
      }
      return tab(0)
   }
end

#
# Separate a string into parts separated by end-of-line characters.
#
# :Parameters :
# :  `s` - the string to convert
#
procedure separate_lines(s)
   local t
   every t := separate(s, '\n') do {
      # This just tests 't[-1] == "\r"', but avoids an allocation
      # if s is ucs.
      if any('\r', t, -1) then
         t[-1] := ""
      suspend t
   }
end

# Return a string which is the same as `s`, but with any utf-16
# surrogate pairs replaced with their equivalent characters.
#
# The procedure fails if `s` contains an invalid surrogate pair
# encoding.
#
procedure remove_surrogate_pairs(s)
   local t, c1, c2
   s := need_text(s)
   upto('\ud800-\udfff', s) | return s
   t := ""
   s ? {
      while t ||:= string(tab(upto('\ud800-\udfff'))) do {
         any('\ud800-\udbff') | fail
         c1 := move(1)
         any('\udc00-\udfff') | fail
         c2 := move(1)
         t ||:= Text.utf8_seq(16r10000 + ishift(iand(ord(c1), 16r3ff), 10) + iand(ord(c2), 16r3ff))
      }
      return t || tab(0)
   }
end

# Return a string which is the same as `s`, but with any characters
# outside the BMP replaced with their UTF-16 surrogate pair
# equivalent.
#
procedure add_surrogate_pairs(s)
   local t, c, i
   s := need_text(s)
   upto('\U10000-\U10FFFF', s) | return s
   t := ""
   s ? {
      while t ||:= string(tab(upto('\U10000-\U10FFFF'))) do {
         c := move(1)
         i := ord(c) - 16r10000
         t ||:= Text.utf8_seq(16rd800 + ishift(i, -10)) || Text.utf8_seq(16rdc00 + iand(i, 16r3ff))
      }
      return t || tab(0)
   }
end

#
# Guess the end-of-line character used in a string (typically a file's
# contents).  Returns either "\n" or "\r\n".
#
procedure guess_eol(s)
   local i, j
   i := j := 0
   s ? while tab(upto('\r\n')) do {
      if tab(any('\n')) then
         i +:= 1
      else {
         move(1)
         if tab(any('\n')) then
            j +:= 1
      }
   }
   return if i >= j then "\n" else "\r\n"
end

#
# Split the given string into chunks of size `n`, followed by any
# residual substring, if `n` doesn't divide `s` exactly.  The empty
# string just returns itself.
#
procedure chunks(s, n)
   local t
   n := need_integer(n, 1)
   s ? repeat {
      t := (move(n) | tab(0))
      if pos(0) then
         return t
      suspend t
   }
end
