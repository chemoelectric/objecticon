#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui, io, ipl.lists, ipl.strings, util

#
# Convert a list l to a string representation.
#
procedure contents_string(l)
   return "[" || list2str(l, ", ", image) || "]"
end

procedure is_image_file(s)
   return endswith(map(s), ".gif" | ".png" | ".jpeg" |".jpg")
end

#
# Check that the window attributes in list l are valid.
#
procedure util_check_attribs(dialog, t, valid_set)
   local s
   # Check for attrib names
   every s := !sort(t) do {
      if not member(valid_set, s[1]) then
         return alert_error(dialog, "Invalid attribute " || s[1])
      if not normalize_wattrib(s[1], s[2]) then
         return alert_error(dialog, "Invalid value " || s[2] || " for attrib " || s[1])
   }
   return
end

procedure stringify_wattrib(key, val, quote)
   return if type(val) == "list" then list2str(val) 
      else if key == "resize" then if \val then "&yes" else "&no"
      else if type(val) == "integer" then string(val)
      else if /quote then text(val) else txt_image(val)
end

procedure stringify_wattribs(t)
   local e, r
   r := table()
   every e := !sort(t) do
      insert(r, e[1], stringify_wattrib(e[1], e[2]))
   return r
end

procedure normalize_wattribs(t)
   local e, r
   r := table()
   every e := !sort(t) do
      insert(r, e[1], normalize_wattrib(e[1], e[2]))
   return r
end

procedure resolve_layout_filename(src, layout)
   local t, xl

   t := Files.get_path(src)

   # Work out the expanded layout, with $ expanded to the
   # file name, less the .icn extension.
   layout ? {
      if xl := tab(upto('$')) then {
         xl ||:= t.get(-1)
         if xl[-4:0] == ".icn" then
            xl[-4:0] := ""
         move(1)
         xl ||:= tab(0)
      } else
         xl := layout
   }

   # Append the expanded layout string to the directory
   # part of the src file.
   if t := t.parent() then
      return t.append(Files.get_path(xl)).str()
   else
      return xl
end


procedure center_string(win, x, y, s, k)
   draw_string_ex(win, 
                x - win.text_width(s) / 2, 
                y - win.get_font_height() / 2, 
                s, k)
end


#
# Display an error message
#
procedure alert_error(d, a)
   if string(a) then
      a := [a]
   InfoDialog(a, "Information", "Okay").show_modal(d)
end

procedure txt_image(s)
   if ord(s) > 127 then
      return image(s)
   else
      return image(string(s))
end

procedure try_list(val, len)
   local l, t
   if type(val) == "list" then {
      if *val = len then
         return val
      fail
   }

   l := []
   val ? {
      while t := tab(find(",")) do {
         put(l, integer(t)) | fail
         move(1)
      }
      t := tab(0)
      put(l, integer(t)) | fail
   }
   if *l = len then
      return l
end

procedure normalize_wattrib(key, val)
   case key of {
      "pos"|"size"|"min_size"|"max_size":
         return try_list(val, 2)
      "geometry"|"clip":
         return try_list(val, 4)
      "resize": 
         return flag(val)

      "x"|"y"|"height"|"width"|"w"|"h"|
         "depth"|"line_width"|"dx"|"dy"|"min_width"|
         "min_height"|"max_width"|"max_height":
         return integer(val)

      "image"|"pointer"|"label"|"fg"|"bg"|"draw_op"|"icon"|"font"|
         "line_style"|"fill_style"|"pattern"|"input_mask": 
         return val
   }
end
