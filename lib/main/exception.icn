package exception

import util(State,save_state)

package readable global 
   # The co-expression currently ready to handle an exception
   throw_handler, 
   # The last value thrown
   thrown,
   # The co-expression of the last thrower
   thrower

# A `State` class for saving the `throw_handler` global variables.  An
# optional initial value may be specified.
#
class ThrowHandlerState(State)
   private i, th

   public begin()
      th := throw_handler
      throw_handler := i
   end

   public swap()
      throw_handler :=: th
   end

   public new(i)
      self.i := i
      return
   end
end

#
# "throw" an exception, setting `thrown` to `x` and `thrower` to
# `&current`, before invoking the `throw_handler` co-expression.
#
procedure throw(x)
   if /throw_handler then {
      # If no handler, convert to runerr.
      x := string(x) | image(x)
      runerr("thrown with no handler: " || x)      
   }
   thrown := x
   thrower := &current
   cofail(throw_handler)
   runerr("throw(): code co-expression reactivated unexpectedly")
end

# A convenient procedure to invoke `runerr` if there is no
# `throw_handler`, or `throw` otherwise.  This is useful if a
# procedure may legitimately be called both within and without the
# context of a `try`.
#
procedure rthrow(a[])
   if /throw_handler then
      runerr!a
   else
      throw!a
end

#
# Re-throw an exception, by invoking `throw_handler` without changing
# `thrown` or `thrower`.
#
procedure rethrow()
   \throw_handler | runerr("rethrow(): no handler set")
   \thrower | runerr("rethrow(): no exception current")
   cofail(throw_handler)
   runerr("rethrow(): code co-expression reactivated unexpectedly")
end

#
# Clear the exception global variables `thrower` and `thrown`.
#
procedure eclear()
   thrower := thrown := &null
end

#
# Generate the results of `e`, whilst "catching" any exceptions
# thrown.  On an exception, failure occurs, and the caller can check
# for an exception by testing the values of `thrown` and/or `thrower`.
#
procedure try(e)
   suspend save_state(e, ThrowHandlerState(&current))
end

# A useful wrapper around `try`.  `try` is called with `e` to get its
# first result.  If no exception is thrown, then the result produced
# by `e` is returned.  If `e` fails, `&null` is returned.  If an
# exception was thrown, `eclear` is called, `&why` is set and the
# procedure fails.
#
procedure try1(e)
   local v
   v := try(e)
   if /thrower then
      return v
   &why := text(thrown) | ("thrown: " || image(thrown))
   eclear()
end
