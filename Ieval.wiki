#summary ieval - an interactive icon expression evaluator

= ieval =
`ieval` is a program to interactively evaluate icon expressions.  Input is read from the terminal until end-of-file (control-D) is entered.  Each expression has its results sequence evaluated and printed (although see the `!q` option below).  Variables may be assigned to, and they are stored in a local environment, which may be printed by entering `!env`.  To link with library packages, use the `-i` command line option.  Packages can't be imported interactively.

An example session
{{{
$ ieval -i lang,graphics
> &version
"Object Icon Version 2.6.  Mon Aug 29 11:57:11 BST 2011"
> upto('aeiou', "The quick brown fox")
3
6
7
13
18
> w := Window.open()
object graphics.Window#1(wbp=136611152;transient_for=&null)
> w.close()
object graphics.Window#1(wbp=0;transient_for=&null)
> ^D
$
}}}

Input of an expression over several lines can be achieved by ending a line with a backslash character.  The prompt changes to `>>` and the next line is concatenated to the previous one.
= Command line options =
`ieval` accepts the following command-line options :-

 * *-i* Import the given package(s).  Several packages may be comma-separated, or several `-i` options may be given.
 * *-l* Link the given source file.  Several `-l` options may be given.
 * *-w* If given, then assignments to global variables (eg procedures) are allowed.
 * *-s* Read commands from standard input rather than using a line editor.

Remaining arguments specify files which are processed before command line input commences.  They should contain valid expressions (which may be compound expressions).
= Useful built-in expressions =

 * *!env* Show the values stored in the environment
 * *!tt* Toggle tracing
 * *!tb* Show the backtrace of the last command that gave a runtime error
 * *!q* Don't force evaluation of all of the values in the expression, and don't output any expression value
 * *dir(x)* With no parameter, show all global variables.  With a parameter, show information about it.
 * *!hist* Show the command line history
 * *cmd(x)* Run command number `x` again.
