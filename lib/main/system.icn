package posix

import 
   io(Files),
   util(error)

final abstract class System()
   # This provides a slightly easier to use interface to {execve}.
   # The first argument is searched on the PATH and if found pushed
   # onto the arg list (making the arg0 of the target program).  Then
   # {execve} is called.
   # @param cmd the name of the command
   # @param args the arg list, excluding the command name.  Defaults to []
   # @param env the env list, defaults to the current environment
   # @           if omitted
   # @example
   # @   System.exec("ls", ["-l", "/home"])
   #
   public static exec(cmd, args, env)
      cmd := Files.find_exe(cmd) | return error("Not found on PATH:" || cmd)
      /args := []
      push(args, cmd)
      return execve(cmd, args, env)
   end

   # Replace the executing Icon program with a new program, using the
   # execve system call.  The first parameter is the file to execute,
   # the second parameter is a list of strings which must have at least
   # one parameter, and the third optional parameter is also a list of
   # strings, which provide the environment variables - if omitted then
   # the current program's environment is passed (obtained via the 
   # environ variable).
   # @example 
   # @        System.execve("/bin/ls", ["/bin/ls", "-l", "/home"],
   # @                                 ["ABC=DEF", "NUM=123"])
   #
   public static native execve(f, args, env)

   # spawn a new identical process.
   public static native fork()

   # send a signal to a process.
   public static native kill(pid, signal)

   # wait for process to terminate or stop.
   public static wait(pid, options)
      return ExitInfo!wait_impl(pid, options)
   end

   # returns the process ID of the calling process.
   public static native getpid()

   # returns the process ID of the parent of the calling process.
   public static native getppid()

   private static native wait_impl()

   # generate the environment values as key=pair strings
   public static native environ()

   # return contents of environment variable s.
   public static native getenv(s)
   
   # set an environment variable.
   public static native setenv(name, value)

   # unset an environment variable.
   public static native unsetenv(name)

   # Get name and information about current kernel.  A UtsName object is returned, with
   # fields corresponding to the posix utsname structure.
   public static uname()
      return UtsName!uname_impl()
   end

   private static native uname_impl()

   # Returns the real user ID of the calling process.
   public static native getuid()

   # Returns the effective user ID of the calling process.
   public static native geteuid()

   # Returns the real group ID of the calling process.
   public static native getgid()

   # Returns the effective group ID of the calling process.
   public static native getegid()

   # Returns the supplementary group IDs of the calling process
   public static native getgroups()

   private static native getpw_impl(v)
   private static native getgr_impl(v)

   # Return a {Passwd} structure given either a user id (as an
   # integer), or a string user name.
   public static getpw(v)
      return Passwd!getpw_impl(v)
   end

   # Return a {Group} structure given either a group id (as an
   # integer), or a string group name.
   public static getgr(v)
      return Group!getgr_impl(v)
   end

   # Sets the effective user ID of the calling process.
   public static native setuid(uid)

   # Sets the effective group ID of the calling process.
   public static native setgid(gid)

   # Creates a session and sets the process group ID, returning the
   # new process group ID of the calling process.
   public static native setsid()

   # Returns the session ID of the process with the given process ID
   public static native getsid(id)

   # Set process group ID for job control
   public static native setpgid(pid, pgid)

   # Get the process group ID for a process
   public static native getpgid(pid)

   # Get current working directory of the given process
$ifdef _PLAN9
   public static getcwd(pid)
      local s
      s := Files.file_to_string("/proc/" || pid || "/fd") | return error("No such pid")
      return s ? tab(upto('\n')) | error("Process has no cwd")
   end
$elsifdef _SOLARIS
   public static getcwd(pid)
      return Files.readlink("/proc/" || pid || "/path/cwd") | error("No such pid or permission denied")
   end
$elsifdef _DARWIN
   public static native getcwd(pid)
$elsifdef _MS_WIN32
   public static getcwd(pid)
      error("Function not supported")
   end
$else
   public static getcwd(pid)
      return Files.readlink("/proc/" || pid || "/cwd") | error("No such pid or permission denied")
   end
$endif
end

# A structure returned by the {System.uname} method.
class UtsName()
   public const
      sysname,
      nodename,
      release,
      version,
      machine

   package new(sysname, nodename, release, version, machine)
      self.sysname := sysname
      self.nodename := nodename
      self.release := release
      self.version := version
      self.machine := machine
      return
   end
end

# Provides info about an exited process
class ExitInfo()
   public static const
      STOPPED,
      COREDUMP,
      TERMINATED,
      EXITED

   public const
      pid,
      reason,
      param

   private static init()
      STOPPED := "stopped"
      COREDUMP := "coredump"
      TERMINATED := "terminated"
      EXITED := "exited"
   end

   # Convenient method to check if the exit info represents a command
   # success.  If not, then &why is set appropriately.
   #
   public succeeded()
$ifdef _PLAN9
      case reason of {
         "exited normally" : return
         "exited" : return error("exited with status " || param)
         default : return error("finished for unknown reason " || reason || "; param " || image(param))
      }
$else
      case reason of {
         EXITED: {
            if param = 0 then
               return
            return error("exited with status " || param)
         }
         STOPPED:
            return error("stopped with signal " || param)
         TERMINATED:
            return error("terminated with signal " || param)
         COREDUMP:
            return error("dumped core with signal " || param)
         default:
            return error("finished for unknown reason " || reason || "; param " || image(param))
      }
$endif
   end

   package new(pid, reason, param)
      self.pid := pid
      self.reason := reason
      self.param := param
      return
   end
end

# A structure representing a user group
class Group()
   public const
      name,
      passwd,
      gid,
      members

   package new(name, passwd, gid, members)
      self.name := name
      self.passwd := passwd
      self.gid := gid
      self.members := members
      return
   end
end

# A structure representing a user in the passwd database
class Passwd()
   public const
      name,
      passwd,
      uid,
      gid,
      dir,
      shell

   package new(name, passwd, uid, gid, dir, shell)
      self.name := name
      self.passwd := passwd
      self.uid := uid
      self.gid := gid
      self.dir := dir
      self.shell := shell
      return
   end
end
