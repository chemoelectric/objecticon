#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

$define LIB "objecticonipclib.so"

package ipc

import lang, util

#
# This class provides an inter process messaging facility.  The implementation requires
# the accompanying C library objecticonipclib.so to be on the library path.
#
# Instances of this class should not be created directly, but rather using the factory
# procedures {open_public}, {create_public} and {create_private}
#
class Msg()
   private id

   #
   # Send the given object.  The object may be an arbitrary Icon structure, and will be
   # encoded into a string by the {encode()} procedure.
   #
   public send(o)
      msg_send(id, encode(o))
   end

   #
   # Receive an object from the queue, waiting if necessary.
   #
   public receive()
      return decode(msg_receive(id))
   end

   #
   # Attempt to get an object from the queue, failing if one is not
   # ready immediately.
   #
   public attempt()
      return decode(msg_receive_nowait(id))
   end

   #
   # Poll the queue for an object for t milliseconds.  If an object is
   # not received within that time, fail, otherwise return it.
   #
   public poll(t)
      local c, o
      c := curr_time_millis()
      repeat {
         if o := attempt() then
            return o
         if curr_time_millis() - c > t then
            fail
         delay(50)
      }
   end

   #
   # Clean up the resources used by the queue.  This should be called by
   # the parent process after the queue is no longer needed.
   #
   public remove()
      msg_remove(id)
   end

   #
   # Return the underlying id of the queue.
   #
   public get_id()
      return id
   end

   private static defer msg_send()
   private static defer msg_receive()
   private static defer msg_receive_nowait()
   private static defer msg_remove()
   private static defer msg_open_public()
   private static defer msg_create_public()
   private static defer msg_create_private()

   private static init()
      Class.set_method("msg_send", loadfunc(LIB, "msg_send"))
      Class.set_method("msg_receive", loadfunc(LIB, "msg_receive"))
      Class.set_method("msg_receive_nowait", loadfunc(LIB, "msg_receive_nowait"))
      Class.set_method("msg_remove", loadfunc(LIB, "msg_remove"))
      Class.set_method("msg_open_public", loadfunc(LIB, "msg_open_public"))
      Class.set_method("msg_create_public", loadfunc(LIB, "msg_create_public"))
      Class.set_method("msg_create_private", loadfunc(LIB, "msg_create_private"))
   end

   private new(id)
      self.id := id
      return
   end

   #
   # Get an existing public queue with the given key, or fail
   # if no such queue exists.
   #
   public static open_public(key)
      return Msg(msg_open_public(key))
   end

   #
   # Create a new public queue with the given key
   #
   public static create_public(key)
      return Msg(msg_create_public(key))
   end

   #
   # Create a new private queue
   #
   public static create_private()
      return Msg(msg_create_private())
   end
end
