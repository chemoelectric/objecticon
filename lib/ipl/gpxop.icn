############################################################################
#
#	File:     gpxop.icn
#
#	Subject:  Procedures for graphics operations
#
#	Author:   Gregg M. Townsend
#
#	Date:     May 26, 1999
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#	This file contains some graphics procedures.
#
#	LeftString(x, y, s)	  draws a string left-aligned at (x, y).
#
#	CenterString(x, y, s)	  draws a string centered at (x, y).
#
#	RightString(x, y, s)	  draws a string right-aligned at (x, y).
#
#	ClearOutline(x, y, w, h)  draws a rectangle, erasing its interior.
#
#	Translate(dx, dy, w, h)	  moves the window origin and optionally
#				  sets the clipping region.
#
#	Zoom(x1, y1, w1, h1, x2, y2, w2, h2)
#				  copies and distorts a rectangle.
#
#	Capture(p, x, y, w, h)	  converts a window area to an image string.
#
#	Sweep()			  lets the user select a rectangular area.
#
############################################################################
#
#  LeftString(x, y, s), CenterString(x, y, s), and RightString(x, y, s)
#  draw a string centered vertically about y and left-justified,
#  centered, or right-justified about x.
#
#  ClearOutline(x, y, w, h) draws a rectangle in the foreground color
#  and fills it with the background color.
#
#  Translate(dx, dy, w, h) adjusts a window's dx and dy attributes by
#  the values given.  Note that the resulting attribute values are the
#  sums of the existing values with the parameters, so that successive
#  translations accumulate.  If w and h are supplied, the clipping
#  region is set to a rectangle of size (w, h) at the new origin.
#
#  Zoom(x1, y1, w1, h1, x2, y2, w2, h2) is a distorting variation of
#  CopyArea that can be used to shrink or enlarge a rectangular area.
#  Zero, one, or two window arguments can be supplied.  Rectangle 1 is
#  copied to fill rectangle 2 using simple pixel sampling and replication.
#  The rectangles can overlap.  The usual defaults apply for both rectangles.
#
#  Sweep() lets the user select a rectangular area using the mouse.
#  Called when a mouse button is pressed, Sweep handles all subsequent
#  events until a mouse button is released.  As the mouse moves, a
#  reverse-mode outline rectangle indicates the selected area.  The
#  pixels underneath the rectangle outline are considered part of this
#  rectangle, implying a minimum width/height of 1, and the rectangle
#  is clipped to the window  boundary.  Sweep returns a Rectangle instance
#  giving the rectangle bounds in canonical form (w and h always positive).
#
#  Capture(palette, x, y, w, h) converts a window region into an
#  image string using the specified palette, and returns the string.
#
#  These procedures all accept an optional initial window argument.
#
############################################################################
#
#  Links: gpxlib
#
############################################################################
#
#  Requires:  Version 9 graphics
#
############################################################################

package ipl.graphics

import graphics(Mouse,Window,Rectangle), io(RamStream), util(use)

#   LeftString(x, y, s) -- draw string left-justified at (x,y).

# draw left-justified string
procedure LeftString(win, x, y, s)		
   y +:= (win.get_font_ascent() - win.get_font_descent()) / 2 + 1
   return win.draw_string(x, y, s)
end


#   CenterString(x, y, s) -- draw string centered about (x,y).

# draw centered string
procedure CenterString(win, x, y, s)		
   x -:= win.text_width( s) / 2
   y +:= (win.get_font_ascent() - win.get_font_descent()) / 2 + 1
   return win.draw_string(x, y, s)
end


#   RightString(x, y, s) -- draw string right-justified at (x,y).

# draw right-justified string
procedure RightString(win, x, y, s)		
   x -:= win.text_width( s)
   y +:= (win.get_font_ascent() - win.get_font_descent()) / 2 + 1
   return win.draw_string(x, y, s)
end


#   ClearOutline(x, y, w, h) -- draw rectangle and fill background.

# draw and clear rectangle
procedure ClearOutline(win, x, y, w, h)		
   return win.erase_area(x, y, w, h).draw_rectangle(x, y, w, h)
end


#   Translate(dx, dy, w, h) -- add translation and possibly clipping.

# add translation
procedure Translate(win, dx, dy, w, h)		
   win.set_dx(win.get_dx()+dx).set_dy(win.get_dy()+dy)
   win.clip( 0, 0, \w, \h)
   return win
end


#  Sweep() -- sweep out area with mouse, return bounds

# sweep area with mouse
procedure Sweep(win)				
   local p, e, x, y, tmp, x1, y1, x2, y2, r, sz, off

   sz := win.get_size()
   off := win.get_offset()
   p := win.query_pointer()

   x := p.x                                      # set initial rect bounds
   x <:= -off.dx
   x >:= sz.width - off.dx - 1
   y := p.y
   y <:= -off.dy
   y >:= sz.height - off.dy - 1

   r := Rectangle(x, y, 1, 1)
   tmp := (Window().set_size!sz).set_offset!off
   win.copy_to(,,,, tmp)

   win := win.clone()
   win.set_draw_op("source").set_pattern().set_mask().clip()
   win.draw_rectangle!r                          # draw initial bounding rect

   repeat {
      e := WEvent(win)
      if member(Mouse.RELEASE, e[1]) then
         break
      if e[1] === Mouse.DRAG then {
         win.hold()
         tmp.copy_to(r.x, r.y, r.width, r.height, win, r.x, r.y)      # erase old bounds
         # calc new width & height
         x1 := x; x2 := e[2]
         y1 := y; y2 := e[3]
         if x1 > x2 then x1 :=: x2
         if y1 > y2 then y1 :=: y2
         r := win.viewable(x1, y1, x2 - x1 + 1, y2 - y1 + 1)
         win.draw_rectangle!r       # draw new bounds
         win.restore()   
         }
      }
   tmp.copy_to(r.x, r.y, r.width, r.height, win, r.x, r.y)      # erase bounding rectangle

   tmp.close()
   win.close()
   return r                                   # return bounds
end


#  Zoom(win1, x1, y1, w1, h1, win2, x2, y2, w2, h2) -- copy and distort.

# zoom image
procedure Zoom(win1, x1, y1, w1, h1, win2, x2, y2, w2, h2)
   local r, x, y, scr

   r := win1.canonical(x1, y1, w1, h1)
   x1 := r.x; y1 := r.y; w1 := r.width; h1 := r.height

   r := win2.canonical(x2, y2, w2, h2)
   x2 := r.x; y2 := r.y; w2 := r.width; h2 := r.height

   if (w1 | w2 | h1 | h2) = 0 then
      return win1

   scr := ScratchCanvas(win2, w2, h1, Zoom) | fail
   scr.set_draw_op("source").
      erase_area()

   win2 := win2.clone().set_draw_op("source")
   every x := 0 to w2 - 1 do
      win1.copy_to(x1 + w1 * ((x + 0.5) / w2), y1, 1, h1, scr, x, 0)
   every y := 0 to h2 - 1 do
      scr.copy_to(0, h1 * ((y + 0.5) / h2), w2, 1, win2, x2, y2 + y)
   win2.close()
   return win1
end


#  Capture(win, pal, x, y, w, h) -- capture screen region as image string

# capture image as string
procedure Capture(win, pal, x, y, w, h)		
   local c, k, s, cmap, px, r

   /pal := "c1"

   r := win.viewable(x, y, w, h) | fail

   Window.palette_chars(pal) | runerr(205, pal)

   cmap := table()

   # accumulate the image in chunks and then concatenate
   # (much faster than concatenating single chars on a very long string)
   return use {
      s := RamStream(),
      {
         s.out(r.width || "," || pal || ",")
         use {
            px := win.get_pixels!r,
            every k := px.gen().pixel do {
               c := \cmap[k] | (cmap[k] := Window.palette_key(pal, k))
               s.out(c)
            }
         }
         s.str()
      }
   }
end
