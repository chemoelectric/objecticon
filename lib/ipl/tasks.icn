package ipl.tasks

import 
   ipl.lists(ldel1),
   util(need_integer, need_list)

#
# A semaphore implementation using `io.Task`s.
#
class Semaphore()
   private readable 
      n
   private const
      wl

   #
   # Perform a wait on the semaphore.
   #
   # If the semaphore `n` is positive, then it is decremented and the
   # method succeeds immediately.
   #
   # Otherwise, if `t` is null, then the method fails immediately.
   #
   # If `t` is not null, then it specifies an `io.Task`, which will be
   # put to sleep with the given timeout (which may be null), to wait
   # for the semaphore to become available.  After the task awakes,
   # the method succeeds if the caller now holds the semaphore, but
   # fails otherwise (for example if the sleep timed out).
   #
   # :Parameters :
   # : `t` - the optional, current `io.Task` which may be put to sleep.
   # : `timeout` - the optional sleep timeout; ignored if `t` is null.
   #
   public wait(t, timeout)
      if n > 0 then
         n -:= 1
      else if /t then
         fail
      else {
         put(wl, t)
         t.sleep(timeout)
         if ldel1(wl, t) then
            # Interrupted/timeout
            fail
      }
      link
   end

   #
   # Perform a signal on the semaphore.
   #
   public signal()
      local t
      if t := get(wl) then
         t.notify()
      else
         n +:= 1
      link
   end

   #
   # This is similar to `wait`, but waits for one of a list of
   # semaphores to become available.  On success, the semaphore
   # obtained is returned.  Note that the order of `l` is important,
   # with earlier entries having preference over later ones.
   #
   # :Parameters :
   # : `l` - the list of `Semaphore`s to wait for.
   # : `t` - the optional, current `io.Task` which may be put to sleep.
   # : `timeout` - the optional sleep timeout; ignored if `t` is null.
   #
   public static poll(l, t, timeout)
      local e, r
      need_list(l)
      # Check for one which is immediately available
      every e := !l do {
         if e.wait() then
            return e
      }
      if /t then
         fail
      # Add the task to each wait queue
      every e := !l do
         put(e.wl, t)
      t.sleep(timeout)
      every e := !l do
         # If ldel1 fails, then we obtained the semaphore.  Note just
         # the first so obtained in r, and signal others to release
         # them again.
         ldel1(e.wl, t) | (/r := e) | e.signal()
      return \r
   end

   #
   # Return the number of tasks queued, waiting for the semaphore.
   #
   public queuing()
      return *wl
   end

   #
   # Create a new semaphore with initial value `n`, default 0.
   #
   public new(n)
      self.n := need_integer(\n) | 0
      wl := []
      return
   end
end
