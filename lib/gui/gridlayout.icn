package gui

import 
   util, ipl.graphics, io

class GridLayout(Layout)
   public 
      g,
      dii,          # Default inner padding, ie not at edge of grid
      doi,          # Default outer padding
      extra,        # Flag indicating how to allocate extra space
      adjust_preferred_heights_flag,
      debug

   # Default insets between components in a GridLayout.
   public static const
      DEFAULT_OUTER_INSET,
      DEFAULT_INNER_INSET

   private static init()
      DEFAULT_OUTER_INSET := 10
      DEFAULT_INNER_INSET := 5
   end

   public reset()
      g := &null
   end

   public ensure_grid()
      local c, ci

      if \g then
         return

      g := Grid()
      g.set_dii(dii)
      g.set_doi(doi)
      g.set_extra(extra)

      every c := !parent.children do {
         if /c.x_spec then {
            ci := g.create_cell(c.constraints)
            ci.pw := c.get_preferred_width()
            ci.ph_calc_w := ci.pw
            ci.ph := c.get_preferred_height(ci.ph_calc_w)
            ci.obj := c
         }
      }
      g.dimension()
   end

   public get_preferred_width()
      ensure_grid()
      return g.get_preferred_width()
   end

   public adjust_preferred_heights()
     local i, adj
     every i := !g.info do {
        if i.ph_calc_w ~= i.aw then {
           if \debug then
              writes("Adjusting cell height ", i.s, " from ", i.ph)
           i.ph_calc_w := i.aw
           i.ph := i.obj.get_preferred_height(i.ph_calc_w)
           i.dh := i.ph + i.t_inset + i.b_inset
            if \debug then
              write(" to ", i.ph)
           adj := 1
        }
     }
     if \adj then
        g.compute_row_heights()
   end

   public get_preferred_height(pw)
      ensure_grid()
      if \adjust_preferred_heights_flag then {
         g.compute_widths(, pw)
         adjust_preferred_heights()
      }
      return g.get_preferred_height()
   end

   public set_adjust_preferred_heights(s)
      self.adjust_preferred_heights_flag := check_flag(s)
      return self
   end

   public display()
      local i, cw

      cw := bev_lookup(self.parent.cbwin).shadow.clone().set_fill_style("masked").set_pattern("gray")

      cw.draw_rectangle(parent.x, parent.y, parent.w, parent.h)

      every i := !g.info do {
         cw.draw_rectangle(g.col_x[i.x],
                           g.row_y[i.y],
                           Grid.slice(i.x, i.w, g.a_col_w),
                           Grid.slice(i.y, i.h, g.a_row_h))
      }

      cw.uncouple()
   end

   public layout()
      local c, i

      every c := !parent.children do {
         if \c.x_spec then
            c.compute_absolutes()
      }

      ensure_grid()

      g.compute_widths(parent.x, parent.w)
      if \adjust_preferred_heights_flag then
         adjust_preferred_heights()
      g.compute_heights(parent.y, parent.h)

      every i := !g.info do {
         i.obj.x := i.ax
         i.obj.y := i.ay
         i.obj.w := i.aw
         i.obj.h := i.ah
      }

      if \debug then
         g.print_layout()
   end

   public set_debug(s)
      self.debug := check_flag(s)
      return self
   end

   public set_dii(n)
      self.dii := n
      return self
   end

   public set_doi(n)
      self.doi := n
      return self
   end

   public set_extra(s)
      self.extra := s
      return self
   end

   public new()
      self.dii := DEFAULT_INNER_INSET
      self.doi := DEFAULT_OUTER_INSET
      self.extra := "cells"
      return
   end
end


