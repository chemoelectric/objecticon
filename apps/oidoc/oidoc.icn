#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import parser, ipl.options, io, net

global opts, arg_packs

procedure warn(s)
   ewrite(s)
end

procedure note(s)
   write("Scanning ", s)
end

procedure usage(opts)
   local u
   write("Usage: oidoc [OPTIONS] [SRC FILES/PACKAGES...]")
   write("Generate documentation")
   options_help(opts)
   u := URL("http://objecticon.sourceforge.net/Oidoc.html")
   write()
   writes("For more details, visit ")
   if FileStream.stdout.is_flowterm_tty() then
      write(Files.begin_link(u), u.str(), Files.end_link())
   else
      write(u.str())
   exit(0)
end

procedure main(a)
   local s, o, symbol_table, pp_defs

   # Traversing raw parse trees can take a lot of recursion.
   &maxlevel := 50000

   opts := options(a, [Opt("groff",, "Generate groff output"),
                       Opt("o",string,"OUTPUT FILE/DIR#Output file or directory"),
                       Opt("cs",string,"CHARSET#Charset for html output, default UTF-8"),
                       Opt("a",, "Generate documentation for all packages"),
                       Opt("d",, "Generate scanning event debug output"),
                       Opt("r",, "Restrict output to specified packages"),
                       Opt("D",string,"KEY[=VALUE]#Define or clear a preprocessor symbol",&yes),
                       Opt("ci",, "Assume case-insensitive file system")],
                       usage)

   pp_defs := Preprocessor.parse_defs(\opts["D"])
   symbol_table := SymbolTable().set_pp_defs(pp_defs)
   if \opts["d"] then
      symbol_table.connect(note, SymbolTable.SCANNING_EVENT)
   if \opts["a"] then {
      every s := symbol_table.get_all_packages() do
         symbol_table.scan_package(s) | stop(&why)
   }

   arg_packs := set()
   every s := !a do {
      if s[-4:0] == ".icn" | s[-2:0] == ".u" then
         symbol_table.scan_file(s) | warn(&why)
      else {
         insert(arg_packs, s)
         symbol_table.scan_package(s) | stop(&why)
      }
   }

   symbol_table.resolve_classes() | stop(&why)

   if \opts["groff"] then
      o := GroffOutputter(opts, symbol_table)
   else
      o := HtmlOutputter(opts, symbol_table)

   o.output()
end
