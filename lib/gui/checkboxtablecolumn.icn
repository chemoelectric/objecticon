package gui

import util

#
# A table column that provides on/off checkbox-like behaviour for
# each of its lines.   The corresponding data items are &yes or &no
# strings, representing on or off button states respectively.
#
class CheckBoxTableColumn(BaseTableColumn)
   public 
      single_selection_flag,
      unchecked_paint, 
      checked_paint,
      mouse_down_listener

   public override calculate_line_height()
      return unchecked_paint.h + 8
   end

   #
   # Set whether or not we select one item in the column; the behaviour
   # is then like a column of radio buttons rather than a column of
   # checkboxes.
   #
   public set_single_selection(s)
      self.single_selection_flag := need_flag(s)
      return self
   end

   #
   # Set the up/down icons to the given (distinct) `Paint` instances.
   # The two images must have the same dimensions.
   # :Parameters :
   # :  `x` - The up image
   # :  `y` - The down image
   #
   public set_box_paint(x, y)
      if is_initialized() then {
         (\self.unchecked_paint).finally()
         (\self.checked_paint).finally()
         self.unchecked_paint := x
         self.checked_paint := y
         self.unchecked_paint.initially(self)
         self.checked_paint.initially(self)
         self.invalidate()
         unchecked_paint.w = checked_paint.h | runerr("Image widths differ")
         unchecked_paint.h = checked_paint.h | runerr("Image heights differ")
      } else {
         self.unchecked_paint := x
         self.checked_paint := y
      }
      return self
   end

   public mouse_down(e)
      local line, col
      self.x <= e.x < self.x + self.w | fail
      line := get_table_content().get_line_under_pointer(e) | fail
      col := get_column_index()
      if \self.single_selection_flag then {
         every get_table_content().slice(col) := &no
         get_table_content().get_cell(line, col) := &yes
      } else
         get_table_content().get_cell(line, col) := 
                     toggle_flag(get_table_content().get_cell(line, col))
      get_table_content().contents_changed()
      fire(Event.VALUE_CHANGED, line)
   end

   public override initially()
      #
      # Set the icons if necessary
      #
      if /self.unchecked_paint then {
         if /self.single_selection_flag then
            self.set_box_paint(ImagePaint().set_cache("gui.BOX_UP"), ImagePaint().set_cache("gui.BOX_DOWN"))
         else
            self.set_box_paint(ImagePaint().set_cache("gui.DIAMOND_UP"), ImagePaint().set_cache("gui.DIAMOND_DOWN"))
      }
      mouse_down_listener := get_table_content().connect(self.mouse_down, Event.MOUSE_LEFT_PRESS).last_listener
      BaseTableColumn.initially()
      self.unchecked_paint.initially(self)
      self.checked_paint.initially(self)
      unchecked_paint.w = checked_paint.h | runerr("Image widths differ")
      unchecked_paint.h = checked_paint.h | runerr("Image heights differ")
   end

   public override finally()
      BaseTableColumn.finally()
      mouse_down_listener.disconnect()
      unchecked_paint.finally()
      checked_paint.finally()
   end

   public override draw_cell(W, data, line, col, cy, ch)
      local x1, y1, i
      x1 := case border.x_align of {
         Align.R : self.tx + self.tw - unchecked_paint.w
         Align.C : self.tx + (self.tw - unchecked_paint.w)/2
         Align.L : self.tx
         default : runerr("Bad column alignment", border.x_align)
      }
      y1 := cy + (ch - unchecked_paint.h) / 2
      i := if \data then checked_paint else unchecked_paint
      i.draw(W, x1, y1)
   end
end
