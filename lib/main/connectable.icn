package util

import ipl.functional, ipl.pdco

#
# This simply holds information about a single listener.
#
class Listener()
   private readable 
      obj,
      proc
   public const
      type

   #
   # Remove this `Listener` from the object it's listening to; fails and does
   # nothing if the `Listener` is already disconnected.
   #
   # :Returns :
   # :  self
   #
   public disconnect()
      \obj | fail
      obj.disconnect_impl(self)
      obj := &null
      proc := 1
      link
   end

   package new(obj, proc, type)
      self.obj := obj
      self.proc := proc
      self.type := type
      return
   end
end

#
# Helper class for `Connectable.connect_n`
#
package class ConnectN()
   private
      n
   private const
      proc
   public
      x

   public call(a[])
      proc!a
      n -:= 1
      if n = 0 then
         x.disconnect()
   end

   public new(proc, n)
      self.proc := proc
      self.n := n
      return
   end
end

#
# A class which provides a listener list facility.
#
class Connectable()
   private const
      listeners

   # This variable contains the last `Listener` added with `connect()`.
   private readable
      last_listener

   #
   # Fire an event to listeners of the given type.
   #
   # :Parameters :
   # :  `type` - The particular event type to fire.
   # :  `param` - The arbitrary parameter to pass to listeners
   # :Returns :
   # :  self
   #
   public fire(type, param)
      local e
      \type | runerr("Null type to fire")
      every e := !member(listeners, type | &null) do
         e.proc(param, self, type)
      link
   end

   #
   # Create and connect a `Listener` to this object.  To get the actual `Listener`
   # instance added, use the variable `last_listener`.
   #
   # :Parameters :
   # :  `proc` - The procedure or other invocable to call on an event.
   # :  `type` - The particular event to listen for; `&null` means all events
   # :  `pos` - The position in the listener list for the type, default 0.
   # :Returns :
   # :  self
   #
   public connect(proc, type, pos)
      local l
      proc := if default.type(proc) == "co-expression" then
         exprf(proc)
      else
         need_callable(proc)
      /pos := 0
      l := copy(member(listeners, type)) | []
      insert(l, pos, last_listener <- Listener(self, proc, type)) | fail
      insert(listeners, type, l)
      link
   end

   #
   # This is like `connect`, but the listener is automatically disconnected
   # after it is fired `n` times.  `n` defaults to 1.
   # :Returns :
   # :  self
   #
   public connect_n(proc, type, pos, n)
      local i
      /n := 1
      proc := if default.type(proc) == "co-expression" then
         exprf(proc)
      else
         need_callable(proc)
      i := ConnectN(proc, n)
      connect(i.call, type, pos) | fail
      i.x := last_listener
      link
   end

   #
   # This returns the last `Listener` instance added with `connect`.
   #
   public get_last_listener()
      return .\last_listener
   end

   package disconnect_impl(e)
      local l, t
      l := member(listeners, e.type) | fail
      t := List{ e ~=== !l }
      if *t > 0 then
         insert(listeners, e.type, t)
      else
         delete(listeners, e.type)
      link
   end

   #
   # Generate the listeners for the given event type
   #
   public gen_listeners(type)
      suspend .!member(listeners, type)
   end

   #
   # Generate the event types currently being listened for.
   #
   public gen_listener_types()
      suspend key(listeners)
   end

   public new()
      listeners := table()
      return
   end
end
