package ipl.filegui

import
   ipl.sort,
   ipl.strings,
   gui,
   io,
   util

class ColorFilesItemPaint(WithCloneItemPaint)
   protected make_clone(W)
      return W.clone()
   end

   public get_color(data)
      local st
      st := data.lstat
      return case st.mode_str[1] of {
         "d" : "purple"
         "l" : "cyan"
         "p" : "orange"
         "s" : "dark gray"
         "b" : "gray"
         "c" : "gray"
         default : {
            if st.mode_str[-7] == ("x" | "s") then
               "green"
            else case map(string(Files.get_extension(data.name))) of {
               "cmd"|"exe"|"com"|"btm"|"bat" : "green"
               "tar"|"tgz"|"arj"|"taz"|"lzh"|"zip"|"z"|"Z"|"gz"|"xz"|"bz2"|"rar" : "red"
               "jpg"|"jpeg"|"png"|"gif"|"bmp"|"xbm"|"xpm": "blue"
               "mp4"|"flv"|"avi"|"wmv"|"webm"|"3gp"|"mpeg"|"mpg"|"m4v"|"mkv": "pink" 
            }
         }
      } | "black"
   end

   public get_string(data)
      return data.name
   end

   public get_width(W, data)
      return W.text_width(get_string(data))
   end

   public get_constant_height(W)
      return W.get_font_height()
   end

   public get_size(W, data)
      return Size(get_width(W, data), W.get_font_height())
   end

   public draw(W, data, x, y)
      W := get_clone(W).set_fg(get_color(data))
      draw_string_ex(W, x, y, get_string(data))
   end
end

$load PDF_16 "fileicons/pdf.png"
$load IMAGE_16 "fileicons/image.png"
$load VIDEO_16 "fileicons/video.png"
$load ARCHIVE_16 "fileicons/archive.png"
$load AUDIO_16 "fileicons/audio.png"
$load EXE_16 "fileicons/exe.png"
$load CHARDEVICE_16 "fileicons/chardevice.png"
$load BLOCKDEVICE_16 "fileicons/blockdevice.png"
$load SYMLINK_16 "fileicons/symlink.png"
$load SOCKET_16 "fileicons/socket.png"
$load PIPE_16 "fileicons/pipe.png"
$load HTML_16 "fileicons/html.png"

class IconFilesItemPaint(ItemPaint)
   public static const ICON_SIZE

   private static init()
      ImageCache.name_image("icn.PDF_16", PDF_16)
      ImageCache.name_image("icn.IMAGE_16", IMAGE_16)
      ImageCache.name_image("icn.VIDEO_16", VIDEO_16)
      ImageCache.name_image("icn.ARCHIVE_16", ARCHIVE_16)
      ImageCache.name_image("icn.AUDIO_16", AUDIO_16)
      ImageCache.name_image("icn.EXE_16", EXE_16)
      ImageCache.name_image("icn.CHARDEVICE_16", CHARDEVICE_16)
      ImageCache.name_image("icn.BLOCKDEVICE_16", BLOCKDEVICE_16)
      ImageCache.name_image("icn.SYMLINK_16", SYMLINK_16)
      ImageCache.name_image("icn.SOCKET_16", SOCKET_16)
      ImageCache.name_image("icn.PIPE_16", PIPE_16)
      ImageCache.name_image("icn.HTML_16", HTML_16)
      ICON_SIZE := 16
   end

   public get_width(W, data)
      return ICON_SIZE + Gui.TEXT_INSET + W.text_width(get_string(data))
   end

   public get_constant_height(W)
      return max(W.get_font_height(), ICON_SIZE)
   end

   public get_size(W, data)
      return Size(get_width(W, data), get_constant_height(W))
   end

   public get_string(data)
      return data.name
   end

$ifdef _PNG
   public get_icon(data)
      local st, k
      st := data.lstat
      k := case st.mode_str[1] of {
         "d" : "gui.CLOSED_FOLDER"
         "l" : "icn.SYMLINK_16"
         "s" : "icn.SOCKET_16"
         "p" : "icn.PIPE_16"
         "b" : "icn.BLOCKDEVICE_16"
         "c" : "icn.CHARDEVICE_16"
         default : {
            if st.mode_str[-7] == ("x" | "s") then
               "icn.EXE_16"
            else case map(string(Files.get_extension(data.name))) of {
               "pdf": "icn.PDF_16"
               "cmd"|"exe"|"com"|"btm"|"bat" : "icn.EXE_16"
               "tar"|"tgz"|"arj"|"taz"|"lzh"|"zip"|"z"|"Z"|"gz"|"xz"|"bz2"|"rar" : "icn.ARCHIVE_16"
               "jpg"|"jpeg"|"png"|"gif"|"bmp"|"xbm"|"xpm": "icn.IMAGE_16"
               "mp4"|"flv"|"avi"|"wmv"|"webm"|"3gp"|"mpeg"|"mpg"|"m4v"|"mkv": "icn.VIDEO_16"
               "mp3"|"wav"|"mid"|"rm": "icn.AUDIO_16"
               "htm"|"html": "icn.HTML_16"
            }
         }
      } | "gui.FILE"
      return ImageCache.get(k) | syserr("Bad cache key in IconFilesItemPaint")
   end
$else
   public get_icon(data)
      local k
      k := if data.stat.mode_str[1] == "d" then
         "gui.CLOSED_FOLDER"
      else
         "gui.FILE"
      return ImageCache.get(k) | syserr("Bad cache key in IconFilesItemPaint")
   end
$endif

   public draw(W, data, x, y, w, h)
      local i
      i := get_icon(data)
      i.copy_to(,,,, W, x, y + (h - ICON_SIZE) / 2)
      x +:= ICON_SIZE + Gui.TEXT_INSET
      w -:= ICON_SIZE + Gui.TEXT_INSET
      draw_string_ex(W, x, y, limit_text(W, get_string(data), w))
   end
end

class FileSuggestField(SuggestField)
   public
      cwd,
      prefix,
      dir_list,
      dir_list_name,
      directories_only_flag

   public set_directories_only(s)
      self.directories_only_flag := check_flag(s)
      return self
   end

   public set_cwd(d)
      self.cwd := d
      return self
   end

   private match_mode(l)
      if l.name == (u"." | u"..") then
         fail
      return /directories_only_flag | l.stat.mode_str[1] == "d"
   end

   private do_dir_list(s)
      if dir_list_name === s then
         return dir_list
      dir_list := Files.ucs_list(s) | fail
      dir_list := isort(dir_list, Files.name_key)
      dir_list_name := s
      return dir_list
   end

   public get_content_path()
      local path, s
      s := contents
      if s[1] == u"~" then
         s := ucs(Files.get_home()) || s[2:0] | fail
      path := FilePath(s)
      if not path.is_absolute() then
         path := FilePath(cwd).append(path)
      return path
   end

   private get_match_list()
      local path, l, s, t
      path := get_content_path()
      l := []
      if contents[-1] == u"/" then {
         do_dir_list(path.str()) | fail
         every t := !dir_list do {
            if match_mode(t) then
               put(l, t)
         }
      } else {
         do_dir_list(path.parent().str()) | fail
         s := path.get(-1)
         every t := !dir_list do {
            if match_mode(t) & match(s, t.name) then
               put(l, t)
         }
      }
      return l
   end

   protected do_request()
      local l, i
      if contents == (u"" | u"~") then
         return []
      every i := upto('/', contents)
      prefix := if /i then "" else contents[1+:i]
      l := get_match_list() | fail
      # No point in a list which is a copy of what we already have
      if *l = 1 & endswith(contents, l[1].name) then
         return []
      return l
   end

   public convert_element(o)
      if /directories_only_flag & o.stat.mode_str[1] == "d" then
         return prefix || text(o.name) || u"/"
      else
         return prefix || text(o.name)
   end

   public create_popup()
      return ItemPaintList().
         set_item_paint(IconFilesItemPaint()).
         set_item_border(EmptyBorder().
                            set_insets(Gui.TEXT_INSET, Gui.TEXT_INSET, 0, 0).
                            set_x_align(Align.L))
   end

   private static get_longest_prefix(l)
      local i, s, t, e
      i := 1
      t := u""
      repeat {
         s := l[1].name[1+:i] | break
         every e := !l do
            e.name[1+:i] == s | break break
         t := s
         i +:= 1
      }
      return t
   end

   private should_append_slash()
      local l
      if *contents = 0 | contents[-1] == u"/" then
         fail
      if l := get_match_list() & *l = 1 & l[1].stat.mode_str[1] == "d" then
         return
   end

   public handle_tab(e)
      local t
      if \tl then {
         t := prefix || if /directories_only_flag & *tl.contents = 1 & tl.contents[1].stat.mode_str[1] == "d" then
            tl.contents[1].name || u"/"
         else
            get_longest_prefix(tl.contents)
         if *contents < *t then
            assign_contents(t, e)
         else if *contents > *prefix then {
            # If we have selected a dir in the open list, and pressed
            # tab we want to close this selection and open with the
            # new dir.
            if /directories_only_flag then {
               if contents[-1] == u"/" then
                  on_change(e)
            } else
               assign_contents(contents || u"/", e)
         }
      } else {
         # If we have no text list, but contents unambiguously representing a
         # directory, but no "/" at the end, add the slash.
         if should_append_slash() then
            assign_contents(contents || u"/", e)
         else
            on_change(e)
      }
   end

   public keeps(e)
      return
   end

   public handle_key(e)
      if e.code == "\t" then
         handle_tab(e)
      else
         cast(self,SuggestField).handle_key(e)
   end

   public new()
      cast(self,SuggestField).new()
      self.set_contents(u"")
      cwd := Files.getcwd()
      set_direction(Direction.DOWN)
      return
   end
end
