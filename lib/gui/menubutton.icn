#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import graphics

#
# This is similar to `MenuBar`, but holds just a single
# drop-down menu, rather than several.  It may be placed anywhere on
# the dialog, whereas a `MenuBar` would invariably be placed along the top.
#
class MenuButton(BorderWhilstEntered, MenuSystem, Component)
   public 
      menu, 
      which_open

   #
   # Set the menu to be displayed when the component is clicked.
   # :Parameters :
   # :  `c` - The `Menu`.
   #
   public set_menu(c)
      (\self.menu).set_component_link(&null)
      if is_initialized() then {
         (\self.menu).finally()
         self.menu := c
         c.set_component_link(self)         
         self.menu.initially()
      } else {
         self.menu := c
         c.set_component_link(self)         
      }
      link
   end

   public override initially()
      \self.menu | runerr("No menu set")
      Component.initially()
      self.menu.initially()
   end

   public override finally()
      if \self.which_open then
         self.close_menu()
      self.menu.finally()
      Component.finally()
   end

   public override display()
      menu.draw_label(self.cbwin, 0, menu.label_w, 0)
      if menu.is_shaded() then
         Gui.style.shade_rectangle(self.cbwin,
                                    self.x, self.y, self.w, self.h)
      if /border_whilst_entered_flag | \which_open | (is_unshaded() & \entered) then
         border.draw_rect(self.cbwin, self)
   end

   public open_menu()
      self.parent_dialog.enter_menu_mode(self) | fail
      self.which_open := self.menu
      self.menu.show(self.x,
                     self.y + self.h,, self.y)
      invalidate()
      link
   end

   public close_menu()
      self.menu.hide()
      self.which_open := &null
      self.parent_dialog.exit_menu_mode(self)
      invalidate()
      link
   end

   public override close_all()
      close_menu()
   end

   public override make_partial()
      close_menu()
   end

   public override go_right()
   end

   public override go_left()
   end

   public handle_press(e)
      if /self.which_open then {
         if menu.is_unshaded() then
            self.open_menu()
      } else
         self.close_menu()
   end

   public override handle_accel(e)
      if /self.which_open then
         self.open_menu() | fail
      self.menu.cursor_on()
      # See comment in MenuBar.handle_accel
      menu.accel_skip := e
   end

   public override match_accel(e)
      succeed self.menu.accel === e & menu.is_unshaded()
   end

   public override should_close(e)
      succeed member(Mouse.PRESS, e.code) & not(in_region(e))
   end

   public override get_tooltip(e)
      return \self.tooltip | 
         (menu.in_label_region(e) & menu.get_tooltip(e))
   end

   public override get_default_width()
      return self.menu.get_label_mid_width() + border.get_total_width()
   end

   public override get_default_height()
      return self.menu.get_label_mid_height() + border.get_total_height()
   end

   public override layout()
      self.menu.label_x := self.x + border.get_l_inset()
      self.menu.label_y := self.y + border.get_t_inset()
      self.menu.label_w := self.w - border.get_total_width()
      self.menu.label_h := self.h - border.get_total_height()
   end

   public override shift(dx, dy)
      Component.shift(dx, dy)
      self.menu.label_x +:= dx
      self.menu.label_y +:= dy
   end

   public override allow_nested(c)
      succeed is(c, SubMenuProxyComponent) & c.menu.parent_component === self
   end

   public override gen_popup_components()
   end

   public override get_nesting_component()
      link
   end

   public override new()
      Component.new()
      BorderWhilstEntered.new()
      self.set_border(RaisedBorder())
      every connect(handle_press, Event.MOUSE_LEFT_PRESS | Event.MOUSE_MIDDLE_PRESS | Event.MOUSE_RIGHT_PRESS)
      return
   end
end
