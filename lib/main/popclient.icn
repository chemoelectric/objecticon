#
# $Id$
#

package mail

import net, util

record PopStat(number, size)
record PopList(number, size)
record PopUID(number, uid)

class PopClient(NetClient)
   private
      auth

   #
   # Flag the given message for deletion
   # :Parameters :
   # :  `n` - the message number
   #
   public dele(n)
      send_command("DELE " || need_integer(n)) | fail
      link
   end

   #
   # Set the authentication for the session (user and password), as an
   # `Authentication` instance.
   #
   public set_auth(a)
      auth := a
      link
   end

   #
   # Open a connection; should be followed by `login()`
   #
   public open()
      open_connection() | fail
      unless read_response() then {
         close_connection()
         fail
      }
      link
   end

   #
   # Authenticate the username, password combination
   #
   public login()
      send_command("USER " || auth.username) | fail
      send_command("PASS " || auth.password) | fail
      link
   end

   #
   # Disconnect using the QUIT command
   #
   public override close()
      local f
      send_command("QUIT") | (f := &why)
      close_connection() | (/f := &why)
      link error_if(f)
   end

   #
   # Send the RSET command
   #
   public rset()
      send_command("RSET") | fail
      link
   end

   #
   # Retrieve the given message; the result is a `Message` object
   #
   public retr(n)
      local l, m, s
      send_command("RETR " || need_integer(n)) | fail
      l := read_multi_lines() | fail

      s := ""
      every s ||:= !l || "\r\n"

      m := Message.parse(s) | fail

      return m
   end

   private list1(s)
      local num, size
      s ? {
         (num := integer(tab(many(&digits))) &
          =" " &
          size := integer(tab(many(&digits)))) | return error("Bad list: " || s)
      }
      return PopList(num, size)
   end

   #
   # Return a list of `PopList` records, giving the current list of
   # message numbers and sizes.
   #
   # :Parameters :
   # :  `n` - optionally return the size of this message
   #          number
   #
   public list(n)
      local l, r, s
      if /n then {
         send_command("LIST") | fail
         l := read_multi_lines() | fail
         r := []
         every s := !l do
            put(r, list1(s)) | fail
         return r
      }
      else {
         n := need_integer(n)
         s := send_command("LIST " || n) | fail
         r := list1(s) | fail
         return if r.number = n then
            r.size
         else
            error("Mismatch in number of message")
      }
   end

   private uidl1(s)
      local num, id
      s ? {
         (num := integer(tab(many(&digits))) &
          =" " &
          id := tab(0)) | return error("Bad UIDL list: " || s)
      }
      return PopUID(num, id)
   end

   #
   # Return a list of `PopUID` records, giving the current list of
   # message numbers and unique ids, using the UIDL command.
   #
   # :Parameters :
   # :  `n` - optionally return the UID for this message
   #          number
   #
   public uidl(n)
      local l, r, s
      if /n then {
         send_command("UIDL") | fail
         l := read_multi_lines() | fail
         r := []
         every s := !l do
            put(r, uidl1(s)) | fail
         return r
      }
      else {
         n := need_integer(n)
         s := send_command("UIDL " || n) | fail
         r := uidl1(s) | fail
         return if r.number = n then
            r.uid
         else
            error("Mismatch in number of message")
      }
   end

   #
   # Read a multi-line response, ended with a "."
   # 
   private read_multi_lines()
      local l, s
      l := []
      repeat {
         s := expect_line() | fail
         if s[1:3] == ".." then
            s[1:3] := "."
         if s == "." then
            break
         put(l, s)
      }
      return l
   end

   #
   # Send a single command
   # 
   private send_command(msg)
      write_line(msg) | fail
      return read_response()
   end

   #
   # Return a `PopStat` record giving the number of messages followed by the
   # total size, obtained using the STAT command.
   #
   public stat()
      local s, num_messages, total_size

      s := send_command("STAT") | fail
      s ? {
         (num_messages := integer(tab(many(&digits))) &
          =" " &
          total_size := integer(tab(many(&digits)))) | return error("Bad stat listing: " || s)
      }

      return PopStat(num_messages, total_size)
   end

   #
   # Read a response line (+OK or -ERR)
   # 
   private read_response()
      local s

      s := expect_line() | fail

      s ? {
         if ="+OK" then {
            =" "
            return tab(0)
         }

         if ="-ERR" then {
            =" "
            return error("POP error: " || tab(0))
         }
      }

      return error("POP unrecognized response: " || s)
   end

   public override new()
      NetClient.new()
      set_port(110)
      set_server("localhost")
      return
   end
end
