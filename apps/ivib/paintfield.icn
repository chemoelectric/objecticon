import gui

class PaintField(Border)
   public 
      paints, 
      os, 
      img, 
      tf,
      grid_label,
      paint_tbl,
      edit_paint_button

   public on_sel_change()
      if paints.get_selection() = 1 then
         edit_paint_button.set_is_shaded("t")
      else
         edit_paint_button.set_is_shaded("f")
      os.set_which_one(os.children[paints.get_selection()])
   end

   public on_tf()
      get_contents().str := tf.get_contents()
   end

   public on_edit_paint()
      local c, d
      c := get_contents()
      d := c.dialog()
      d.show_modal(self.parent_dialog)
      if \d.okay_result then {
         case subtype(c) of {
            "CanvasTextPaint": {
            }
            "CanvasImagePaint": {
               img.clear_image()
               img.set_file(\c.image_file)
               img.set_image(\c.image_str)
            }
            "CanvasGridPaint": {
               grid_label.set_label(*c.fmt || " chars.")
            }
         }
      }
   end

   public validate_input()
      local t
      t := get_contents()
      case paints.get_selection() of {
         3 : 
            if /t.image_str & /t.image_file then
               return alert_error(parent_dialog, "No image provided")
         4 :
            if /t.fmt then
               return alert_error(parent_dialog, "No grid format string")
      }
      return
   end

   public set_contents(c)
      paint_tbl := table()
      if /c then
         edit_paint_button.set_is_shaded("t")
      else {
         case subtype(c) of {
            "CanvasTextPaint": {
               paints.set_selection(2)
               tf.set_contents(c.str)
            }
            "CanvasImagePaint": {
               paints.set_selection(3)
               img.clear_image()
               img.set_file(\c.image_file)
               img.set_image(\c.image_str)
            }
            "CanvasGridPaint": {
               paints.set_selection(4)
               grid_label.set_label(*c.fmt || " chars.")
            }
         }
         paint_tbl[paints.get_selection()] := c
         os.set_which_one(os.children[paints.get_selection()])
      }
   end

   public get_contents()
      local i, p

      i := paints.get_selection()
      if i = 1 then
         return &null
      p := paint_tbl[i]
      if /p then {
         p := case i of {
            2 : CanvasTextPaint(tf.get_contents())
            3 : CanvasImagePaint()
            4 : CanvasGridPaint()
         }
         p.change_canvas(parent_dialog.c.parent_Canvas)
         p.rename()
         insert(paint_tbl, i, p)
      }
      return p
   end

   public setup()
      local cc, p
      cc := Component()
      set_content(cc)
      cc.set_layout(GridLayout())
      os := OverlaySet()
      cc.add(os)
      paints := List("c:x_weight=0", "selection_list=&null,Text,Image,Grid")
      paints.connect(self.on_sel_change, Event.SELECTION_CHANGED)
      cc.add(paints)
      edit_paint_button := TextButton("label=Edit...")
      cc.add(edit_paint_button)
      edit_paint_button.connect(self.on_edit_paint, Event.ACTION)

      os.add(Component("size=0,0"))

      p := Panel("layout=",GridLayout("flush"))
      tf := TextField("size=120")
      tf.connect(self.on_tf, Event.CONTENT_CHANGED)
      p.add(tf)
      os.add(p)

      p := Panel("layout=",GridLayout("flush"))
      img := Image("size=40,40", "border=",PlainBorder())
      p.add(img)
      os.add(p)

      grid_label := Label("c:x_weight=1", "c:x_fill=y", "label=No format set.")
      os.add(grid_label)
   end

   public new(a[])
      cast(self,Border).new()
      setup()
      self.clear_constraints()
      self.set_constraint("x_fill", "t")
      self.set_constraint("x_weight", "1")
      set_fields(a)
      return
   end
end


