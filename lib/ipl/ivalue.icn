############################################################################
#
#	File:     ivalue.icn
#
#	Subject:  Procedures to convert string to Icon value
#
#	Author:   Ralph E. Griswold
#
#	Date:     October 12, 1996
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#  This procedure turns a string from image() into the corresponding Icon
#  value.  It can handle integers, real numbers, strings, csets, keywords,
#  structures, and procedures.  For the image of a structure, it produces a
#  result of the correct type and size, but any values in the structure
#  are not likely to be correct, since they are not encoded in the image.
#  For procedures, the procedure must be present in the environment in
#  which ivalue() is evaluated.  This generally is true for built-in
#  procedures (functions).
#
#  All keywords are supported even if image() does not produce a string
#  of the form "&name" for them.  The values produced for non-constant
#  keywords are, of course, the values they have in the environment in
#  which ivalue() is evaluated.
#
#  ivalue() also can handle non-local variables (image() does not produce
#  these), but they must be present in the environment in which ivalue()
#  is evaluated.
#
############################################################################

package ipl.ivalue

import
   lang(Constructor,Prog),
   util(Format)

# convert string to Icon value
procedure ivalue(s)			
   local t
   return {
      numeric(s) | {				# integer or real
      s ? {
         2(="\"", Format.escape(tab(-1)), ="\"") |		# string literal
         2(="'", Format.cset_escape(tab(-1)), ="'")	# cset literal
         }
      } |
      ((*s = 0) & &null) |			# empty string = &null
      Prog.get_keyword(s)() |
      struct(s) | {				# structure
      s ? {					# procedure
         if ="function " then Prog.get_function(tab(0))
         else if ="operator " then Prog.get_operator(tab(0), 2|1|3)
         else if ="constructor " then Constructor.for_name(tab(0))
         else if ="procedure " then {
            (t := Prog.get_global(tab(0))) &
            (type(t) == "procedure") &
            t
         }
      }
   }
   }
end

procedure struct(s)
   local type_, size, name, x

   s ? {
      if {
         type_ := tab(upto('#')) &			# type name
         move(1) &
         tab(many(&digits)) &				# serial number
         ="(" &
         size := tab(many(&digits)) &
         =")" &
         pos(0)
         }
      then {
         type_ ? {
            if {
               ="record " &
               name := tab(0) &
               Constructor.for_name(name)
               }
            then return name()
            }
         case type_ of {
            "list":   return list(size)
            "set":    {
               x := set()
               every insert(x, 1 to size)
               return x
               }
            "table":  {
              x := table()
              every x[1 to size] := 1
              return x
              }
            default:  fail  
            }
         }
      }

end
