classof(x): class Eight
is(x,Eight): yes
is(x,Class): no
Class.implements(Eight,Eight): yes
Class.implements(Eleven,Eight): yes
Class.implements(Eleven,Ten): yes
Class.implements(Eight,Eleven): no
Class.for_name("junk"): no
Class.for_name([]): Error 103
is(): Error 634
is("junk"): Error 634
is(x,"junk"): Error 634
is("junk",Eleven): Failed
classof(Time()): Succeeded with class util.Time
classof(): Error 635
classof("abc"): Error 635
Class.get_supers(): Error 620
Class.get_supers(1): Error 620
Class.get_implemented_classes(): Error 620
Class.get_implemented_classes(1): Error 620
Class.get_supers(Eleven): {class Eight, class Ten}
Class.get_implemented_classes(Eleven): {class Eight, class Nine, class Ten, class Eleven}
-------------
Class Eleven
Supers: {class Eight, class Ten}
Implemented classes: {class Eight, class Nine, class Ten, class Eleven}
Flags: 0
Num fields: 17
Field names: {"z", "one", "two", "three", "four", "five", "six", "seven", "eight", "a", "b", "c", "eleven1", "new", "thing", "dm", "ten1"}
Num class fields: 8
Class field names: {"a", "b", "c", "eleven1", "new", "thing", "dm", "ten1"}
Num instance fields: 9
Instance field names: {"z", "one", "two", "three", "four", "five", "six", "seven", "eight"}
is(c,c): no
Class.implements(c,c): yes
is(c,Class): no
Class.implements(c,Class): no
Class.for_name check: yes
Field count check: yes
Name set check1: yes
Name set check2: yes
Field z index 1
	Name: z
	Index: 1
	Flags: 4
	Defining class: class Eleven
	Value via class: Not accessible
	Value via instance: 100
Field one index 2
	Name: one
	Index: 2
	Flags: 4
	Defining class: class Eleven
	Value via class: Not accessible
	Value via instance: &null
Field two index 3
	Name: two
	Index: 3
	Flags: 4
	Defining class: class Eleven
	Value via class: Not accessible
	Value via instance: &null
Field three index 4
	Name: three
	Index: 4
	Flags: 4
	Defining class: class Eleven
	Value via class: Not accessible
	Value via instance: &null
Field four index 5
	Name: four
	Index: 5
	Flags: 4
	Defining class: class Eleven
	Value via class: Not accessible
	Value via instance: &null
Field five index 6
	Name: five
	Index: 6
	Flags: 4
	Defining class: class Eleven
	Value via class: Not accessible
	Value via instance: &null
Field six index 7
	Name: six
	Index: 7
	Flags: 4
	Defining class: class Eleven
	Value via class: Not accessible
	Value via instance: &null
Field seven index 8
	Name: seven
	Index: 8
	Flags: 4
	Defining class: class Eleven
	Value via class: Not accessible
	Value via instance: &null
Field eight index 9
	Name: eight
	Index: 9
	Flags: 4
	Defining class: class Eleven
	Value via class: Not accessible
	Value via instance: &null
Field a index 10
	Name: a
	Index: 10
	Flags: 36
	Defining class: class Eleven
	Value via class: &null
	Value via instance: Not accessible
Field b index 11
	Name: b
	Index: 11
	Flags: 36
	Defining class: class Eleven
	Value via class: &null
	Value via instance: Not accessible
Field c index 12
	Name: c
	Index: 12
	Flags: 36
	Defining class: class Eleven
	Value via class: &null
	Value via instance: Not accessible
Field eleven1 index 13
	Name: eleven1
	Index: 13
	Flags: 5
	Defining class: class Eleven
	Value via class: Not accessible
	Value via instance: methp(object Eleven#*(9),method Eleven.eleven1)
Field new index 14
	Name: new
	Index: 14
	Flags: 1029
	Defining class: class Eleven
	Value via class: Not accessible
	Value via instance: Not accessible
Field thing index 15
	Name: thing
	Index: 15
	Flags: 5
	Defining class: class Eight
	Value via class: Not accessible
	Value via instance: methp(object Eleven#*(9),method Eight.thing)
Field dm index 16
	Name: dm
	Index: 16
	Flags: 261
	Defining class: class Eight
	Value via class: Not accessible
	Value via instance: methp(object Eleven#*(9),deferred method)
Field ten1 index 17
	Name: ten1
	Index: 17
	Flags: 37
	Defining class: class Ten
	Value via class: method Ten.ten1
	Value via instance: Not accessible
-------------
Class Eight
Supers: {}
Implemented classes: {class Eight}
Flags: 0
Num fields: 2
Field names: {"thing", "dm"}
Num class fields: 2
Class field names: {"thing", "dm"}
Num instance fields: 0
Instance field names: {}
is(c,c): no
Class.implements(c,c): yes
is(c,Class): no
Class.implements(c,Class): no
Class.for_name check: yes
Field count check: yes
Name set check1: yes
Name set check2: yes
Field thing index 1
	Name: thing
	Index: 1
	Flags: 5
	Defining class: class Eight
	Value via class: Not accessible
	Value via instance: methp(object Eight#*(0),method Eight.thing)
Field dm index 2
	Name: dm
	Index: 2
	Flags: 261
	Defining class: class Eight
	Value via class: Not accessible
	Value via instance: methp(object Eight#*(0),deferred method)
-------------
Class Nine
Supers: {}
Implemented classes: {class Nine}
Flags: 0
Num fields: 0
Field names: {}
Num class fields: 0
Class field names: {}
Num instance fields: 0
Instance field names: {}
is(c,c): no
Class.implements(c,c): yes
is(c,Class): no
Class.implements(c,Class): no
Class.for_name check: yes
Field count check: yes
Name set check1: yes
Name set check2: yes
-------------
Class Ten
Supers: {class Nine}
Implemented classes: {class Nine, class Ten}
Flags: 0
Num fields: 1
Field names: {"ten1"}
Num class fields: 1
Class field names: {"ten1"}
Num instance fields: 0
Instance field names: {}
is(c,c): no
Class.implements(c,c): yes
is(c,Class): no
Class.implements(c,Class): no
Class.for_name check: yes
Field count check: yes
Name set check1: yes
Name set check2: yes
Field ten1 index 1
	Name: ten1
	Index: 1
	Flags: 37
	Defining class: class Ten
	Value via class: method Ten.ten1
	Value via instance: Not accessible
Test eleven1: Succeeded with "in eleven1"
Test set: Succeeded with 99
x.z = 99: yes
to_string: list#*[object Seven#*(a=1;c=3),ref object Seven#*]
Class.get(Eleven, "rubbish"): Error 207
Class.get(Eleven, "a"): Succeeded with &null
Class.junk: Error 207
Clone check: object One#*(x=1;y=2)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "One"
	classof(a)===classof(b): yes
Clone check: record rec1#*(a=1;b=2;c=3)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "rec1"
Clone check: &null
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Clone check: 1
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Clone check: "fred"
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Clone check: list#*["fred","mary",100,3.2,'abc',72057594037927935]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Clone check: list#*[6,7,8]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: list#*[list#*[6,7,8],list#*[6,7,8],1,list#*[ref list#*,ref list#*],3,4,5,ref list#*] -v- list#*[list#*[6,7,8],list#*[6,7,8],1,list#*[ref list#*,ref list#*],3,4,5,ref list#*]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: list#*[list#*[6,7,8],list#*[6,7,8],1,list#*[ref list#*,ref list#*],3,4,5,ref list#*] -v- list#*[list#*[6,7,8],list#*[6,7,8],1,list#*[ref list#*,ref list#*],3,4,5,ref list#*,5]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): no
	equals(b,a): no
	hash(a)=hash(b): no
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: 1 -v- 1.0
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): no
	equals(b,a): no
	hash(a)=hash(b): no
	type(a)==type(b): no
	subtype(a)==subtype(b): Error 123
Equals check: 1 -v- 1
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: "fred" -v- "fred"
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: "bred" -v- "fred"
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): no
	equals(b,a): no
	hash(a)=hash(b): no
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: procedure proc1 -v- procedure proc1
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "proc1"
Equals check: procedure proc1 -v- procedure proc1
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "proc1"
p===q: yes
Equals check: procedure proc1 -v- procedure proc2
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): no
	equals(b,a): no
	hash(a)=hash(b): no
	type(a)==type(b): yes
	subtype(a)==subtype(b): Failed
Equals check: list#*[1,2,list#*[3,4],list#*[],list#*[list#*[list#*[3,4]]]] -v- list#*[1,2,list#*[3,4],list#*[],list#*[list#*[list#*[3,4]]]]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: list#*[list#*[1,2,list#*[3,4],list#*[],list#*[list#*[list#*[3,4]]]],ref list#*,ref list#*] -v- list#*[list#*[1,2,list#*[3,4],list#*[],list#*[list#*[list#*[3,4]]]],ref list#*,ref list#*]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: list#*[1,2,list#*[3,4],list#*[],list#*[list#*[list#*[3,5]]]] -v- list#*[1,2,list#*[3,4],list#*[],list#*[list#*[list#*[3,4]]]]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): no
	equals(b,a): no
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: list#*[1,2,list#*[3,4],list#*[],list#*[list#*[list#*[3,5]]]] -v- list#*[1,2,list#*[3,4],list#*[],list#*[list#*[list#*[3,5]]]]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: &null -v- &null
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: list#*["the","cat","sat","on","the","mat"] -v- list#*["the","cat","sat","on","the","mat"]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: list#*["the","cat","sat","off","the","mat"] -v- list#*["the","cat","sat","on","the","mat"]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): no
	equals(b,a): no
	hash(a)=hash(b): no
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: list#*[1,2,ref list#*] -v- list#*[1,2,ref list#*]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Clone check: list#*[1,2,ref list#*]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: list#*[1,2,ref list#*] -v- list#*[1,2,list#*[1,2,ref list#*]]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: list#*[list#*[1,2],ref list#*] -v- list#*[list#*[1,2],list#*[1,2]]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: list#*[list#*[],ref list#*] -v- list#*[list#*[],1]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): no
	equals(b,a): no
	hash(a)=hash(b): no
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: list#*[ref list#*] -v- list#*[ref list#*]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: object Three#*(x=&null;y=&null) -v- object Three#*(x=&null;y=&null)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "Three"
	classof(a)===classof(b): yes
Equals check: object Three#*(x=&null;y=&null) -v- object Three#*(x=&null;y=&null)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "Three"
	classof(a)===classof(b): yes
Equals check: list#*[object Three#*(x=&null;y=&null),ref object Three#*] -v- list#*[object Three#*(x=&null;y=&null),object Three#*(x=&null;y=&null)]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: object One#*(x=1;y=id=1) -v- object One#*(x=1;y=id=1)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "One"
	classof(a)===classof(b): yes
Equals check: object One#*(x=1;y=id=1) -v- object One#*(x=1;y=3)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): no
	equals(b,a): no
	hash(a)=hash(b): no
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "One"
	classof(a)===classof(b): yes
Clone check: list#*[id=1,id=2,id=3]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Clone check: object One#*(x=id=5;y=id=6)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "One"
	classof(a)===classof(b): yes
Clone check: list#*[object One#*(x=1;y=object Three#*(x=3;y="junk")),ref object One#*]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): no
	equals(b,a): no
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: object One#*(x="hello";y=id=1) -v- object One#*(x="hello";y=id=1)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "One"
	classof(a)===classof(b): yes
Clone check: object One#*(x=object One#*(x=object One#*(x=object One#*(x=ref object One#*;y=ref object One#*);y=&null);y=&null);y=ref object One#*)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "One"
	classof(a)===classof(b): yes
Clone check: object Four#*(x=&null;y=&null;z=&null)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "Four"
	classof(a)===classof(b): yes
Clone check: object One#*(x=set#*{ref object One#*};y=&null)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "One"
	classof(a)===classof(b): yes
Clone check: Nothing here
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "Five"
	classof(a)===classof(b): yes
Clone check: object datastruct.ClTable#*(1->id=22;2->ref object Two#*)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "datastruct.ClTable"
	classof(a)===classof(b): yes
Clone check: object Six#*(x=100;y=ref object Six#*)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "Six"
	classof(a)===classof(b): yes
Clone check: object datastruct.ClTable#*(10->list#*[])
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "datastruct.ClTable"
	classof(a)===classof(b): yes
Equals check: table#*{1->2;3->4;ref table#*->ref table#*} -v- table#*{1->2;3->4;ref table#*->ref table#*}
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Clone check: table#*{1->2;3->4;ref table#*->ref table#*}
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: list#*[list#*[ref list#*],ref list#*] -v- list#*[list#*[ref list#*],list#*[ref list#*]]
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: set#*{list#*[],list#*[1,2,3],list#*[2]} -v- set#*{list#*[1,2,3],list#*[],list#*[2]}
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: set#*{ref set#*} -v- set#*{ref set#*}
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: set#*{list#*[1],list#*[2,2],list#*[2,2],list#*[3]} -v- set#*{list#*[1],list#*[2,2],list#*[2,2],list#*[3]}
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: set#*{list#*[1],list#*[1],list#*[2,2],list#*[3]} -v- set#*{list#*[1],list#*[2,2],list#*[2,2],list#*[3]}
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): no
	equals(b,a): no
	hash(a)=hash(b): no
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: object util.Time#*(October 10, 2000 20:11.33 BST) -v- object util.Time#*(October 10, 2000 20:11.33 BST)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "util.Time"
	classof(a)===classof(b): yes
Equals check: set#*{object util.Time#*(October 10, 2000 20:11.33 BST)} -v- set#*{object util.Time#*(October 10, 2000 20:11.33 BST)}
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: object util.Time#*(October 10, 2000 20:11.33 BST) -v- object util.Time#*(October 10, 2000 11:11.33 BST)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): no
	equals(b,a): no
	hash(a)=hash(b): no
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "util.Time"
	classof(a)===classof(b): yes
Equals check: set#*{object util.Time#*(October 10, 2000 20:11.33 BST)} -v- set#*{object util.Time#*(October 10, 2000 11:11.33 BST)}
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): no
	equals(b,a): no
	hash(a)=hash(b): no
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: object util.Time#*(October 10, 2000 20:11.33 BST) -v- object One#*(x=1;y=2)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): no
	equals(b,a): no
	hash(a)=hash(b): no
	type(a)==type(b): yes
	subtype(a)==subtype(b): Failed
	classof(a)===classof(b): no
Equals check: methp(object Sixteen#*(val=&null),method Sixteen.g) -v- methp(object Sixteen#*(val=&null),method Sixteen.g)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: methp(object Sixteen#*(val=&null),method Fifteen.f) -v- methp(object Fifteen#*(val=&null),method Fifteen.f)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): no
	equals(b,a): no
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: methp(object Sixteen#*(val=&null),method Fifteen.f) -v- methp(object Sixteen#*(val=&null),method Sixteen.g)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): no
	equals(b,a): no
	hash(a)=hash(b): no
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: cast(object Sixteen#*(val=&null),class Fifteen) -v- cast(object Sixteen#*(val=&null),class Fifteen)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: cast(object Sixteen#*(val=&null),class Fifteen) -v- cast(object Fifteen#*(val=&null),class Fifteen)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): no
	equals(b,a): no
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: cast(object Sixteen#*(val=&null),class Fifteen) -v- cast(object Sixteen#*(val=&null),class Sixteen)
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): no
	equals(b,a): no
	hash(a)=hash(b): no
	type(a)==type(b): yes
	subtype(a)==subtype(b): Error 123
Equals check: object Fifteen#*(val=methp(ref object Fifteen#*,method Fifteen.f)) -v- object Fifteen#*(val=methp(ref object Fifteen#*,method Fifteen.f))
	equals(a,a): yes
	equals(b,b): yes
	equals(a,b): yes
	equals(b,a): yes
	hash(a)=hash(b): yes
	type(a)==type(b): yes
	subtype(a)==subtype(b): Succeeded with "Fifteen"
	classof(a)===classof(b): yes
Tryit1 object Thirteen#*(1)
getf: no
Tryit1 object Thirteen#*(1)
getf: no
Tryit1 object Thirteen#*(1)
getf: yes
Setup err1: Error 623
Setup err2: Error 616
Setup err3: Error 616
Setup err4: Error 617
Setup err5: Error 617
Setup err6: Error 618
Access One.var from p2: Error 611
Access Two.var from p2: Succeeded with &null
Access One.var from p2: Error 611
Access Two.var from p2: Succeeded with &null
Access One.var from p2: Succeeded with &null
Access Two.var from p2: Succeeded with &null
second.p
first.FirstOne.f
second.p
second
first
second
classes_packtest2.icn,10
classes_packtest1.icn,8
classes_packtest2.icn,10
Random object test starting
Random object test finished
equals(x1,x2): yes
equals(x1,x2): yes
equals(x1,x2): yes
equals(x1,x2): no
