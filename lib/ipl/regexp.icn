############################################################################
#
#	File:     regexp.icn
#
#	Subject:  Procedure for regular-expression pattern matching
#
#	Author:   Robert J. Alexander
#
#	Date:     May 19, 1996
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################

package ipl.regexp

import
   ipl.scan(caseless_cset, caseless_match, caseless_find, begin_analysis),
   lang(Prog),
   util(need_flag, need_string, need_cset)

package record Pos(n)
package record Move(n)
package record Alt(pat1,pat2)
package record Arb()
package record OneOrMore(tok)
package record ArbNo(tok)
package record TabAny(cset)
package record MatchReg(pat,n)
package record WordBoundary()
package record NonWordBoundary()
package record NToMTimes(tok,n,m)
package record NOrMoreTimes(tok,n)
package record NTimes(tok,n)
package record ZeroOrOneTimes(tok)
package record TabMatch(str)
package record MatchParenGroup(n)

#
#  This is a kit of procedures to deal with UNIX-like regular expression
#  patterns.
#
#  These procedures are interesting partly because of the "recursive
#  suspension" (or "suspensive recursion" :-) technique used to simulate
#  conjunction of an arbitrary number of computed expressions (see
#  notes, below).
#
#  Create a regexp pattern with default options using the constructor :-
#
#  p := Pattern(re)
#
#  The public search methods are:
#
#  p.match(s,i1,i2) : i3,i4,...,iN
#  p.find(s,i1,i2) : i3,i4,...,iN
#
#  Alternatively, create a Pattern instance with custom options as follows :-
#
#  p := Pattern().
#         set_word_chars('whatever you like').
#         set_leftmost_shortest(&yes).
#         parse(re)
#
#  Note that setter methods cannot be called after a string has been parsed
#  into the regular expression - you have to create a new instance.
#
############################################################################
#
#  match() produces the sequence of positions in "s" past a substring
#  starting at "i1" that matches "pattern", but fails if there is no
#  such position.  Similar to match(), but is capable of generating
#  multiple positions.
#
#  find() produces the sequence of positions in "s" where substrings
#  begin that match "pattern", but fails if there is no such position.
#  Similar to find().  Each position is produced only once, even if
#  several possible matches are possible at that position.
#
#  Default values of s, i1, and i2 are handled as for Icon's built-in
#  string scanning procedures such as match().
#
############################################################################
#
#  Patttern(s)
#
#  Creates a pattern from pattern string "s", but fails if
#  the pattern string is not syntactically correct.
#
############################################################################
#
#  p.set_case_dependent(flag)
#
#  Set mode for case-independent or case-dependent matching.  The initial
#  mode is case-dependent.
#
############################################################################
#
#  Accessible Global Variables
#
#  After a match, the strings matched by parenthesized regular
#  expressions are left in a list which can be retrieved by the
#  method "p.get_paren_groups()", and can be accessed by
#  subscripting in using the same number as the \N construct.
#
#  If it is desired that regular expression format be similar to UNIX
#  filename generation patterns but still retain the power of full
#  regular expressions, make the following assignments prior to
#  compiling the pattern string:
#
#       p.set_arb_string("*")     # Defaults to ".*"
#
#  The sets of characters (csets) that define a word, digits, and white
#  space can be modified.  The following assignments can be made before
#  compiling the pattern string.  The character sets are captured when
#  the pattern is compiled, so changing them after pattern compilation
#  will not alter the behavior of matches unless the pattern string is
#  recompiled.
#
#       p.set_word_chars('whatever you like')
#                       # Defaults to &letters ++ &digits ++ "_"
#       p.set_digit_chars(&digits ++ 'ABCDEFabcdef')
#                       # Defaults to &digits
#       p.set_space_chars('whatever you like')
#                       # Defaults to ' \t\v\n\r\f'
#
############################################################################
#
#  Characters compiled into patterns can be passed through a
#  user-supplied filter procedure, set via p.set_filter()
#  The filtering is done before the characters are bound
#  into the pattern.  The filter proc is passed one argument, the string
#  to filter, and it must return the filtered string as its result.  If
#  the filter proc fails, the string will be used unfiltered.  The
#  filter proc is called with an argument of either type string (for
#  characters in the pattern) or cset (for character classes [...]).
#
#  Filtering is done only as the pattern is compiled.  Any filtering of
#  strings to be matched must be explicitly done.
#
############################################################################
#
#  By default, individual pattern elements are matched in a "leftmost-
#  longest-first" sequence, which is the order observed by perl, egrep,
#  and most other regular expression matchers.  If the order of matching
#  is not important a performance improvement might be seen if pattern
#  elements are matched in "shortest-first" order.  The following global
#  variable setting causes the matcher to operate in leftmost-shortest-
#  first order.
#
#   p.set_leftmost_shortest(&yes)
#  
############################################################################
#
#  In the case of patterns containing alternation, find() will
#  generally not produce positions in increasing order, but will produce
#  all positions from the first term of the alternation (in increasing
#  order) followed by all positions from the second (in increasing
#  order).  If it is necessary that the positions be generated in
#  strictly increasing order, with no duplicates, call
#
#       p.set_ordered(&yes)
#
#  If the ordered option is chosen, there is a *small* penalty in
#  efficiency in some cases.
#  
############################################################################
#
#  Regular Expression Characters and Features Supported
#
#  The regular expression format supported by procedures in this file
#  model very closely those supported by the UNIX "egrep" program, with
#  modifications as described in the Perl programming language
#  definition.  Following is a brief description of the special
#  characters used in regular expressions.  In the description, the
#  abbreviation RE means regular expression.
#
#  c            An ordinary character (not one of the special characters
#               discussed below) is a one-character RE that matches that
#               character.
#
#  \c           A backslash followed by any special character is a one-
#               character RE that matches the special character itself.
#
#               Note that backslash escape sequences representing
#               non-graphic characters are not supported directly
#               by these procedures.  Of course, strings coded in an
#               Icon program will have such escapes handled by the
#               Icon translator.  If such escapes must be supported
#               in strings read from the run-time environment (e.g.
#               files), they will have to be converted by other means,
#               such as the Icon Program Library procedure "escape()".
#
#  .            A period is a one-character RE that matches any
#               character.
#
#  [string]     A non-empty string enclosed in square brackets is a one-
#               character RE that matches any *one* character of that
#               string.  If, the first character is "^" (circumflex),
#               the RE matches any character not in the remaining
#               characters of the string.  The "-" (minus), when between
#               two other characters, may be used to indicate a range of
#               consecutive ASCII characters (e.g. [0-9] is equivalent to
#               [0123456789]).  Other special characters stand for
#               themselves in a bracketed string.
#
#  *            Matches zero or more occurrences of the RE to its left.
#
#  +            Matches one or more occurrences of the RE to its left.
#
#  ?            Matches zero or one occurrences of the RE to its left.
#
#  {N}          Matches exactly N occurrences of the RE to its left.
#
#  {N,}         Matches at least N occurrences of the RE to its left.
#
#  {N,M}        Matches at least N occurrences but at most M occurrences
#               of the RE to its left.
#
#  ^            A caret at the beginning of an entire RE constrains
#               that RE to match an initial substring of the subject
#               string.
#
#  $            A currency symbol at the end of an entire RE constrains
#               that RE to match a final substring of the subject string.
#
#  |            Alternation: two REs separated by "|" match either a
#               match for the first or a match for the second.
#
#  ()           A RE enclosed in parentheses matches a match for the
#               regular expression (parenthesized groups are used
#               for grouping, and for accessing the matched string
#               subsequently in the match using the \N expression).
#
#  \N           Where N is a digit in the range 1-9, matches the same
#               string of characters as was matched by a parenthesized
#               RE to the left in the same RE.  The sub-expression
#               specified is that beginning with the Nth occurrence
#               of "(" counting from the left.  E.g., ^(.*)\1$ matches
#               a string consisting of two consecutive occurrences of
#               the same string.
#
############################################################################
#
#  Extensions beyond UNIX egrep
#
#  The following extensions to UNIX REs, as specified in the Perl
#  programming language, are supported.
#
#  \w           Matches any alphanumeric (including "_").
#  \W           Matches any non-alphanumeric.
#
#  \b           Matches only at a word-boundary (word defined as a string
#               of alphanumerics as in \w).
#  \B           Matches only non-word-boundaries.
#
#  \s           Matches any white-space character.
#  \S           Matches any non-white-space character.
#
#  \d           Matches any digit [0-9].
#  \D           Matches any non-digit.
#
#  \w, \W, \s, \S, \d, \D can be used within [string] REs.
#
############################################################################
#
#  Notes on computed conjunction expressions by "suspensive recursion"
#
#  A conjunction expression of an arbitrary number of terms can be
#  computed in a looping fashion by the following recursive technique:
#
#       procedure Conjunct(v)
#          if <there is another term to be appended to the conjunction> then
#             suspend Conjunct(<the next term expression>)
#          else
#             suspend v
#       end
#
#  The argument "v" is needed for producing the value of the last term
#  as the value of the conjunction expression, accurately modeling Icon
#  conjunction.  If the value of the conjunction is not needed, the
#  technique can be slightly simplified by eliminating "v":
#
#       procedure ConjunctAndProduceNull()
#          if <there is another term to be appended to the conjunction> then
#             suspend ConjunctAndProduceNull(<the next term expression>)
#          else
#             suspend
#       end
#
#  Note that <the next term expression> must still remain in the suspend
#  expression to test for failure of the term, although its value is not
#  passed to the recursive invocation.  This could have been coded as
#
#             suspend <the next term expression> & ConjunctAndProduceNull()
#
#  but wouldn't have been as provocative.
#
#  Since the computed conjunctions in this program are evaluated only for
#  their side effects, the second technique is used in two situations:
#
#       (1)     To compute the conjunction of all of the elements in the
#               regular expression pattern list (Re_match1()).
#
#       (2)     To evaluate the "exactly N times" and "N to M times"
#               control operations (Re_NTimes()).
#
class Pattern()
   private plist

   private Re_ParenGroups,Re_Filter,Re_Ordered
   private Re_WordChars,Re_NonWordChars
   private Re_Space,Re_NonSpace
   private Re_Digits,Re_NonDigits
   private Re_ArbString,Re_AnyString
   private Re_LeftmostShortest
   private Re__find,Re__any,Re__upto,Re__tabmatch
   private parenNbr

   private check_open()
      /plist | runerr("Can't change Pattern config after parsing")
   end

   private check_plist()
      \plist | runerr("Can't call find or match without setting a valid regex string")
   end

   public get_paren_group(n)
      return .Re_ParenGroups[n]
   end

   public get_paren_groups()
      return .Re_ParenGroups
   end

   public set_ordered(f)
      check_open()
      Re_Ordered := need_flag(f)
      return self
   end

   public set_leftmost_shortest(f)
      check_open()
      Re_LeftmostShortest := need_flag(f)
      return self
   end

   public set_case_dependent(f)
      check_open()
      if /need_flag(f) then {
         Re__find := caseless_find
         Re__any := Re_c_any
         Re__upto := Re_c_upto
         Re__tabmatch := Re_c_tabmatch
      } else {
         Re__find := default.find
         Re__any := any
         Re__upto := upto
         Re__tabmatch := Prog.get_operator("=",1)
      }
      return self
   end

   public set_filter(p)
      check_open()
      Re_Filter := p
      return self
   end

   public set_word_chars(c)
      check_open()
      Re_WordChars := need_cset(c)
      Re_NonWordChars := ~Re_WordChars
      return self
   end

   public set_space_chars(c)
      check_open()
      Re_Space := need_cset(c)
      Re_NonSpace := ~Re_Space
      return self
   end

   public set_digit_chars(c)
      check_open()
      Re_Digits := need_cset(c)
      Re_NonDigits := ~Re_Digits
      return self
   end

   public set_arb_string(s)
      check_open()
      Re_ArbString := need_string(s)
      return self
   end

   public set_any_string(s)
      check_open()
      Re_AnyString := need_string(s)
      return self
   end


   ###################  Pattern Translation Procedures  ###################

   #
   # Create new instance with regular expression string {s}.  If {s} is omitted, it
   # must be set subsequently via {parse(s)}.  If any setter methods are to be used,
   # {s} must be omitted, and the setters called before {parse()}.
   #
   public new(s)
      set_word_chars(&letters ++ &digits ++ '_')
      set_space_chars(' \t\v\n\r\f')
      set_digit_chars(&digits)
      set_arb_string(".*")
      set_any_string(".")
      set_case_dependent(&yes)
      if \s then
         parse(s) | fail
      return
   end

   # Set the regular expression pattern for this instance.  May be
   # called several times if desired.
   public parse(s)	
      #
      #  Produce pattern list representing pattern string s.
      #
      #
      #  Create a list of pattern elements.  Pattern strings are parsed
      #  and converted into list elements as shown in the following table.
      #  Since some list elements reference other pattern lists, the
      #  structure is really a tree.
      #
      # Token      Generates                       Matches...
      # -----      ---------                       ----------
      #  ^         Pos(1)                          Start of string or line
      #  $         Pos(0)                          End of string or line
      #  .         Move(1)                         Any single character
      #  +         OneOrMore(tok)                  At least one occurrence of
      #                                            previous token
      #  *         ArbNo(tok)                      Zero or more occurrences of
      #                                            previous token
      #  |         Alt(pattern,pattern)            Either of prior expression
      #                                            or next expression
      #  [...]     TabAny(cset)                    Any single character in
      #                                            specified set (see below)
      #  (...)     MatchReg(pattern,n)             Parenthesized pattern as
      #                                            single token
      #  <string of non-special characters>        The string of no-special
      #            TabMatch(string)                characters
      #  \b        WordBoundary()
      #                                            A word-boundary
      #                                              (word default: [A-Za-z0-9_]+)
      #  \B        NonWordBoundary()
      #                                            A non-word-boundary
      #  \w        TabAny(Re_WordChars)            A word-character
      #  \W        TabAny(Re_NonWordChars)         A non-word-character
      #  \s        TabAny(Re_Space)                A space-character
      #  \S        TabAny(Re_NonSpace)             A non-space-character
      #  \d        TabAny(Re_Digits)               A digit
      #  \D        TabAny(Re_NonDigits)            A non-digit
      #  {n,m}     NToMTimes(tok,n,m)              n to m occurrences of
      #                                            previous token
      #  {n,}      NOrMoreTimes(tok,n)             n or more occurrences of
      #                                            previous token
      #  {n}       NTimes(tok,n)                   exactly n occurrences of
      #                                            previous token
      #  ?         ZeroOrOneTimes(tok)             one or zero occurrences of
      #                                            previous token
      #  \<digit>  MatchParenGroup(n)              The string matched by
      #                                            parenthesis group <digit>
      #
      s ? (plist := Re_pat1(0)) | fail
      return self
   end


   # L
   private Re_pat1(level) 
      #
      #  Recursive portion of RePat()
      #
      local plist,n,m,c,comma
      if level = 0 then parenNbr := 0
      plist := []
      #
      #  Loop to put pattern elements on list.
      #
      until pos(0) do {
         (="|",plist := [Alt(plist,Re_pat1(level + 1) | fail)]) |
            put(plist,
                (="^",pos(2) | &subject[-2] == ("|" | "("),Pos(1)) |
                (="$",pos(0) | default.match("|" | ")"),Pos(0)) |
                (default.match(")"),level > 0,break) |
                (=Re_ArbString,Arb()) |
                (=Re_AnyString,Move(1)) |
                (="+",OneOrMore(Re_prevTok(plist) | fail)) |
                (="*",ArbNo(Re_prevTok(plist) | fail)) |
                1(TabAny(c := Re_cset()),\c | fail) |
                3(="(",n := parenNbr +:= 1,
                  MatchReg(Re_pat1(level + 1) | fail,n),
                  move(1) | fail) |
                  (="\\b",WordBoundary()) |
                  (="\\B",NonWordBoundary()) |
                  (="\\w",TabAny(Re_WordChars)) |
                  (="\\W",TabAny(Re_NonWordChars)) |
                  (="\\s",TabAny(Re_Space)) |
                  (="\\S",TabAny(Re_NonSpace)) |
                  (="\\d",TabAny(Re_Digits)) |
                  (="\\D",TabAny(Re_NonDigits)) |
                  (="{",(n := tab(many(&digits)),comma := =(",") | &null,
                         m := tab(many(&digits)) | &null,="}") | fail,
                         if \m then NToMTimes(Re_prevTok(plist),integer(n),integer(m))
                         else if \comma then NOrMoreTimes(Re_prevTok(plist),integer(n))
                         else NTimes(Re_prevTok(plist),integer(n)) ) |
                         (="?",ZeroOrOneTimes(Re_prevTok(plist) | fail)) |
                         TabMatch(Re_string(level)) |
                         (="\\",n := tab(any(&digits)),MatchParenGroup(integer(n)))
                         ) |
                            fail
      }
      return plist
   end


   private Re_prevTok(plist)
      #
      #  Pull previous token from the pattern list.  This procedure must take
      #  into account the fact that successive character tokens have been
      #  optimized into a single string token.
      #
      local lastTok,s,r
      lastTok := pull(plist) | fail
      if is(lastTok,TabMatch) then {
         s := lastTok.str
         r := TabMatch(s[-1])
         s[-1] := ""
         if *s > 0 then {
            put(plist,lastTok)
            lastTok.str  := s
         }
         return r
      }
      return lastTok
   end


   private Re_cset()
      #
      #  Matches a [...] construct and returns a cset.
      #
      local complement,c,e,ch,chars
      ="[" | fail
      (complement := ="^" | &null,c := move(1) || tab(default.find("]")),move(1)) |
         return &null
      c ? {
         e := (="-" | "")
         while chars := tab(upto('\-\\')) do {
            e ++:= case string(move(1)) of {
               "-": chars[1:-1] ++
                  &uset[ord(chars[-1]) + 1:ord(move(1)) + 2] | return &null
               "\\": case string(ch := move(1)) of {
                  "w": Re_WordChars
                  "W": Re_NonWordChars
                  "s": Re_Space
                  "S": Re_NonSpace
                  "d": Re_Digits
                  "D": Re_NonDigits
                  default: ch
               }
            }
         }
         e ++:= tab(0)
         if \complement then e := ~e
      }
      e := (\Re_Filter)(e)
      return cset(e)
   end


   private Re_string(level)
      #
      #  Matches a string of non-special characters, returning a string.
      #
      local special,s,p
      static nondigits
      initial nondigits := ~&digits
      special := if level = 0 then '\\.+*|[({?' else  '\\.+*|[({?)'
      s := tab(upto(special) | 0)
      while ="\\" do {
         p := &pos
         if tab(any('wWbBsSdD')) |
            (tab(any('123456789')) & (pos(0) | any(nondigits))) then {
               tab(p - 1)
               break
            }
         s ||:= move(1) || tab(upto(special) | 0)
      }
      if pos(0) & s[-1] == "$" then {
         move(-1)
         s[-1] := ""
      }
      s := text((\Re_Filter)(s))
      return "" ~== s
   end


   #####################  Matching Engine Procedures  ########################


   #
   #  Produce the sequence of positions in s past a string starting at
   #  i1 that matches the pattern, but fails if there is no such
   #  position.  Similar to match(), but is capable of generating
   #  multiple positions.
   #
   public match(s,i1,i2) 
      local a
      check_plist()
      a := begin_analysis(s,i1,i2) | fail
      s := a.s; i1 := a.i; i2 := a.j
      Re_ParenGroups := []
      suspend s[i1:i2] ? (Re_match1(plist,1),i1 - 1 + &pos)
   end


   #
   #  Like `match()` above, but only succeed if the entire string
   #  `s[i1:i2]` matches the pattern.
   #
   public match_all(s,i1,i2) 
      local a
      check_plist()
      a := begin_analysis(s,i1,i2) | fail
      s := a.s; i1 := a.i; i2 := a.j
      Re_ParenGroups := []
      return s[i1:i2] ? (Re_match1(plist,1), pos(0), i1 - 1 + &pos)
   end


   # s1,s2,...,sN
   private Re_match1(tokList,i) 
      #
      #  Used privately by match() to simulate a computed conjunction
      #  expression via recursive generation.
      #
      local tok
      suspend if tok := tokList[i] then
         Re_tok_match(tok,tokList,i) & Re_match1(tokList,i + 1) else &null
   end


   #
   #  Produce the sequence of positions in s where strings begin that match
   #  the pattern, but fails if there is no such position.  Similar
   #  to find().
   #
   public find(s,i1,i2) 
      local p,a
      check_plist()
      a := begin_analysis(s,i1,i2) | fail
      s := a.s; i1 := a.i; i2 := a.j
      Re_ParenGroups := []
      s[i1:i2] ? suspend (
                          tab(Re_skip(plist)) &
                          p := &pos &
                          Re_match1(plist,1)\1 &
                          i1 -1 + p)
   end


   private Re_tok_match(tok,tokList,i)
      #
      #  Match a single token.  Can be recursively called by the token
      #  procedure.
      #
      local results,result
      if \Re_LeftmostShortest then
         suspend Re_tok_match1(tok,tokList,i)
      else {
         results := []
         every Re_tok_match1(tok,tokList,i) do
            push(results,[&pos,copy(Re_ParenGroups)])
         every result := !results do {
            Re_ParenGroups := result[2]
            suspend tab(result[1])
         }
      }
   end

   private Re_tok_match1(tok,tokList,i)
      suspend case classof(tok) of {
         Pos: pos(tok.n)
         Move: move(tok.n)
         Alt: Re_Alt(tok.pat1,tok.pat2)
         Arb: Re_Arb(tokList,i)
         OneOrMore: Re_OneOrMore(tok.tok)
         ArbNo: Re_ArbNo(tok.tok)
         TabAny: Re_TabAny(tok.cset)
         MatchReg: Re_MatchReg(tok.pat,tok.n)
         WordBoundary: Re_WordBoundary()
         NonWordBoundary: Re_NonWordBoundary()
         NToMTimes: Re_NToMTimes(tok.tok,tok.n,tok.m)
         NOrMoreTimes: Re_NOrMoreTimes(tok.tok,tok.n)
         NTimes: Re_NTimes(tok.tok,tok.n)
         ZeroOrOneTimes: Re_ZeroOrOneTimes(tok.tok)
         TabMatch: Re_TabMatch(tok.str)
         MatchParenGroup: Re_MatchParenGroup(tok.n)
         default: syserr("Invalid proc for Re_Tok")
      }
   end

   ##########  Heuristic Code for Matching Arbitrary Characters  ##########


   # s1,s2,...,sN
   private Re_skip(tokList,i) 
      #
      #  Used privately -- match a sequence of strings in s past which a match
      #  of the first pattern element in tokList is likely to succeed.  This
      #  procedure is used for heuristic performance improvement by match()
      #  for the ".*" pattern element, and by find().
      #
      local x,s,p
      /i := 1
      x := if type(tokList) == "list" then tokList[i] else tokList
      if /x then suspend default.find("")
      else {
         suspend case classof(x) of {
            TabMatch: Re__find(x.str)
            TabAny: Re__upto(x.cset)
            Pos: x.n
            WordBoundary :
               p := &pos & tab(Re_skip(tokList,i + 1)) & Re_WordBoundary() & untab(p)
            NonWordBoundary:
               p := &pos & tab(Re_skip(tokList,i + 1)) & Re_NonWordBoundary() & untab(p)
            MatchParenGroup: if s := \ (\Re_ParenGroups)[x.n] then
               default.find(s) else default.find("")
            NToMTimes | NOrMoreTimes | NTimes:
               if x.n > 0 then Re_skip(x.tok) else default.find("")
            OneOrMore : Re_skip(x.tok)
            MatchReg: Re_skip(x.pat)
            Alt:
               if \Re_Ordered then
                  Re_result_merge{Re_skip(x.pat1),Re_skip(x.pat2)}
               else
                  Re_skip(x.pat1 | x.pat2)
            default: default.find("")
         }
      }
   end


   private Re_result_merge(e1, e2)
      #
      #  Programmer-defined control operation to merge the result sequences of
      #  two integer-producing generators.  Both generators must produce their
      #  result sequences in numerically increasing order with no duplicates,
      #  and the output sequence will be in increasing order with no
      #  duplicates.
      #
      local r1,r2
      r1 := @e1 ; r2 := @e2
      while \(r1 | r2) do
         if /r2 | \r1 < r2 then
            suspend r1 do r1 := @e1 | &null
         else if /r1 | r1 > r2 then
            suspend r2 do r2 := @e2 | &null
         else
            r2 := @e2 | &null
   end


   private untab(origPos)
      #
      #  Converts a string scanning expression that moves the cursor to one
      #  that produces a cursor position and doesn't move the cursor (converts
      #  something like tab(find(x)) to find(x).  The template for using this
      #  procedure is
      #
      #       origPos := &pos ; tab(x) & ... & untab(origPos)
      #
      local newPos
      newPos := &pos
      tab(origPos)
      suspend newPos
      tab(newPos)
   end


   #######################  Matching Procedures #######################


   private Re_Arb(tokList,i)
      #
      #  Match arbitrary characters (.*)
      #
      suspend tab(if tokList[i + 1] then Re_skip(tokList,i + 1) else Re__find(""))
   end


   private Re_TabAny(C)
      #
      #  Match a character of a character set ([...],\w,\W,\s,\S,\d,\D)
      #
      suspend tab(Re__any(C))
   end


   private Re_MatchReg(tokList,groupNbr)
      #
      #  Match parenthesized group and assign matched string to list Re_ParenGroup
      #
      local p,s
      p := &pos
      /Re_ParenGroups := []
      every Re_match1(tokList,1) do {
         while *Re_ParenGroups < groupNbr do put(Re_ParenGroups)
         s := &subject[p:&pos]
         Re_ParenGroups[groupNbr] := s
         suspend s
      }
      Re_ParenGroups[groupNbr] := &null
   end


   private Re_WordBoundary()
      #
      #  Match word-boundary (\b)
      #
      suspend ((pos(1),any(Re_WordChars)) | 
               (pos(0),move(-1),tab(any(Re_WordChars))) | 
               (move(-1),(tab(any(Re_WordChars)),any(Re_NonWordChars)) | 
                (tab(any(Re_NonWordChars)),any(Re_WordChars))),"")
   end


   private Re_NonWordBoundary()
      #
      #  Match non-word-boundary (\B)
      #
      suspend ((pos(1),any(Re_NonWordChars)) |
               (pos(0),move(-1),tab(any(Re_NonWordChars))) |
               (move(-1),(tab(any(Re_WordChars)),any(Re_WordChars)) |
                (tab(any(Re_NonWordChars)),any(Re_NonWordChars)),""))
   end


   private Re_MatchParenGroup(n)
      #
      #  Match same string matched by previous parenthesized group (\N)
      #
      local s
      suspend if s := \Re_ParenGroups[n] then =s else ""
   end


   ###################  Control Operation Procedures  ###################


   private Re_ArbNo(tok)
      #
      #  Match any number of times (*)
      #
      suspend "" | (Re_tok_match(tok) & Re_ArbNo(tok))
   end


   private Re_OneOrMore(tok)
      #
      #  Match one or more times (+)
      #
      suspend Re_tok_match(tok) & Re_ArbNo(tok)
   end


   private Re_NToMTimes(tok,n,m)
      #
      #  Match n to m times ({n,m}
      #
      suspend Re_NTimes(tok,n) & Re_ArbNo(tok)\(m - n + 1)
   end


   private Re_NOrMoreTimes(tok,n)
      #
      #  Match n or more times ({n,})
      #
      suspend Re_NTimes(tok,n) & Re_ArbNo(tok)
   end


   private Re_NTimes(tok,n)
      #
      #  Match exactly n times ({n})
      #
      if n > 0 then
         suspend Re_tok_match(tok) & Re_NTimes(tok,n - 1)
      else suspend
   end


   private Re_ZeroOrOneTimes(tok)
      #
      #  Match zero or one times (?)
      #
      suspend "" | Re_tok_match(tok)
   end


   private Re_Alt(tokList1,tokList2)
      #
      #  Alternation (|)
      #
      suspend Re_match1(tokList1 | tokList2,1)
   end

   private Re_TabMatch(s)
      suspend Re__tabmatch(s)
   end

   ###################  Case Independence Procedures  ###################

   private static Re_c_tabmatch(s)
      suspend tab(caseless_match(s))
   end

   private static Re_c_any(c)
      return any(caseless_cset(c))
   end

   private static Re_c_upto(c)
      suspend upto(caseless_cset(c))
   end

end
