#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import util, ipl.lists, ipl.pdco

class TableContent(SelectableScrollArea)
   public override calculate_line_height()
      local t, m, h, r, e, i
      t := []
      m := 0
      every h := (!parent.table_header.children).calculate_line_height(self.cbwin) do {
         if integer(h) then
            m <:= h
         else
            put(t, h)
      }
      #
      # Easy case, all columns report fixed line heights, so the line height for the
      # table is the maximum.
      if *t = 0 then
         return m

      r := list(*t[1], m)
      every e := !t do {
         *e = *contents | syserr("Inconsistent table column line height list sizes returned")
         every i := 1 to *r do
            r[i] <:= e[i]
      }

      return r
   end

   public slice(col)
      suspend (!contents)[col]
   end

   public get_cell(line, col)
      return contents[line, col]
   end

   public override calculate_subject_width()
      return parent.get_total_column_width()
   end

   # Synch buttons because of the horizontal movement.
   public synch_header()
      parent.table_header.synch_with_content()
   end

   public override on_hsb()
      SelectableScrollArea.on_hsb()
      synch_header()
   end

   public override handle_key_right(e)
      SelectableScrollArea.handle_key_right(e)
      synch_header()
   end

   public override handle_key_left(e)
      SelectableScrollArea.handle_key_left(e)
      synch_header()
   end

   public get_column(n)
      return parent.table_header.children[n]
   end

   #
   # Return the column under the current x, y cursor.
   #
   public get_column_under_pointer(e)
      local c
      view.in_region(e) | fail
      every c := !parent.table_header.children do
         if c.x <= e.x < c.x + c.w then
            return c
   end

   public override draw()
      local yp, i, j, info, h, lh, r, cols, col, cc, W

      r := view.get_cbwin_clip()

      info := get_line_info(r) | fail
      h := get_line_height()

      cols := parent.table_header.children
      use {
         W := view.cbwin.clone(), 
         {
            every j := 1 to *cols do {
               col := cols[j]
               # If the column is visible
               if cc := view.cbwin.drawable(col.x, r.y, col.w, r.h) then {
                  # Clip on the column.
                  W.clip!cc
                  yp := r.y - info.offset
                  # Write each line in this column
                  every i := info.first to info.last do {
                     lh := integer(h) | h[i]
                     col.draw_cell(W, self.contents[i, j], i, j, yp, lh)
                     yp +:= lh
                  }
               }
            }
         }
      }
      # Call the superclass draw to do the selection, highlight etc.
      SelectableScrollArea.draw()
   end

   public override draw_line_data(xp, yp, lh, i)
   end
end


class TableHeader(Component)
   public
      which_highlight,
      going_left,
      scroll_ticker,
      scroll_ticker_interval

   public static const
      SCROLL_INCREMENT

   private static init()
      SCROLL_INCREMENT := env_scale("OI_TABLEHEADER_SCROLL_INCREMENT") | scale(20)
   end

   #
   # Set the draggable columns behaviour.  If set, the columns can be moved.
   #
   public set_draggable_columns(s)
      allow_drop_flag := allow_drag_flag := need_flag(s)
      link
   end

   public override get_default_height()
      local hh, col
      hh := 0
      every col := !children do
         hh <:= col.get_preferred_height()
      return hh
   end

   public which_column(e)
      local c
      in_region(e) | fail
      every c := !children do
         if c.in_region(e) then
            return c
   end

   public override define_dnd_pointers(drag)
      cbwin.copy_pointer("dnd negative", Dialog.DND_NEGATIVE_POINTER)
      cbwin.copy_pointer("dnd positive", "sb h double arrow")
   end

   public check_ticker(d)
      scroll_ticker_interval := Gui.style.distance2ticker_rate(d)
      scroll_ticker.change_time(scroll_ticker_interval)
      # Start it (if it isn't already running)
      scroll_ticker.start()
   end

   public get_leftmost_visible_column()
      local c
      every c := !children do
         if intersect(c) then
            return c
   end

   public get_rightmost_visible_column()
      local c
      every c := back(children) do
         if intersect(c) then
            return c
   end

   public scroll_tick()
      local tc
      tc := parent.table_content
      repeat {
         if \going_left then {
            tc.set_area_x(tc.get_area_x() - SCROLL_INCREMENT)
            set_which_highlight(get_leftmost_visible_column())
         } else {
            tc.set_area_x(tc.get_area_x() + SCROLL_INCREMENT)
            set_which_highlight(get_rightmost_visible_column())
         }
         parent_dialog.update_drop()
         synch_with_content()
         scroll_ticker.sleep(scroll_ticker_interval)
      }
   end

   public override can_drag(ev)
      local c
      every c := !children do {
         if \c.is_down then {
            c.clear_down()
            return c
         }
      }
   end

   public override drag_event(drag, e)
      local c, rhs
      drag.get_source() === self | fail
      if \parent.table_content.hsb & \which_highlight then {
         rhs := min(x + w, children[-1].x + children[-1].w)
         if e.x < x then {
            going_left := &yes
            check_ticker(x - e.x)
            return
         } else if e.x >= rhs then {
            going_left := &no
            check_ticker(e.x - rhs)
            return
         }
      }
      scroll_ticker.stop()
      c := which_column(e)
      set_which_highlight(c)
      return \c
   end

   public override can_drop(drag, e)
      return drag.content ~=== \which_highlight
   end

   public override perform_drop(drag, drop, e)
      local i, j
      i := drag.content.get_column_index()
      j := drop.content.get_column_index()
      every lmove(!parent.table_content.contents, i, j)
      reposition_index(i, j)
      layout()
      parent.invalidate()
      return
   end

   public override drag_reset(e)
      scroll_ticker.stop()
      set_which_highlight()
      # Resynch since the components in the table header may have
      # moved; we can't do this in perform_drop since the held count
      # is non-zero then.
      parent_dialog.resynch_pointer()
   end

   public set_which_highlight(x)
      if which_highlight ~=== x then {
         (\which_highlight).invalidate()
         which_highlight := x
         (\which_highlight).invalidate()
      }
      link
   end

   public synch_with_content()
      local dx
      dx := self.x - parent.table_content.get_area_x() - children[1].x
      every (!self.children).shift(dx, 0)
      invalidate()
   end

   public override layout()
      local i, b
      i := self.x - parent.table_content.get_area_x()
      every b := !self.children do {
         b.x := i
         b.y := self.y
         # b.w_spec is set below from the column width.
         b.w := b.w_spec
         b.h := self.h
         b.layout()
         i +:= b.w
      }
   end

   public override new()
      Component.new()
      scroll_ticker := Dispatcher.new_task{scroll_tick()}
      return
   end
end


#
# This class displays a table, the columns of which are set up
# using TableColumns.
#
class Table(Component)
   public 
      table_header,
      table_content,
      head_h,
      no_more_sizing

   public override initially()
      if *table_header.children = 0 then
         runerr("No TableColumns in Table")
      Component.initially()
   end

   #
   # Return the nth `TableColumn`.
   #
   public get_column(n)
      return table_header.children[n]
   end

   public get_contents()
      return self.table_content.get_contents()
   end

   #
   # Move to the given position.  Either parameter may be omitted.
   # :Parameters :
   # :  `line` - The line to move to
   # :  `horiz` - The left offset to move to
   #
   public goto_pos(line, horiz)
      self.table_content.goto_pos(line, horiz)
   end

   #
   # Ensure the given line is visible
   #
   public ensure_line_visible(line) 
      self.table_content.ensure_line_visible(line) 
   end

   #
   # Set the contents of the table.  The parameter should be a
   # two dimensional list.  Each element of the list should
   # correspond to one line of the table.
   # :Parameters :
   # :  `x` - The contents
   #
   public set_contents(x)
      self.table_content.set_contents(x)
      link
   end

   #
   # Call this method if the contents list, previously
   # set with `set_contents()`, has changed.
   #
   public contents_changed()
      self.table_content.contents_changed()
      link
   end

   public clear_selections()
      self.table_content.clear_selections()
      link
   end

   public set_draggable_cursor(s)
      self.table_content.set_draggable_cursor(s)
      link
   end

   public set_motion_cursor(s)
      self.table_content.set_motion_cursor(s)
      link
   end

   public set_selection_on_key_moves(s)
      self.table_content.set_selection_on_key_moves(s)
      link
   end

   public set_show_over(s)
      self.table_content.set_show_over(s)
      link
   end

   #
   # Return a list of lines selected
   # :Returns :
   # :  A list of lines currently selected
   #
   public get_selections()
      return self.table_content.get_selections()
   end

   #
   # Set the current selections to the list l, which is a list of
   # line numbers.
   # :Parameters :
   # :  `l` - The list of item numbers.
   #
   public set_selections(l)
      self.table_content.set_selections(l)
      link
   end

   #
   # Set the cursor
   #
   public set_cursor(line)
      self.table_content.set_cursor(line)
      link
   end

   #
   # Return item currently under the clicked cursor
   #
   public get_cursor()
      return self.table_content.get_cursor()
   end

   #
   # Return line currently under the clicked cursor
   #
   public line_get_cursor()
      return self.table_content.object_get_cursor()
   end

   #
   # Get the number of the first visible line
   #
   public get_first_line()
      return self.table_content.get_first_line()
   end

   #
   # The index of the last line in the area, or zero if there are no
   # lines.
   #
   public get_last_line()
      return self.table_content.get_last_line()
   end

   public get_line_under_pointer(e)
      return self.table_content.get_line_under_pointer(e)
   end

   public get_column_under_pointer(e)
      return self.table_content.get_column_under_pointer(e)
   end

   public set_draggable_columns(s)
      table_header.set_draggable_columns(s)
      link
   end

   #
   # Add the given TableColumn to the Table.
   # :Parameters :
   # :  `c` - The column to add.
   # :  `i` - The index to add at; if omitted then the new column
   #            is appended to the end.
   #
   public add_column(c, i)
      table_header.add(c, i)
      link
   end

   #
   # Get the columns of the table
   #
   public get_columns()
      return table_header.get_children()
   end

   #
   # Configure the table selection mode.
   # :Parameters :
   # :  `m` - a constant from `Select`
   public set_select_mode(m)
      self.table_content.set_select_mode(m)
      link
   end

   #
   # Get the total width of all columns
   #
   public get_total_column_width()
      return Sum{ (!self.table_header.children).w_spec }
   end

   #
   # Compute the w_spec of the columns, including those whose width is unset.
   #
   public size_columns()
      local col, l, sw, dw, av

      l := []
      sw := 0
      every col := !self.table_header.children do {
         if \col.column_width then {
            col.w_spec := max(col.column_width, TableColumn.MIN_COLUMN_WIDTH)
            sw +:= col.w_spec
         } else 
            put(l, col)
      }
      
      if *l = 0 then
         return

      table_content.invalidate_subject_width()

      # The width to give the auto size columns.
      av := table_content.predict_view_width(self.w - border.get_total_width(), &yes) - sw
      dw := max(av / *l, TableColumn.MIN_COLUMN_WIDTH)

      every l[1 to *l - 1].w_spec := dw
      l[-1].w_spec := max(av - dw * (*l - 1), TableColumn.MIN_COLUMN_WIDTH)
   end

   public override get_default_height(dw)
      dw -:= border.get_total_width()
      return self.table_header.get_preferred_height(dw) + 2 * Gui.BORDER_WIDTH + 
         self.table_content.get_preferred_height(dw) + border.get_total_height()
   end

   public override get_default_width()
      local col, tw
      tw := 0
      # No go if we have any auto-size columns...
      every col := !self.table_header.children do
         tw +:= \col.column_width | fail
      return border.get_total_width() + tw
   end

   public override layout()
      local hw, hh

      if /no_more_sizing then
         size_columns()

      hw := self.w - border.get_total_width()
      hh := self.table_header.get_preferred_height(hw)

      # The 2 * Gui.BORDER_WIDTH is the decoration between the header and the content.
      self.table_content.x := self.x + border.get_l_inset()
      self.table_content.y := self.y + hh + border.get_t_inset() + 2 * Gui.BORDER_WIDTH
      self.table_content.w := hw
      self.table_content.h := self.h - hh - border.get_total_height() - 2 * Gui.BORDER_WIDTH
      self.table_content.layout()

      self.table_header.x := self.x + border.get_l_inset()
      self.table_header.y := self.y + border.get_t_inset()
      self.table_header.w := hw
      self.table_header.h := hh
      self.table_header.layout()
   end

   public override display()
      border.draw_rect(self.cbwin, self)
      Gui.style.draw_raised_rectangle(self.cbwin, 
                                  self.x + border.get_l_inset(), 
                                  self.y + self.table_header.h + border.get_t_inset(), 
                                  self.w - border.get_total_width(), 
                                  2 * Gui.BORDER_WIDTH,
                                  Gui.BORDER_WIDTH)
      self.display_children()
   end

   public on_table_content(ev, src, type)
      # Fire the event with self as source.
      fire(type, ev)
   end

   #
   # Return the component used to display the table contents, which is a
   # subclass of SelectableScrollArea.
   #
   public get_table_content()
      return self.table_content
   end

   public create_table_content()
      return TableContent()
   end

   public create_table_header()
      return TableHeader()
   end

   public override new()
      Component.new()
      self.preferred_focus := self.table_content := create_table_content()
      self.table_content.set_border(NullBorder())
      self.set_border(SunkenBorder())
      every self.table_content.connect(self.on_table_content,
                                       Event.CURSOR_MOVED | Event.SELECTION_CHANGED)
      self.add(table_content)
      self.table_header := create_table_header()
      self.add(table_header)
      self.set_constraint("x_fill", &yes)
      self.set_constraint("y_fill", &yes)
      self.set_constraint("x_weight", 1.0)
      self.set_constraint("y_weight",  1.0)
      return
   end
end
