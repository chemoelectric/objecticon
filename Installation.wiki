#summary Installation of Object Icon
<wiki:toc max_depth="3" />
== Prerequisites ==

 * GNU make
 * autoconf (at least version 2.61), if you build direct from the subversion source
 * gcc, or clang
 
Please note that Object Icon runs from the directory you compile it in (there is no `make install` step), so please bear that in mind when choosing where you extract the tar file, or checkout the subversion repository from.

== Debian packages ==
If you are using a debian-based system, the following may be helpful.

If compiling from the subversion source, rather than the tar file, you need the `autoconf` package.

To compile a text-only basic system, you need
{{{
        gcc or clang
        make
}}}

To compile a graphics system, you also need
{{{
        pkg-config
        libx11-dev
        libxrender-dev
        libxft-dev
        libjpeg-dev
}}}

For a graphics system, the package `oxygen-icon-theme` is also recommended in order to provide some standard icons.

Finally, to compile the optional dynamically loaded libraries (cairo, ssl and mysql), you need
{{{
        librsvg2-dev
        libcairo2-dev
        libpango1.0-dev
        libssl-dev
        libmysqlclient-dev
}}}

== Compiling from the subversion source repository ==
Use the following command to checkout a read-only copy of the source code :-

{{{svn co http://objecticon.googlecode.com/svn/trunk objecticon}}}

This will create a directory `objecticon` under the present directory (you can change the last parameter to create a different directory name if you want).

Then `cd` into that directory and run the command `autoconf`.  This will create a `configure` script.

Then proceed just the same as if you had downloaded the .tar.gz file, as explained below.

If you later wish to update your copy of the repository, `cd` into the directory and run the following :-

{{{svn up}}}

{{{make clean}}}

Then run `autoconf` again, and then `configure`, and then proceed as before.
== Compiling from a tar.gz file ==

Extract the source code from the .tar.gz file with a command like

{{{tar xfz objecticon-1.0.tar.gz}}}

This will create a directory `objecticon-1.0` under the current directory.  Obviously the
version number may be different.  You can rename this directory if you like.

Change to the new directory and run 

{{{./configure}}}

This command accepts various options - run

{{{./configure --help}}}

to see them.

If you are using the `clang` C compiler, specify this with :-

{{{CC=clang ./configure}}}

The `configure` script prints a summary of features when it finishes. For example.

{{{
Summary:-
X11 graphics           : yes
jpeg library           : yes
png library            : yes
zlib compression       : yes
dynamic loading        : yes
mysql lib              : yes
cairo lib              : yes
ssl lib                : yes
}}}

The meaning of these various options is as follows.

 * *X11 graphics* - Determines whether the Icon graphics facilities are built. The following two options only apply if this is 'yes'.
 * *jpeg library* -Allows loading of jpeg images.
 * *png library* -Allows loading of png images.
 * *zlib compression* - This allows icode files to be compressed with the -Z flag given to `oit`.
 * *dynamic loading* -Allows shared library (.so) files containing native functions to be loaded at runtime.
 * *mysql lib* -Allows a dynamic library to be built which provides an interface to mysql (package `mysql`).  Neither this option, nor the following dynamic libraries, have any effect either way on the runtime system proper.
 * *cairo lib* -Allows a dynamic library to be built which provides an interface to cairo graphics (package `cairo`).
 * *ssl lib* -Allows a dynamic library to be built which provides an interface to the openssl library (see the class `io.SsslStream`).

If you later wish to run `configure` again, please remember to run `make clean` afterwards in order to remove any object files built under the previous configuration.

== Compilation ==
After running `configure` successfully, just run the command
{{{
make
}}}
to build everything.  Note that GNU make is required.

== Testing ==
After `make` has completed successfully, you can optionally run some tests, as follows :-
{{{
make test
}}}
Various output will follow, which should hopefully end with the message "Testing successful."  If not, the problem with the failed test can be examined by comparing the expected output of a test with the actual output.  For example, if the io test failed, run
{{{
cd test
diff io.out io.std
}}}
to see the problem.

== Installing ==
There is no installation stage; rather Object Icon runs from the directory it was compiled in.  

== Environment variables ==
Object Icon requires some environment variables to be setup correctly.  To make doing this a bit easier, a file named `paths.sh` is created by `configure`, which contains appropriate definitions.

Include this file by adding a line like this to your `.bashrc` file (or equivalent); obviously the actual path will vary, and note the dot at the beginning of the line.
{{{
. /opt/objecticon-2.xx/paths.sh
}}}

If you are using bash, you can also use the `source` command instead of the dot syntax; but don't try to run `paths.sh` directly, since its contents must be loaded into the current shell environment.

== Libref documentation ==
You might also create a local copy of the auto-generated library documentation.  It is not done by default because it is rather large (about 25MB).  If you want this, run
{{{
make libref
}}}
This command will take a couple of minutes to run.  A directory `libref` is created, and contains the top-level file of the documentation, `index.html`.

