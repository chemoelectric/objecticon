package ipl.filegui

import
   ipl.sort,
   ipl.strings,
   ipl.pdco,
   gui,
   io,
   xdg,
   util

class ListEntryWithIcon(ListEntry)
   package readable
      icon
end

class AnnotatedListEntryWithIcon(ListEntryWithIcon)
   package readable
      annotation

   public annotate_name()
      annotation := name
      link
   end

   public annotate_date(now)
      local t, tf
      /now := Time.get_system_seconds()
      t := lstat.mtime
      tf := if now - t > 180 * 86400 then
         Time(t + Time.SYSTEM_BASE_OFFSET).format("NNN d yyyy")
      else
         Time(t + Time.SYSTEM_BASE_OFFSET).format("NNN d HH:mm")
      annotation := name || " (" || tf || ")"
      link
   end

   public annotate_size()
      local z, zf
      z := lstat.size
      zf := if z < 1024 then
         Format.numeric_to_string(z, 0, ',') || "B"
      else if z < 1024*1024 then
         Format.numeric_to_string(z/1024.0, 1, ',') || "KB"
      else
         Format.numeric_to_string(z/(1024.0*1024.0), 1, ',') || "MB"
      annotation := name || " (" || zf || ")"
      link
   end
end

class AnnotatedIconFilesItemPaint(IconFilesItemPaint)
   public override get_string(data)
      return data.annotation
   end
end

class ColorFilesItemPaint(WithCloneItemPaint)
   protected override make_clone(W)
      return W.clone()
   end

   public get_color(data)
      local st
      st := data.lstat
      return case st.mode_str[1] of {
         "d" : "purple"
         "l" : "cyan"
         "p" : "orange"
         "s" : "dark gray"
         "b" : "gray"
         "c" : "gray"
         default : {
            if st.mode_str[-7] == ("x" | "s") then
               "green"
            else case map(string(Files.get_extension(data.name))) of {
               "cmd"|"exe"|"com"|"btm"|"bat" : "green"
               "tar"|"tgz"|"arj"|"taz"|"lzh"|"zip"|"z"|"Z"|"gz"|"xz"|"bz2"|"rar" : "red"
               "jpg"|"jpeg"|"png"|"gif"|"bmp"|"xbm"|"xpm": "blue"
               "mp4"|"flv"|"avi"|"wmv"|"webm"|"3gp"|"mpeg"|"mpg"|"m4v"|"mkv": "pink" 
            }
         }
      } | "black"
   end

   public get_string(data)
      return data.name
   end

   public override get_width(W, data)
      return W.text_width(get_string(data))
   end

   public override get_constant_height(W)
      return W.get_line_height()
   end

   public override get_size(W, data)
      return Size(get_width(W, data), W.get_line_height())
   end

   public override draw(W, data, x, y)
      W := get_clone(W).set_fg(get_color(data))
      W.draw_string(x, y + W.get_line_ascent(), get_string(data))
   end
end

$if _PNG
$load PDF_16 "fileicons/pdf.png"
$load IMAGE_16 "fileicons/image.png"
$load VIDEO_16 "fileicons/video.png"
$load ARCHIVE_16 "fileicons/archive.png"
$load AUDIO_16 "fileicons/audio.png"
$load EXE_16 "fileicons/exe.png"
$load CHARDEVICE_16 "fileicons/chardevice.png"
$load BLOCKDEVICE_16 "fileicons/blockdevice.png"
$load SYMLINK_16 "fileicons/symlink.png"
$load SOCKET_16 "fileicons/socket.png"
$load PIPE_16 "fileicons/pipe.png"
$load HTML_16 "fileicons/html.png"
$load TEXT_16 "fileicons/text.png"
$load FILE_16 "fileicons/file.png"
$load FOLDER_16 "fileicons/folder.png"
$else
$load PDF_16 "fileicons/pdf.gif"
$load IMAGE_16 "fileicons/image.gif"
$load VIDEO_16 "fileicons/video.gif"
$load ARCHIVE_16 "fileicons/archive.gif"
$load AUDIO_16 "fileicons/audio.gif"
$load EXE_16 "fileicons/exe.gif"
$load CHARDEVICE_16 "fileicons/chardevice.gif"
$load BLOCKDEVICE_16 "fileicons/blockdevice.gif"
$load SYMLINK_16 "fileicons/symlink.gif"
$load SOCKET_16 "fileicons/socket.gif"
$load PIPE_16 "fileicons/pipe.gif"
$load HTML_16 "fileicons/html.gif"
$load TEXT_16 "fileicons/text.gif"
$load FILE_16 "fileicons/file.gif"
$load FOLDER_16 "fileicons/folder.gif"
$endif

#
# An `ItemPaint` which adds an appropriate icon to each lines displayed.  The data should be
# `ListEntryWithIcon` instances.
#
class IconFilesItemPaint(ItemPaint)
   public static const ICON_SIZE

   private static init()
      ICON_SIZE := env_scale("OI_GUI_FILE_ICON_SIZE") | scale(16)
      ImageCache.
         name_image("fi.PDF_16", PDF_16).
         name_image("fi.IMAGE_16", IMAGE_16).
         name_image("fi.VIDEO_16", VIDEO_16).
         name_image("fi.ARCHIVE_16", ARCHIVE_16).
         name_image("fi.AUDIO_16", AUDIO_16).
         name_image("fi.EXE_16", EXE_16).
         name_image("fi.CHARDEVICE_16", CHARDEVICE_16).
         name_image("fi.BLOCKDEVICE_16", BLOCKDEVICE_16).
         name_image("fi.SYMLINK_16", SYMLINK_16).
         name_image("fi.SOCKET_16", SOCKET_16).
         name_image("fi.PIPE_16", PIPE_16).
         name_image("fi.HTML_16", HTML_16).
         name_image("fi.TEXT_16", TEXT_16).
         name_image("fi.FILE_16", FILE_16).
         name_image("fi.FOLDER_16", FOLDER_16)

      try_xdg("fi.folder", "folder", "fi.FOLDER_16")
      try_xdg("fi.symlink", "emblem-symbolic-link", "fi.SYMLINK_16")
      try_xdg("fi.exe", "application-x-executable", "fi.EXE_16")
      resize("fi.pdf", "fi.PDF_16")
      resize("fi.image", "fi.IMAGE_16")
      resize("fi.video", "fi.VIDEO_16")
      resize("fi.archive", "fi.ARCHIVE_16")
      resize("fi.audio", "fi.AUDIO_16")
      resize("fi.chardevice", "fi.CHARDEVICE_16")
      resize("fi.blockdevice", "fi.BLOCKDEVICE_16")
      resize("fi.socket", "fi.SOCKET_16")
      resize("fi.pipe", "fi.PIPE_16")
      resize("fi.html", "fi.HTML_16")
      resize("fi.text", "fi.TEXT_16")
      resize("fi.file", "fi.FILE_16")
   end

   private static resize(dest, src)
      ImageCache.copy_key_with_resize(dest, src, ICON_SIZE, ICON_SIZE)
   end

   private static try_xdg(key, icon, alt)
      local k
      k := IconTheme.find_icon_and_cache(icon, ICON_SIZE,, &yes) |
         ImageCache.get_key_with_resize(alt, ICON_SIZE, ICON_SIZE) |
         runerr("Failed to get key to setup file icons: " || &why)
      ImageCache.copy_key(key, k)
   end

   public override get_width(W, data)
      return ICON_SIZE + Gui.TEXT_INSET + W.text_width(get_string(data))
   end

   public override get_constant_height(W)
      return max(W.get_line_height(), 2 * Gui.Y_INSET + ICON_SIZE)
   end

   public override get_size(W, data)
      return Size(get_width(W, data), get_constant_height(W))
   end

   public get_string(data)
      return data.name
   end

   public get_xdg_for_file(f)
      return Mime.find_icon_for_file_and_cache(f, ICON_SIZE,, &yes) | 
             IconTheme.find_icon_and_cache("text-x-generic", ICON_SIZE,, &yes)
   end

   public get_icon(data)
      local st, k
      st := data.lstat
      k := case st.mode_str[1] of {
         "d" : "fi.folder"
         "l" : "fi.symlink"
         "s" : "fi.socket"
         "p" : "fi.pipe"
         "b" : "fi.blockdevice"
         "c" : "fi.chardevice"
         default : {
            if st.mode_str[-7] == ("x" | "s") then
               "fi.exe"
            else {
               get_xdg_for_file(data.name) | case map(string(Files.get_extension(data.name))) of {
                  "pdf": "fi.pdf"
                  "cmd"|"exe"|"com"|"btm"|"bat" : "fi.exe"
                  "tar"|"tgz"|"arj"|"taz"|"lzh"|"zip"|"z"|"Z"|"gz"|"xz"|"bz2"|"rar" : "fi.archive"
                  "jpg"|"jpeg"|"png"|"gif"|"bmp"|"xbm"|"xpm": "fi.image"
                  "mp4"|"flv"|"avi"|"wmv"|"webm"|"3gp"|"mpeg"|"mpg"|"m4v"|"mkv": "fi.video"
                  "mp3"|"wav"|"mid"|"rm": "fi.audio"
                  "htm"|"html": "fi.html"
                  "txt"|"doc"|"rtf": "fi.text"
               }
            }
         }
      } | "fi.file"
      return ImageCache.get(k) | syserr("Bad cache key in IconFilesItemPaint")
   end

   public override draw(W, data, x, y, w, h)
      local i
      if is(data, ListEntryWithIcon) then {
         if not(i := \data.icon) then
            i := data.icon := get_icon(data)
      } else
         i := get_icon(data)
      i.copy_to(,,,, W, x + (ICON_SIZE - i.get_width()) / 2, y + (h - i.get_height()) / 2)
      x +:= ICON_SIZE + Gui.TEXT_INSET
      w -:= ICON_SIZE + Gui.TEXT_INSET
      W.draw_string(x, y + (h + W.get_font_ascent() - W.get_font_descent()) / 2,
                    limit_text(W, get_string(data), w))
   end
end

#
# An `ItemPaint` for a string list of directories, which adds a folder
# icon to each line displayed.
#
#
class StringDirItemPaint(IconFilesItemPaint)
   public override get_string(data)
      return data
   end

   public override get_icon(data)
      return ImageCache.get("fi.folder")
   end
end

#
# A `SuggestField` for selecting files.
#
class FileSuggestField(SuggestField)
   public
      cwd,
      matches,
      prefix,
      dir_list,
      dir_list_name,
      directories_only_flag,
      show_hidden_files_flag,
      pats

   public set_directories_only(s)
      self.directories_only_flag := need_flag(s)
      link
   end

   public set_show_hidden_files(s)
      self.show_hidden_files_flag := need_flag(s)
      link
   end

   # Set the "cwd" from which relative paths are resolved.  May be
   # `&null`, in which case the true cwd is used.
   #
   # :Parameters :
   # :  `d` - something convertible to a `FilePath`, or &null.
   #
   public set_cwd(d)
      self.cwd := need_FilePath(\d).absolute() | &null
      link
   end

   # Return an absolute `FilePath` (based on `cwd`) representing the
   # current contents.
   #
   public get_path()
      return FilePath(contents).absolute(cwd)
   end

   # Set a list of `ipl.wildcard.Wildcard` instances to use as
   # patterns to filter the files displayed; may be `&null`, in
   # which case no filtering is done.
   #
   public set_patterns(l)
      pats := l
      link
   end

   # Clear any cached values of the directory list.
   #
   public refresh()
      dir_list := dir_list_name := &null
      link
   end

   private match_entry(e)
      local n
      n := e.name
      if /show_hidden_files_flag & Files.is_hidden(n) then
         fail
      if e.stat.mode_str[1] == "d" then {
         if not Files.is_relative_dir(n) then
            return
      } else {
         n := Files.standard_case(n)
         if /directories_only_flag & (/pats | (!pats).match(n) = *n + 1) then
            return
      }
   end

   private do_dir_list(p)
      local s
      s := p.canonical().str()
      if dir_list_name ~=== s then {
         dir_list := qsort(Files.ucs_list(s, ListEntryWithIcon), Files.name_cmp) | []
         dir_list_name := s
      }
   end

   #
   # Calculate the matches list and prefix string from the current
   # contents.  A new contents can then be calculated by simply
   # appending the prefix to the name of a member of the matches list.
   #
   private calc_matches()
      local path, s, t
      # Note that we don't take canonical() here; that is done in
      # do_dir_list() above, since we use path.parent() below.
      # (Consider cwd=/tmp and we input "."; path is then /tmp/.)
      path := get_path()
      matches := []
      if *contents = 0 | any(Files.PATH_SPECIALS, contents[-1]) then {
         do_dir_list(path)
         every t := !dir_list do {
            if match_entry(t) then
               put(matches, t)
         }
         prefix := contents
      } else {
         do_dir_list(path.parent())
         s := Files.standard_case(path.get(-1))
         every t := !dir_list do {
            if match_entry(t) & match(s, Files.standard_case(t.name)) then
               put(matches, t)
         }
         prefix := contents[1:-*s]
      }
   end

   protected override do_request()
      calc_matches()
      # No point in a list which is a copy of what we already have
      if *matches = 1 & endswith(Files.standard_case(contents),
                                 Files.standard_case(matches[1].name)) then
         return []
      return matches
   end

   public override convert_element(o)
      if /directories_only_flag & o.stat.mode_str[1] == "d" then
         return prefix || o.name || Files.PATH_SEPARATOR
      else
         return prefix || o.name
   end

   public override create_popup()
      return ItemPaintList().
         set_item_paint(IconFilesItemPaint()).
         set_item_border(EmptyBorder().
                            set_insets(Gui.TEXT_INSET, Gui.TEXT_INSET, 0, 0).
                            set_x_align(Align.L))
   end

   #
   # Get the longest common initial name from the matches list.  Eg if
   # we have ["mark", "mary", "marion"], we get "mar".
   #
   private get_longest_prefix()
      return coprefix(ipl.pdco.List{(!matches).name}) | u""
   end

   public override handle_tab(e)
      local t, o, l
      if \popup then {
         if \select_using_enter_flag & o := popup.object_get_cursor() then {
            # Tab has been pressed with the cursor in the list.
            # Insert the name (with a trailing / for a directory)
            t := prefix || if o.stat.mode_str[1] == "d" then
               o.name || Files.PATH_SEPARATOR
            else
               o.name
            assign_contents(t,, e)
            if /changed then
               keep_closed()
         } else {
            # Calculate the string we could insert.  If not
            # directories-only, and we have a single directory, append
            # a /.  So for example
            # "/ho" + tab -> "/home/" rather than "/home"
            t := prefix || if /directories_only_flag & *matches = 1 & matches[1].stat.mode_str[1] == "d" then
               matches[1].name || Files.PATH_SEPARATOR
            else
               get_longest_prefix()

            # If the calculated string is longer than what we have,
            # insert it.  Otherwise, if we have selected from the list
            # then trigger a change to refresh the list.  If in
            # directories only mode, append a "/"; this will show the
            # next dir.  So for example "/ho", press tab, choose "/home",
            # press tab again to set to "/home/" and show its contents.

            if *contents < *t then
               assign_contents(t,, e)
            else if *popup.get_selections() = 1 then {
               if /directories_only_flag then
                  on_change(e)
               else
                  assign_contents(contents || Files.PATH_SEPARATOR,, e)
            } else
               keep_closed()
         }
      } else {
         # As above, calculate the string we could insert.
         l := do_request(&yes)
         t := prefix || if /directories_only_flag & *matches = 1 & matches[1].stat.mode_str[1] == "d" then
            matches[1].name || Files.PATH_SEPARATOR
         else
            get_longest_prefix()

         # Again as above, insert the string if it's longer.
         # Otherwise trigger a change.  The only special case is if we
         # are in directories mode and press tab whilst contents is an
         # unambiguous directory; in this case append a /, which will
         # show its contents.  Eg "/home" + tab -> set to "/home/" and
         # list contents.
         if *contents < *t then {
            assign_contents(t,, e)
            if *l > 1 then
               open_popup(l)
         } else if *contents = *t & \directories_only_flag & *matches = 1 & matches[1].stat.mode_str[1] == "d" then
            assign_contents(t || Files.PATH_SEPARATOR,, e)
         else
            open_popup(l)
      }
   end

   public override new()
      SuggestField.new()
      self.set_contents(u"")
      set_direction(Direction.DOWN)
      return
   end
end

# The border used to highlight which element of the path the mouse is
# over.
#
package class FileTrailBorder(LineBorder)
   public override draw(W, x, y, w, h)
      local W2
      use {
         W2 := Gui.style.get_dashed_clone(W),
         W2.draw_rectangle(x, y, w, h, line_width)
      }
   end
end

#
# A directory button in the FileTrail - everything other than "/" elements.
#
class FileTrailButton(TextButton)
   private readable p, tt

   private changed()
      parent.on_change(p.ucs())
   end

   # Set whether this element is disabled for input and displays "..."
   # rather than its normal filename.  If f is set, then spc gives the
   # amount of space available for the filename.  If null, it means
   # the whole area is available, but we need to end with dots anyway.
   #
   package set_dots(f, spc)
      local s
      if /f then {
         set_is_shaded(&no)
         set_label(p.get(-1))
         set_tooltip()
      } else {
         # Get the filename, but with dots at the end.
         s := p.get(-1)
         if *s < 3 then
            s := u"..."
         else
            s[-3:0] := u"..."
         while *s > 3 & cbwin.text_width(s) > \spc do
            s[-4:0] := u"..."
         set_is_shaded(&yes)
         set_label(s)
         set_tooltip(tt)
      }
   end

   public override new(p, tt)
      TextButton.new()
      self.p := p
      self.tt := tt
      set_dots()
      set_accepts_focus(&no)
      set_draw_own_shading(&yes)
      set_border(CompoundBorder().
                 set_outer(FileTrailBorder().set_line_width(Gui.DASHED_WIDTH)).
                 set_inner(EmptyBorder().
                           set_l_inset(Gui.TEXT_INSET).
                           set_r_inset(Gui.TEXT_INSET)).
                 set_x_align(Align.L))
      set_border_whilst_entered(&yes)
      connect(changed, Event.ACTION)
      return
   end
end

#
# A drop-down list in the FileTrail (shown by a "/" element).
#
class FileTrailList(ButtonOnlyList)
   private readable 
      p,        # The FilePath giving the path to this point
      child     # The optional child to the right, for setting the selection in the popup

   public override create_button()
      local l
      l := if p.size() = 1 then p.str() else Files.PATH_SEPARATOR
      return TextButton().set_label(l)
   end

   public override create_popup()
      return ItemPaintList().
         set_item_paint(IconFilesItemPaint()).
         set_item_border(EmptyBorder().
                            set_insets(Gui.TEXT_INSET, Gui.TEXT_INSET, 0, 0).
                            set_x_align(Align.L))
   end

   private match_entry(e)
      local n
      (e.stat.mode_str[1] == "d") | fail
      n := e.name
      if (/parent.show_hidden_files_flag & Files.is_hidden(n)) | Files.is_relative_dir(n) then
         fail
      return
   end

   protected override open_popup(ev)
      local e, i, l
      l := []
      every e := !Files.ucs_list(p.str(), ListEntryWithIcon) do {
         if match_entry(e) then
            put(l, e)
      }
      if *l = 0 then
         fail
      qsort(l, Files.name_cmp)
      # Clear the selection, but set the cursor as though selection was
      # set.  This is so we get an event even if we've clicked on the
      # child directory (if any).  Unless we represent the parent of the
      # FileTrail's cd, then this does represent a change of dir (namely
      # to a parent dir of the FileTrail's cd).  FileTrail will then
      # decided whether this represents a change and whether or not to
      # fire to the owner.
      set_selection_list(l)
      set_selection()
      ButtonOnlyList.open_popup(ev) | fail
      b.set_border_whilst_entered(&no)
      if i := Positions{(!l).name, \child} then
         popup.
            set_cursor(i).
            center_line(i)
   end

   private changed()
      local o
      o := object_get_selection()
      parent.on_change(p.child(o.name).ucs())
   end

   public override new(p, child)
      self.p := p
      self.child := child
      ButtonOnlyList.new()
      set_accepts_focus(&no)
      set_selection_list([])
      clear_constraints()
      b.set_border_whilst_entered(&yes).
         set_border(CompoundBorder().
                          set_outer(FileTrailBorder().set_line_width(Gui.DASHED_WIDTH)).
                          set_inner(EmptyBorder().
                                    set_l_inset(Gui.TEXT_INSET).
                                    set_r_inset(Gui.TEXT_INSET)))
      connect(changed, Event.SELECTION_CHANGED)
      connect(create b.set_border_whilst_entered(&yes), Event.POPUP_CLOSED)
      return
   end
end

# A component for displaying a path as a series of buttons which
# select an element of the path, or popup a list of sibling
# directories.  A `FileTrail.DIR_CHANGED_EVENT` event is fired
# when a directory is selected.
#
class FileTrail(Component)
   private
      path_str
   package
      show_hidden_files_flag

   public static const
      DIR_CHANGED_EVENT

   private static init()
      DIR_CHANGED_EVENT := "dir changed"
   end

   package on_change(s)
      if s ~== path_str then
         fire(DIR_CHANGED_EVENT, s)
   end

   # Configure whether or not to show hidden files in the directory
   # lists.
   #
   public set_show_hidden_files(s)
      self.show_hidden_files_flag := need_flag(s)
      link
   end

   public override layout()
      reset_all()
      Component.layout()
      check_limits()
   end

   # Set all the children back to their original state, as though we
   # have enough space to display everything.
   private reset_all()
      local c
      every c := !children do {
         c.set_is_hidden(&no)
         if is(c, FileTrailButton) then
            c.set_dots(&no)
      }
   end

   # Go through the children to see at what point one cannot be fully
   # displayed, and adjust accordingly to show a "..." element.
   private check_limits()
      local c, i, r, spc
      every c := children[i := 1 to *children] do {
         # Calculate the intersection with this component - may fail
         # if the child is completely obscured.
         r := intersect(c) | &null
         if /r | (r.w < c.w) then {
            # c is fully or partially obscured; everything to the
            # right of c is fully obscured, everything to the left is
            # fully visible.
            if is(c, FileTrailList) then {
               # c is a FileTrailList element; hide it and set the
               # FileTrailButton to the left (if any) to end with "..."
               c.set_is_hidden(&yes)
               children[i - 1].set_dots(&yes)
            } else if (spc := (\r).w - (c.border.l_inset + cbwin.text_width("..."))) > 0 then {
               # c is a FileTrailButton and has enough room to show
               # the "..." itself, and perhaps some of the filename.
               c.set_dots(&yes, spc)
            } else {
               # c is a FileTrailButton but hasn't enough room to show
               # the "..." itself.  So hide it, the FileTrailList to
               # the left, and show the dots in the FileTrailButton
               # two places to the left.
               c.set_is_hidden(&yes)
               children[i - 1].set_is_hidden(&yes)
               children[i - 2].set_dots(&yes)
            }
            break
         }
      }
   end

   public create_trail_list(p, child)
      return FileTrailList(p, child)
   end

   public create_trail_button(p, tt)
      return FileTrailButton(p, tt)
   end

   # Set the path to show to the given (ucs) string.  If the path is
   # not absolute, then it is converted to an absolute path, all
   # elements of which must be ucs, or failure occurs.
   #
   # :Parameters :
   # :  `p` - something convertible to a `FilePath`.
   #
   public set_path(p)
      local f, i, g
      # Ensure all elements are ucs.
      f := need_FilePath(p).canonical().ucs_path() | fail
      remove_all()
      path_str := f.ucs()
      every i := 2 to f.size() do {
         g := f.slice(1, i)
         if i > 2 then
            add(create_trail_button(g, f.slice(i - 1, 0).ucs()))
         add(create_trail_list(g, f.get(i)))
      }
      if f.size() > 1 then
         add(create_trail_button(f, f.get(-1)))
      # The rightmost element takes up the rest of the space to give
      # left alignment.
      add(create_trail_list(f).
            set_constraint("x_align", Align.L).
            set_constraint("x_weight", 1.0))
      if is_live() then {
         reset_layout()
         layout()
         invalidate()
      }
      link
   end

   public override new()
      Component.new()
      set_layout(GridLayout().set_dii(0).set_doi(0))
      set_constraint("x_fill", &yes)
      set_constraint("x_align", Align.L)
      set_constraint("x_weight", 1.0)
      # Set a path so that the component sizes correctly.
      set_path(FilePath(Files.get_roots()))
      return
   end
end

#
# A dialog for renaming a file.
#
class RenameDialog(NameDialog)
   private
      p

   public override on_okay_button(ev)
      local s
      s := name_field.get_contents()
      if upto(Files.PATH_SPECIALS, s) then {
         msg("Invalid character in filename entered")
         fail
      }
      if p.size() = 1 then
         msg("Can't rename a root directory")
      else {
         s := p.sibling(s).ucs()
         if Files.access(s) then
            msg("File already exists")
         else if Files.rename(p.str(), s) then {
            result := s
            dispose()
         }
         else
            msg("Failed: " || &why)
      }
   end

   public override init_dialog()
      local s, x
      s := name_field.get_contents()
      # Start with text selected, but not the extension.
      name_field.move_cursor(1).move_cursor(*s + 1, &yes)
      if not Files.is_directory(p.str()) & x := Files.get_extension(s) then
         name_field.move_cursor(*s - *x, &yes)
   end

   # The constructor requires a non-empty ucs string, being the file to be renamed.
   public override new(s)
      s := need_ucs(s)
      p := FilePath(s).canonical()
      NameDialog.new(p.get(-1))
      set_label("Rename file")
      name_field.set_size(scale(350))
      return
   end
end

#
# A dialog for creating a new directory
#
class NewDirectoryDialog(NameDialog)
   private
      p

   public override on_okay_button(ev)
      local s
      s := name_field.get_contents()
      if upto(Files.PATH_SPECIALS, s) then {
         msg("Invalid character in filename entered")
         fail
      }
      s := p.child(s).ucs()
      if Files.mkdir(s) then {
         result := s
         dispose()
      }
      else
         msg("Failed: " || &why)
   end

   # The constructor requires a ucs string, being the directory in
   # which the new directory is to be created.
   public override new(s)
      s := need_ucs(s)
      p := FilePath(s)
      NameDialog.new()
      set_label("New directory")
      name_field.set_size(scale(350))
      return
   end
end
