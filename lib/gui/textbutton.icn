#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import util

#
# A button with a text label.
#
# The size of the button can either be set using `set_size()`,
# be left to default to a size based on the given label.
#
class TextButton(Button, BorderWhilstEntered)
   public 
      paint,
      paint_down

   public override display()
      local p

      p := if /paint_down | (self.is_down === self.is_checked_flag) then
         paint
      else
         paint_down

      p.draw_rect(self.cbwin, border.float(self, p))

      if /border_whilst_entered_flag | \is_down | (is_unshaded() & \entered) then {
         if \self.is_down then {
            border.draw_down_rect(self.cbwin, self)
            border.draw_rev_rect(self.cbwin, self)
         } else if /self.is_checked_flag then
            border.draw_rect(self.cbwin, self)
         else
            border.draw_rev_rect(self.cbwin, self)
      }

      if should_draw_focus() then
         border.draw_focus_rect(self.cbwin, self)
   end

   #
   # Set the label.
   # :Parameters :
   # :  `x` - The label.
   #
   public set_label(x)
      return set_paint(paint_for_string(x))
   end

   public set_label_down(x)
      return set_paint_down(paint_for_string(x))
   end

   #
   # Set down image to use in the button
   #
   # :Parameters :
   # :  `x` - The down image
   #
   public set_image_down(x)
      return if /x then
         set_paint_down()
      else
         set_paint_down(ImagePaint().set_image(x))
   end

   #
   # Set an image to use in the button
   # :Parameters :
   # :  `x` - The image
   #
   public set_image(x)
      return set_paint(ImagePaint().set_image(x))
   end

   #
   # Set the up/down images (if any) to the strings provided.
   # The two images must have the same dimensions.
   # :Parameters :
   # :  `x` - The up image
   # :  `y` - The down image
   #
   public set_images(x, y)
      set_image(x)
      set_image_down(y)
      link
   end

   public set_paint(p)
      if is_initialized() then {
         (\self.paint).finally()
         self.paint := p
         self.paint.initially(self, self.accel)
         self.invalidate()
      } else
         self.paint := p
      link
   end

   public set_paint_down(p)
      if is_initialized() then {
         (\self.paint_down).finally()
         self.paint_down := p
         (\self.paint_down).initially(self, self.accel)
         self.invalidate()
      } else
         self.paint_down := p
      link
   end

   public override initially()
      \self.paint | runerr("No label specified")
      Button.initially()
      self.paint.initially(self, self.accel)
      (\self.paint_down).initially(self, self.accel)
   end

   public override finally()
      Button.finally()
      paint.finally()
      (\paint_down).finally()
   end

   public override get_default_width()
      local t
      t := paint.w
      t <:= (\paint_down).w
      return t + border.get_total_width()
   end

   public override get_default_height()
      local t
      t := paint.h
      t <:= (\paint_down).h
      return t + border.get_total_height()
   end

   public override new()
      Button.new()
      BorderWhilstEntered.new()
      self.border := CompoundBorder().
                       set_outer(RaisedBorder()).
                       set_inner(EmptyBorder())
      return
   end
end

# A helper class for a component whose border is only shown whilst the
# mouse cursor is over the component.
#
abstract class BorderWhilstEntered(Component)
   public 
      border_whilst_entered_flag,
      entered

   public static const
      DEFAULT

   private static init()
      DEFAULT := env_flag("OI_BORDER_WHILST_ENTERED_DEFAULT")
   end

   #
   # If set, only draw the border whilst the button is enabled and the
   # mouse pointer is over the button.  This is useful for toolbar
   # buttons.
   #
   public set_border_whilst_entered(s)
      if border_whilst_entered_flag ~===:= need_flag(s) then
         invalidate()
      link
   end

   public handle_enter(e)
      entered := &yes
      if \border_whilst_entered_flag then
         invalidate()
   end

   public handle_exit(e)
      entered := &no
      if \border_whilst_entered_flag then
         invalidate()
   end

   public handle_interrupted(e)
      handle_exit(e)
   end

   public override new()
      connect(handle_enter, Event.MOUSE_ENTER)
      connect(handle_exit, Event.MOUSE_EXIT)
      connect(handle_interrupted, Event.INTERRUPTED)
      border_whilst_entered_flag := DEFAULT
      return
   end
end
