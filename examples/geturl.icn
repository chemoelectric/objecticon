#
# Retrieve http pages.
#

import util, http, net, lang, ipl.options, ipl.lists, io, xdg, ipl.strings, ipl.printf

global total, ok, err, failed, invalid, opts, skipped, sched, cookies, urls, workers

class HttpRequestHelperImpl(HttpRequestHelper)
   private auth

   public override get_authentication(httpc, dom, realm)
      local t
      if t := \auth then {
         # Only succeed once, otherwise httpclient will loop forever retrying
         auth := &null
         return t
      }
   end

   public override modify_redirect(httpc, hreq, hresp)
   end

   public new()
      auth := \opts["a"]
      return
   end
end

class Worker()
   private
      task,
      hc,
      out,
      tmp_file,
      input_stream,
      output_stream,
      last_progress,
      prev_len

   private writes(a[])
      local t
      t := 0
      every t +:= *!a
      push(a, repl("\b \b", \prev_len))
      FileStream.stderr.writes!a
      prev_len := t
   end

   private write(a[])
      if *workers > 1 then
         push(a, "[" || serial(self) || "] ")
      push(a, repl("\b \b", \prev_len))
      FileStream.stderr.write!a
      prev_len := &null
   end

   private progress()
      local len, read, now
      len := hc.get_length()
      read := hc.get_read()
      # Check to avoid printing huge number of progress messages very quickly.
      now := Prog.get_runtime_millis()
      if now - \last_progress < 250 then
         return
      last_progress := now
      if \len then
         writes(Format.numeric_to_string(read, 0, ','), " bytes of ", Format.numeric_to_string(len, 0, ','), " (", (read * 100) / len, "%)")
      else
         writes(Format.numeric_to_string(read, 0, ','), " bytes read")
   end

   private complete()
      writes()
   end

   private writing_line(ev)
      write("Sent: ", ev)
   end

   private read_line(ev)
      write("Got : ", ev)
   end

   private read_string(ev)
      write("Got : data - 0x", Format.int_to_string(*ev, 16), " bytes")
   end

   private writing_string(ev)
      write("Sent: data - 0x", Format.int_to_string(*ev, 16), " bytes")
   end

   private failed(ev)
      write("Failed: ", &why)
   end

   private retrying(ev)
      write("Retrying: ", &why)
   end

   private http_error(ev)
      write("HTTP Error: ", &why, " - No data output")
   end

   private connecting(ev, src, type)
      write("Connecting to ", URL.bracket_host(src.server), ":", src.port)
   end

   private connected(ev)
      write("Connected to ", ev)
   end

   private other(ev, src, type)
      write(type)
   end

   private got_headers()
      local fname

      if \opts["head"|"c"] then
         fail

      if fname := hc.get_response().get_filename() & *fname > 0 then {
         get_out(fname)
         if check_skip() then
            hc.abort()
      }
   end

   private close_output_stream()
      local f
      if \output_stream then {
         output_stream.close() | (f := &yes)
         output_stream := &null
      }
      return /f
   end

   private close_input_stream()
      local f
      if \input_stream then {
         input_stream.close() | (f := &yes)
         input_stream := &null
      }
      return /f
   end

   private rm_tmp()
      if \tmp_file then {
         Files.remove(tmp_file)
         tmp_file := &null
      }
   end

   private process_one(a)
      local hr, url, start_t, res, end_t, kbps, s, msg,
         content_type, t, k, v, p, f, n, l

      total +:= 1

      (url := URL(a).normal()) | {
         whyf("Invalid url: %s: %w", a)
         if /opts["q"] then
            write(&why)
         put_problem(invalid, a)
         fail
      }

      (url.scheme == ("http" | "https")) | {
         whyf("Unsupported scheme: %s", url.scheme)
         if /opts["q"] then
            write(pp_url(url), ": ", &why)
         put_problem(invalid, url)
         fail
      }

      if /opts["head"] & /opts["c"] then {
         get_out(url.get_path_last())
         if check_skip() then
            fail
         if /opts["q"] then
            write("Saving URL ", pp_url(url))
      }

      hr := HttpRequest().
         set_url(url).
         set_helper(HttpRequestHelperImpl())

      if \opts["head"] then 
         hr.set_method("HEAD")

      hr.set_referer(\opts["e"])

      every s := !\opts["x"] do {
         s ? {
            k := tab(upto(':')) | syserr("Bad -x option")
            move(1)
            tab(many(' \t'))
            v := tab(0)
            hr.add_header(k, v)
         }
      }

      if n := \opts["n"] then {
         p := Files.stat(n) | clean_stopf("Couldn't stat %s: %w", n)
         hr.set_range(p.size)
      }

      if \opts["i" | "is"] then {
         input_stream := if n := \opts["i"] then
            FileStream(n, FileOpt.RDONLY) | clean_stopf("Couldn't open %s: %w", n)
         else
            StringStream(cat_lines(opts["is"]))
         hr.set_input_stream(input_stream)
         hr.set_method(if \opts["put"] then "PUT" else "POST")
         content_type := \opts["type"] | "application/x-www-form-urlencoded"
         hr.set_content_type(content_type)
      }

      if l := \opts["form"] then {
         t := table()
         every s := !l do {
            s ? {
               k := tab(upto('=')) | syserr("Bad -form option")
               move(1)
               v := tab(0)
               t[k] := v
            }
         }
         hr.set_html_form_data(t)
      }

      if /opts["head"] then {
         tmp_file := Files.make_temp_filename("http_geturl.", ".bin") | clean_stopf("Couldn't create temp file: %w")
         output_stream := BufferStream(FileStream(tmp_file, 
                                                  ior(FileOpt.WRONLY, FileOpt.TRUNC, FileOpt.CREAT))).
            set_buff_size(8192) | clean_stopf("Couldn't open %s: %w", tmp_file)
         hr.set_output_stream(output_stream)
      }

      start_t := Prog.get_runtime_millis()
      if res := hc.retrieve(hr) then {
         end_t := Prog.get_runtime_millis()
         if /opts["head"] then {
            close_input_stream() | clean_stopf("Couldn't close input_stream: %w")
            close_output_stream() | clean_stopf("Couldn't close output_stream: %w")
            if \opts["c"] then {
               use {
                  f := FileStream(tmp_file),
                  f.copy_to(FileStream.stdout)
               } | {
                  clean_stopf("Couldn't copy %s to stdout: %w", tmp_file)
               }
            } else {
               kbps := Format.numeric_to_string((hc.get_read() / 1024.0) / ((end_t - start_t) / 1000.0), 1, ',')
               msg := Format.numeric_to_string(hc.get_read(), 0, ',') || " bytes OK (" || kbps  || " kB/s)"

               if out == Files.NULL_FILE then {
                  msg ||:= " -> " || out
               } else if \opts["n"] then {
                  Files.append(tmp_file, out) | {
                     clean_stopf("Unable to append %s to %s: %w", tmp_file, out)
                  }
                  msg ||:= " ->> " || pp_out()
               } else if \opts["over"] then {
                  Files.move(tmp_file, out) | {
                     save_why{ Files.remove(out) }
                     clean_stopf("Unable to move %s to %s: %w", tmp_file, out)
                  }
                  msg ||:= " -> " || pp_out()
                  tmp_file := &null
               } else if Files.equal_files(tmp_file, out) then {
                  msg ||:= " : Existing file " || pp_out() || " is identical."
               } else {
                  out := Files.ensure_unique_filename(out)
                  Files.move(tmp_file, out) | {
                     save_why{ Files.remove(out) }
                     clean_stopf("Unable to move %s to %s: %w", tmp_file, out)
                  }
                  msg ||:= " -> " || pp_out()
                  tmp_file := &null
               }

               if /opts["q"] then
                  write(msg)
            }
            rm_tmp()
         }
         ok +:= 1
      } else {
         if /hc.abort_flag then
            put_problem(if hc.get_http_error() then err else default.failed,
                        url)
         if /opts["head"] then {
            close_input_stream() | clean_stopf("Couldn't close input_stream: %w")
            close_output_stream() | clean_stopf("Couldn't close output_stream: %w")
            rm_tmp()
         }
      }
   end

   private get_out(fname)
      if out := \opts["n"] then
         fail

      if *fname = 0 then
         fname := "geturl.out"

      # Ensure illegal path chars (/ and NULL) are removed from fname
      fname := map(fname, "/\0", "--")

      fname := \opts["p"] || fname
      fname := fname || \opts["d"]

      if out := \opts["o"] then {
         if Files.is_directory(out) then
            out := FilePath(out).child(fname).str()
      } else
         out := fname
   end

   private pp_out()
      local s
      return if FileStream.stderr.is_flowterm_tty() & 
         s := FilePath(out).canonical().ucs() then
         Files.begin_link(s) || out || Files.end_link()
      else
         out
   end

   private check_skip()
      /opts["n"] | fail
      /opts["over"] | fail
      \opts["skip"] | fail
      Files.access(out) | fail
      if /opts["q"] then
         write("Skipping existing file ", pp_out())
      skipped +:= 1
      return
   end

   public cleanup()
      close_input_stream()
      close_output_stream()
      rm_tmp()
   end

   private run()
      local x
      while x := @urls do
         process_one(x)
      hc.close()
      task.revert()
   end

   public run_sched()
      task := Task(sched, create run()).start()
      create_client()
      hc.set_task(task)
   end

   public run_alone()
      local x
      create_client()
      while x := @urls do
         process_one(x)
      hc.close()
   end

   private create_client()
      hc := HttpClient()
      if \opts["nt"] then
         hc.set_timeout()
      else
         hc.set_timeout(\opts["t"] * 1000)
      if \opts["nr"] then
         hc.set_retries()
      else
         hc.set_retries(\opts["r"])
      hc.set_user_agent(\opts["agent"])
      hc.set_ip_version(\opts["ip"])
      if \opts["nsslv"] then
         hc.set_ssl_verify(&no)
      if \opts["nz"] then
         hc.set_gzip(&no)

      if \opts["close"] then
         hc.set_keep_alive(&no)

      if \opts["v1"] then
         hc.set_http_version("1.0")

      if \opts["while"] then
         hc.set_retry_while_data(&yes)

      if hc.set_proxy(\opts["P"]) then {
         hc.set_proxy_auth(\opts["Pa"])
         if \opts["P5"] then
            hc.set_proxy_type("socks5")
      }

      hc.set_cookies(cookies)

      if /opts["q"] then {
         hc.connect(failed, HttpClient.FAILED_EVENT).
            connect(retrying, HttpClient.RETRYING_EVENT).
            connect(http_error, HttpClient.HTTP_ERROR_EVENT)
         if \opts["l"] then {
            hc.connect(read_line, NetClient.READ_LINE_EVENT).
               connect(read_string, NetClient.READ_STRING_EVENT).
               connect(writing_line, NetClient.WRITING_LINE_EVENT).
               connect(writing_string, NetClient.WRITING_STRING_EVENT).
               connect(connecting, NetClient.CONNECTING_EVENT).
               connect(connected, NetClient.CONNECTED_EVENT).
               connect(other, HttpClient.HTTP_SUCCESS_EVENT).
               connect(other, HttpClient.ABORTED_EVENT).
               connect(other, HttpClient.BEGIN_EVENT).
               connect(other, HttpClient.COMPLETE_EVENT).
               connect(other, NetClient.CLOSED_EVENT)
         } else if /opts["npro"] then {
            hc.connect(progress, HttpClient.PROGRESS_EVENT).
               connect(complete, HttpClient.COMPLETE_EVENT)
         }
      }

      hc.connect(got_headers, "Headers")
   end
end

record Problem(url, why)

procedure put_problem(l, url)
   put(l, Problem(url, &why))
end

procedure problem_str(p)
   local s
   s := if is(p.url, URL) then
      pp_url(p.url)
   else
      p.url
   # If quiet is off, we've already output the reason
   if \opts["q"] then
      s ||:= " (" || p.why || ")"
   return s
end

procedure clean_stopf(a[])
   every (!workers).cleanup()
   stopf!a
end

procedure usage(opts)
   write("Usage: geturl [OPTIONS] [URL]...")
   write("Retrieve URL(s)")
   options_help(opts)
   write("URL may contain range expansions eg {1-2,8-11}")
   exit(0)
end

procedure gen_urls(args)
   suspend expand_arg(if *args = 0 then |read() else !args)
end

procedure main(args)
   local cookies_file, k, nw

   opts := options(args, [Opt("over",, "Overwrite any existing files"),
                          Opt("i",string, "INPUT FILE#Input file for a POST request"),
                          Opt("is",string, "STRING#Input string for a POST request; multiple uses will be concatenated and separated with EOL", &yes),
                          Opt("form",string_with('='), "K=V#Post an HTTP form with entry K=V; multiple uses allowed", &yes),
                          Opt("type",string, "TYPE#Content type for a POST request"),
                          Opt("o",string,"OUTPUT FILE/DIR#Output file or directory"),
                          Opt("k",string, "FILE#Load cookies from file"),
                          Opt("q",, "Quiet mode (output only an error summary, if needed)"),
                          Opt("t",integer_range(1),"TIMEOUT#Timeout in seconds (default 12s)"),
                          Opt("nt",,"Use infinite timeout"),
                          Opt("r",integer_range(0), "RETRIES#Number of retries (default 2)"),
                          Opt("nr",,"Use infinite retries"),
                          Opt("w",integer_range(1),"WORKERS#Number of workers"),
                          Opt("p",string,"Prepend string to all output files"),
                          Opt("d",string, "Append string to all output files"),
                          Opt("a",authentication_opt, "USER:PASS#Specify authorization"),
                          Opt("e",string, "URL#Set referer header"),
                          Opt("l",, "Show HTTP headers and data flow"),
                          Opt("n",string, "FILE#Append to the given partial file"),
                          Opt("head",, "Do an HTTP HEAD"),
                          Opt("nsslv",, "Don't verify SSL certificates"),
                          Opt("npro",, "Don't output progress information"),
                          Opt("c",, "Output to stdout (implies -q)"),
                          Opt("put",,"With -i, do a PUT instead of a POST"),
                          Opt("skip",, "Skip over any existing files"),
                          Opt("agent",string, "Set user agent field"),
                          Opt("while",, "Set the retry-while-data flag"),
                          Opt("close",, "Use Connection: Close"),
                          Opt("ip",ip_version_opt, "VERSION#Specify IP version(s) and order for dns queries; allowed values: 4, 6, 46, 64 or 0"),
                          Opt("x",string_with(':'),"HEADER:VALUE#Set extra HTTP header; multiple uses allowed", &yes),
                          Opt("nz",, "Don't use gzip compression"),
                          Opt("v1",, "Use HTTP 1.0"),
                          Opt("P",host_port_opt(),"SERVER:PORT#Proxy server and port"),
                          Opt("Pa",authentication_opt,"USER:PASS#Proxy authorization"),
                          Opt("P5",, "Use SOCKS5 rather than HTTP CONNECT as the proxy protocol")
                          ],
                          usage)

   # Check for invalid option mixtures

   if \opts["i"] & \opts["is"] then
      help_stop("Can't have -i and -is options together")

   if \opts[k := "i" | "is"] & \opts["form"] then
      help_stop("Can't have -", k, " and -form options together")

   if \opts[k := "i" | "is" | "form"] & \opts["head"] then
      help_stop("Can't have -", k, " and -head options together")

   if \opts["t"] & \opts["nt"] then
      help_stop("Can't have -t and -nt options together")

   if \opts[k := "r" | "while"] & \opts["nr"] then
      help_stop("Can't have -", k, " and -nr options together")

   total := ok := skipped := 0
   err := []
   failed := []
   invalid := []

   if \opts["c"] then
      opts["q"] := &yes

   if \opts["head"] then 
      opts["l"] := &yes

   cookies_file := \opts["k"] | FilePath(BaseDir.ensure_data_home()).child("oicookies").str() | stopf("Couldn't access data dir: %w")
   cookies := decode_from_file(cookies_file) | table()

   urls := create gen_urls(args)

   nw := \opts["w"] | 1
   workers := []
   every 1 to nw do
      put(workers, Worker())

   if nw = 1 then
      workers[1].run_alone()
   else {
      /opts["n"] | help_stop("Can't have -n and several workers")
      opts["npro"] := &yes
      sched := Scheduler(200)
      every (!workers).run_sched()
      until sched.empty() do
         sched.work()
   }

   if /opts["q"] then
      ewrite("Summary: Total ", total, ", Okay ", ok, ", Skipped ", skipped, 
            ", HTTP error ", *err, ", Failed ", *failed, ", Invalid ", *invalid)
   if *err > 0 then
      every ewrite("HTTP errors on:" | problem_str(!err))
   if *failed > 0 then
      every ewrite("Failed on:" | problem_str(!failed))
   if *invalid > 0 then
      every ewrite("Invalid URL:" | problem_str(!invalid))

   # Save cookies
   atomic_encode_to_file(cookies_file, Cookie.expire_cookies(cookies)) | 
      stopf("Couldn't encode to cookies file %s: %w", cookies_file)

   if *err = *failed = *invalid = 0 then
      exit(0)
   else
      exit(1)
end

procedure pp_url(url)
   return if FileStream.stderr.is_flowterm_tty() then       
      Files.begin_link(url) || url.str() || Files.end_link()
   else
      url.str()
end

procedure expand_arg(s)
   local s1, s2, s3
   s ? {
      s1 := tab(upto('{')) | return s
      move(1)
      s2 := tab(upto('}')) | fail
      move(1)
      s3 := tab(0)
      suspend s1 || expand_braces(s2) || expand_arg(s3)
   }
end

procedure expand_braces(s)
   local l, s1, s2, s3
   suspend separate(s) ? {
      s1 := tab(upto('-') | 0)
      if ="-" then {
         s2 := tab(upto(':') | 0)
         s3 := if =":" then
            tab(0)
         else
            1
         if any('0', s1 | s2) then {
            l := *s1
            l <:= *s2
            right(integer(s1) to integer(s2) by integer(s3), l, "0")
         } else if (any(&lcase, s1) & any(&lcase, s2)) |
                   (any(&ucase, s1) & any(&ucase, s2)) then {
            char(ord(s1[1]) to ord(s2[1]) by integer(s3))
         } else
            string(integer(s1) to integer(s2) by integer(s3))
      } else
         s1
   }
end
