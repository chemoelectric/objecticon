package ipl.browser

import 
   util, 
   lang,
   ipl.sort,
   ipl.pdco,
   io,
   gui,
   ipl.graphics,
   ipl.numbers

class TableCellInfo(Insets, ObjectOutput)
   public 
      obj,            # A TextFlow
      ax,             # Actual computed pixel location and size,
      ay,             # within insets, ie where to draw the thing
      aw,             # inside the cell.
      ah,
      s,              # Identifying string for print_layout
      x,              # Location, size in grid units.
      y, 
      w, 
      h, 
      pct_w,
      fix_w,
      fix_h,
      max_w,
      pw,             # Preferred cell width excluding insets
      ph,
      ph_calc_w,      # Width used to calc ph
      ascent          # Ascent of TextFlow

   #
   # Output object
   #
   protected override object_output(oo)
      local t
      /s := "?"
      t := s || ": "
      t ||:= " pos=" || self.x || "," || self.y || " dim=" || self.w || "," || self.h ||
         " component pref width=" || pw ||" max width=" || max_w
      if \ph then {
         t ||:= "\n\theight=" || ph || " calculated from width " || ph_calc_w
         t ||:= "\n\tcell desired size=" || pw + l_inset + r_inset || "," || 
            ph + t_inset + b_inset
      }
      t ||:= " located to=" || \ax || "," || \ay || " size set to " || \aw || "," || \ah
      t ||:= " pct_w=" || \pct_w
      oo.object_string(self, t)
   end
end

class TableGrid()
   public 
      gw,           # Grid width, height in cells
      gh, 
      p_col_max_w,   # Max column widths
      p_col_w,      # Preferred column widths/row heights
      p_row_h,
      pct_col_w,
      a_col_w,      # Actual column widths/row heights after extra
      a_row_h,      # space has been allocated
      a_col_x,      # Actual row x and y values.  Unlike GridLayout, these
      a_row_y,      # are zero (offset) based, rather than absolute positions, to avoid
                    # recomputing them on a shift(), since they are used for 
                    # row searching by Tbl and for rule drawing.
      info,         # List of CellInfo for each component being laid out
      dii,          # Default inner padding, ie not at edge of grid
      doi,          # Default outer padding
      id_seq,       # For generating CellInfo string ids for debug
      add_x,        # For auto-computing cell position and sizes.
      add_y,
      add_row_h,
      total_p_col_w,  # Useful sum totals of p_col_w etc
      total_p_col_max_w,
      total_p_row_h,
      fix_col1_flag,
      in_row        # Lists of CellInfos in each row

   public create_cell(t)
      local ci
      ci := TableCellInfo()
      ci.s := @id_seq
      self.add_x +:= Grid.validate_int(t, "x_tab")
      if self.add_y +:= Grid.validate_int(t, "y_tab") then
         add_row_h := 0
      ci.x := Grid.validate_int(t, "x", add_x)
      ci.y := Grid.validate_int(t, "y", add_y)
      ci.w := Grid.validate_int(t, "w", 1)
      ci.h := Grid.validate_int(t, "h", 1)
      add_row_h <:= ci.h
      if /Grid.validate_flag(t, "eol") then {
         add_x := ci.x + ci.w
         add_y := ci.y
      } else {
         add_x := 1
         add_y +:= add_row_h
         add_row_h := 0
      }
      ci.pct_w := Grid.validate_int(t, "pct_w", 0)
      ci.fix_w := Grid.validate_int(t, "fix_w")
      ci.fix_h := Grid.validate_int(t, "fix_h")
      put(info, ci)

      return ci
   end

   public dimension()
      local ci

      # Work out grid width/height
      gw := gh := 0
      every ci := !info do {
         gw <:= ci.x + ci.w - 1
         gh <:= ci.y + ci.h - 1
      }

      # Fill in final defaults now we have the grid dimensions.
      every ci := !info do {
         ci.l_inset := if ci.x = 1 then self.doi else self.dii
         ci.t_inset := if ci.y = 1 then self.doi else self.dii
         ci.r_inset := if ci.x + ci.w = gw + 1 then self.doi else self.dii
         ci.b_inset := if ci.y + ci.h = gh + 1 then self.doi else self.dii
      }
   end

   public static dist_equally(start, span, extra, l, flag)
      local left, i, a
      if (extra | span) = 0 then
         fail
      if \flag & start = 1 & span > 1 then {
         start := 2
         span -:= 1
         #write(start,",",span,",",extra)
      }
      a := extra / span
      left := extra
      every i := start to start + span - 1 do {
         l[i] +:= a
         left -:= a
      }
      l[i] +:= left
   end

   public compute_preferred_col_widths()
      local i, need, l
      p_col_w := list(gw, 0)
      p_col_max_w := list(gw, 0)
      pct_col_w := list(gw, 0)
      l := isort(info, cell_width_sort)

      # Compute sizes
      every i := !l do {
         need := i.pw + i.l_inset + i.r_inset - Grid.slice(i.x, i.w, p_col_w)
         if need > 0 then
            dist_equally(i.x, i.w, need, p_col_w, fix_col1_flag)

         need := i.max_w + i.l_inset + i.r_inset - Grid.slice(i.x, i.w, p_col_max_w)
         if need > 0 then
            dist_equally(i.x, i.w, need, p_col_max_w, fix_col1_flag)

         need := i.pct_w - Grid.slice(i.x, i.w, pct_col_w)
         if need > 0 then
            dist_equally(i.x, i.w, need, pct_col_w, fix_col1_flag)
      }

      compute_pct_widths()

      total_p_col_w := Grid.total(p_col_w)
      total_p_col_max_w := Grid.total(p_col_max_w)
   end

   # Adjust the p_col_max_w based on any column % widths; preferred
   # widths are not affected.
   private compute_pct_widths()
      local i, ppp, tot, sum_p, sum_r, p, d, n_r
      p := Grid.total(pct_col_w)
      if p = 0 then
         fail
      if p > 100 then {
         pct_col_w := list(gw, 0)
         fail
      }
      # Stage 1 - adjust the columns with a pct so their p_col_max_w
      # are in the correct proportions.

      # Calculate the maximum pixels-per-percentage value for those
      # columns with a pct.
      ppp := 0
      every i := 1 to gw do
         ppp <:= real(p_col_max_w[i]) / (0 < pct_col_w[i])

      # Adjust those columns with a pct so they are the correct width
      # in relation to one another.
      every i := 1 to gw do
         p_col_max_w[i] <:= integer(ppp * pct_col_w[i])

      # Nothing more to do if the %'s total to 100%
      if p = 100 then
         return

      # Stage 2 - add a sum to either (a) columns with a pct or (b)
      # columns without a pct in order to make the total widths of
      # those with a pct correct in relation to the table as a whole
      # (they should amount to p% in total).

      # Calculate the total numbers and widths in each group.
      n_r := sum_p := sum_r := 0
      every i := 1 to gw do {
         if pct_col_w[i] > 0 then
            sum_p +:= p_col_max_w[i]
         else {
            sum_r +:= p_col_max_w[i]
            n_r +:= 1
         }
      }
      tot := sum_p + sum_r
      
      # Decide whether to add to one group or the other.  We want to establish (p/100) * tot = sum_p
      if p * tot > 100 * sum_p then {
         # Add to those with a pct.  We will add d in total, so that
         # (p/100) * (tot + d) = (sum_p + d)
         d := (p * tot - 100 * sum_p) / (100 - p)
         # Add in proportion to the % widths
         every i := 1 to gw do {
            if pct_col_w[i] > 0 then
               p_col_max_w[i] +:= (d * pct_col_w[i] / p)
         }
      } else {
         # Add to those without a pct.  We will add d, so that
         # sum_p = (p/100) * (tot + d)
         d := (100 * sum_p / p) - tot
         # Just add an equal amount to each column.
         every i := 1 to gw do {
            if pct_col_w[i] <= 0 then
               p_col_max_w[i] +:= d / n_r
         }
      }
   end

   public compute_preferred_row_heights()
      local i, need, l
      p_row_h := list(gh, 0)
      l := isort(info, cell_height_sort)

      # Compute sizes
      every i := !l do {
         need := i.ph + i.obj.ascent_adj + i.t_inset + i.b_inset - Grid.slice(i.y, i.h, p_row_h)
         if need > 0 then 
            dist_equally(i.y, i.h, need, p_row_h)
      }

      total_p_row_h := Grid.total(p_row_h)
   end

   private static cell_width_sort(i)
      return i.w
   end

   private static cell_height_sort(i)
      return i.h
   end

   public print_layout()
      local x, y, t, i, s, l, u

      write("Grid dimensions:", gw, ",",gh)
      l := *info[-1].s
      t := table()
      u := repl(" ", l)
      every t[(1 to gw)||","||(1 to gh)] := u

      every i := !info do
         every t[(i.x to i.x + i.w - 1)||","||(i.y to i.y + i.h - 1)] := right(i.s, l)

      u := "+" || repl("-", l)
      write(s := repl(u, gw) || "+")
      every y := 1 to gh do {
         every x := 1 to gw do
            writes("|", t[x||","||y])
         write("|\n",s)
      }

      write("----- Items ------")
      every write(to_string(!info))

      write("----- Data -------")
      write("p_col_w=", to_string(p_col_w))
      write("p_col_max_w=", to_string(p_col_max_w))
      if \self.a_col_w then {
         write("a_col_w=", to_string(a_col_w))
         write("\textra width in a_col_w:", Grid.total(a_col_w)-Grid.total(p_col_w))
      }
      write("p_row_h=", to_string(p_row_h))
      if \self.a_row_h then {
         write("a_row_h=", to_string(a_row_h))
         write("\textra height in a_row_h:", Grid.total(a_row_h)-Grid.total(p_row_h))
      }

      write("\nPreferred size gives:", get_preferred_width(),",",get_preferred_height())
   end

   public cells_in_range(ry, rh)
      local ci, i, fl
      every i := rows_in_range(ry, rh) do {
         every ci := !in_row[i] do {
            # We have encountered the cell for the first time if
            # either this is the first row examined (/fl) or it is the
            # first row of the cell (ci.y=i).
            if /fl | (ci.y = i) then
               suspend ci
         }
         fl := 1
      }
   end

   public rows_in_range(ry, rh)
      local i, j, m, rowh, rowy
      i := 1
      j := *a_row_y
      while i <= j do {
         m := (i + j) / 2
         rowy := a_row_y[m]
         rowh := a_row_h[m]
         if rowy + rowh <= ry then
            i := m + 1
         else if rowy >= ry + rh then
            j := m - 1
         else
            break
      }
      if i > j then
         fail

      # Now row m is in the sought range; but rows before may be too,
      # so tab back as far as needed.
      while rowy := a_row_y[m - 1] & rowh := a_row_h[m - 1] &
         rowy + rowh > ry  &  rowy < ry + rh do
         m -:= 1

      # Now suspend all the rows in range from row m forwards.
      while  rowy := a_row_y[m] & rowh := a_row_h[m] &
         rowy + rowh > ry  &  rowy < ry + rh do
      {
         suspend m
         m +:= 1
      }
   end

   public set_fix_col1(s)
      self.fix_col1_flag := need_flag(s)
      link
   end

   public get_preferred_width()
      return total_p_col_w
   end

   public get_max_width()
      return total_p_col_max_w
   end

   public get_preferred_height()
      return total_p_row_h
   end

   private choose(total_a_col_w)
      local i, r1, r2, best1, best2, t
      if gw = 0 then
         fail
      # Set r1 to the most needy % col; r2 to the most needy non-% col.
      every i := 1 to gw do {
         t := ((total_a_col_w * p_col_max_w[i] / (0 < total_p_col_max_w)) | 0)  - a_col_w[i]
         if pct_col_w[i] > 0 then {
            if /r1 | (t > best1) then {
               r1 := i
               best1 := t
            }
         } else {
            if /r2 | (t > best2) then {
               r2 := i
               best2 := t
            }
         }
      }
      if /r2 | (\best1 > 0) then
         return r1
      return r2
   end

   public compute_actual_col_widths(w1)
      local total_a_col_w, i

      # Start with allocation set to either min or max col width
      if w1 >= total_p_col_max_w then {
         a_col_w := copy(p_col_max_w)
         w1 -:= total_p_col_max_w
      } else {
         a_col_w := copy(p_col_w)
         w1 -:= total_p_col_w
      }

      # Allocate remaining width pixel by pixel
      total_a_col_w := Grid.total(a_col_w)
      every 1 to w1 do {
         a_col_w[choose(total_a_col_w)] +:= 1
         total_a_col_w +:= 1
      }

      # Set cell width values
      every i := !info do
         i.aw := Grid.slice(i.x, i.w, a_col_w) - i.l_inset - i.r_inset
   end

   public compute_actual_col_positions()
      local i, x, w

      a_col_x := []
      x := 0
      every w := !a_col_w do {
         put(a_col_x, x)
         x +:= w
      }

      every i := !info do
         i.ax := a_col_x[i.x] + i.l_inset
   end

   public compute_actual_row_heights(h1)
      local i, eh

      a_row_h := copy(p_row_h)

      # Extra height.
      eh := h1 - total_p_row_h
      dist_equally(1, gh, eh, a_row_h)

      every i := !info do
         i.ah := Grid.slice(i.y, i.h, a_row_h) - i.t_inset - i.b_inset
   end

   public compute_actual_row_positions()
      local i, y, h

      a_row_y := []
      y := 0
      every h := !a_row_h do {
         put(a_row_y, y)
         y +:= h
      }

      every i := !info do
         i.ay := a_row_y[i.y] + i.t_inset
   end

   public compute_in_row()
      local ci
      in_row := []
      every 1 to gh do
         put(in_row, [])
      every ci := !info do
         every put(in_row[ci.y to ci.y + ci.h - 1], ci)
   end

   #
   # Set the default inner inset
   #
   public set_dii(n)
      self.dii := need_integer(n, 0)
      link
   end

   #
   # Set the default outer inset
   #
   public set_doi(n)
      self.doi := need_integer(n, 0)
      link
   end

   public new()
      self.dii := self.doi := 0
      self.id_seq := create alphaseq(seq())
      self.add_y := self.add_x := 1
      self.add_row_h := 0
      self.info := []
      return
   end
end

class TableLayout(Layout)
   public 
      g,
      computed_g,
      dii,          # Default inner padding, ie not at edge of grid
      doi,          # Default outer padding
      fix_col1_flag,
      debug

   public override reset()
      g := &null
   end

   public ensure_grid()
      local c, ci

      if \g then
         return

      g := TableGrid().
         set_dii(dii).
         set_doi(doi).
         set_fix_col1(fix_col1_flag)

      every c := !parent.children do {
         if /c.x_spec then {
            ci := g.create_cell(c.constraints)
            ci.pw := c.get_preferred_width()
            ci.max_w := c.get_max_width()
            if \ci.fix_w then
               ci.pw := ci.max_w := max(ci.fix_w, ci.pw)
            ci.obj := c
         }
      }
      g.dimension()
      g.compute_preferred_col_widths()
      g.compute_in_row()
   end

   public override get_preferred_width()
      ensure_grid()
      return g.get_preferred_width()
   end

   public get_max_width()
      ensure_grid()
      return g.get_max_width()
   end

   public adjust_preferred_heights()
     local i, adj
     every i := !g.info do {
        if i.ph_calc_w ~=== i.aw then {
           i.ph_calc_w := i.aw
           i.ph := i.obj.get_preferred_height(i.ph_calc_w)
           i.ph <:= \i.fix_h
           i.ascent := i.obj.get_ascent(i.ph_calc_w)
           adj := &yes
        }
     }
     if \adj | /i then {
        align_baselines()
        g.compute_preferred_row_heights()
     }
   end

   private align_baselines()
      local i, c, ma
      every i := 1 to g.gh do {
         if should_align_baselines(i) then {
            ma := MaxNN{ cells_at(i).ascent }
            every c := cells_at(i) do
               c.obj.ascent_adj := ma - c.ascent
         }
      }
   end

   private cells_at(i)
      local c
      every c := !g.in_row[i] do
         if c.y = i then
            suspend c
   end

   private should_align_baselines(i)
      local c
      every c := cells_at(i) do
         (c.obj.v_align == "baseline") | fail
      return
   end

   public override get_preferred_height(pw)
      ensure_grid()
      g.compute_actual_col_widths(pw)
      adjust_preferred_heights()
      return g.get_preferred_height()
   end

   public set_fix_col1(s)
      self.fix_col1_flag := need_flag(s)
      link
   end

   public override display()
      local i, cw
      ensure_grid()
      use {
         cw := GetShadowClone(self.parent.cbwin).set_masked_pattern("gray"),
         {
            cw.draw_rectangle(parent.x, parent.y, parent.w, parent.h)
            every i := !g.info do {
               cw.draw_rectangle(g.a_col_x[i.x],
                                 g.a_row_y[i.y],
                                 Grid.slice(i.x, i.w, g.a_col_w),
                                 Grid.slice(i.y, i.h, g.a_row_h))
            }
         }
      }
   end

   public override layout()
      local c, i
      every c := !parent.children do {
         if \c.x_spec then
            c.compute_absolutes()
      }

      ensure_grid()

      g.compute_actual_col_widths(parent.w)
      adjust_preferred_heights()
      g.compute_actual_row_heights(parent.h)
      g.compute_actual_col_positions()
      g.compute_actual_row_positions()

      every i := !g.info do {
         i.obj.x := i.ax + parent.x
         i.obj.y := i.ay + parent.y
         i.obj.w := i.aw
         i.obj.h := i.ah
      }

      if \debug then
         g.print_layout()
      
      computed_g := g
   end

   public set_debug(s)
      self.debug := need_flag(s)
      link
   end

   public set_dii(n)
      self.dii := need_integer(n, 0)
      link
   end

   public set_doi(n)
      self.doi := need_integer(n, 0)
      link
   end

   public new()
      self.dii := self.doi := 0
      return
   end
end
