#
# $Id$
#

package mail

import 
   util,
   exception,
   ipl.caseless

class RFC822Parser()
   public static const 
      CTL_CHAR,
      SPACE,
      SPECIALS,
      ATOM_CHAR,
      CTEXT_CHAR,
      FIELD_NAME_CHARS,
      QTEXT_CHAR,
      DTEXT_CHAR,
      LWSP_CHAR,
      DAYS,
      MONTHS,
      TZ_CHARS,
      TSPECIALS,
      ATOM_CHAR_1521

   private static init()
      CTL_CHAR := &ascii[1:33] ++ &ascii[128]
      SPACE := ' '
      SPECIALS := '()<>@,;:\\\".[]'
      ATOM_CHAR := &ascii -- CTL_CHAR -- SPACE -- SPECIALS
      QTEXT_CHAR := &ascii -- '\"\\\r'
      DTEXT_CHAR := &ascii -- '[]\\\r'
      CTEXT_CHAR := &ascii -- '()\\\r'
      FIELD_NAME_CHARS := &ascii -- CTL_CHAR -- SPACE -- ':'
      LWSP_CHAR := ' \t'
      DAYS := ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
      MONTHS := ["Jan", "Feb",  "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
      TZ_CHARS := '+\-' ++ &digits ++ &ucase
      # RCF 1521 defs
      TSPECIALS := '()<>@,;:\\\"/[]?='
      ATOM_CHAR_1521 := &ascii -- CTL_CHAR -- SPACE -- TSPECIALS
   end

   #
   # The first four parse objects are the fundamental lexical components, other
   # than inidividual special characters (see rfc822).  Therefore, they must
   # be preceded by a call to next_token, to move the position to the correct
   # point to parse them.
   #

   #
   # qtext = <any CHAR excepting <">, "\" & CR, and including 
   #         linear-white-space>
   # quoted-pair =  "\" CHAR
   # quoted-string = <"> *(qtext/quoted-pair) <">
   #
   # Must be preceded by a call to next_token()
   #
   private parse_quoted_string()
      local res

      res := move(1)

      repeat {
         if any('\\') then {
            res ||:= move(2) | throw("Unterminated quoted string")
         } else if any(QTEXT_CHAR) then
            res ||:= tab(many(QTEXT_CHAR))
         else if any('\"') then {
            res ||:= move(1)
            return res
         } else
            # Missing closing quote or illegal char
            throw("Missing closing quote or illegal char")
      }
   end

   #
   # As above, but returns the string without the surrounding quotes, and any
   # escape sequences converted.
   #
   private parse_and_convert_quoted_string()
      local res

      res := move(0)  # Empty string, same type as &subject
      move(1)

      repeat {
         if any('\\') then {
            move(1)
            res ||:= move(1) | throw("Unterminated quoted string")
         } else if any(QTEXT_CHAR) then
            res ||:= tab(many(QTEXT_CHAR))
         else if any('\"') then {
            move(1)
            return res
         } else
            # Missing closing quote or illegal char
            throw("Missing closing quote or illegal char")
      }
   end

   #
   # Little utility function for quoting a string (if necessary).
   #
   public static escape_1521_value(s)
      local t
      # If non-empty and all chars are atom chars, no quotes needed.
      if many(ATOM_CHAR_1521, s) = *s + 1 then
         return s
      t := "\""
      s ? repeat {
         t ||:= tab(many(QTEXT_CHAR))
         if pos(0) then
            break
         t ||:= "\\" || move(1)
      }
      return t || "\""
   end

   #
   # atom        =  1*<any CHAR except specials, SPACE and CTLs>
   # ie one or more atom_char
   #
   # Must be preceded by a call to next_token()
   #
   private parse_atom()
      return tab(many(ATOM_CHAR)) | throw("Atom char expected")
   end

   #
   # domain-literal =  "[" *(dtext / quoted-pair) "]"
   # dtext =  <any CHAR excluding "[","]", "\" & CR>
   #
   # Must be preceded by a call to next_token()
   #
   private parse_domain_literal()
      local res
      res := move(1)
      repeat {
         if any('\\') then
            res ||:= move(2) | throw("Premature end of field")
         else if any(DTEXT_CHAR) then
            res ||:= tab(many(DTEXT_CHAR))
         else if any(']') then 
            return res || move(1)
         else
            # Missing closing ] or illegal char
            throw("Missing closing ] or illegal char")
      }
   end

   #
   # comment     =  "(" *(ctext / quoted-pair / comment) ")"
   #
   private parse_comment()
      local res
      res := move(1)
      repeat {
         if any('\\') then
            res ||:= move(2) | throw("Premature end of field")
         else if any(CTEXT_CHAR) then
            res ||:= tab(many(CTEXT_CHAR))
         else if any('(') then
            res ||:= parse_comment()
         else if any(')') then 
            return res || move(1)
         else
            # Missing closing ) or illegal char
            throw("Missing closing ) or illegal char")
      }
   end

   private next_token()
      repeat {
         tab(many(LWSP_CHAR))
         if any('(') then
            parse_comment()
         else
            return
      }
   end

   #
   # word =  atom / quoted-string
   #
   private parse_word() 
      next_token()
      if any('\"') then
         return parse_quoted_string()
      else
         return parse_atom()
   end

   #
   # local-part  =  word *("." word)             
   #
   private parse_local_part()
      local res
      res := parse_word()
      while res ||:= ="." do
         res ||:= parse_word()
      return res
   end

   #
   # domain      =  sub-domain *("." sub-domain)
   #
   private parse_domain()
      local res
      res := parse_sub_domain()
      while res ||:= ="." do
         res ||:= parse_sub_domain()
      return res
   end

   #
   # sub-domain  =  domain-ref / domain-literal
   # domain-ref  =  atom
   #
   private parse_sub_domain()
      next_token()
      if any('[') then
         return parse_domain_literal()
      else
         return parse_atom()
   end

   #
   # phrase =  1*word
   # 
   # In fact this is parsed as just "*word".  This allows
   # parsing of mailboxes such as, for example "<rparlett@xyz.com>" and
   # groups such as :joe@soap.com;
   #
   private parse_phrase()
      local res
      res := ""
      next_token()
      while any('\"' | ATOM_CHAR) do {
         # Single spaces between words
         if *res > 0 then
            res ||:= " "
         res ||:= parse_word()
         next_token()
      }

      # Strictly, this would be :-
      # if *res > 0 then
      #   return res

      return res
   end

   #
   # addr_spec = local-part "@" domain
   #
   private parse_addr_spec(mb)
      local t
      t := parse_local_part()
      mb.set_local_part(t)
      next_token()
      ="@" | throw("@ expected")
      t := parse_domain()
      mb.set_domain(t)
      return
   end

   #
   # route       =  1#("@" domain) ":" 
   # where 1#X means '(X *("," X))' 
   #
   private parse_route(mb)
      local t
      t := []
      repeat {
         next_token()
         ="@" | throw("@ expected")
         put(t, parse_domain())
         next_token()
         ="," | break
         next_token()
      }
      next_token()
      =":" | throw(": expected")
      mb.set_route(t)
      return
   end

   #
   # route-addr  =  "<" [route] addr-spec ">"
   #
   private parse_route_addr(mb)
      ="<" | throw("< expected")
      next_token()
      if any('@') then
         parse_route(mb)
      else
         mb.set_route([])
      next_token()
      parse_addr_spec(mb)
      next_token()
      =">" | throw("> expected")
      return
   end

   #
   # mailbox = addr-spec | phrase route-addr
   #
   private parse_mailbox_impl()
      local x, t, mb
      mb := Mailbox()
      #
      # The lookahead is complex, so try parsing as a simple address
      # first, and if that fails try the more complex alternative.
      #
      x := &pos
      if try { parse_addr_spec(mb) } then {
         mb.set_phrase("")
         mb.set_route([])
      } else {
         exception.clear()
         tab(x)
         t := parse_phrase()
         mb.set_phrase(t)
         parse_route_addr(mb)
      }

      return mb
   end

   #
   # group =  phrase ":" [#mailbox] ";"
   # #X means empty or X,X,X...
   #    
   private parse_group_impl()
      local mb, p, t

      p := parse_phrase()
      t := []
      next_token()
      =":" | throw(": expected")
      next_token()
      if any(';') then # empty group
         move(1)
      else {
         repeat {
            mb := parse_mailbox_impl()
            put(t, mb)
            next_token()
            ="," | break
         }
         =";" | throw("; expected")
      }
      return Group(t, p)
   end

   private parse_mailbox_or_group()
      local x, a

      x := &pos
      if try { a := parse_mailbox_impl() } then
         return a
      exception.clear()
      tab(x)

      return parse_group_impl()
   end

   private parse_address_list_impl(can_be_empty)
      local l
      l := []

      if \can_be_empty then {
         next_token()
         if pos(0) then
            return l
      }

      repeat {
         put(l, parse_mailbox_or_group()) | fail
         next_token()
         ="," | return l
      }
   end

   private parse_mailbox_list_impl(can_be_empty)
      local l
      l := []

      if \can_be_empty then {
         next_token()
         if pos(0) then
            return l
      }

      repeat {
         put(l, parse_mailbox_impl())
         next_token()
         ="," | return l
      }
   end

   #
   # month =  "Jan"  /  "Feb" /  "Mar"  /  "Apr" /  "May"  /  "Jun" /  
   #         "Jul"  /  "Aug" /  "Sep"  /  "Oct" /  "Nov"  /  "Dec"
   #
   private parse_month()
      local i
      next_token()
      every i := 1 to *MONTHS do
         if =MONTHS[i] then
            return i
      throw("invalid month")
   end

   private parse_day()
      local s
      next_token()
      s := tab(many(&digits)) | throw("digit expected")
      if *s <= 2 then
         return integer(s)
      throw("invalid day: " || s)
   end

   private parse_year()
      local s
      next_token()
      s := tab(many(&digits)) | throw("digit expected")
      if *s = (2 | 4) then
         return integer(s)
      throw("invalid year: " || s)
   end

   private parse_2dig()
      local s
      next_token()
      s := tab(many(&digits)) | throw("digit expected")
      if *s = 2 then
         return integer(s)
      throw("2 digit field expected")
   end

   private parse_zone()
      next_token()
      tab(upto(TZ_CHARS)) | throw("Expected tz char")
      return tab(many(TZ_CHARS)) | throw("Expected tz char")
   end

   #
   # date-time = [ day "," ] date time
   # day =  "Mon"  / "Tue" /  "Wed"  / "Thu"/  "Fri"  / "Sat" /  "Sun"
   # date =  1*2DIGIT month 2DIGIT        
   # time =  hour zone                    
   # hour =  2DIGIT ":" 2DIGIT [":" 2DIGIT]
   #
   private parse_date_time_impl()
      local d, m, y, s, hh, mm, ss, zz

      next_token()
      if =(!DAYS) then {
         next_token()
         ="," | throw(", expected")
      }
      d := parse_day()
      m := parse_month()
      y := parse_year()

      hh := parse_2dig()
      next_token()
      =":" | throw(": expected")
      mm := parse_2dig()
      next_token()
      if any(':') then {
         move(1)
         ss := parse_2dig()
      } else
         ss := 0

      s := parse_zone()
      zz := Timezone.get_known_timezone(s) | Timezone(0, s)

      return Time(y, m, d, hh, mm, ss, zz)
   end

   #
   # field           =    field-name ":" [field-body] CRLF
   # field-name      =  1*<any CHAR, excluding CTLs, SPACE, and ":">
   # field-body      =   *text [CRLF LWSP-char field-body]
   #
   private parse_field_impl(message)
      local f, v
      next_token()
      f := tab(many(FIELD_NAME_CHARS)) | throw("Expect fieldname chars")
      next_token()
      =":" | throw(": expected")
      next_token()
      # The handling of folding is done by the caller, so we just take the
      # rest of the string as the field-body.
      v := tab(0)
      message.add_header(f, v)
      return
   end

   #
   # See rfc 2045 (formerly 1521)
   #
   #  encoding := "Content-Transfer-Encoding" ":" mechanism
   #
   #  mechanism := "7bit" / "8bit" / "binary" /
   #               "quoted-printable" / "base64" /
   #               ietf-token / x-token
   #               ; These values are not case sensitive
   #
   private parse_content_transfer_encoding_impl()
      local s

      if s := tab(matchcl("7bit"|"8bit"|"binary"|"quoted-printable"|"base64")) then
         return s

      if match("X-"|"x-") then
         return parse_extension_token()

      return parse_ietf_token()
   end

   #
   #  type := discrete-type / composite-type
   #  discrete-type := "text" / "image" / "audio" / "video" /
   #                   "application" / extension-token
   #
   #  composite-type := "message" / "multipart" / extension-token
   #
   #  extension-token := ietf-token / x-token
   #
   #  x-token := <The two characters "X-" or "x-" followed, with
   #              no intervening white space, by any token>
   #
   private parse_type()
      local s

      if s := tab(matchcl("application"|"audio"|"image"|"message"|"multipart"|"text"|"video")) then
         return s

      if match("X-"|"x-") then
         return parse_extension_token()

      return parse_ietf_token()
   end

   #
   # subtype := extension-token / iana-token
   #
   private parse_subtype()
      if match("X-"|"x-") then
         return parse_extension_token()

      return parse_iana_token()
   end

   #
   #  ietf-token := <An extension token defined by a
   #                 standards-track RFC and registered
   #                 with IANA.>
   #
   private parse_ietf_token()
      return parse_token_1521()
   end

   #
   #  iana-token := <A publicly-defined extension token. Tokens
   #                 of this form must be registered with IANA
   #                 as specified in RFC 2048   
   #
   private parse_iana_token()
      return parse_token_1521()
   end

   #
   # extension-token :=  x-token / iana-token
   #
   #     iana-token := <a publicly-defined extension token,
   #               registered with IANA, as specified in
   #               appendix E>
   #
   #     x-token := <The two characters "X-" or "x-" followed, with
   #                 no intervening white space, by any token>
   #
   private parse_extension_token()
      local s
      s := =("X-"|"x-") | throw("X- or x- expected")
      return s || parse_token_1521()
   end

   #
   # token  :=  1*<any (ASCII) CHAR except SPACE, CTLs,
   # or tspecials>
   #
   # tspecials :=  "(" / ")" / "<" / ">" / "@"
   #             /  "," / ";" / ":" / "\" / <">
   #             /  "/" / "[" / "]" / "?" / "="
   #            ; Must be in quoted-string,
   #            ; to use within parameter values
   #
   private parse_token_1521()
      return tab(many(ATOM_CHAR_1521)) | throw("RFC1521 Token expected")
   end

   #
   #  value := token / quoted-string
   #
   private parse_value()
      if any('\"') then
         return parse_and_convert_quoted_string()
      else
         return parse_token_1521()
   end

   #
   #  parameter := attribute "=" value
   #
   #  attribute := token
   #               ; Matching of attributes
   #               ; is ALWAYS case-insensitive.
   #
   #  On success the resulting value is placed into o.
   #
   private parse_parameter(o)
      local key, val
      key := parse_token_1521()
      next_token()
      ="=" | throw("= expected")
      next_token()
      val := parse_value()
      o.set_parameter(key, val)
      return
   end

   #
   # See rfc 2045 (formerly 1521)
   #
   #  content := "Content-Type" ":" type "/" subtype
   #             *(";" parameter)
   #             ; Matching of media type and subtype
   #             ; is ALWAYS case-insensitive.
   #
   #  attribute := token
   #               ; Matching of attributes
   #               ; is ALWAYS case-insensitive.
   #
   #  value := token / quoted-string
   #
   private parse_content_type_impl()
      local ty, st, ct

      next_token()

      ty := parse_type()
      next_token()
      ="/" | throw("/ expected")
      next_token()
      st := parse_subtype()
      ct := ContentType(ty, st)

      repeat {
         next_token()
         =";" | break
         next_token()
         parse_parameter(ct)
      }

      return ct
   end

   #
   # disposition-type := "inline"
   #                       / "attachment"
   #                       / extension-token
   #                       ; values are not case-sensitive
   private parse_disposition_type()
      local s

      if s := tab(matchcl("inline"|"attachment"|"form-data")) then
         return s

      if match("X-"|"x-") then
         return parse_extension_token()

      throw("Unknown Content-disposition type")
   end

   #
   # See rfc 2183 (formerly 1806)
   #
   #  disposition := "Content-Disposition" ":"
   #                   disposition-type
   #                   *(";" disposition-parm)
   #
   #  disposition-type := "inline"
   #                       / "attachment"
   #                       / extension-token
   #                       ; values are not case-sensitive
   #
   #  NB - These are all parsed as 'parameter'; further parsing being done
   #  within the ContentDisposition class itself (thus they are treated the
   #  same as headers in a Message, ie stored a strings, but with get/set
   #  methods for the appropriate object types).
   #
   #  disposition-parm := filename-parm
   #                    / creation-date-parm
   #                    / modification-date-parm
   #                    / read-date-parm
   #                    / size-parm
   #                    / parameter
   #
   #  filename-parm := "filename" "=" value
   #
   #  creation-date-parm := "creation-date" "=" quoted-date-time
   #  modification-date-parm := "modification-date" "=" quoted-date-time
   #  read-date-parm := "read-date" "=" quoted-date-time
   #
   #  size-parm := "size" "=" 1*DIGIT
   #
   #  quoted-date-time := quoted-string
   #                   ; contents MUST be an RFC 822 `date-time'
   #                   ; numeric timezones (+HHMM or -HHMM) MUST be used
   #
   private parse_content_disposition_impl()
      local ty, cd

      next_token()
      ty := parse_disposition_type()
      cd := ContentDisposition(ty)

      repeat {
         next_token()
         =";" | break
         next_token()
         parse_parameter(cd)
      }

      return cd
   end

   private end_check(o)
      next_token()
      pos(0) | throw("Extraneous input:" || tab(0))
      return o
   end

   public parse_mailbox(s)
      return s ? simple_try{ end_check(parse_mailbox_impl()) }
   end

   public parse_group(s)
      return s ? simple_try{ end_check(parse_group_impl()) }
   end

   public parse_address_list(s, can_be_empty)
      return s ? simple_try{ end_check(parse_address_list_impl(can_be_empty)) }
   end

   public parse_mailbox_list(s, can_be_empty)
      return s ? simple_try{ end_check(parse_mailbox_list_impl(can_be_empty)) }
   end

   public parse_date_time(s)
      return s ? simple_try{ end_check(parse_date_time_impl()) }
   end

   public parse_field(s, message)
      return s ? simple_try{ parse_field_impl(message) }
   end

   public parse_content_type(s)
      return s ? simple_try{ end_check(parse_content_type_impl()) }
   end

   public parse_content_disposition(s)
      return s ? simple_try{ end_check(parse_content_disposition_impl()) }
   end

   public parse_content_transfer_encoding(s)
      return s ? simple_try{ end_check(parse_content_transfer_encoding_impl()) }
   end
end
