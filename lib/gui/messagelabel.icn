package gui

import graphics(Selection), lang(Class)

#
# Useful class for displaying a status/error message
#
class MessageLabel(Label)
   private
      want_s, want_n, keep, message, message_tt

   private set_impl(s)
      local p
      if message ~=== s then {
         p := if /s then TextPaint("") else AbbreviatedTextPaint(s)
         message := s
         message_tt := &null
         set_paint(p)
      }
   end

   # Set the label to the given string `s`.  If `s` is &null, then the
   # label is cleared.  If `n` is given then the label will remain
   # unchanged for at least `n` milliseconds regardless of future
   # calls to `set`.  This can be used for particularly important
   # messages.
   #
   public set(s, n)
      local t
      if /keep then {
         set_impl(s)
         if \n then {
            keep := &yes
            t := Dispatcher.new_task{{
               repeat {
                  t.sleep(n)
                  set_impl(\want_s)
                  n := want_n
                  want_s := want_n := &null
                  if /n then
                     break
               }
               keep := &null
               t.revert()
            }}
            t.start()
         }
      } else if /want_n then {
          want_s := s
          want_n := n
      }
      link
   end

   public override get_tooltip()
      if w - border.get_total_width() < cbwin.text_width(\message) then {
         /message_tt := split_string(message,
                                     Style.TOOLTIP_FONT,
                                     scale(500))
         return message_tt
      }
   end

   private on_copy()
      parent_dialog.own_selection(Selection.CLIPBOARD,
                                  StaticTextSelectionOwner(\message))
   end

   private on_rpress(ev)
      local pm, m
      \message | fail
      # Ensure the copy icon is in the cache.
      Class.ensure_initialized(TextContextMenu)
      m := Menu()
      m.add(TextMenuItem().
               set_label("Copy").
               set_paint_left(ImagePaint().set_cache("txt.copy")).
               connect(on_copy, Event.ACTION))
      pm := PopupMenu()
      pm.popup(self, m, ev.x, ev.y)
   end

   public override new()
      Label.new()
      set_label("")
      connect(on_rpress, Event.MOUSE_RIGHT_PRESS)
      return
   end
end
