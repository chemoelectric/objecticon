#summary Accessing superclass instance methods.

= Casts =

Casts are small icon structures which are used to access overridden methods. Consider the following program :-

{{{
import io

class X()
   public f()
      write("in X.f")
   end
end

class Y(X)
   public f()
      write("in Y.f")
   end
end

procedure main()
   local i
   i := Y()
   i.f()
   cast(i,X).f()
end
}}}

Here the method `Y.f()` overrides `X.f()`.  Without a cast, it would be impossible to call the latter on an instance of class `Y`. Note that `cast` is just a builtin function, and does not use any special syntax.

The cast contains two things, namely an object and a target class, which must be one of the object's [Inheritance#Implemented_classes implemented classes].  The result is something that will use the cast class, rather than the object's class, to resolve method field values.  So in the above example `cast(i,X).f()`, the value of `f` comes from the class `X`, and hence the overridden method is invoked.

Usually casts are used in a method which has overridden another method. So for example, if the `Y.f()` needed to call `X.f()`, then it could do so as follows:-

{{{
class Y(X)
   public f()
      write("in Y.f")
      cast(self,X).f()
   end
end
}}}

Note that you can only access instance methods via a cast.  Any attempt to access a static method or a variable causes a runtime error.