############################################################################
#
#	File:     bincvt.icn
#
#	Subject:  Procedures to convert binary data
#
#	Author:   Robert J. Alexander
#
#	Date:     October 16, 1996
#
############################################################################
#
#  These procedures are normally used for processing of binary data
#  read from, or to be written to, a file.
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################

package ipl.bincvt

import util(need_string, need_integer)

#
#  Convert the bytes of string s into an integer, assuming big-endian
#  ordering, and that the input represents an unsigned number.
#
procedure be_unsigned(s)
   local i
   s := need_string(s)
   i := 0
   every i := ord(s) + 256 * i
   return i
end

#
#  Convert the bytes of string s into an integer, assuming big-endian
#  ordering, and that the input represents a two's complement signed
#  number.
#
procedure be_signed(s)
   local i
   s := need_string(s)
   i := be_unsigned(s)
   if ord(s[1]) >= 128 then
      i -:= ishift(1, 8 * *s)
   return i
end

#
# The same as `be_unsigned`, but assuming little-endian ordering.  It
# is equivalent to :-
# ~
#   be_unsigned(reverse(s))
# ~
#
procedure le_unsigned(s)
   local i, j
   s := need_string(s)
   i := 0
   j := 1
   every i +:= j * ord(s) do
      j *:= 256
   return i
end

#
# The same as `be_signed`, but assuming little-endian ordering.  It is
# equivalent to :-
# ~
#   be_signed(reverse(s))
# ~
#
procedure le_signed(s)
   local i
   s := need_string(s)
   i := le_unsigned(s)
   if ord(s[-1]) >= 128 then
      i -:= ishift(1, 8 * *s)
   return i
end

#
# Returns a string from the low order `size` bytes of integer `i`,
# assuming big-endian ordering.  If `i` is negative, then a two's
# complement representation is the result.  For example :-
# ~
#  be_string(1234, 4) == "\x00\x00\x04\xd2"
#  be_string(-1234, 4) == "\xff\xff\xfb."
# ~
# For all `i` in the range `0 <= i <= 2^(8*size) - 1`,
# ~
#  be_unsigned(be_string(i, size)) = i
# ~
# and in the range `-(2^((8*size)-1)) <= i <= 2^((8*size)-1) - 1`
# ~
#  be_signed(be_string(i, size)) = i
# ~
#
procedure be_string(i, size)
   return reverse(le_string(i, size))
end

#
# The same as `be_string`, but assuming little-endian ordering. It is
# equivalent to :-
# ~
#   reverse(be_string(i, size))
# ~
procedure le_string(i, size)
   local s
   i := need_integer(i)
   size := need_integer(size, 1)
   s := ""
   every 1 to size do {
      s ||:= char(iand(i, 16rff))
      i := ishift(i, -8)
   }
   return s
end

#
# Returns a string which is a binary representation of integer `i`,
# which may be negative, in the fewest number of characters necessary,
# so that for any `i`,
# ~
#     be_signed(be_signed_string(i)) = i
# ~
#
procedure be_signed_string(i)
   return reverse(le_signed_string(i))
end

#
# Returns a string which is a binary representation of non-negative
# integer `i`, in the fewest number of characters necessary, so
# that for any valid `i`,
# ~
#     be_unsigned(be_unsigned_string(i)) = i
# ~
# The output may be shorter than `be_signed_string`; for example
# ~
#  be_signed_string(200) == "\x00\xc8"
#  be_unsigned_string(200) == "\xc8"
# ~
# Obviously the output of this procedure shouldn't be given to
# `be_signed` (the above example of 200 would give a negative result).
#
procedure be_unsigned_string(i)
   return reverse(le_unsigned_string(i))
end

#
# The little-endian equivalent of `be_signed_string`.  It is
# equivalent to :-
# ~
#   reverse(be_signed_string(i))
# ~
procedure le_signed_string(i)
   local s, j
   i := need_integer(i)
   s := ""
   repeat {
      s ||:= char(j := iand(i, 16rff))
      i := ishift(i, -8)
      if (i = 0 & j < 128) | (i = -1 & j >= 128) then break
   }
   return s
end

#
# The little-endian equivalent of `be_unsigned_string`.  It is
# equivalent to :-
# ~
#   reverse(be_unsigned_string(i))
# ~
procedure le_unsigned_string(i)
   local s, j
   i := need_integer(i, 0)
   s := ""
   repeat {
      s ||:= char(j := iand(i, 16rff))
      i := ishift(i, -8)
      if i = 0 then break
   }
   return s
end
