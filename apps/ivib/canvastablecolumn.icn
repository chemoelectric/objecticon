#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui, ipl.numbers

############################################################################
#
# Class for representing a TableColumn on the canvas.
#
class CanvasTableColumn(CanvasComponent,TableColumn)
   public 
      column_align

   #
   # CanvasComponent has an in_resize_region too, but we want TableColumn's (for preview).
   #
   public override in_resize_region(e)
      return TableColumn.in_resize_region(e)
   end

   #
   # Generate code into Code object c.
   #
   public override gen_code(c)
      local e

      self.paint.gen_code(c)
      c.add_var(self.name, class_variable)
      c.add_import(self.import_name, self.class_name)
      c.line(name || " := " || self.class_name || "()")
      c.chain("set_paint(" || self.paint.name || ")")
      c.chain("set_column_align(" || c.align_str(self.column_align) || ")")
      if \self.column_width then
         c.chain("set_column_width(" || c.scalable_dim(self.column_width) || ")")

      every e := !sort(self.wattribs) do
         c.wattrib_line(e[1], e[2])

      c.add_event_handlers(\self.event_handlers)
   end

   public override set_column_align(x)
      self.column_align := x
      TableColumn.set_column_align(x)
      link
   end

   public override rescale(f)
      CanvasComponent.rescale(f)
      self.column_width := round(\self.column_width * f)
   end

   #
   # Duplicate object.
   #
   public override dup()
      local c
      c := CanvasTableColumn()
      CanvasComponent.dup_fields(c)
      c.column_width := self.column_width
      c.set_column_align(self.column_align)
      c.set_paint(self.paint.dup(c))
      return c
   end

   #
   # Open the configuration dialog box.
   #
   public override dialog()
      return CanvasTableColumnDialog(self)
   end

   public override allows_selection()
   end

   public override allows_positioning()
   end

   public override allows_copy()
   end

   public override allows_delete()
      # Can't delete the last item
      return *parent.children > 1
   end

   public override op_delete()
      local t
      parent_Canvas.parent_dialog.push_undo()
      t := self.parent.parent
      self.parent.remove(self)
      t.get_table_content().invalidate_subject_width()
      t.layout()
      t.invalidate()
      parent_Canvas.clear_selections()
      parent_Canvas.set_modified()
      parent_Canvas.invalidate()
   end

   public override post_decode()
      self.set_column_align(self.column_align)
      CanvasComponent.post_decode()
   end

   #
   # Return the I/O template.
   #
   public override get_template()
      suspend CanvasObject.get_template() |
               ["Paint", "paint"] |
               ["Column Width", "column_width"] |
               ["Internal Alignment", "column_align"] |
               ["WAttribs", "wattribs"] |
               ["Event Handlers", "event_handlers"]
   end

   public override gen_cos()
      suspend CanvasComponent.gen_cos() | self.paint
   end

   public override new()
      TableColumn.new()
      CanvasComponent.new()
      self.column_align := Align.L
      self.class_name := "TableColumn"
      self.import_name := "gui"
      self.name := "table_column"
      return
   end
end


