package graphics

import 
   lang(Class, NoCopy, ObjectClone, Unencodable),
   util(use, error)

# This object contains pixel data either read from a file, extracted
# from a Window, or created from scratch.  The data is stored in
# various underlying formats depending on the source.
#
final class Pixels(ObjectClone, Unencodable)
   private
      ptr

   public static const
      A8,
      A16,
      RGB24,
      BGR24,
      RGBA32,
      ABGR32,
      RGB48,
      RGBA64,
      G8,
      GA16,
      AG16,
      G16,
      GA32,
      PALETTE1,
      PALETTE2,
      PALETTE4,
      PALETTE8

   private static init()
      A8        :=  "A8"
      A16       :=  "A16"
      RGB24     :=  "RGB24"
      BGR24     :=  "BGR24"
      RGBA32    :=  "RGBA32"
      ABGR32    :=  "ABGR32"
      RGB48     :=  "RGB48"
      RGBA64    :=  "RGBA64"
      G8        :=  "G8"
      GA16      :=  "GA16"
      AG16      :=  "AG16"
      G16       :=  "G16"
      GA32      :=  "GA32"
      PALETTE1  :=  "PALETTE1"
      PALETTE2  :=  "PALETTE2"
      PALETTE4  :=  "PALETTE4"
      PALETTE8  :=  "PALETTE8"
   end

   # Get the width of the block
   #
   public native get_width()

   # Get the height of the block
   #
   public native get_height()

   # Get the pixel at the given position as an Icon colour string;
   # indices run from 0 to width-1 and 0 to height-1 respectively.
   #
   public native get(x, y)

   # Set the pixel to the given Icon colour string value.  Note that
   # the value actually stored may only be an approximation of the
   # value given, depending on the underlying data format.
   #
   public native set(x, y, v)

   # Get the given pixel as an 4 element list giving the rgba values.
   #
   public native get_rgba(x, y)

   # Set the given pixel to the given rgba integer values.
   #
   public native set_rgba(x, y, r, g, b, a)

   # Dispose of the object, freeing the memory used by the block
   #
   public native close()

   # Get the format of the underlying data, which will be one of the constant values listed above.
   #
   public native get_format()

   # Get the raw underlying data as a string.
   #
   public native get_data()

   # Set the raw underlying data from a string, padding with zeroes if
   # the string is too short.
   #
   public native set_data(s)

   # Convenient method to generate 0 to get_width() - 1
   #
   public x_range()
      suspend 0 to get_width() - 1
   end

   # Convenient method to generate 0 to get_height() - 1
   #
   public y_range()
      suspend 0 to get_height() - 1
   end

   # Generate all the pixels, from left-to-right, and top-to-bottom.
   # The first pixel is (0,0), then (1,0), (2,0) and so on.
   #
   public gen()
      local y
      every y := y_range() do
         suspend get(x_range(), y)
   end

   # Generate all the pixels, as rgba lists.
   #
   public gen_rgba()
      local y
      every y := y_range() do
         suspend get_rgba(x_range(), y)
   end

   # Copy a single pixel from this instance to another.
   #
   public native copy_pixel(x1, y1, other, x2, y2)

   #
   # Encode the image to a file.
   #
   public native to_file(fname)

   # Return the number of bits of alpha depth (zero if the format
   # doesn't support storage of an alpha channel).
   #
   public native get_alpha_depth()

   # Return the number of bits of color depth.
   #
   public native get_color_depth()

   # Get the palette size, or fail if this is not a PALETTE format.
   #
   public native get_palette_size()

   # Get the palette entry at index i, as a 4-element list.  This and
   # similar methods fails unless the format is PALETTEx.  The number
   # of palette entries depends on the format; eg PALETTE4 has 2^4=16
   # possible entries, indexed 0..15.
   #
   public native get_palette_rgba(i)

   # Set the palette entry at index i to the given rgba values.
   #
   public native set_palette_rgba(i, r, g, b, a)

   # Get the palette entry at index i as an icon colour value.
   #
   public native get_palette(i)

   # Set the palette entry at index i to the given icon colour value.
   #
   public native set_palette(i, v)

   # Get the palette index contained at the given pixel location.
   #
   public native get_palette_index(x, y)

   # Set the palette index contained at the given pixel location.
   #
   public native set_palette_index(x, y, i)

   # Return a new instance which is an exact copy of this instance.
   # No data is shared.
   #
   public clone()
      return create_for_ptr(clone_impl())
   end

   # Convert this instance to one of the same dimensions in the given
   # format.
   #
   public convert(format)
      return create_for_ptr(convert_impl(format))
   end

   # Return a new {Pixels} instance which shares the data of this
   # instance.  The underlying data is freed when the last enclosing
   # {Pixels} is closed.
   #
   public shared_copy()
      return create_for_ptr(shared_copy_impl())
   end

   # Return the number of references to the underlying data.
   #
   public native get_references()

   private object_clone()
      return clone()
   end

   private native convert_impl(format)
   private native shared_copy_impl()
   private native clone_impl()

   # Set entries in the palette according to one of the standard
   # palettes (c1,c2 etc).  Only allowed for PALETTE8 format.
   #
   public native load_palette(pal)

   package static create_for_ptr(ptr)
      local i
      i := Class.create_instance()
      i.ptr := ptr
      return i
   end

   private static native new_open_impl(s)
   private static native new_blank_impl(width, height, format)

   # The constructor for Pixels takes two formats.  With one parameter
   # a new instance is created based on the given image string, which
   # can be raw image data, or a filename.
   #
   # With two parameters, a blank instance is created of the given
   # width and height; an optional third parameter provides the
   # format.  The underlying data is allocated and set to zero.
   #
   public new(a[])
      (ptr := if *a = 1 then
         new_open_impl(a[1])
      else
         new_blank_impl!a) | fail
      return
   end
end

final class Window(NoCopy)
   private
      ptr

   public static const
      RESIZE,
      CLOSE_BUTTON,
      INVOKE_LATER

   private static const
      PATTERNS

   private static init()
      RESIZE :=       -10
      CLOSE_BUTTON := -11
      INVOKE_LATER := -40
      PATTERNS := table(,
                        "black", Pixels(8, 8, Pixels.PALETTE1).set_data("\xff\xff\xff\xff\xff\xff\xff\xff\x00"),
                        "verydark", Pixels(8, 8, Pixels.PALETTE1).set_data("\xfe\xff\xef\xff\xfe\xff\xef\xff\x00"),
                        "darkgray", Pixels(8, 8, Pixels.PALETTE1).set_data("w\xddw\xddw\xddw\xdd\x00"),
                        "gray", Pixels(8, 8, Pixels.PALETTE1).set_data("U\xaaU\xaaU\xaaU\xaa\x00"),
                        "lightgray", Pixels(8, 8, Pixels.PALETTE1).set_data("\x11D\x11D\x11D\x11D\x00"),
                        "verylight", Pixels(8, 8, Pixels.PALETTE1).set_data("\x01\x00\x10\x00\x01\x00\x10\x00\x00"),
                        "white", Pixels(8, 8, Pixels.PALETTE1).set_data("\x00\x00\x00\x00\x00\x00\x00\x00\x00"),
                        "vertical", Pixels(8, 8, Pixels.PALETTE1).set_data("\x10\x10\x10\x10\x10\x10\x10\x10\x00"),
                        "diagonal", Pixels(8, 8, Pixels.PALETTE1).set_data("\x80@ \x10\b\x04\x02\x01\x00"),
                        "horizontal", Pixels(8, 8, Pixels.PALETTE1).set_data("\x00\x00\x00\xff\x00\x00\x00\x00\x00"),
                        "grid", Pixels(8, 8, Pixels.PALETTE1).set_data("\x10\x10\x10\xff\x10\x10\x10\x10\x00"),
                        "trellis", Pixels(8, 8, Pixels.PALETTE1).set_data("\x82D(\x10(D\x82\x01\x00"),
                        "checkers", Pixels(8, 8, Pixels.PALETTE1).set_data("\x0f\x0f\x0f\x0f\xf0\xf0\xf0\xf0\x00"),
                        "grains", Pixels(8, 8, Pixels.PALETTE1).set_data("\e\x18\x81\xb16\x06`c\x00"),
                        "scales", Pixels(8, 8, Pixels.PALETTE1).set_data("\x02\x02\x05\xf8  P\x8f\x00"),
                        "waves", Pixels(8, 8, Pixels.PALETTE1).set_data("\x03\x84H0\x03\x84H0\x00"))
   end

   private static create_for_ptr(ptr)
      local i
      i := Class.create_instance()
      i.ptr := ptr
      return i
   end

   #
   # Open a new window.
   #
   public new(display)
      self.ptr := new_impl(display) | fail
      return
   end

   #
   # Produces a new window value that combines the canvas of
   # {self} with a new graphics context. The new graphics attributes
   # are copied from {self}.
   #
   public clone()
      return create_for_ptr(clone_impl())
   end

   # Return a new instance which shares both canvas and context of
   # {self}.
   #
   public shared_copy()
      return couple(self)
   end

   #
   # Produces a new window value that binds the canvas of {self} with
   # the graphics context of {other}.
   #
   public couple(other)
      return create_for_ptr(couple_impl(other))
   end

   private static native new_impl(display)
   private native clone_impl()
   private native couple_impl(other)

   #
   # Grab the pointer so that all mouse events are directed to this window.
   #
   public native grab_pointer()

   #
   # Undoes the effect of {grab_pointer}.
   #
   public native ungrab_pointer()

   #
   # Grab the keyboard so that all key events are directed to this window.
   #
   public native grab_keyboard()

   #
   # Undoes the effect of {grab_keyboard}.
   #
   public native ungrab_keyboard()

   public native get_font_ascent()
   public native get_bg()
   public native get_canvas()
   public native get_clip()
   public native get_depth()
   public native get_font_descent()
   public native get_display()
   public native get_draw_op()
   public native get_dx()
   public native get_dy()
   public native get_leading()
   public native get_fg()
   public native get_font()
   public native get_font_width()
   public native get_geometry()
   public native get_height()
   public native get_input_mask()
   public native get_label()
   public native get_line_style()
   public native get_line_width()
   public native get_max_height()
   public native get_max_size()
   public native get_max_width()
   public native get_min_height()
   public native get_min_size()
   public native get_min_width()
   public native get_pointer()
   public native get_pos()
   public native get_x()
   public native get_y()
   public native can_resize()
   public native get_size()
   public native get_width()

   # Return the number of references to this window's canvas and
   # context, as a two-element list.
   #
   public native get_references()

   #
   # The graphics context attribute bg specifies current background
   # color.
   #
   public native set_bg(v)

   #
   # The canvas attribute canvas specifies the window visibility.
   # Possible values include "hidden", "iconic", "normal", "popup"
   #
   public native set_canvas(v)

   #
   # The graphics context attribute draw_op specifies the way in which
   # newly drawn pixels are combined with the pixels that are already
   # in a window.
   #
   public native set_draw_op(v)

   #
   # The graphics context attribute leading specifies extra space to
   # add to font ascent, descent and height, to calculate line ascent,
   # descent and height.  It is specified as a real number, being the
   # proportion of font height.
   #
   public native set_leading(v)

   #
   # The graphics context attribute dx specifies a horizontal offset
   # that is added to the x value of every coordinate pair before
   # interpretation.
   #
   public native set_dx(v)

   #
   # The graphics context attribute dy specifies a vertical offset
   # that is added to the y value of every coordinate pair before
   # interpretation.
   #
   public native set_dy(v)

   #
   # The graphics context attribute fg specifies the current
   # foreground color.
   #
   public native set_fg(v)

   #
   # The graphics context attribute font specifies the current text font.
   #
   public native set_font(v)

   #
   # Specifies the position and size of the window.
   #
   public native set_geometry(x, y, width, height)

   #
   # Set the height of the window in pixels.
   #
   public native set_height(height)

   #
   # Specifies an image to load into the window.  On success, the
   # window is resized to the size of the image.  The given parameter
   # {v} may be raw binary image data (eg a gif file), or the name of
   # a file containing an image.
   #
   public set_image(v)
      return if is(v, Pixels) then {
         set_size(v.get_width(), v.get_height())
         draw_image(,, v)
      } else use {
         v := Pixels(v),
         {
            set_size(v.get_width(), v.get_height())
            draw_image(,, v)
         }
      }
   end

   #
   # Set the input mask for the window.  If the string {v} contains
   # "k" then key release events are reported; if it contains "m" then
   # mouse motion events are reported.
   #
   public native set_input_mask(v)

   #
   # The canvas attribute icon specifies an image used to identify the
   # window.  If null, then the setting is cleared.  The parameter
   # takes the same format as {set_image}.
   #
   public set_icon(v)
      return if /v | is(v, Pixels) then
         set_icon_impl(v)
      else use {
         v := Pixels(v),
         set_icon_impl(v)
      }
   end

   private native set_icon_impl(id)

   # Return a new {Pixels} instance which contains the current window
   # icon Fails if no icon set.  Note a new distinct instance is
   # always returned, which must be closed by the caller.
   #
   public get_icon()
      return Pixels.create_for_ptr(get_icon_impl())
   end

   private native get_icon_impl()

   #
   # The canvas attribute label specifies a title used to identify the
   # window.
   #
   public native set_label(v)

   #
   # The graphics context attribute line_style specifies the form of
   # drawn lines.  Possible values may include: "enddisc", "endsquare",
   # although this is system dependent.
   #
   public native set_line_style(v)

   #
   # The graphics context attribute linewidth specifies the width of
   # drawn lines.
   #
   public native set_line_width(v)

   #
   # Set the maximum height of the window in pixels.
   #
   public native set_max_height(height)

   #
   # Set the maximum size of the window in pixels.
   #
   public native set_max_size(width, height)

   #
   # Set the maximum width of the window in pixels.
   #
   public native set_max_width(width)

   #
   # Set the minimum height of the window in pixels.
   #
   public native set_min_height(height)

   #
   # Set the minimum size of the window in pixels.
   #
   public native set_min_size(width, height)

   #
   # Set the minimum width of the window in pixels.
   #
   public native set_min_width(width)

   # A helpful method to set the pattern to something equivalent to
   # the old Icon pattern of the same name using a textured fill
   # style.
   #
   public set_textured_pattern(s)
      local p
      return use {
         p := get_fill_pattern(s, get_fg(), get_bg()),
         set_pattern(p)
      }
   end

   # A helpful method to set the pattern to something equivalent to
   # the old Icon pattern of the same name using a masked fill
   # style.
   #
   public set_masked_pattern(s)
      local p
      return use {
         p := get_fill_pattern(s, get_fg(), "transparent"),
         set_pattern(p)
      }
   end

   # Return a new {Pixels} instance with a paletted image which
   # represents the classic Icon pattern of the given name, with the
   # given foreground and background colours.
   #
   public static get_fill_pattern(s, fg, bg)
      local p
      p := member(PATTERNS, s) | return error("Unknown pattern name")
      return p.clone().
         set_palette(0, fg).
         set_palette(1, bg)
   end

   # Set the fill pattern (texture) to fill shapes (instead of the
   # foreground colour).  If no parameter is given, the setting is
   # cleared and the foreground colour is used again.  Otherwise, the
   # parameter should be a {Pixels} instance or raw image data, or an
   # image filename.
   #
   public set_pattern(v)
      return if /v | is(v, Pixels) then
         set_pattern_impl(v)
      else use {
         v := Pixels(v),
         set_pattern_impl(v)
      }
   end

   private native set_pattern_impl(v)

   # Return a new {Pixels} instance which contains the current fill
   # pattern.  Fails if no pattern set.  Note a new distinct instance
   # is always returned, which must be closed by the caller.
   #
   public get_pattern()
      return Pixels.create_for_ptr(get_pattern_impl())
   end

   private native get_pattern_impl()

   #
   # The canvas attribute pointer specifies the shape of the figure
   # that represents the mouse position.
   #
   public native set_pointer(v)

   #
   # Set the position of the window on the screen.
   #
   public native set_pos(x, y)

   #
   # Set the x position of the window on the screen.
   #
   public native set_x(v)

   #
   # Set the y position of the window on the screen.
   #
   public native set_y(v)

   #
   # Configure whether the window can or cannot be resized by the
   # user.  The parameter should be a flag value.
   #
   public native set_resize(v)

   #
   # Set the size of the window in pixels.
   #
   public native set_size(width, height)

   #
   # Set the width of the window in pixels.
   #
   public native set_width(width)

   #
   # Configure this window so that it is transient in respect of the
   # given window {w}.  This generally means that the transient window
   # stays on top of the other window, although the exact behaviour
   # depends on the window system.
   # 
   # When calling this method, this window must not be visible, and
   # the other window must be visible; if that is not the case this
   # method fails.
   #
   public native set_transient_for(w)

   #
   # Produces a beep or other signal to attract attention.
   #
   public native alert(volume)

   #
   # Sets the clipping region to the specified rectangle; subsequent
   # output extending outside its bounds is discarded. If clip() is
   # called with no arguments, clipping is disabled and the entire
   # canvas is writable.
   #
   public native clip(x, y, w, h)

   #
   # Clear the clip settings
   #
   public native unclip()

   #
   # Return the r,g,b values (plus possibly a if not opaque) of the
   # given color, as a color string
   #
   public static native color_value(k)

   #
   # Return the r,g,b,a values of the given color, as a list of 4 integers.
   #
   public static native parse_color(k)

   #
   # draw_arc(x, y, rx, ry, angle1, angle2)
   #
   public native draw_arc(x, y, rx, ry, angle1, angle2)

   #
   # event() - return an event from this window, failing if none is available.
   #
   public native event()

   #
   # draw_circle(x, y, r, angle1, angle2)
   #
   public draw_circle(x, y, r, angle1, angle2)
      return draw_arc(x, y, r, r, angle1, angle2)
   end

   #
   # draw_curve(x1,y1,...xN,yN)
   # Draw a smooth curve through the given points.
   #
   public native draw_curve(a[])

   #
   # Draw an image.  The image can be raw image data, a filename, or a
   # {Pixels} instance.
   #
   public draw_image(x, y, v)
      return if is(v, Pixels) then
         draw_image_impl(x, y, v)
      else use {
         v := Pixels(v),
         draw_image_impl(x, y, v)
      }
   end

   private native draw_image_impl(x, y, pix)

   #
   # Copy an area from this window to another window.
   #
   public native copy_to(x1, y1, w, h, dest, x2, y2)

   #
   # draw_line(x1,y1,...xN,yN)
   #
   public native draw_line(a[])

   #
   # draw_point(x, y)
   #
   public native draw_point(x, y)

   #
   # draw_polygon(x1,y1,...xN,yN)
   #
   public draw_polygon(a[])
      put(a, a[1])
      put(a, a[2])
      return draw_line!a
   end

   # A boundary of the given thickness (default 1 pixel) is filled
   # inside the given rectangle, so that the area drawn is always
   # bounded by exactly that rectangle.  If the thickness is too wide
   # to leave a gap inside the rectangle, then the rectangle is simply
   # filled.
   #
   public native draw_rectangle(x, y, width, height, thickness)

   #
   # draw_string(x, y, s)
   #
   public native draw_string(x, y, s)

   #
   # erase_area(x,y,width,height) - clear an area of the window
   #
   public native erase_area(x, y, width, height)

   #
   # pending(x[]) - add to and then produce a list of events pending on window
   #
   public native pending(a[])

   #
   # fill_arc(x, y, rx, ry, angle1, angle2)
   #
   public native fill_arc(x, y, rx, ry, angle1, angle2)

   #
   # fill_circle(x, y, r, angle1, angle2)
   #
   public fill_circle(x, y, r, angle1, angle2)
      return fill_arc(x, y, r, r, angle1, angle2)
   end

   #
   # fill_polygon(x1, y1, ...xN, yN)
   #
   public native fill_polygon(a[])

   #
   # fill_trapezoids(top1, topleft1, topright1, bottom1, bottomleft1, bottomright1, ...)
   #
   public native fill_trapezoids(a[])

   #
   # fill_triangles(topx1, topy1, leftx1, lefty1, rightx1, righty1, ...)
   #
   public native fill_triangles(a[])

   #
   # fill_rectangle(x, y, width, height)
   #
   public native fill_rectangle(x, y, width, height)

   #
   # Lower this window to the bottom of the window stack
   #
   public native lower()

   #
   # Return the characters forming keys to palette p
   #
   public static native palette_chars(p)

   #
   # Return color of key s1 in palette s2
   #
   public static native palette_color(s1, s2)

   #
   # Return key of closest color to s in palette p
   #
   public static native palette_key(s1, s2)

   #
   # Get the default font for a window, as optionally specified with
   # the OIFONT environment variable.
   #
   public static native get_default_font()

   #
   # Get the default font size for a font, as optionally specified with
   # the OIFONTSIZE environment variable.
   #
   public static native get_default_font_size()

   #
   # Return the `Pixels` format this window uses internally.
   #
   public native get_format()

   #
   # Get the contents of some pixels as a {Pixels} object.
   #
   public get_pixels(x, y, width, height)
      return Pixels.create_for_ptr(get_pixels_impl(x, y, width, height))
   end

   private native get_pixels_impl(x, y, width, height)

   #
   # Filter the given pixels according to the given filter spec.
   #
   public native filter(x, y, width, height, filter)

   #
   # Return a rectangle (as a list of four integers), representing
   # that part of the given rectangle which would be drawable on the
   # canvas; ie the intersection of the rectangle, the window and the
   # clip area if set.  If the result would be an empty area, the
   # method fails.
   #
   public native drawable(x, y, width, height)

   #
   # This is the same as `drawable`, but ignores the clip region.
   #
   public native viewable(x, y, width, height)

   #
   # Return the current root x, y position as a two-element list.
   #
   public native query_root_pointer()

   #
   # Return the current display size. as a two-element list.
   #
   public native get_display_size()

   #
   # Return the current x, y position as a two-element list, relative to
   # this window.
   #
   public native query_pointer()

   #
   # Warp the pointer to the given location, relative to this window.
   #
   public native warp_pointer(x, y)

   #
   # Raise window to the top of the window stack
   #
   public native raise()

   #
   # Give the window the input focus
   #
   public native focus()

   #
   # Returns the width of string s, in pixels, as drawn using the
   # current font.
   #
   public native text_width(s)

   #
   # Set the window system's selection
   #
   public native own_selection(selection)

   #
   # Send a response to a selection request event.
   #
   public native send_selection_response(requestor, property, target, selection, data)

   #
   # Get the window system's selection
   #
   public native request_selection(selection, target_type)

   #
   # Define a custom pointer.  The contents of this window provide the source image.
   # @param name the name of the pointer
   # @param x the x hotpoint
   # @param y the y hotpoint
   #
   public native define_pointer(name, x, y)

   #
   # Make the destination pointer be the same as the src.
   # @param dest the destination name, which need not currently be defined
   # @param src the current name.
   #
   public native copy_pointer(dest, src)

   #
   # Close this binding to the window.  If no other bindings to the
   # same canvas exist, the underlying window is closed.
   #
   public native close()

   #
   # Return the absolute leading, which is the pixels equivalent of
   # the leading attribute.  It is the rounded value of the current
   # font height multiplied by the leading attribute.
   #
   public native get_absolute_leading()

   #
   # Return the font height, which is always the sum of the font
   # ascent and the descent.
   #
   public get_font_height()
      return get_font_ascent() + get_font_descent()
   end

   #
   # Return the line height, which is always the sum of the font
   # ascent, the font descent, and two amounts of the absolute leading
   # (notionally one for the top and one for the bottom of the line).
   # This sum is also equal to the line ascent plus the line descent.
   #
   public get_line_height()
      return get_font_ascent() + get_font_descent() + 2 * get_absolute_leading()
   end

   #
   # Return the line ascent, which is the font ascent plus the
   # absolute leading.
   #
   public get_line_ascent()
      return get_font_ascent() + get_absolute_leading()
   end

   #
   # Return the line descent, which is the font descent plus the
   # absolute leading.
   #
   public get_line_descent()
      return get_font_descent() + get_absolute_leading()
   end

   #
   # Enqueue a window event.
   #
   public enqueue(eventcode, x, y, time, mod)
      /x := -1
      /y := -1
      x +:= get_dx()
      y +:= get_dy()
      /time := 0
      /mod := 0
      return pending(eventcode, x, y, time, mod)
   end

   #
   # Convenient method to open an image and return a hidden window with
   # its contents.
   # @param img the image
   #
   public static open_image(img)
      local w
      w := Window() | fail
      w.set_draw_op("source")
      w.set_image(img) | {
         w.close()
         fail
      }
      return w
   end
end

#
# Event codes for selection events.
#
class Selection()
   public static const
      # Selection request event
      REQUEST,     
      # Selection response event
      RESPONSE,
      # Selection clear event
      CLEAR,
      # Set of any of the three event types
      EVENTS,
      PRIMARY,
      SECONDARY,
      CLIPBOARD,
      UTF8_STRING_TARGET,
      STRING_TARGET,
      TIMESTAMP_TARGET,
      URI_LIST_TARGET,
      TARGETS_TARGET

   private static init()
      REQUEST := -30
      CLEAR := -31
      RESPONSE := -32
      EVENTS := set(REQUEST, CLEAR, RESPONSE)
      PRIMARY := "PRIMARY"      # These 3 must correspond to X Atom names.
      SECONDARY := "SECONDARY"
      CLIPBOARD := "CLIPBOARD"
      STRING_TARGET := "STRING"
      UTF8_STRING_TARGET := "UTF8_STRING"
      URI_LIST_TARGET := "text/uri-list"
      TIMESTAMP_TARGET := "TIMESTAMP"
      TARGETS_TARGET := "TARGETS"
   end
end

#
# Event codes for mouse events.
#
class Mouse()
   public static const
      LEFT_PRESS,
      MIDDLE_PRESS,
      RIGHT_PRESS,
      PRESS,
      LEFT_RELEASE,
      MIDDLE_RELEASE,
      RIGHT_RELEASE,
      RELEASE,
      DRAG,
      MOVEMENT,
      WHEEL_UP,
      WHEEL_DOWN,
      WHEEL,
      DRAG_OR_MOVEMENT,
      ENTER,
      EXIT,
      CROSSING

   private static init()
      LEFT_PRESS :=           -1
      MIDDLE_PRESS :=         -2
      RIGHT_PRESS :=          -3
      PRESS := set(LEFT_PRESS, MIDDLE_PRESS, RIGHT_PRESS)
      LEFT_RELEASE :=         -4
      MIDDLE_RELEASE :=       -5
      RIGHT_RELEASE :=        -6
      RELEASE := set(LEFT_RELEASE, MIDDLE_RELEASE, RIGHT_RELEASE)
      MOVEMENT :=            -12
      WHEEL_UP :=            -16
      WHEEL_DOWN :=          -17
      WHEEL := set(WHEEL_UP, WHEEL_DOWN)
      ENTER :=               -18
      EXIT :=                -19
      CROSSING := set(ENTER, EXIT)
      DRAG :=                -20
      DRAG_OR_MOVEMENT := set(DRAG, MOVEMENT)
   end
end

#
# Event codes for key events.
#
class Key()
   public static const
      # Modifier flags
      MOD_SHIFT,
      MOD_LOCK,
      MOD_CTRL,
      MOD_META,
      MOD_META2,
      MOD_META3,
      MOD_META4,
      MOD_META5,
      MOD_RELEASE,
      # Key event codes
      SHIFT_TAB,
      COMPOSE,
      DO,
      DOWN,
      END,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14,
      F15,
      F16,
      F17,
      F18,
      F19,
      F20,
      F21,
      F22,
      F23,
      F24,
      FIND,
      HELP,
      HOME,
      INSERT,
      KP_DOWN,
      KP_LEFT,
      KP_RIGHT,
      KP_UP,
      L1,
      L2,
      L3,
      L4,
      L5,
      L6,
      L7,
      L8,
      L9,
      L10,
      LEFT,
      PF1,
      PF2,
      PF3,
      PF4,
      PAUSE,
      PGDN,
      PGUP,
      PRSC,
      R1,
      R2,
      R3,
      R4,
      R5,
      R6,
      R7,
      R8,
      R9,
      R10,
      R11,
      R12,
      R13,
      R14,
      R15,
      RIGHT,
      SCROLL_LOCK,
      SELECT,
      UP,
      CURSOR,
      CURSOR_V,
      CURSOR_H,
      SUPER_L,
      SUPER_R,
      MENU,
      NAVIGATE,
      SHIFT_L,
      SHIFT_R,
      CONTROL_L,
      CONTROL_R,
      CAPS_LOCK,
      SHIFT_LOCK,
      META_L,
      META_R,
      ALT_L,
      ALT_R,
      HYPER_L,
      HYPER_R

   private static init()
      MOD_SHIFT :=    1
      MOD_LOCK :=     2
      MOD_CTRL :=     4
      MOD_META :=     8 
      MOD_META2 :=   16
      MOD_META3 :=   32
      MOD_META4 :=   64
      MOD_META5 :=   128
      MOD_RELEASE := 256
$ifdef _X_WINDOW_SYSTEM
      SHIFT_TAB :=           65056
      COMPOSE :=             65312
      DO :=                  65383
      DOWN :=                65364
      END :=                 65367
      F1 :=                  65470
      F2 :=                  65471
      F3 :=                  65472
      F4 :=                  65473
      F5 :=                  65474
      F6 :=                  65475
      F7 :=                  65476
      F8 :=                  65477
      F9 :=                  65478
      F10 :=                 65479
      F11 :=                 65480
      F12 :=                 65481
      F13 :=                 65482
      F14 :=                 65483
      F15 :=                 65484
      F16 :=                 65485
      F17 :=                 65486
      F18 :=                 65487
      F19 :=                 65488
      F20 :=                 65489
      FIND :=                65384
      HELP :=                65386
      HOME :=                65360
      INSERT :=              65379
      KP_DOWN :=             65433
      KP_LEFT :=             65430
      KP_RIGHT :=            65432
      KP_UP :=               65431
      L1 :=                  65480  # clash with f11
      L2 :=                  65481  # clash with f12
      L3 :=                  65482
      L4 :=                  65483
      L5 :=                  65484
      L6 :=                  65485
      L7 :=                  65486
      L8 :=                  65487
      L9 :=                  65488
      L10 :=                 65489
      LEFT :=                65361
      PF1 :=                 65425
      PF2 :=                 65426
      PF3 :=                 65427
      PF4 :=                 65428
      PAUSE :=               65299
      PGDN :=                65366
      PGUP :=                65365
      PRSC :=                65377
      R1 :=                  65490
      R2 :=                  65491
      R3 :=                  65492
      R4 :=                  65493
      R5 :=                  65494
      R6 :=                  65495
      R7 :=                  65496
      R8 :=                  65497
      R9 :=                  65498
      R10 :=                 65499
      R11 :=                 65500
      R12 :=                 65501
      R13 :=                 65502
      R14 :=                 65503
      R15 :=                 65504
      RIGHT :=               65363
      SCROLL_LOCK :=         65300
      SELECT :=              65376
      UP :=                  65362
      SUPER_L :=             65515
      SUPER_R :=             65516
      MENU :=                65383
      SHIFT_L :=             65505
      SHIFT_R :=             65506
      CONTROL_L :=           65507
      CONTROL_R :=           65508
      CAPS_LOCK :=           65509
      SHIFT_LOCK :=          65510
      META_L :=              65511
      META_R :=              65512
      ALT_L :=               65513
      ALT_R :=               65514
      HYPER_L :=             65517
      HYPER_R :=             65518

$elsifdef _MS_WIN32
      DOWN :=               40
      END :=                35
      SCROLL_LOCK :=        145
      F1 :=                 112
      F2 :=                 113
      F3 :=                 114
      F4 :=                 115
      F5 :=                 116
      F6 :=                 117
      F7 :=                 118
      F8 :=                 119
      F9 :=                 120
      F10 :=                121
      F11 :=                122
      F12 :=                123
      F13 :=                124
      F14 :=                125
      F15 :=                126
      F16 :=                127
      F17 :=                128
      F18 :=                129
      F19 :=                130
      F20 :=                131
      F21 :=                132
      F22 :=                133
      F23 :=                134
      F24 :=                135
      HELP :=               47
      HOME :=               36
      INSERT :=             45
      LEFT :=               37
      PAUSE :=              19
      PGDN :=               34
      PGUP :=               33
      PRSC :=               44
      RIGHT :=              39
      SELECT :=             41
      UP :=                 38
      SHIFT_TAB :=          0
      COMPOSE :=            0
      DO :=                 0
      FIND :=               0
      KP_DOWN :=            0
      KP_LEFT :=            0
      KP_RIGHT :=           0
      KP_UP :=              0
      L1 :=                 0
      L2 :=                 0
      L3 :=                 0
      L4 :=                 0
      L5 :=                 0
      L6 :=                 0
      L7 :=                 0
      L8 :=                 0
      L9 :=                 0
      L10 :=                0
      PF1 :=                0
      PF2 :=                0
      PF3 :=                0
      PF4 :=                0
      R1 :=                 0
      R2 :=                 0
      R3 :=                 0
      R4 :=                 0
      R5 :=                 0
      R6 :=                 0
      R7 :=                 0
      R8 :=                 0
      R9 :=                 0
      R10 :=                0
      R11 :=                0
      R12 :=                0
      R13 :=                0
      R14 :=                0
      R15 :=                0
      SUPER_L :=            0
      SUPER_R :=            0
      MENU :=               0
$endif
      NAVIGATE := set(UP, DOWN, LEFT, RIGHT, PGUP, PGDN, HOME, END)
      CURSOR := set(UP, DOWN, LEFT, RIGHT)
      CURSOR_V := set(UP, DOWN)
      CURSOR_H := set(LEFT, RIGHT)
   end
end
