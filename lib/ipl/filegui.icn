package ipl.filegui

import
   ipl.sort,
   ipl.strings,
   ipl.wildcard,
   ipl.pdco,
   gui,
   io,
   xdg,
   util

class ListEntryWithIcon(ListEntry)
   package readable
      icon
end

class ColorFilesItemPaint(WithCloneItemPaint)
   protected make_clone(W)
      return W.clone()
   end

   public get_color(data)
      local st
      st := data.lstat
      return case st.mode_str[1] of {
         "d" : "purple"
         "l" : "cyan"
         "p" : "orange"
         "s" : "dark gray"
         "b" : "gray"
         "c" : "gray"
         default : {
            if st.mode_str[-7] == ("x" | "s") then
               "green"
            else case map(string(Files.get_extension(data.name))) of {
               "cmd"|"exe"|"com"|"btm"|"bat" : "green"
               "tar"|"tgz"|"arj"|"taz"|"lzh"|"zip"|"z"|"Z"|"gz"|"xz"|"bz2"|"rar" : "red"
               "jpg"|"jpeg"|"png"|"gif"|"bmp"|"xbm"|"xpm": "blue"
               "mp4"|"flv"|"avi"|"wmv"|"webm"|"3gp"|"mpeg"|"mpg"|"m4v"|"mkv": "pink" 
            }
         }
      } | "black"
   end

   public get_string(data)
      return data.name
   end

   public get_width(W, data)
      return W.text_width(get_string(data))
   end

   public get_constant_height(W)
      return W.get_font_height()
   end

   public get_size(W, data)
      return Size(get_width(W, data), W.get_font_height())
   end

   public draw(W, data, x, y)
      W := get_clone(W).set_fg(get_color(data))
      draw_string_ex(W, x, y, get_string(data))
   end
end

$load PDF_16 "fileicons/pdf.png"
$load IMAGE_16 "fileicons/image.png"
$load VIDEO_16 "fileicons/video.png"
$load ARCHIVE_16 "fileicons/archive.png"
$load AUDIO_16 "fileicons/audio.png"
$load EXE_16 "fileicons/exe.png"
$load CHARDEVICE_16 "fileicons/chardevice.png"
$load BLOCKDEVICE_16 "fileicons/blockdevice.png"
$load SYMLINK_16 "fileicons/symlink.png"
$load SOCKET_16 "fileicons/socket.png"
$load PIPE_16 "fileicons/pipe.png"
$load HTML_16 "fileicons/html.png"

#
# An `ItemPaint` which adds an appropriate icon to each lines displayed.  The data should be
# `ListEntryWithIcon` instances.
#
class IconFilesItemPaint(ItemPaint)
   public static const ICON_SIZE

   private static init()
      ICON_SIZE := scale(16)
      ImageCache.
         name_image("fi.PDF_16", PDF_16).
         name_image("fi.IMAGE_16", IMAGE_16).
         name_image("fi.VIDEO_16", VIDEO_16).
         name_image("fi.ARCHIVE_16", ARCHIVE_16).
         name_image("fi.AUDIO_16", AUDIO_16).
         name_image("fi.EXE_16", EXE_16).
         name_image("fi.CHARDEVICE_16", CHARDEVICE_16).
         name_image("fi.BLOCKDEVICE_16", BLOCKDEVICE_16).
         name_image("fi.SYMLINK_16", SYMLINK_16).
         name_image("fi.SOCKET_16", SOCKET_16).
         name_image("fi.PIPE_16", PIPE_16).
         name_image("fi.HTML_16", HTML_16)

      try_xdg("fi.folder", "folder", "gui.CLOSED_FOLDER_16")
      try_xdg("fi.symlink", "emblem-symbolic-link", "fi.SYMLINK_16")
      try_xdg("fi.exe", "application-x-executable", "fi.EXE_16")
      resize("fi.pdf", "fi.PDF_16")
      resize("fi.image", "fi.IMAGE_16")
      resize("fi.video", "fi.VIDEO_16")
      resize("fi.archive", "fi.ARCHIVE_16")
      resize("fi.audio", "fi.AUDIO_16")
      resize("fi.chardevice", "fi.CHARDEVICE_16")
      resize("fi.blockdevice", "fi.BLOCKDEVICE_16")
      resize("fi.socket", "fi.SOCKET_16")
      resize("fi.pipe", "fi.PIPE_16")
      resize("fi.html", "fi.HTML_16")
      resize("fi.file", "gui.FILE_16")
   end

   private static resize(dest, src)
      ImageCache.copy_key_with_resize(dest, src, ICON_SIZE, ICON_SIZE)
   end

   private static try_xdg(key, icon, alt)
      local k, w
      if k := Xdg.find_icon_and_cache(icon, ICON_SIZE) then {
         w := ImageCache.get(k)
         if w.get_width() > ICON_SIZE then
            k := ImageCache.get_key_with_resize(k, ICON_SIZE, ICON_SIZE)
      } else
         k := ImageCache.get_key_with_resize(alt, ICON_SIZE, ICON_SIZE)
      ImageCache.copy_key(key, k)
   end

   public get_width(W, data)
      return ICON_SIZE + Gui.TEXT_INSET + W.text_width(get_string(data))
   end

   public get_constant_height(W)
      return max(W.get_font_height(), ICON_SIZE)
   end

   public get_size(W, data)
      return Size(get_width(W, data), get_constant_height(W))
   end

   public get_string(data)
      return data.name
   end

$ifdef _PNG
   public get_xdg_for_file(f)
      local k, w
      k := Xdg.find_icon_for_file_and_cache(f, ICON_SIZE) | Xdg.find_icon_and_cache("text-x-generic", ICON_SIZE) | fail
      w := ImageCache.get(k)
      if w.get_width() > ICON_SIZE then
         k := ImageCache.get_key_with_resize(k, ICON_SIZE, ICON_SIZE)
      return k
   end

   public get_icon(data)
      local st, k
      st := data.lstat
      k := case st.mode_str[1] of {
         "d" : "fi.folder"
         "l" : "fi.symlink"
         "s" : "fi.socket"
         "p" : "fi.pipe"
         "b" : "fi.blockdevice"
         "c" : "fi.chardevice"
         default : {
            if st.mode_str[-7] == ("x" | "s") then
               "fi.exe"
            else {
               get_xdg_for_file(data.name) | case map(string(Files.get_extension(data.name))) of {
                  "pdf": "fi.pdf"
                  "cmd"|"exe"|"com"|"btm"|"bat" : "fi.exe"
                  "tar"|"tgz"|"arj"|"taz"|"lzh"|"zip"|"z"|"Z"|"gz"|"xz"|"bz2"|"rar" : "fi.archive"
                  "jpg"|"jpeg"|"png"|"gif"|"bmp"|"xbm"|"xpm": "fi.image"
                  "mp4"|"flv"|"avi"|"wmv"|"webm"|"3gp"|"mpeg"|"mpg"|"m4v"|"mkv": "fi.video"
                  "mp3"|"wav"|"mid"|"rm": "fi.audio"
                  "htm"|"html": "fi.html"
               }
            }
         }
      } | "fi.file"
      return ImageCache.get(k) | syserr("Bad cache key in IconFilesItemPaint")
   end
$else
   public get_icon(data)
      local k
      k := if data.stat.mode_str[1] == "d" then
         "fi.folder"
      else
         "fi.file"
      return ImageCache.get(k) | syserr("Bad cache key in IconFilesItemPaint")
   end
$endif

   public draw(W, data, x, y, w, h)
      local i
      if is(data, ListEntryWithIcon) then {
         if not(i := \data.icon) then
            i := data.icon := get_icon(data)
      } else
         i := get_icon(data)
      i.copy_to(,,,, W, x + (ICON_SIZE - i.get_width()) / 2, y + (h - i.get_height()) / 2)
      x +:= ICON_SIZE + Gui.TEXT_INSET
      w -:= ICON_SIZE + Gui.TEXT_INSET
      draw_string_ex(W, x, y, limit_text(W, get_string(data), w))
   end
end

#
# An `ItemPaint` for a string list of directories, which adds a folder
# icon to each line displayed.
#
#
class StringDirItemPaint(IconFilesItemPaint)
   public get_string(data)
      return data
   end

   public get_icon(data)
      return ImageCache.get("fi.folder")
   end
end

#
# A `SuggestField` for selecting files.
#
class FileSuggestField(SuggestField)
   public
      cwd,
      matches,
      prefix,
      dir_list,
      dir_list_name,
      directories_only_flag,
      pats

   public set_directories_only(s)
      self.directories_only_flag := check_flag(s)
      return self
   end

   public set_cwd(d)
      self.cwd := d
      return self
   end

   public set_filter(f)
      local pat
      pats := []
      f ? repeat {
         pat := tab(upto(';') | 0)
         put(pats, Wildcard(pat))
         move(1) | break
      }
      return self
   end

   private match_entry(e)
      local n
      n := e.name
      if e.stat.mode_str[1] == "d" then {
         if not Files.is_relative_dir(n) then
            return
      } else {
         if /directories_only_flag & (/pats | (!pats).match(n) = *n + 1) then
            return
      }
   end

   private do_dir_list(s)
      if dir_list_name === s then
         return dir_list
      dir_list := qsort(Files.ucs_list(s, ListEntryWithIcon), Files.name_cmp) | fail
      dir_list_name := s
      return dir_list
   end

   #
   # Calculate the matches list and prefix string from the current
   # contents.  A new contents can then be calculated by simply
   # appending the prefix to the name of a member of the matches list.
   #
   private calc_matches()
      local path, s, t
      path := FilePath(contents)
      if not path.is_absolute() then
         path := FilePath(cwd).append(path)
      matches := []
      if *contents = 0 | contents[-1] == Files.PATH_SEPARATOR then {
         do_dir_list(path.str()) | fail
         every t := !dir_list do {
            if match_entry(t) then
               put(matches, t)
         }
         prefix := contents
      } else {
         do_dir_list(path.parent().str()) | fail
         s := path.get(-1)
         every t := !dir_list do {
            if match_entry(t) & match(s, t.name) then
               put(matches, t)
         }
         prefix := contents[1:-*s]
      }
      return
   end

   protected do_request()
      calc_matches() | fail
      # No point in a list which is a copy of what we already have
      if *matches = 1 & endswith(contents, matches[1].name) then
         return []
      return matches
   end

   public convert_element(o)
      if /directories_only_flag & o.stat.mode_str[1] == "d" then
         return prefix || text(o.name) || Files.PATH_SEPARATOR
      else
         return prefix || text(o.name)
   end

   public create_popup()
      return ItemPaintList().
         set_item_paint(IconFilesItemPaint()).
         set_item_border(EmptyBorder().
                            set_insets(Gui.TEXT_INSET, Gui.TEXT_INSET, 0, 0).
                            set_x_align(Align.L))
   end

   #
   # Get the longest common initial name from the matches list.  Eg if
   # we have ["mark", "mary", "marion"], we get "mar".
   #
   private get_longest_prefix()
      local i, s, t, e
      i := 1
      t := u""
      repeat {
         s := matches[1].name[1+:i] | break
         every e := !matches do
            e.name[1+:i] == s | break break
         t := s
         i +:= 1
      }
      return t
   end

   public handle_tab(e)
      local t
      if \tl then {
         # Calculate the string we could insert.  If not
         # directories-only, and we have a single directory, append
         # a /.  So for example
         # "/ho" + tab -> "/home/" rather than "/home"
         t := prefix || if /directories_only_flag & *matches = 1 & matches[1].stat.mode_str[1] == "d" then
            matches[1].name || Files.PATH_SEPARATOR
         else
            get_longest_prefix()

         # If the calculated string is longer than what we have,
         # insert it.  Otherwise, if we have selected from the list
         # then trigger a change to refresh the list.  If in
         # directories only mode, append a "/"; this will show the
         # next dir.  So for example "/ho", press tab, choose "/home",
         # press tab again to set to "/home/" and show its contents.

         if *contents < *t then
            assign_contents(t, e)
         else if *tl.get_selections() = 1 then {
            if /directories_only_flag then
               on_change(e)
            else
               assign_contents(contents || Files.PATH_SEPARATOR, e)
         }
      } else {
         # As above, calculate the string we could insert.
         calc_matches() | fail
         t := prefix || if /directories_only_flag & *matches = 1 & matches[1].stat.mode_str[1] == "d" then
            matches[1].name || Files.PATH_SEPARATOR
         else
            get_longest_prefix()

         # Again as above, insert the string if it's longer.
         # Otherwise trigger a change.  The only special case is if we
         # are in directories mode and press tab whilst contents is an
         # unambiguous directory; in this case append a /, which will
         # show its contents.  Eg "/home" + tab -> set to "/home/" and
         # list contents.
         if *contents < *t then
            assign_contents(t, e)
         else if *contents = *t & \directories_only_flag & *matches = 1 & matches[1].stat.mode_str[1] == "d" then
            assign_contents(t || Files.PATH_SEPARATOR, e)
         else
            on_change(e)
      }
   end

   public keeps(e)
      return
   end

   public handle_key(e)
      if e.code == "\t" then
         handle_tab(e)
      else
         SuggestField.handle_key(e)
   end

   public new()
      SuggestField.new()
      self.set_contents(u"")
      cwd := Files.getcwd()
      set_direction(Direction.DOWN)
      return
   end
end

# The border used to highlight which element of the path the mouse is
# over.
#
package class FileTrailBorder(LineBorder)
   public draw(W, x, y, w, h)
      local i, W2
      use {
         W2 := Gui.style.get_dashed_clone(W),
         {
            every i := 0 to line_width - 1 do
               W2.draw_rectangle(x + i, y + i, w - 2 * i, h - 2 * i)
         }
      }
   end
end

#
# A directory button in the FileTrail - everything other than "/" elements.
#
package class FileTrailButton(TextButton)
   private readable p, tt

   private changed()
      parent.on_change(p.ucs())
   end

   # Set whether this element is disabled for input and displays "..."
   # rather than its normal filename.  If f is set, then spc gives the
   # amount of space available for the filename.  If null, it means
   # the whole area is available, but we need to end with dots anyway.
   #
   package set_dots(f, spc)
      local s
      if /f then {
         set_is_shaded(&no)
         set_label(p.get(-1))
         set_tooltip()
      } else {
         # Get the filename, but with dots at the end.
         s := p.get(-1)
         if *s < 3 then
            s := u"..."
         else
            s[-3:0] := u"..."
         while *s > 3 & cbwin.text_width(s) > \spc do
            s[-4:0] := u"..."
         set_is_shaded(&yes)
         set_label(s)
         set_tooltip(tt)
      }
   end

   public new(p, tt)
      TextButton.new()
      self.p := p
      self.tt := tt
      set_dots()
      set_accepts_focus(&no)
      set_draw_own_shading(&yes)
      set_border(CompoundBorder().
                 set_outer(FileTrailBorder().set_line_width(Gui.FINE_WIDTH)).
                 set_inner(EmptyBorder().
                           set_l_inset(Gui.TEXT_INSET).
                           set_r_inset(Gui.TEXT_INSET)).
                 set_x_align(Align.L))
      set_border_whilst_entered(&yes)
      connect(changed, Event.ACTION)
      return
   end
end

#
# A drop-down list in the FileTrail (shown by a "/" element).
#
package class FileTrailList(ButtonOnlyList)
   private readable 
      p,        # The FilePath giving the path to this point
      child     # The optional child to the right, for setting the selection in the popup

   public create_button()
      return TextButton().set_label("/")
   end

   public create_popup()
      return ItemPaintList().
         set_item_paint(IconFilesItemPaint()).
         set_item_border(EmptyBorder().
                            set_insets(Gui.TEXT_INSET, Gui.TEXT_INSET, 0, 0).
                            set_x_align(Align.L))
   end

   public open_popup(ev)
      local e, i, l
      l := []
      every e := !Files.ucs_list(p.str(), ListEntryWithIcon) do {
         if e.stat.mode_str[1] == "d" & not Files.is_hidden(e.name) then
            put(l, e)
      }
      if *l = 0 then
         fail
      qsort(l, Files.name_cmp)
      set_selection_list(l)
      if i := Positions{(!l).name, \child} then
         set_selection(i)
      ButtonOnlyList.open_popup(ev)
   end

   private changed()
      local o
      o := object_get_selection()
      parent.on_change(p.child(o.name).ucs())
   end

   public new(p, child)
      ButtonOnlyList.new()
      self.p := p
      self.child := child
      set_accepts_focus(&no)
      set_selection_list([])
      clear_constraints()
      b.set_border_whilst_entered(&yes).
         set_border(CompoundBorder().
                          set_outer(FileTrailBorder().set_line_width(Gui.FINE_WIDTH)).
                          set_inner(EmptyBorder().
                                    set_l_inset(Gui.TEXT_INSET).
                                    set_r_inset(Gui.TEXT_INSET)))
      connect(changed, Event.SELECTION_CHANGED)
      return
   end
end

# A component for displaying a path as a series of buttons which
# select an element of the path, or popup a list of sibling
# directories.  A {FileTrail.DIR_CHANGED_EVENT} event is fired
# when a directory is selected.
#
class FileTrail(Component)
   public static const
      DIR_CHANGED_EVENT

   private static init()
      DIR_CHANGED_EVENT := "dir changed"
   end

   package on_change(s)
      fire(DIR_CHANGED_EVENT, s)
   end

   public layout()
      reset_all()
      Component.layout()
      check_limits()
   end

   # Set all the children back to their original state, as though we
   # have enough space to display everything.
   private reset_all()
      local c
      every c := !children do {
         c.set_is_hidden(&no)
         if is(c, FileTrailButton) then
            c.set_dots(&no)
      }
      # The last FileTrailButton is shaded, since it represents the
      # current directory.
      children[-2].set_is_shaded(&yes)
   end

   # Go through the children to see at what point one cannot be fully
   # displayed, and adjust accordingly to show a "..." element.
   private check_limits()
      local c, i, r, spc
      every c := children[i := 1 to *children] do {
         # Calculate the intersection with this component - may fail
         # if the child is completely obscured.
         r := intersect(c) | &null
         if /r | (r.w < c.w) then {
            # c is fully or partially obscured; everything to the
            # right of c is fully obscured, everything to the left is
            # fully visible.
            if is(c, FileTrailList) then {
               # c is a FileTrailList element; hide it and set the
               # FileTrailButton to the left (if any) to end with "..."
               c.set_is_hidden(&yes)
               children[i - 1].set_dots(&yes)
            } else if (spc := (\r).w - (c.border.l_inset + cbwin.text_width("..."))) > 0 then {
               # c is a FileTrailButton and has enough room to show
               # the "..." itself, and perhaps some of the filename.
               c.set_dots(&yes, spc)
            } else {
               # c is a FileTrailButton but hasn't enough room to show
               # the "..." itself.  So hide it, the FileTrailList to
               # the left, and show the dots in the FileTrailButton
               # two places to the left.
               c.set_is_hidden(&yes)
               children[i - 1].set_is_hidden(&yes)
               children[i - 2].set_dots(&yes)
            }
            break
         }
      }
   end

   # Set the path to show to the given (ucs) string.  If the path is
   # not absolute, then it is converted to an absolute path, all
   # elements of which must be ucs, or failure occurs.
   #
   public set_path(p)
      local f, i, g
      p := ucs(p) | runerr(128, p)
      remove_all()
      # Ensure all elements are ucs.
      f := FilePath(p).canonical().ucs_path() | fail
      every i := 2 to f.size() do {
         g := f.slice(1, i)
         if i > 2 then
            add(FileTrailButton(g, f.slice(i - 1, 0).ucs()))
         add(FileTrailList(g, f.get(i)))
      }
      if f.size() > 1 then
         add(FileTrailButton(f, f.get(-1)))
      # The rightmost element takes up the rest of the space to give
      # left alignment.
      add(FileTrailList(f).
            set_constraint("x_align", Align.L).
            set_constraint("x_weight", 1.0))
      if is_live() then {
         reset_layout()
         layout()
         invalidate()
      }
   end

   public new()
      Component.new()
      set_layout(GridLayout().set_dii(0).set_doi(0))
      set_constraint("x_fill", &yes)
      set_constraint("x_align", Align.L)
      set_constraint("x_weight", 1.0)
      return
   end
end

#
# A dialog for renaming a file.
#
class RenameDialog(NameDialog)
   private
      p

   public on_okay_button(ev)
      local s
      s := p.sibling(name_field.get_contents()).ucs()
      if Files.access(s) then
         msg("File already exists")
      else if Files.rename(p.ucs(), s) then {
         result := s
         dispose()
      }
      else
         msg("Failed: " || &why)
   end

   # The constructor requires a ucs string, being the file to be renamed.
   public new(s)
      s := ucs(s) | runerr(128, s)
      p := FilePath(s)
      NameDialog.new(p.get(-1))
      set_label("Rename file")
      # Start with text selected.
      name_field.set_mark(1).set_size(scale(300))
      return
   end
end

#
# A dialog for creating a new directory
#
class NewDirectoryDialog(NameDialog)
   private
      p

   public on_okay_button(ev)
      local s
      s := p.child(name_field.get_contents()).ucs()
      if Files.mkdir(s) then {
         result := s
         dispose()
      }
      else
         msg("Failed: " || &why)
   end

   # The constructor requires a ucs string, being the directory in
   # which the new directory is to be created. to be renamed.
   public new(s)
      s := ucs(s) | runerr(128, s)
      p := FilePath(s)
      NameDialog.new()
      set_label("New directory")
      name_field.set_size(scale(300))
      return
   end
end
