#
# $Id: sets.icn 3945 2013-02-22 20:36:44Z r.parlett $
#

package datastruct

import lang, util, ipl.pdco-(List)

#
# This is a common superclass for a list-like data structure.
#
# A subclass must implement different optional methods depending on
# its capability mode, as follows :-
#
#  * `INSERT` - `insert()`
#  * `DELETE` - `delete()`
#
# There are several other abstract methods which all classes must of
# course implement, and others which may be overridden to provide more
# efficient implementations than the default.
#
# Note that the behaviour of the various generator methods should the
# list be concurrently modified during the course of generation,
# depends upon the particular list implementation.
#
abstract class List(HasMode, ObjectOutput, ObjectHash, ObjectEquals)
   public static const
      # An empty list instance
      EMPTY_LIST,
      # Constant indicating modifiable capability
      MODIFY,
      # Constant indicating insert capability
      INSERT,
      # Constant indicating delete capability
      DELETE

   private static init()
      EMPTY_LIST := EmptyList()
      MODIFY := 1
      INSERT := 2
      DELETE := 4
   end

   #
   # Insert a new element `x` at position `i`.  Fails if `i` is
   # invalid; otherwise succeeds and returns `self`.  Only implemented
   # with INSERT capability.
   #
   public optional insert(i, x)
   
   #
   # Delete element at position `i` from the list.  Fails if `i` is
   # invalid; otherwise succeeds and returns `self`.  Only implemented
   # with DELETE capability.
   #
   public optional delete(i)

   #
   # Return the member at position `i`.  If the list has MODIFY
   # capability, a variable is returned, otherwise a value is
   # returned.
   #
   public abstract at(i)

   #
   # Remove and return an element from the left end of list.
   #
   public get()
      return 1(.at(1), delete(1))
   end

   #
   # Remove and return an element from the right end of the list.
   #
   public pull()
      return 1(.at(-1), delete(-1))
   end

   #
   # Push an element onto the left end of the list.
   #
   public push(x)
      return insert(1, x)
   end

   #
   # Push an element onto the right end of the list.
   #
   public put(x)
      return insert(0, x)
   end

   #
   # Generate the members, starting with the element at index `i`,
   # which defaults to 1.  If the list has MODIFY capability,
   # variables are generated, otherwise values are generated.
   #
   public abstract gen(i)

   #
   # Generate the members in reverse order, starting with the element
   # before index `i` (thus generating the elements in the range 1:i);
   # `i` defaults to 0.  If the list has MODIFY capability, variables
   # are generated, otherwise values are generated.
   #
   public abstract back(i)

   #
   # Return the size of the list.
   #
   public abstract size()

   #
   # Clear the list of all elements. Always succeeds and returns
   # `self`.  Only implemented with DELETE capability.
   #
   public clear()
      while delete(1)
      link
   end

   #
   # Generate the indices i such that at(i) === x
   #
   public keyof(x)
      suspend Positions{ gen(), x }
   end

   #
   # Return an icon list of the elements.
   #
   public list()
      return ipl.pdco.List{ gen() }
   end

   #
   # Return an icon list of the elements in the range i:j
   #
   public slice(i, j)
      local s
      s := cvslice(i, j, size()) | fail
      return ipl.pdco.List{ gen(s.lo) \ (s.hi - s.lo) }
   end

   #
   # Succeed iff the size is zero.
   #
   public empty()
      succeed size() = 0
   end

   #
   # Return a random value (cf ?l for a list).  If the list has MODIFY
   # capability, a variable is returned, otherwise a value is
   # returned.
   #
   public random()
      return at(?(0 < size()))
   end

   #
   # Custom equals mirrors the `equals()` behaviour for builtin lists.
   #
   protected override object_equals(other, seen)
      local e, x
      other.size() = size() | fail
      e := create other.gen()
      every x := gen() do
         equals(x, @e, seen) | fail
      return not @e
   end

   #
   # Custom hash mirrors the `hash()` behaviour for builtin lists.
   #
   protected override object_hash(depth)
      local n, i
      n := size()
      if depth > 1 then
         every i := hash(gen() \ 10, depth - 1) do
            n := 37 * iand(n, 16rffffff)  + i
      return n
   end

   #
   # Output object
   #
   protected override object_output(oo)
      local e, sep
      if oo.simple{gen()} then {
         oo.object_start(self)
         every e := gen() do {
            if \sep then
               oo.writes1(",")
            oo.traverse(e)
            sep := &yes
         }
         oo.object_end(self)
      } else {
         oo.nl().
            object_start(self).
            iplus()
         every e := gen() do {
            if \sep then
               oo.writes1(",")
            oo.nl().
               traverse(e)
            sep := &yes
         }
         oo.iminus().
            nl().
            object_end(self)
      }
   end
end

#
# A helpful abstract class for a list, which wishes to implement the
# generator methods `gen()` and `back()` in terms of `at()`.
#
# In the case of changes to the list during generation, the methods
# behave like the builtin `forward()` and `back()` functions.
#
abstract class ListImpl1(List)
   public override gen(i)
      if i := first_forward(i, size()) then
         suspend |1(at(i), i +:= 1)
   end

   public override back(i)
      if i := first_back(i, size()) then
         suspend |1(at(i), i -:= 1)
   end
end

#
# A helpful abstract class for a list which wishes to implement `at()`
# in terms of `gen()`.
#
abstract class ListImpl2(List)
   public override at(i)
      return Index{ gen(), cvpos_item(i, size()) }
   end
end

#
# This list wraps another list to provide an unmodifiable view of it.
#
class UnmodifiableList(List)
   protected const
      l

   public override at(i)
      return .l.at(i)
   end

   public override gen(i)
      suspend .l.gen(i)
   end

   public override back(i)
      suspend .l.back(i)
   end

   public override size()
      return l.size()
   end

   public override empty()
      return l.empty()
   end

   public override random()
      return .l.random()
   end

   public override get_mode()
      return 0
   end

   public new(l)
      self.l := need_instance(l, List)
      return
   end
end

#
# A `List` that is just a wrapper around a builtin list
#
class BuiltinList(List)
   private const
      l

   public override insert(i, x)
      link default.insert(l, i, x)
   end

   public override delete(i)
      link default.delete(l, i)
   end

   public override at(i)
      return l[i]
   end

   public override get()
      return default.get(l)
   end

   public override pull()
      return default.pull(l)
   end

   public override push(x)
      default.push(l, x)
      link
   end

   public override put(x)
      default.put(l, x)
      link
   end

   public override keyof(x)
      suspend default.keyof(l, x)
   end

   public override gen(i)
      suspend forward(l, i)
   end

   public override back(i)
      suspend default.back(l, i)
   end

   public override slice(i, j)
      return l[i:j]
   end

   public override size()
      return *l
   end

   public override random()
      return ?l
   end

   public override clear()
      default.clear(l)
      link
   end

   public override get_mode()
      return MODIFY + INSERT + DELETE
   end

   public new(l)
      self.l := need_list(\l) | []
      return
   end
end

#
# An empty list.  An instance of this class is `List.EMPTY_LIST`.
#
class EmptyList(ListImpl1)
   public override at(i)
   end

   public override size()
      return 0
   end

   public override get_mode()
      return 0
   end
end

package record NodeSlice(len, h, t)

#
# A node in a `LinkedList`.
#
class LinkedListNode()
   package
      nxt
   public
      val

   #
   # Create and insert a new node immediately after this node, with
   # value `x`.  The new node is returned.
   #
   public insert_after(x)
      nxt := LinkedListNode(nxt, x)
      return .nxt
   end

   #
   # Unlink the node immediately after this node.  Fails if there is
   # no such node, or returns the unlinked node.  This can be helpful
   # whilst iterating over a list and deleting nodes.
   #
   # Example :-
   # ~
   #   l := LinkedList(3, 3,10,20,3,3,30,3,40,50,60,70,3)
   #   # Delete all the 3's from the list.
   #   # Start with those at the front.
   #   while l.at(1) = 3 do
   #      l.get()
   #   # Then iterate over the rest.
   #   every n := l.node(1).gen() do {
   #      while n.get_next().val = 3 do
   #         n.unlink_next()
   #   }
   #   # Now l is (10,20,30,40,50,60,70)
   # ~
   public unlink_next()
      local n
      if n := \nxt then {
         nxt := n.nxt
         return n
      }
   end

   #
   # Set the next node to `n`, which may be `&null`.
   #
   public set_next(n)
      need_instance(\n, LinkedListNode)
      nxt := n
      link
   end

   #
   # Generate this node and all subsequent nodes.
   #
   public gen()
      local n
      n := self
      repeat {
         suspend n
         n := \n.nxt | fail
      }
   end

   #
   # Return the next node, or fail if there is none.
   #
   public get_next()
      return .\nxt
   end

   #
   # Move along the list `i` (>= 0) places.  Returns the node at that
   # position, or fail if the end of the list is encountered.
   #
   public move(i)
      local n
      i := need_integer(i, 0)
      n := self
      every 1 to i do
         n := \n.nxt | fail
      return n
   end

   #
   # Return a new `LinkedList`, with this node as its head.
   #
   public list()
      return LinkedList.from_node(self)
   end

   package new(nxt, val)
      self.nxt := nxt
      self.val := val
      return
   end
end

#
# A `List` implementation based on a simple linked list.  Note some of
# the operations which suspend values may behave differently from the
# builtin list if the list is concurrently modified.
#
class LinkedList(List)
   private
      nxt

   public override insert(i, x)
      link new_node(i, x)
   end

   #
   # This is like `insert()`, but returns the new node that has been
   # inserted.
   #
   public new_node(i, x)
      local n, r
      n := node_before(i) | fail
      n.nxt := r := LinkedListNode(n.nxt, x)
      return r
   end

   public override delete(i)
      local n
      n := node_before(i) | fail
      n.nxt := (\n.nxt).nxt | fail
      link
   end

   public override at(i)
      return node(i).val
   end

   public override empty()
      return /nxt
   end

   public override pull()
      local n, v
      n := node_before(-1) | fail
      v := n.nxt.val
      n.nxt := &null
      return v
   end

   #
   # Generate the nodes in the list, starting at index `i` (default
   # 1).  Each node represents one entry in the list.  The node `val`
   # field may be changed if desired, to edit the value in the list.
   #
   # See also `LinkedListNode.gen()`.
   #
   public nodes(i)
      /i := 1
      suspend node(i).gen()
   end

   #
   # Generate the nodes in reverse order, starting with the node
   # before index `i` (thus generating the elements in the range 1:i);
   # `i` defaults to 0. (see `nodes()`).
   #
   public back_nodes(i)
      local n
      i := need_integer(\i) | 0
      n := node(i - 1) | fail
      repeat {
         suspend n
         n := before(n) | fail
      }
   end

   public override gen(i)
      suspend nodes(i).val
   end

   public override back(i)
      suspend back_nodes(i).val
   end

   #
   # If node `n` appears in this list, and is not the first element,
   # return the node immediately before it, or fail otherwise.
   #
   public before(n)
      local t
      need_instance(n, LinkedListNode)
      t := nxt
      while \t do {
         if t.nxt === n then
            return t
         t := t.nxt
      }
   end

   public override size()
      return Length{ nodes() }
   end

   public override clear()
      nxt := &null
      link
   end

   public override get_mode()
      return MODIFY + INSERT + DELETE
   end

   #
   # Return the head value of the list, or fail if the list is empty.
   #
   public head()
      return (\nxt).val
   end

   #
   # Set the head of the list (ie its first value), or fail if this
   # list is empty.
   #
   public set_head(x)
      link (\nxt).val := x
   end

   #
   # Return the tail of the list, or fail if the list is empty.
   #
   public tail()
      return from_node((\nxt).nxt)
   end

   #
   # Set the tail of the list to share the elements of the list
   # `other`, or fail if this list is empty.
   #
   public set_tail(other)
      need_instance(other, LinkedList)
      link (\nxt).nxt := other.nxt
   end

   #
   # Set the tail of the list to the empty list (leaving just one
   # element), or fail if this list is empty.
   #
   public clear_tail()
      link (\nxt).nxt := &null
   end

   #
   # Set the head node to the given node, which may be `&null`.
   #
   public set_nxt(n)
      need_instance(\n, LinkedListNode)
      nxt := n
      link
   end

   #
   # Return the head node, or fail if the list is empty.
   #
   public get_nhead()
      return .\nxt
   end

   #
   # Set this list to share the same elements as `other`.
   #
   public set_list(other)
      need_instance(other, LinkedList)
      nxt := other.nxt
      link
   end

   #
   # Return a new list which shares the elements of this list from
   # the notional range `i:0`.  The result may be an empty list.
   #
   public from(i)
      return from_node(node0(i))
   end

   #
   # Succeed iff this list shares the same elements as list `other`.
   #
   public same(other)
      need_instance(other, LinkedList)
      succeed nxt === other.nxt
   end

   #
   # Return the list index position of the given node, or fail if it
   # is not in the list.
   #
   public node_index(n)
      need_instance(n, LinkedListNode)
      return Positions{ (\nxt).gen(), n }
   end

   #
   # Given an index range `i:j`, this method returns the corresponding
   # nodes at the beginning and end of the range.  If the range is out
   # of bounds, the method fails.  Otherwise, a record is returned
   # with `len`, `h` and `t` fields indicating the length of the range
   # and the head and tail nodes respectively.  If the range is empty,
   # then `len` is zero and the other two fields are null.
   #
   public node_cvslice(i, j)
      local n, i1, d, h, t

      i := need_integer(i)
      j := need_integer(j)

      if i > j then
         i :=: j

      unless j > 0 & i <= 0 then {
         # Since i <= j,
         #    i > 0 & j > 0 or i <= 0 & j <= 0
         h := node0(i) | fail
         if i = j then
            return NodeSlice(0)
         t := (\h).move(j - i - 1) | fail
         return NodeSlice(j - i, h, t)
      }

      # j > 0 & i <= 0
      i1 := i
      n := self
      repeat {
         if j = 1 then
            h := n
         if \t then
            t := t.nxt
         else if i = 0 then
            t := self
         else
            i +:= 1
         n := n.nxt
         j -:= 1
         if /n then {
            if /h | /t then
               fail
            d := i1 - j
            return if d = 0 then
               NodeSlice(0)
            else if d < 0 then
               NodeSlice(-d, t.nxt, h)
            else   # d > 0
               NodeSlice(d, h.nxt, t)
         }
      }

   end

   public override slice(i, j)
      local s
      s := node_cvslice(i, j) | fail
      return ipl.pdco.List{ s.h.gen().val \ s.len }
   end

   #
   # Return the node containing element `i`, or fail if `i` is out of
   # range.
   #
   public node(i)
      return .\node0(i)
   end

   #
   # Like node(i), but additionally allowing index 0 (or size()+1) to
   # return &null.
   #
   private node0(i)
      return node_before(i).nxt
   end

   #
   # Return the node before the slice position i; position 1 returns
   # self, the "virtual node" before the first node; this is the case
   # even for an empty list.  0 will return the last element, or self
   # for an empty list.
   #
   private node_before(i)
      local n, r
      i := need_integer(i)
      if i = 1 then
         return self
      if i > 1 then
         return (\nxt).move(i - 2)
      # i <= 0
      n := self
      repeat {
         if \r then
            r := r.nxt
         else if i = 0 then
            r := self
         else
            i +:= 1
         n := n.nxt
         if /n then
            return \r
      }
   end

   package static from_node(n)
      local i
      i := Class.create_instance()
      i.nxt := n
      return i
   end

   #
   # Create an instance and add each of the given entries.
   #
   public new(entries[])
      every nxt := LinkedListNode(nxt, default.back(entries))
      return
   end
end

#
# A node in a `DoublyLinkedList`.
#
class DoublyLinkedListNode()
   package
      nxt,        # The next node, or &null if this node was unlinked.
      prev        # The previous node, or &null if this node was unlinked.
   public
      val         # The value associated with this node.

   #
   # Create and insert a new node immediately before this node, with
   # value `x`.  The new node is returned.
   #
   public insert_before(x)
      need_linked()
      prev.nxt := prev := DoublyLinkedListNode(prev, self, x)
      return .prev
   end

   #
   # Create and insert a new node immediately after this node, with
   # value `x`.  The new node is returned.
   #
   public insert_after(x)
      need_linked()
      return nxt.insert_before(x)
   end

   #
   # Given a `DoublyLinkedList`, adopt all of its nodes into this
   # list, inserting them before this node.  Afterwards, `other` will
   # be empty.
   #
   public splice_before(other)
      need_linked()
      need_instance(other, DoublyLinkedList)
      unless other.empty() then {
         prev.nxt := other.sentinel.nxt
         other.sentinel.nxt.prev := prev
         prev := other.sentinel.prev
         other.sentinel.prev.nxt := self
         other.clear()
      }
      link
   end

   #
   # Given a `DoublyLinkedList`, adopt all of its nodes into this
   # list, inserting them after this node.  Afterwards, `other` will
   # be empty.
   #
   public splice_after(other)
      need_linked()
      nxt.splice_before(other)
      link
   end

   #
   # Remove this node from its list, by unlinking it from its adjacent
   # nodes.
   #
   # After a node has been unlinked it cannot be used for further
   # operations, and any attempt to do so will cause a runtime error.
   # (See also `is_linked`).
   #
   # Example :-
   # ~
   #   l := DoublyLinkedList(99)
   #   r := l.node(1)
   #   r.unlink()
   #   # l is now empty, r unlinked.
   #   r.insert_after(100)      # runtime error
   # ~
   #
   public unlink()
      need_linked()
      prev.nxt := nxt
      nxt.prev := prev
      link
   end

   #
   # Check if this node is "linked" (hasn't been unlinked), signalling
   # a runtime error otherwise.
   #
   public need_linked()
      is_linked() | runerr("Node has been unlinked", self)
      link
   end

   #
   # Succeed iff this node is "linked" (meaning it hasn't been
   # unlinked).
   #
   public is_linked()
      succeed prev.nxt === self
   end

   #
   # Return the previous node, or fail if there is none.
   #
   public get_prev()
      need_linked()
      return prev.real()
   end

   #
   # Return the next node, or fail if there is none.
   #
   public get_next()
      need_linked()
      return nxt.real()
   end

   #
   # Return the `DoublyLinkedList` associated with this node, which
   # must be "linked".
   #
   # This method works by moving along the list to the sentinel node,
   # whose value is a reference to the creating list.  It is therefore
   # an O(n) operation.
   #
   # If this list of nodes was orphaned because the parent list
   # performed a `clear()`, then this method fails.
   #
   public get_list()
      local n
      need_linked()
      n := nxt
      while n := n.real().nxt
      return .\n.val
   end

   #
   # Generate this node and all subsequent nodes.  It is permissible
   # to edit the list during iteration, including unlinking the last
   # node generated.
   #
   # Example :-
   # ~
   #   l := DoublyLinkedList(3,10,20,3,3,30,3,40,50,60,70,3)
   #   # Delete all the 3's from the list.
   #   every n := l.nodes() do
   #      if n.val=3 then n.unlink()
   #   # Now l is (10,20,30,40,50,60,70)
   # ~
   public gen()
      local n
      need_linked()
      n := self
      repeat {
         suspend n
         n := n.nxt.real() | fail
      }
   end

   #
   # Generate this node and all previous nodes.
   #
   public back()
      local n
      need_linked()
      n := self
      repeat {
         suspend n
         n := n.prev.real() | fail
      }
   end

   package real()
      link
   end

   #
   # Return the list index position of this node in its enclosing
   # list.
   #
   public index()
      return Length{ back() }
   end

   #
   # Return the list index position of this node, relative to the
   # tail, in its enclosing list.  A negative integer is returned.
   #
   public rev_index(n)
      return -Length{ gen() }
   end

   #
   # Move along the list `i` places; positive means towards the tail,
   # negative means towards the head.  Returns the node at that
   # position, or fail if either end of the list is encountered.
   #
   public move(i)
      local n
      i := need_integer(i)
      need_linked()
      n := self
      if i > 0 then {
         every 1 to i do
            n := n.nxt.real() | fail
      } else {
         every 1 to -i do
            n := n.prev.real() | fail
      }
      return n
   end

   #
   # This method combines a `move` and a `unlink`.  First, `move(i)`
   # is performed, and the result is noted.  Then the `unlink` is
   # peformed.  The result of the `move` is returned; if the `move`
   # failed, then this method fails, but the `unlink` is carried out
   # regardless.
   #
   # This gives an alternative way to iterate over the list and unlink
   # selected nodes.
   #
   # Example :-
   # ~
   #   l := DoublyLinkedList(10,20,30,40,50,60,70)
   #   r := l.node(4)
   #   r.val     # 40
   #   r := r.move_unlink(1) # move 1 right, then unlink
   #   # Now l is (10,20,30,50,60,70)
   #   r.val     # 50
   # ~
   #
   public move_unlink(i)
      local t
      t := move(i)
      unlink()
      return \t
   end

   package new(prev, nxt, val)
      self.prev := prev
      self.nxt := nxt
      self.val := val
      return
   end
end

package class DoublyLinkedListSentinel(DoublyLinkedListNode)
   package override real()
   end
end

#
# A `List` implementation based on a doubly linked list.  Note some of
# the operations which suspend values may behave differently from the
# builtin list if the list is concurrently modified.
#
class DoublyLinkedList(List)
   package
      sentinel

   public override insert(i, x)
      link new_node(i, x)
   end

   #
   # This is like `insert()`, but returns the new node that has been
   # inserted.
   #
   public new_node(i, x)
      return node0(i).insert_before(x)
   end

   public override empty()
      succeed sentinel.nxt === sentinel
   end

   private new_sentinel()
      sentinel := DoublyLinkedListSentinel(,, self)
      sentinel.nxt := sentinel.prev := sentinel
   end

   #
   # This is a constant-time operation that leaves the former list
   # nodes intact, but entirely divorced from this list.  The old
   # nodes will remain "linked" to one another, and can still be
   # operated upon, but without affecting this list.
   #
   public override clear()
      sentinel.val := &null
      new_sentinel()
      link
   end

   #
   # Insert the contents of another `DoublyLinkedList` at position
   # `i`.  Afterwards, `other` is empty.  It is not permissible to
   # splice a list into itself.
   #
   # Example :-
   # ~
   #   l := DoublyLinkedList(10,20,30,40)
   #   m := DoublyLinkedList(96,97,98) 
   #   l.splice(3, m)
   #   # Now l is (10,20,96,97,98,30,40)
   #   # and m is empty.
   # ~
   #
   public splice(i, other)
      link node0(i).splice_before(other)
   end

   public override delete(i)
      link node(i).unlink()
   end

   public override at(i)
      return node(i).val
   end

   public override size()
      return Length{ nodes() }
   end

   #
   # Generate the nodes in the list, starting at index `i` (default
   # 1).  Each node represents one entry in the list.  The node `val`
   # field may be changed if desired, to edit the value in the list.
   #
   # See also `DoublyLinkedListNode.gen()`.
   #
   public nodes(i)
      /i := 1
      suspend node(i).gen()
   end

   #
   # Generate the nodes in reverse order, starting with the node
   # before index `i` (thus generating the elements in the range 1:i);
   # `i` defaults to 0. (see `nodes()`).
   #
   public back_nodes(i)
      i := need_integer(\i) | 0
      suspend node(i - 1).back()
   end

   public override gen(i)
      suspend nodes(i).val
   end

   public override back(i)
      suspend back_nodes(i).val
   end

   #
   # Given a (positive) index i and a known list size, adjust i to an
   # equivalent negative index, if that would make lookup using
   # `node()` faster.
   #
   public static adjust_index(i, sz)
      i := need_integer(i, 1)
      sz := need_integer(sz, 0)
      if 2 * i > sz + 1 then
         i -:= sz + 1
      return i
   end

   #
   # Given an index range `i:j`, this method returns the corresponding
   # nodes at the beginning and end of the range.  If the range is out
   # of bounds, the method fails.  Otherwise, a record is returned
   # with `len`, `h` and `t` fields indicating the length of the range
   # and the head and tail nodes respectively.  If the range is empty,
   # then `len` is zero and the other two fields are null.
   #
   public node_cvslice(i, j)
      local n, i1, d, h, t
      i := need_integer(i)
      j := need_integer(j)

      if i > j then
         i :=: j

      if i > 0 & j > 0 then {
         h := node0(i) | fail
         if i = j then
            return NodeSlice(0)
         t := h.real().move(j - i - 1) | fail
         return NodeSlice(j - i, h, t)
      }

      if i <= 0 & j <= 0 then {
         t := node0(j) | fail
         if i = j then
            return NodeSlice(0)
         h := t.move(i - j) | fail
         return NodeSlice(j - i, h, t.prev)
      }

      # j > 0 & i <= 0
      i1 := i
      n := sentinel
      repeat {
         if j = 1 then
            h := n
         if \t then
            t := t.nxt
         else if i = 0 then
            t := sentinel
         else
            i +:= 1
         n := n.nxt
         j -:= 1
         unless n.real() then {
            if /h | /t then
               fail
            d := i1 - j
            return if d = 0 then
               NodeSlice(0)
            else if d < 0 then
               NodeSlice(-d, t.nxt, h)
            else   # d > 0
               NodeSlice(d, h.nxt, t)
         }
      }
   end

   public override slice(i, j)
      local s
      s := node_cvslice(i, j) | fail
      return ipl.pdco.List{ s.h.gen().val \ s.len }
   end

   #
   # Remove the elements in the range `i:j` and return them as another
   # `DoublyLinkedList` instance.
   #
   # Example :-
   # ~
   #   l := DoublyLinkedList(10,20,30,40,50,60,70)
   #   m := l.extract(2, 5)
   #   # Now l is (10,50,60,70)
   #   # and m is (20,30,40)
   # ~
   #
   public extract(i, j)
      local s
      s := node_cvslice(i, j) | fail
      return if s.len = 0 then
         DoublyLinkedList()
      else
         from_nodes(s.h, s.t)
   end

   #
   # Check that `x` is a "linked" `DoublyLinkedListNode` instance,
   # signalling a runtime error otherwise.
   #
   public static need_node(x)
      return need_instance(x, DoublyLinkedListNode).need_linked()
   end

   #
   # Check nodes `h` forward to `t` form a sub-list, signalling a
   # runtime error otherwise.
   #
   public static need_sublist(h, t)
      need_node(h)
      need_node(t)
      unless h.gen() === t then
         runerr("Nodes don't form a sublist")
      return
   end

   #
   # Given two nodes `h` and `t`, forming a sub-list with `h` equal to
   # or coming before `t`, extract that sub-list from its current list
   # and return it as a new `DoublyLinkedList`, with `h` and `t`
   # forming the new list's head and tail node respectively.
   #
   public static extract_nodes(h, t)
      need_sublist(h, t)
      return from_nodes(h, t)
   end

   #
   # This is like `extract_nodes`, but foregoes any check of the
   # mentioned sub-list requirement, and is thus a constant-time
   # operation.
   #
   # Cautionary note: if the sub-list requirement is not satisifed,
   # then corrupted lists will result.
   #
   public static unsafe_extract_nodes(h, t)
      return from_nodes(need_node(h), need_node(t))
   end

   private static from_nodes(h, t)
      local i
      i := Class.create_instance()
      h.prev.nxt := t.nxt
      t.nxt.prev := h.prev
      i.sentinel := DoublyLinkedListSentinel(t, h, i)
      t.nxt := h.prev := i.sentinel
      return i
   end

   public override get_mode()
      return MODIFY + INSERT + DELETE
   end

   #
   # Like node(i), but additionally allowing index 0 (or size()+1) to
   # return the sentinel node.
   #
   private node0(i)
      i := need_integer(i)
      return if i = 0 | (i = 1 & empty()) then
         sentinel
      else if i > 1 then
         node(i - 1).nxt   # May be sentinel
      else
         node(i)
   end

   #
   # Return the node containing element `i`, or fail if `i` is out of
   # range.
   #
   public node(i)
      # real() is needed so that node(0) fails
      return sentinel.move(i).real()
   end

   #
   # Create an instance and add each of the given entries.
   #
   public new(entries[])
      new_sentinel()
      every insert(1, default.back(entries))
      return
   end
end

# A convenient equivalent to wrapping a BuiltinList in an
# UnmodifiableList.
#
class UnmodifiableBuiltinList(List)
   private const
      l

   public override at(i)
      return .l[i]
   end

   public override keyof(x)
      suspend default.keyof(l, x)
   end

   public override gen(i)
      suspend .forward(l, i)
   end

   public override back(i)
      suspend .default.back(l, i)
   end

   public override slice(i, j)
      return l[i:j]
   end

   public override size()
      return *l
   end

   public override random()
      return .?l
   end

   public override get_mode()
      return 0
   end

   public new(l)
      self.l := need_list(l)
      return
   end
end

#
# This class provides a view of a sublist of another `List`.  No data is
# stored directly in this list.
#
# The indices specified in the constructor use Icon list slice
# semantics, and may be zero or negative.  The indices remain
# constant, and the actual range into the underlying list is
# calculated dynamically.  Should this become out-of-range, then the
# sub-list's size is zero, and insert and delete operations fail.
#
# Example :-
# ~
#   ll := LinkedList(1,2,3,4,5)
#   # A view of the elements 3:0 of ll (3, 4, 5)
#   s := SubList(ll, 3, 0)
#   # After this s is (3, 4, 5, 99); note how the length is now 4.
#   s.put(99)
# ~
#
class SubList(List)
   private const other, lo, hi

   public override insert(i, x)
      local s
      s := cvslice() | fail
      i := cvpos(i, s.hi - s.lo) | fail
      link other.insert(i + s.lo - 1, x)
   end

   public override delete(i)
      local s
      s := cvslice() | fail
      i := cvpos_item(i, s.hi - s.lo) | fail
      link other.delete(i + s.lo - 1)
   end

   public override at(i)
      local s
      s := cvslice() | fail
      i := cvpos_item(i, s.hi - s.lo) | fail
      return other.at(i + s.lo - 1)
   end

   public override size()
      local s
      return if s := cvslice() then
         s.hi - s.lo
      else
         0
   end

   public override gen(i)
      local s
      /i := 1
      s := cvslice() | fail
      i := cvpos_item(i, s.hi - s.lo) | fail
      i +:= s.lo - 1
      suspend other.gen(i) \ (s.hi - i)
   end

   public override back(i)
      local s
      /i := 0
      s := cvslice() | fail
      i := cvpos(i, s.hi - s.lo) | fail
      i +:= s.lo - 1
      suspend other.back(i) \ (i - s.lo)
   end

   private cvslice()
      return util.cvslice(lo, hi, other.size())
   end

   public override get_mode()
      return other.get_mode()
   end

   #
   # Create a new instance using `other` as the underlying list, and
   # `lo` and `hi` as the slice to view.
   #
   public new(other, lo, hi)
      self.other := need_instance(other, List)
      self.lo := need_integer(lo)
      self.hi := need_integer(hi)
      return
   end
end
