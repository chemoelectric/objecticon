import io

$define C create

procedure S(e)
   e := ^e
   suspend |@e
end

procedure pattern(x)
   if type(x) == "co-expression" then
      return x
   if x := string(x) then
      return C =x
   runerr("String or co-expression expected", x)
end

procedure concat(e1, e2)
   e1 := pattern(e1)
   e2 := pattern(e2)
   return C S(e1) || S(e2)
end

procedure alt(e1, e2)
   e1 := pattern(e1)
   e2 := pattern(e2)
   return C S(e1) | S(e2)
end

procedure arbno(e)
   local rep_e
   e := pattern(e)
   return rep_e := C "" | (S(e) || S(rep_e))
end

procedure test(x, data)
   local s
   while s := pop(data) do {
      if s ? (S(x) & pos(0)) then
         write(s,":valid")
      else
         write(s,":error")
   }
   write("=========")
end

procedure test0()
   test(concat("(", concat(arbno(alt("0","1")), ")")),
         [ "(000)", "(101010)", "()", "(0)", "(1)", "{", "(", "(123)"])
end

procedure test1()
   local keys, s
   keys := C &fail
   every s := "one"|"two"|"three" do
      keys := alt(keys, s)
   test(keys, ["one","two","three","four","five"])
end

procedure test2()
   local simexpr, expr, term, factor, basic, digits, subscript,
      relation, formula

   formula :=   C S(subscript) || =":=" || S(expr) 
   expr :=      C (="if(" || S(relation) || =")then(" || S(expr) || =")else(" || S(expr) || =")") | S(simexpr) 
   relation :=  C (S(expr) || =("="|"<"|">"|"<="|">=") || S(expr)) | S(simexpr) 
   simexpr :=   C (S(term) || =("+"|"-") || S(simexpr)) | S(term) 
   term :=      C (S(factor) || =("*"|"/") || S(term)) | S(factor) 
   factor :=    C (=("+"|"-") || S(basic)) | S(basic) 
   basic :=     C S(digits) | S(subscript) | (="(" || S(expr) || =")") 
   subscript := C ="[" || S(digits) || ="," || S(digits) || ="]" 
   digits :=    C tab(many(&digits)) 

   test(formula, [ 
            "[1,2]:=100",
            "[1,2]:=[3,4]",
            "[1,2]:=if([1,5]<[3,5])then(1+2)else(3)",
            "[1,2]:=100*(2+[3,4])",
            "1:=2","1+","2//"
            ])
end

procedure main()
   test0()
   test1()
   test2()
end
