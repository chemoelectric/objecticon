#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import lang

#
# This is similar to {MenuBar}, but holds just a single
# drop-down menu, rather than several.  It may be placed anywhere on
# the dialog, whereas a {MenuBar} would invariably be placed along the top.
#
class MenuButton(Component)
   public 
   menu, 
   which_open,
   accel_skip

   #
   # Set the menu to be displayed when the component is clicked.
   # @param c   The {Menu}.
   #
   public set_menu(c)
      self.menu := c
   end

   public initially()
      \self.menu | fatal(self, "no menu set")
      cast(self,Component).initially()
      self.parent_dialog.connect(self.dialog_event, Event.ICON)
      self.menu.set_parent_component(self)         
      self.menu.initially()
   end

   public finally()
      self.parent_dialog.disconnect_object(self)
      if \self.which_open then
         self.close_menu()
      self.menu.finally()
      cast(self,Component).finally()
   end

   public display()
      local cw
      menu.draw_label(self.cbwin, 0, menu.label_w, 0)
      if menu.is_shaded() then {
         cw := Gui.style.get_filter_clone(self.cbwin)
         FillRectangle(cw, self.x, self.y, self.w, self.h)
         Uncouple(cw)
      }
      border.draw_rect(self.cbwin, self)
   end

   public open_menu()
      self.parent_dialog.enter_menu_mode(self)
      self.which_open := self.menu
      self.menu.position_nicely(self.x,
                                self.y + self.h,, self.y)
      self.menu.show()
   end

   public close_menu()
      self.menu.hide()
      self.which_open := &null
      self.parent_dialog.exit_menu_mode()
   end

   public close_all()
      close_menu()
   end

   public make_partial()
      close_menu()
   end

   public go_right()
   end

   public go_left()
   end

   public handle_press(e)
      if self.in_region() then {
         if /self.which_open then {
            if menu.is_unshaded() then
               self.open_menu()
         } else
            self.close_menu()
      } else
         (\self.which_open).handle_event(e)
   end

   public handle_release(e)
      if not in_region() then
         (\self.which_open).handle_event(e)
   end

   public handle_accel(e)
      if /self.which_open then
         self.open_menu()
      self.menu.cursor_on()
      # See comment in MenuBar.handle_accel
      accel_skip := e
   end

   public match_accel(e)
      return self.menu.accel === e & not(menu.is_shaded())
   end

   public dialog_event(e)
      (self.is_unshaded() & self.is_unhidden() &
            \self.cbwin & \self.parent_dialog.is_open_flag) | fail

      if e === accel_skip then
         accel_skip := &null
      else if e === (&lpress | &rpress | &mpress) then 
         handle_press(e)
      else if e === (&lrelease | &rrelease | &mrelease) then 
         handle_release(e)
      else
         (\self.which_open).handle_event(e)
   end

   public get_default_width()
      return self.menu.get_label_mid_width() + border.get_total_width()
   end

   public get_default_height()
      return self.menu.get_label_mid_height() + border.get_total_height()
   end

   public layout()
      self.menu.label_x := self.x + border.get_l_inset()
      self.menu.label_y := self.y + border.get_t_inset()
      self.menu.label_w := self.w - border.get_total_width()
      self.menu.label_h := self.h - border.get_total_height()
   end

   public set_one(f)
      case f.attr of {
         "menu" : set_menu(f.object_val(gui.MenuComponent))
         default: return cast(self,Component).set_one(f)
      }
      return
   end

   public new(a[])
      cast(self,Component).new()
      self.set_border(RaisedBorder())
      set_fields(a)
      return
   end
end



