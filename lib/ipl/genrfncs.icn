############################################################################
#
#	File:     genrfncs.icn
#
#	Subject:  Procedures to generate sequences
#
#	Author:   Ralph E. Griswold
#
#	Date:     June 10, 2001
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#  
#  These procedures generate sequences of results.
#
#  arandseq(i, j)	arithmetic sequence starting at i with randomly
#			chosen increment between 1 and j
#  
#  arithseq(i, j)	arithmetic sequence starting at i with increment j
#
#  beatty1seq()		Beatty's first sequence i * Math.PHI
#
#  beatty2seq()		Beatty's second sequence i * Math.PHI ^ 2
#
#  catlnseq(i)		sequence of generalized Catalan numbers
#
#  cfseq(i, j)		continued-fraction sequence for i / j
#
#  chaosseq()		chaotic sequence
#
#  chexmorphseq()	sequence of centered hexamorphic numbers
#
#  connellseq(p)	generalized Connell sequence
#
#  dietzseq(s)		Dietz sequence for polynomial
#
#  dressseq(i)		dress sequence with increment i, default 1 (Schroeder)
#
#  factseq()		factorial sequence
#
#  fareyseq(i, k)	Farey fraction sequence; k = 0, the default, produces
#			numerator sequence; k = 1 produces denominator
#			sequence
#
#  fibseq(i, j, k, m)	generalized Fibonacci sequence (Lucas sequence)
#			with initial values i and j and additive constant
#			k.  If m is supplied, the results are produced
#			mod m.
#
#  figurseq(i)		series of ith figurate number
#
#  fileseq(s, i)	generate from file s; if i is null, lines are generated.
#			Otherwise characters, except line terminators.
#
#  friendseq(k)		generate random friendly sequence from k values, 1 to k
#			(in a friendly sequence, successive terms differ by 1).
#
#
#  geomseq(i, j)	geometric sequence starting at i with multiplier j
#
#  hailseq(i)		hailstone sequence starting at i
#
#  irepl(i, j)		j instances of i
#
#  lrrcseq(L1, L2)
#			generalized linear recurrence with constant
#			coefficients; L1 is a list of initial terms,
#			L2 is a list of coefficients for n prevous values,
#			where n = *L2
#
#  meanderseq(s, n)	sequences of all characters that contain all n-tuples
#			of characters from s
#	
#  mthueseq()		Morse-Thue sequence
#
#  mthuegseq(i)		Morse-Thue sequence for base i
#
#  multiseq(i, j, k)	sequence of (i * j + k) i's
#
#  ngonalseq(i)		sequence of the ith polygonal number
#
#  nibonacciseq(values[])
#			generalized Fibonacci sequence that sums the
#			previous n terms, where n = *values.
#
#  partitseq(i, j, k)	sequence of integer partitions of i with minimum j
#			and maximum k
#
#  pellseq(i, j, k)	generalized Pell's sequence starting with i, j and
#			using multiplier k
#
#  perrinseq()		Perrin sequence
#
#  polyseq(coeff[])	polynomial in x evaluated for x := seq()
#	
#  primeseq()		the sequence of prime numbers
#
#  powerseq(i)		sequence n ^ i, n = 1, 2, 3, 4, ...
#
#  powersofseq(i)	sequence i ^ n, n = 1, 2, 3, 4, ...n
#
#  rabbitseq()		rabbit sequence
#
#  ratsseq(i)		versumseq() with sort
#
#  signaseq(r)		signature sequence of r
#
#  spectseq(r)		spectral sequence integer(i * r), i - 1, 2, 3, ...
#
#  srpseq(n, m)		palindromic part of the continued-fraction sequence
#			for sqrt(n^2+m)
#
#  versumseq(i, j)	generalized sequence of added reversed integers with
#			seed i (default 196) and increment j (default 0)
#
#  versumopseq(i, p)	procedure p (default 1) applied to versumseq(i)
#
#  vishwanathseq()	random variation on Fibonacci sequence
#
#  zebra(values[])	zebra colors, alternating 2 and 1, for number of
#			times given by successive values
#  
############################################################################
#
#  Requires:  co-expressions
#
############################################################################
#
#  Links:  convert, factors, fastfncs, io, lindgen, lists, numbers,
#	partit, periodic, polynom, rational, strings, xcode
#
############################################################################

package ipl.genrfncs

import
   io(close),
   ipl.convert(exbase10),
   ipl.io(dopen),
   ipl.lists(lequiv, lreverse),
   ipl.numbers(adr, gcd),
   ipl.partit(partit),
   ipl.periodic(Sqrt),
   ipl.polynom(poly2profile, polyadd, polyexp, polymul,
               polysub, str2poly),
   ipl.strings(csort, deletec),
   util(Math)

# arithmetic sequence with random intervals
procedure arandseq(i, j)	

   /i := 1
   /j := 1

   suspend seq(i) + ?j

end

# arithmetic sequence
procedure arithseq(i, j)	

   /i := 1
   /j := 0

   suspend seq(i + j)

end

# Beatty sequence 1
procedure beatty1seq(r)		

   /r := Math.PHI

   suspend integer(seq() * r)

end

# Beatty sequence 2
procedure beatty2seq(r)		

   /r := Math.PHI

   suspend integer(seq() * (r / (r - 1)))

end

# generalized Catalan sequence
procedure catlnseq(i)		
   local k

  /i := 1

   suspend (i := 1, k := seq(), i *:= 4 * k + 2, i /:= k + 2)

end

# Hofstadter's chaotic sequence
procedure chaosseq(q)		

   suspend q(seq())

end

#  The generalization here is to allow a generating procedure, p to
#  be specified.  The default is seq().  Arguments are given in args.

# generalized Connell sequence
procedure connellseq(p, args[])	
   local i, j, count, parity, parity2, C

   C := create (\p | seq) ! args

   count := 0
   parity := 0
   parity2 := 1

   repeat {
      count +:= 1
      parity :=: parity2
      j := 0
      repeat {
         i := @C | fail
         if i % 2 = parity then {
            suspend i
            j +:= 1
            if j = count then break
            }
         }
      }

end
   
# sequence of centered hexamorphic numbers
procedure chexmorphseq()	
   local i, j

   every (i := seq(), j := 3 * i * (i - 1) + 1, j ? {
      tab(-*i)
      if =i then suspend j
      })

end

# continued-fraction sequence
procedure cfseq(i, j)	
   local r

   until j = 0 do {
     suspend integer(i / j)
     r := i % j
     i := j
     j := r
     }

end

procedure dietzseq(str)
   local vars

   str := deletec(str, ' ')		# delete blanks

   vars := &letters ** cset(str)

   suspend !map(poly2profile(eval(str)), vars, &digits[2+:*vars])

end

procedure eval(str)

   while str ?:= 2(="(", tab(bal(')')), =")", pos(0))

   return oper(str) | str2poly(str)

end

procedure oper(str)

   return str ? form(tab(bal('\-+*^')), move(1), tab(0))

end

procedure form(str1, op, str2)

   return case op of {
      "+"  :  polyadd(eval(str1), eval(str2))
      "-"  :  polysub(eval(str1), eval(str2))
      "*"  :  polymul(eval(str1), eval(str2))
      "^"  :  polyexp(eval(str1), str2)
      }

end

# dress sequence
procedure dressseq(i)		
   local s, t

   /i := 1

   s := [0]

   suspend !s

   repeat {
      t := []
      every put(t, !s + i)
      suspend !t
      s |||:= t
      }

end


# factorial sequence
procedure factseq()		
   local i

   i := 1

   suspend i *:= seq()

end

record farey(magnitude, n, d)

# Farey fraction sequence
procedure fareyseq(i, k)		
   local farey_list, n, d

   /k := 0				# default numerators

   k := integer(k) | fail

   farey_list := [farey(0.0, 0, 1)]

   every d := 1 to i do
      every n := 1 to d do {
         if gcd(n, d) = 1 then
            put(farey_list, farey(real(n) / d, n, d))
         }

   farey_list := sortf(farey_list, 1)

   case k of {
      0  :  every suspend (!farey_list).n	# numerator sequence
      1  :  every suspend (!farey_list).d	# denominator sequence
      }

end
      
# Farey fraction denominator sequence
procedure fareydseq(i)		
   local parity, j

   parity := 1

   every j := fareyseq(i) do {
      if parity < 0 then suspend j
      parity *:= -1
      }

end

# Farey fraction numerator sequence
procedure fareynseq(i)		
   local parity, j

   parity := 1

   every j := fareyseq(i) do {
      if parity > 0 then suspend j
      parity *:= -1
      }

end

# Farey fraction numerator sequence, 1-based
procedure fareyn1seq(i)		

   suspend fareynseq(i) + 1

end

# generalized Fibonacci sequence
procedure fibseq(i, j, k, m)	
   local n

   /i := 1
   /j := 1
   /k := 0

   if /m then {
      suspend i | j | |{
         n := i + j + k
         i := j
         j := n
         }
      }
   else {
      suspend i % m | j % m | |{
         n := (i + j + k) % m
         i := j
         j := n
         }
      }

end

#  Warning; if not all lines are generated from the input file, the
#  file is not closed until the next call of fileseq().

# sequence from file
procedure fileseq(s, i)		
   static input

   close(\input)

   input := dopen(s) | fail

   if /i then suspend !input
   else suspend !!input

   close(input)

   input := &null

end

# sequence of figurate numbers
procedure figurseq(i)		
   local j, k

   /i := 1

   suspend (j := 1, k := seq(i), j *:= k + 1, j /:= k + 1 - i)

end

# random friendly sequence
procedure friendseq(k)		
   local state

   state := ?k

   repeat {
      suspend state
      case state of {
         1        :  state +:= 1
         k        :  state -:= 1
         default  :  state +:= ?[1, -1]
         }
      }

end
      
# geometric sequence
procedure geomseq(i, j)		

   /i := 1
   /j := 1

   suspend seq(i) * j

end

# hailstone sequence
procedure hailseq(i)		

   /i := 1

   suspend |if i % 2 = 0 then i /:= 2 else i := 3 * i + 1

end

# repeated sequence
procedure irepl(i, j)		

   /i := 1
   /j := 1

   suspend |i \ j

end

# synonym for lrrcseq
procedure linrecseq(terms, coeffs)	
   linrecseq := lrrcseq

   suspend lrrcseq(terms, coeffs)

end

# linear recurrence sequence
procedure lrrcseq(terms, coeffs)	
   local i, term

   suspend !terms

   repeat {
      term := 0
      every i := 1 to *coeffs do
         term +:= terms[i] * coeffs[-i]
      suspend term
      get(terms)
      put(terms, term)
      }

end

# generate meandering characters
procedure meanderseq(alpha, n)	
   local sequence, trial, i, c

   i := *alpha

   sequence := repl(alpha[1], n - 1)			# base string

   while c := alpha[i] do {			# try a character
      trial := right(sequence, n - 1) || c
      if find(trial, sequence) then
         i -:= 1
      else {
         sequence ||:= c				# add it
         i := *alpha				# and start from end again
         suspend c
         }
      }

end

# Morse-Thue sequence
procedure mthueseq()		
   local s, t

   s := 0

   suspend s

   repeat {
      t := map(s, "01", "10")
      every suspend integer(!t)
      s ||:= t
      }

end

# generalized Morse-Thue sequence
procedure mthuegseq(j)		

   suspend adr(exbase10(seq(0), j)) % j		# only works through base 10
      
end
   
# sequence of repeated integers
procedure multiseq(i, j, k)	

   /i := 1
   /j := 1
   /k := 0

   suspend (i := seq(i), (|i \ (i * j + k)) & i)

end

# sequence of polygonal numbers
procedure ngonalseq(i)		
   local j, k

   /i := 2

   k := i - 2

   suspend ((j := 1) | (j +:= 1 + k * seq()))

end

# n-valued Fibonacci generalization
procedure nibonacciseq(values[])	
   local sum

   if *values = 0 then fail

   suspend !values

   repeat {
      sum := 0
      every sum +:= !values
      suspend sum
      get(values)
      put(values, sum)
      }

end

# sequence of integer partitions
procedure partitseq(i, j, k)	

   /i := 1
   /j := 1
   /k := i

   suspend !partit(i, j, k)

end

# generalized Pell sequence
procedure pellseq(i, j, k)	
   local m

   /i := 1
   /j := 2
   /k := 2

   suspend i | j | |{
      m := i + k * j
      i := j
      j := m
      }

end

# perrin sequence
procedure perrinseq()		
   local i, j, k, l

   suspend i := 0
   suspend j := 2
   suspend k := 3

   repeat {
      suspend l := i + j
      i := j
      j := k
      k := l
      }

end

# sequence of polynomial evaluations
procedure polyseq(coeff[])	
   local i, j, sum

   every i := seq() do {
      sum := 0
      every j := 1 to *coeff do
         sum +:= coeff[j] * i ^ (j - 1)
      suspend sum
      }

end

# sequence of prime numbers
procedure primeseq()		
   local i, k

   suspend 2 | ((i := seq(3, 2)) & (not(i = (k := (3 to Math.sqrt(i) by 2)) *
      (i / k))) & i)

end

# powers
procedure powersofseq(i)		

   /i := 2

   suspend i ^ seq(i)

end

# powers sequence
procedure powerseq(i)		

   suspend seq() ^ i

end

# rabbit sequence
procedure rabbitseq()		
   local seq, i

   seq := [0]

   suspend 1

   repeat {
      i := get(seq)
      suspend i
      if i = 0 then put(seq, 1)
      else every put(seq, 1 | 0)
      }

end
   
# reverse add and then sort sequence
procedure ratsseq(i, p)		

   /p := 1

   repeat {
      i +:= reverse(i)
      i := integer(p(csort(i)))
      suspend i
      }

end

record entry(value, i, j)

# signature sequence
procedure signaseq(r, n, m)	
   local i, j, result

   /n := 100
   /m := 100

   result := []

   every j := 1 to n do 
      every i := 1 to m do
         put(result, entry(i + j * r, i, j))

   result := sortf(result, 1)

   suspend (!result)[2]

end

# spectral sequence
procedure spectseq(r)		

   /r := 1.0

   suspend integer(seq() * r)

end


# generate square-root palindrome
procedure srpseq(n, m)		
   local iter, count, okay, rat, j, pal

   unless 1 <= m <= 2 * n then fail

   iter := 5

   repeat {
      pal := []
      count := 0
      okay := &yes
      rat := Sqrt(n ^ 2 + m, iter)
      every j := cfseq(rat.numer, rat.denom) do {
         count +:= 1
         if count = 1 then next	# don't examine first term
         if j = 2 * n then {	# presumed end
            lequiv(pal, lreverse(pal)) | break
            okay := &null
            break
            }
         else if j > n then break			# too big; error
         else put(pal, j)
         }
      if \okay then {
         iter +:= 1			# back to repeat loop
         if iter > 12 then fail		# too many iterations required.
         next
         }
      break
      }

   suspend !pal

end

# generalized reversed-sum sequence
procedure versumseq(i, j)	

   /j := 0

   /i := 196

   repeat {
      i +:= reverse(i) + j
      suspend i
      }

end

# versum sequence with operator
procedure versumopseq(i, p, args[])	

   /i := 196

   /p := csort

   push(args, &null)			# make room for first argument

   repeat {
      i := reverse(i)
      args[1] := i		# make current i first argument
      i := integer(p ! args)
      suspend i
      }

end

# random variation on Fibonacci sequence
procedure vishwanathseq(i, j)	
   local m

   /i := 1
   /j := 1

   suspend i | j | |{
      m := case ?4 of {
         1  :  i + j
         2  :  i - j
         3  :  -i + j
         4  :  -i - j
         }
      i := j
      j := m
      }

end

# black and white bands
procedure zebra(args[])		
   local i, clr, clr_alt

   clr := 2			# light
   clr_alt := 1			# dark

   while i := get(args) do {
      suspend (1 to i) & clr
      clr :=: clr_alt
      }

end
