package ipl.math

#-------------------------------------------------------------------------------
# Name:        mathstat.icn
# Purpose:     A small set of static methods for working with statistics.
#
# Author:      Oleg Baharew aka ArqricCat (IDP Team)
#
# Created:     11.08.2013
# Copyright:   (c) IDP Team, 2013
# Licence:     MIT License

# Class summary:

#  MathStat - The class provides some methods for statistical computation.

#  Methods defined in this class:
#     * invsum(l) - sum of inverse values 
#     * range(l) - range from list
#     * midrange(l) - mid-range for list
#     * amean(l) -  expected value (arithmetic mean)
#     * variance(l) - variance 
#     * sdev(l) - standart deviation
#     * sdev2(l) - standart deviation for small list value
#     * gmean(l) - geometrical mean
#     * hmean(l) - harmonic mean


# Warnings :
#     * Never use a method expval,variance and sdev\sdev2 for the nested lists !


import
   util (Math),
   ipl.functional

final abstract class MathStat()

   public static invsum(l)
   local s,i
   s := 0
   every i := !l do {
      if type(i) ~== "list" then s +:= 1.0/i else s +:= invsum(i)
   }
   return s
   end

   public static range(l)
   return FuncTools.max(l) - FuncTools.min(l)
   end

   public static midrange(l)
   return 0.5 * (FuncTools.max(l) + FuncTools.min(l))
   end

   public static amean(l)
   local tmp
   tmp := FuncTools.denested(l)
   return FuncTools.sum(tmp) / real(*tmp)
   end

   public static variance(l)
   local s,x,m,i
   s := 0
   m := amean(l)
   every i := !l do {
        x := ((m - i)^2) / real(*l)
        s +:= x
   }
   return s
   end

   public static sdev(l)
   return Math.sqrt(variance(l))
   end

   public static sdev2(l)
   local s,x,m,i
   s := 0
   m := amean(l)
   every i := !l do {
        x := ((m - i)^2) / (real(*l) - 1.0)
        s +:= x
   }
   return Math.sqrt(s)
   end

   public static gmean(l)
   local tmp
   tmp := FuncTools.denested(l)
   return FuncTools.product(tmp) ^ (1.0 / (*tmp))
   end

   public static hmean(l)
   local tmp
   tmp := FuncTools.denested(l)
   return (*tmp) / invsum(tmp)
   end
end
