package lang

import io, util, exception, ipl.scan

$define PUBLIC_STATIC_METHOD ior(Class.Public, Class.Static, Class.Method)

# A class implements this interface to provide custom encoding/decoding.
#
abstract class ObjectCodec()
   protected abstract object_encode(es)
   protected abstract object_decode(ds)
end

class Codec()
   public static const 
      OBJECT_CODE,
      CLASS_CODE,
      CAST_CODE,
      METHP_CODE,
      RECORD_CODE,
      CONSTRUCTOR_CODE,
      PROCEDURE_CODE,
      NULL_CODE,
      STRING_CODE,
      CSET_CODE,
      INTEGER_CODE,
      REAL_CODE,
      LIST_CODE,
      SET_CODE,
      TABLE_CODE,
      REF_CODE,
      UCS_CODE,
      BIN_STRING_CODE,
      BIN_UCS_CODE,
      FAST_FLAG,
      CODE_SEPARATOR,
      PRINTABLE

   private static init()
      CODE_SEPARATOR := "|"
      OBJECT_CODE := "C"
      CLASS_CODE := "D"
      CAST_CODE := "G"
      METHP_CODE := "H"
      RECORD_CODE := "R"
      CONSTRUCTOR_CODE := "K"
      PROCEDURE_CODE := "P"
      NULL_CODE := "N"
      STRING_CODE := "S"
      CSET_CODE := "A"
      INTEGER_CODE := "I"
      REAL_CODE := "B"
      LIST_CODE := "L"
      SET_CODE := "E"
      TABLE_CODE := "T"
      UCS_CODE := "U"
      REF_CODE := "X"
      BIN_STRING_CODE := "Y"
      BIN_UCS_CODE := "Z"
      FAST_FLAG := "F"
      PRINTABLE := '\x20-\x7e' -- '\\|'
   end
end

#
# Return a string, being the encoded representation of the given object.
# @param o the object to encode
# @param fast a flag - see {Encode.set_fast} below.
# @param bin a flag - see {Encode.set_allow_binary} below.
#
procedure encode(o, fast, bin)
   local e, f
   return use {
      f := RamStream(),
      {
         e := Encode(f).set_fast(fast).set_allow_binary(bin)
         if e.begin(o) then
            f.str()
      }
   }
end

#
# Like `encode`, but encodes directly to a file (rather than a string).
#
procedure encode_to_file(fn, o,fast, bin)
   local f
   return use {
      f := FileStream(fn, ior(FileOpt.WRONLY, FileOpt.TRUNC, FileOpt.CREAT)),
      Encode(f).set_fast(fast).set_allow_binary(bin).begin(o) & o
   }
end

#
# Recreate an object from the encoded string.
#
procedure decode(s)
   local d
   d := Decode()
   return d.parse(s)
end

#
# Decode from the given file.
#
procedure decode_from_file(fn)
   return decode(Files.file_to_string(fn))
end

class Encode(Stream, HasUnderlyingStream)
   private
      tag_count,
      seen, 
      file
   private readable
      fast_flag,
      allow_binary_flag

   #
   # Reset everything and output a new object.
   #
   public begin(o)
      self.tag_count := 0
      return use{
         self.seen := table(),
         simple_try{begin1(o)},
         self.seen := &null
      }
   end

   private begin1(o)
      if \fast_flag then
         writes1(Codec.FAST_FLAG)
      return encode(o)      
   end

   private note_seen(o)
      seen[o] := (tag_count +:= 1)
   end

   public out(s)
      return file.out(s) | throw(&why)
   end

   public get_mode()
      return WRITE
   end

   public close()
      if \close_underlying_flag then
         file.close() | fail
      return self
   end

   private static encode_string(s)
      local r, ch
      static l
      initial {
         l := []
         every put(l, right(0 to 255, 3, "0"))
      }
      r := ""
      s ? repeat {
         r ||:= tab(many(Codec.PRINTABLE))
         ch := ord(move(1)) | break
         r ||:= "\\" || l[ch + 1]
      }
      return r
   end

   # Get a code for a procedure value; the first char is "F" for a
   # builtin function like upto, "K" for a keyword function, "1","2"
   # or "3" for a builtin operator like "+" or "||", "P" for a
   # procedure and "M" for a (static) method.
   #
   private static get_proc_code(f)
      local s, j
      image(f) ? {
         s := case tab(upto(' ')) of {
            "function": {
               (Prog.get_function(Proc.get_name(f)) === f) |  
                  throw("Can only encode a function which is a builtin function")
               "F"
            }
            "keyword": "K"
            "operator": "O"
            "procedure": "P"
            "method": {
               j := Class.get_field_flags(Proc.get_defining_class(f), Proc.get_field_name(f))
               iand(j, PUBLIC_STATIC_METHOD) = PUBLIC_STATIC_METHOD |
                  throw("Can only encode a public static method")
               "M"
            }
            "deferred": throw("Can't encode a deferred method")
            "internal": throw("Can't encode an internal procedure")
            default: syserr("Not a proc")
         }
         move(1)
         return s || tab(0)
      }
   end

   public encode(o)
      local ty, i, n, e, l

      if i := member(seen, o) then {
         writes(Codec.REF_CODE, i)
         return self
      }

      ty := type(o)
      case ty of {
         "object" : {
            writes1(Codec.OBJECT_CODE)
            line_out(Class.get_name(o))
            note_seen(o)
            if is(o, ObjectCodec) then
               o.object_encode(self)
            else {
               n := Class.get_n_instance_fields(o)
               if \fast_flag then {
                  writes1(n)
                  every e := Class.get(o, 1 to n) do
                     encode(e)
               } else {
                  encode(n)
                  every i := 1 to n do {
                     encode(Class.get_field_name(o, i))
                     encode(Class.get(o, i))
                  }
               }
            }
         }

         "class": {
            writes1(Codec.CLASS_CODE)
            line_out(Class.get_name(o))
         }

         "cast": {
            writes1(Codec.CAST_CODE)
            encode(Class.get_cast_object(o))
            encode(Class.get_cast_class(o))
         }

         "procedure" : {
            writes1(Codec.PROCEDURE_CODE)
            # Need to encode string since can have eg binary operator "||"
            line_out(encode_string(get_proc_code(o)))
         }

         "constructor" : {
            writes1(Codec.CONSTRUCTOR_CODE)
            line_out(Constructor.get_name(o))
         }

         "null" :
            writes1(Codec.NULL_CODE)

         "string" : {
            if \allow_binary_flag & (*o > 100 | upto(~Codec.PRINTABLE, o)) then
               writes(Codec.BIN_STRING_CODE, *o, Codec.CODE_SEPARATOR, o)
            else {
               writes1(Codec.STRING_CODE)
               line_out(encode_string(o))
            }
         }

         "ucs": {
            o := string(o)
            if \allow_binary_flag & (*o > 100 | upto(~Codec.PRINTABLE, o)) then
               writes(Codec.BIN_UCS_CODE, *o, Codec.CODE_SEPARATOR, o)
            else {
               writes1(Codec.UCS_CODE)
               line_out(encode_string(o))
            }
         }

         "cset" : {
            writes1(Codec.CSET_CODE)
            l := []
            every put(l, Text.get_ord_range(o))
            writes1(*l)
            every e := !l do
               encode(e)
         }

         "integer" : {
            writes(Codec.INTEGER_CODE, o)
         }

         "real" : {
            writes1(Codec.REAL_CODE)
            line_out(o)
         }

         "record" : {
            writes1(Codec.RECORD_CODE)
            line_out(Constructor.get_name(o))
            note_seen(o)
            writes1(*o)
            if \fast_flag then {
               every e := !o do
                  encode(e)
            } else {
               every i := 1 to *o do {
                  encode(Constructor.get_field_name(o, i))
                  encode(o[i])
               }
            }
         }

         "list" : {
            writes(Codec.LIST_CODE, *o)
            note_seen(o)
            every e := !o do
               encode(e)
         }

         "set" : {
            writes(Codec.SET_CODE, *o)
            note_seen(o)
            every e := !o do
               encode(e)
         }

         "table" : {
            writes(Codec.TABLE_CODE, *o)
            encode(o[[]])
            note_seen(o)
            every e := keyval(o) do
               encode(e)
         }

         default : 
            throw("Type not encodable: " || ty)
      }
      return self
   end

   private line_out(s)
      return writes(s, Codec.CODE_SEPARATOR)
   end

   #
   # Indicate whether the output should be in "fast" mode; that is
   # indicate to any custom object encoders that there is no
   # requirement to make the output robust against underlying
   # structure changes to objects.
   #
   public set_fast(s)
      self.fast_flag := check_flag(s)
      return self
   end

   #
   # Indicate whether strings may be output as raw binary.  This will
   # be faster for long strings such as jpeg images.  Default is no.
   #
   public set_allow_binary(s)
      self.allow_binary_flag := check_flag(s)
      return self
   end

   public new(file)
      /file := FileStream.stdout
      self.file := file
      file.can(Stream.WRITE) | runerr("Encode: stream not writable: ", file)
      return
   end
end

#
# This class is used to decode a string created by the encode process, and
# reproduce the object.
#
class Decode()
   private
      tag_count,
      seen
   private readable
      fast_flag

   #
   # Reset everything and parse a new object from s
   #
   public parse(s)
      self.tag_count := 0
      s ? {
         self.fast_flag := if =Codec.FAST_FLAG then 1 else &null
         return use {
            self.seen := table(),
            simple_try{decode()},
            self.seen := &null
         }
      }
   end

   private static decode_string(s)
      local r
      r := ""
      s ? repeat {
         r ||:= tab(many(~'\\'))
         move(1) | break
         r ||:= char(move(3))
      }
      return r
   end

   private static decode_proc_code(fn)
      local c, s, i, j, cl
      fn ? {
         c := move(1)
         s := tab(0)
         case c of {
            "F": return Prog.get_function(s) | throw("No such function " || s)
            "K": return Prog.get_keyword(s) | throw("No such keyword " || s)
            "O": s ? {
               i := if ="unary " then 1 
               else if ="binary " then 2
               else if ="ternary " then 3
               else throw("Expected arity for operator")
               s := tab(0)
               return Prog.get_operator(s, i) | throw("No such function " || s || " arity " || i)
            }
            "P": {
               return lookup_procedure(s) | throw("No such procedure " || s)
            }
            "M": {
               i := backto('.', s)
               if cl := lookup_class(s[1:i-1]) &
                  j := Class.get_field_flags(cl, s[i:0]) &
                  iand(j, PUBLIC_STATIC_METHOD) = PUBLIC_STATIC_METHOD 
               then
                  return Class.get(cl, s[i:0]) 
               throw("No such public static method " || s)
            }
            default: throw("Unknown proc code")
         }
      }
   end

   private static line_in()
      local s
      if s := tab(upto(Codec.CODE_SEPARATOR)) then {
         move(1)
         return s
      }
      throw("Missing separator")
   end

   private static int_in()
      return integer(tab(many(&digits ++ '\-'))) | throw("Integer expected")
   end

   private static char_in()
      return move(1) | throw("Char expected")
   end

   private note_seen(o)
      seen[tag_count +:= 1] := o
   end

   private static lookup_global(s)
      local i
      if not(integer(s)) &
         i := Prog.get_global_index(s) &
         iand(Prog.get_global_flags(i), Prog.Const) ~= 0 then
         return Prog.get_global_impl(i)
   end

   private static lookup_class(s)
      local t
      if t := lookup_global(s) &
         type(t) == "class" then
         return t
   end

   private static lookup_constructor(s)
      local t
      if t := lookup_global(s) &
         type(t) == "constructor" then
         return t
   end

   private static lookup_procedure(s)
      local t
      if t := lookup_global(s) &
         match("procedure ", image(t)) then
         return t
   end

   public decode()
      local i, n, rname, t, v, res, def, con, cl, cname, l

      t := char_in()

      case t of {
         Codec.REF_CODE : {
            i := int_in()
            return member(seen, i) | throw("Invalid reference")
         }

         Codec.NULL_CODE :
            return

         Codec.CLASS_CODE : {
            cname := line_in()
            return lookup_class(cname) | throw("No such class " || cname)
         }

         Codec.CONSTRUCTOR_CODE : {
            rname := line_in()
            return lookup_constructor(rname) | throw("No such constructor " || rname)
         }

         Codec.PROCEDURE_CODE : {
            t := decode_string(line_in())
            return decode_proc_code(t)
         }

         Codec.OBJECT_CODE : {
            cname := line_in()
            #
            # Create an instance
            #
            cl := lookup_class(cname) | throw("No such class: " || cname)
            (iand(Class.get_class_flags(cl), Class.Abstract) = 0) | throw("Class is abstract: " || cname)
            res := Class.create_raw_instance_of(cl)
            note_seen(res)
            if is(res, ObjectCodec) then
               res.object_decode(self)
            else {
               if \fast_flag then {
                  n := int_in()
                  n = Class.get_n_instance_fields(res) | 
                     throw("Inconsistent number of fields in " || image(res))
                  every i := 1 to n do
                     Class.get(res, i) := decode()
               } else {
                  n := integer(decode()) | throw("Integer expected")
                  every 1 to n do {
                     t := string(decode()) | throw("String expected")
                     v := decode()
                     Class.getq(res, t) := v
                  }
               }
            }
            return Class.complete_raw_instance(res)
         }

         Codec.STRING_CODE :
            return decode_string(line_in())

         Codec.BIN_STRING_CODE : {
            i := integer(line_in()) | throw("Invalid bin string length")
            return move(i) | throw("Invalid bin string")
         }

         Codec.INTEGER_CODE :
            return int_in()

         Codec.REAL_CODE :
            return real(line_in()) | throw("Invalid real")

         Codec.CSET_CODE : {
             n := int_in()
             l := []
             every 1 to n do {
                i := integer(decode()) | throw("Integer expected")
                put(l, i)
             }
             return Text.create_cset(l)
          }

         Codec.UCS_CODE :
            return ucs(decode_string(line_in())) | throw("Invalid ucs")

         Codec.BIN_UCS_CODE : {
            i := integer(line_in()) | throw("Invalid bin ucs string length")
            return ucs(move(i)) | throw("Invalid bin ucs string")
         }

         Codec.RECORD_CODE : {
            rname := line_in()
            con := lookup_constructor(rname) | throw("No such constructor " || rname)
            res := con() 
            note_seen(res)
            n := int_in()
            if \fast_flag then {
               n = *res | throw("Inconsistent number of fields in " || image(res))
               every i := 1 to n do
                  res[i] := decode()
            } else {
               every 1 to n do {
                  t := string(decode()) | throw("String expected")
                  v := decode()
                  res[t] := v
               }
            }
            return res
         }

         Codec.LIST_CODE : {
            n := int_in()
            res := []
            note_seen(res)
            every 1 to n do 
               put(res, decode())
            return res
         }

         Codec.SET_CODE : {
            n := int_in()
            res := set()
            note_seen(res)
            every 1 to n do 
               insert(res, decode())
            return res
         }

         Codec.TABLE_CODE : {
            n := int_in()
            def := decode()
            res := table(def)
            note_seen(res)
            every 1 to n do
               insert(res, decode(), decode())
            return res
         }            

         Codec.CAST_CODE : {
            t := decode()
            cl := decode()
            is(t, cl) | throw("Cast to " || image(cl) || " from " || image(t) || " not valid")
            return cast(t, cl)
         }

         default :
            throw("Unknown type code:" || image(t))
      }            
   end
end
