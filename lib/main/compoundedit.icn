#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package undo

import util

#
# An UndoableEdit which groups several edits together in a list.  The
# undo and redo methods are implemented to undo the edits in the list together.
#
class CompoundEdit(UndoableEdit)
   protected l

   private readable
      closed,
      liberal_flag,
      desc

   public override redo()
      every (!l).redo()
      return self
   end

   public gen()
      suspend .!l
   end

   public override undo()
      local i
      every i := *l to 1 by -1 do
         l[i].undo()
      return self
   end

   public override add_edit(other)
      if \closed then
         return \liberal_flag & l[-1].add_edit(other) & self

      l[-1].add_edit(other) | put(l, other)
      return self
   end

   #
   # A closed CompoundEdit is one which cannot have any more
   # edits added to it by add_edit.
   #
   public close()
      self.closed := 1
      return self
   end

   #
   # Clear the list of edits.
   #
   public clear()
      default.clear(l)
      return self
   end

   #
   # If this flag is set, then after closure edits may still be
   # added to the last edit in the list (if it accepts them), although
   # this edit's list will not be added to.
   #
   public set_liberal(s)
      self.liberal_flag := need_flag(s)
      return self
   end

   #
   # Set the edit description
   #
   public set_desc(s)
      self.desc := s
      return self
   end

   #
   # Return a description of the edit.
   #
   public override get_desc()
      return .desc
   end

   public new()
      desc := "Compound edit"
      l := []
      return
   end
end
