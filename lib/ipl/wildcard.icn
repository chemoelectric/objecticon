############################################################################
#
#	File:     wildcard.icn
#
#	Subject:  Procedures for UNIX-like wild-card pattern matching
#
#	Author:   Robert J. Alexander
#
#	Date:     September 26, 1990
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#  This is a kit of procedures to deal with UNIX-like filename wild-card
#  patterns containing *, ?, and [...].  The meanings are as of the
#  pattern characters are the same as in the UNIX shells csh and sh.
#
#  These procedures are interesting partly because of the "recursive
#  suspension" technique used to simulate conjunction of an arbitrary
#  number of computed expressions.
#
#
#  Create a wildcard pattern using the constructor :-
#
#  p := Wildcard(pattern)
#
#  The public methods are:
#
#  match(s,i1,i2) : i3,i4,...,iN
#  find(s,i1,i2) : i3,i4,...,iN
#
#  match() produces the sequence of positions in "s" past a
#  substring starting at "i1" that matches the pattern, but fails if there
#  is no such position.  Similar to match(), but is capable of
#  generating multiple positions.
#
#  find() produces the sequence of positions in "s" where
#  substrings begin that match the pattern, but fails if there is no such
#  position.  Similar to find().
#
#  Default values of s, i1, and i2 are the same as for Icon's built-in
#  string scanning procedures such as match().
#
package ipl.wildcard

import
   ipl.scan(begin_analysis)

class Wildcard()
   private plist

   #
   #  Produce the sequence of positions in s past a string starting at i1
   #  that matches the pattern, but fails if there is no such
   #  position.  Similar to match(), but is capable of generating multiple
   #  positions.
   #
   public match(s,i1,i2) 
      local a
      a := begin_analysis(s,i1,i2) | fail
      s := a.s; i1 := a.i; i2 := a.j
      suspend s[i1:i2] ? (wild_match1(copy(plist)) & i1 + &pos - 1)
   end


   #
   #  Like `match()` above, but only succeed if the entire string
   #  `s[i1:i2]` matches the pattern.
   #
   public match_all(s,i1,i2) 
      local a
      a := begin_analysis(s,i1,i2) | fail
      s := a.s; i1 := a.i; i2 := a.j
      return s[i1:i2] ? (wild_match1(copy(plist)) & pos(0) & i1 + &pos - 1)
   end


   #
   #  Produce the sequence of positions in s where strings begin that match
   #  the pattern, but fails if there is no such position.  Similar
   #  to find().
   #
   public find(s,i1,i2) 
      local p, a
      a := begin_analysis(s,i1,i2) | fail
      s := a.s; i1 := a.i; i2 := a.j
      s[i1:i2] ? suspend (
                          wild_skip(plist) &
                          p := &pos &
                          tab(match())\1 &
                          i1 + p - 1)
   end

   #
   #  Produce Wildcard representing pattern string s.
   #
   public new(s) 
      local c,ch,chars,complement,e,special
      #
      #  Create a list of pattern elements.  Pattern strings are parsed
      #  and converted into list elements as follows:
      #
      #	* --> 0			Match any substring (including empty)
      #	? --> 1			Matches any single character
      #	[abc] --> 'abc'		Matches single character in 'abc' (more below)
      #	abc --> "abc"		Matches "abc"
      #	\			Escapes the following character, causing it
      #				to be considered part of a string to match
      #				rather than one of the special pattern
      #				characters.
      #
      plist := []
      s ? {
         until pos(0) do {
            c := &null
            #
            #  Put pattern element on list.
            #
            e := (="*" & 0) | (="?" & 1) | (="\\" & move(1)) |
	       (="[" & c := (=("]" | "!]" | "!-]" | "") || tab(default.find("]"))) &
                move(1)) |
	       move(1) || tab(upto('*?[\\') | 0)
            #
            #  If it's [abc], create a cset.  Special notations:
            #
            #	   A-Z means all characters from A to Z inclusive.
            #	   ! (if first) means any character not among those specified.
            #	   - or ] (if first, or after initial !) means itself.
            #
            \c ? {
               complement := ="!" | &null
               special := '\-]'
               e := ''
               while ch := tab(any(special)) do {
                  e ++:= ch
                  special --:= ch
	       }
               while chars := tab(default.find("-")) do {
                  move(1)
                  e ++:= chars[1:-1] ++
		     &cset[ord(chars[-1]) + 1:ord(move(1)) + 2]
	       }
               e ++:= tab(0)
               if \complement then e := ~e
	    }
            if type(e) == ("string"|"ucs") == type(plist[-1]) then plist[-1] ||:= e
            else put(plist,e)
	 }
      }
      return plist
   end


   #
   #  Used privately -- match a sequence of strings in s past which a match
   #  of the first pattern element in l is likely to succeed.	This
   #  procedure is used for heuristic performance improvement by
   #  match() for the "*" pattern element by matching only strings
   #  where the next element is likely to succeed, and by find() to
   #  attempt matches only at likely positions.
   #
   private wild_skip(l) 
      local x
      x := l[1]
      suspend tab(
                  case type(x) of {
                     "string"|"ucs": default.find(x)
                     "cset": upto(x)
                     default: &pos to *&subject + 1
                  }
                  )
   end



   #
   #  Used privately by match() to simulate a computed conjunction
   #  expression via recursive suspension.
   #
   private wild_match1(l,v) 
      local c
      if c := pop(l) then {
         suspend wild_match1(l,case c of {
            0: wild_skip(l)
            1: move(1)    
            default: case type(c) of {
	       "cset": tab(any(c))
	       default: =c
            } 
	 })
         push(l,c)
      }
      else return v
   end
end
