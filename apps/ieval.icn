import io, lang, util, net, ipl.options, ipl.lists

procedure create_prog(main, imps, links)
   local tf, prog

   imps ++:= set("ipl.ieval")  # Avoid changing imps parameter
   prog := ""
   every prog ||:= "import " || !imps || "\n"
   prog ||:= "invocable all\n_
procedure " || main || "(imports, files, opts)\n_
    ipl.ieval.Ieval(imports, files, opts).run()\n_
end\n"
   return use {
      tf := Files.make_temp_filename("ieval", Files.PROG_SUFFIX),
      compile(prog, tf, links),
      save_why{Files.remove(tf)}      # save_why since oit may remove the output file on failure
   }
end

procedure esc(s)
$if _UNIX
   return Format.shell_escape(s)
$elsif _PLAN9
   return Format.rc_escape(s)
$else
   return s
$endif
end

procedure compile1(prog, pf, tf, links)
   local s, i
   Files.string_to_file(pf, prog) | fail
   s := "oit -s -l2 -b2 -o " || esc(tf) || " " || esc(pf)
   every s ||:= " " || esc(!links)
   i := system(s)
   if i = 0 then
      return
   else
      error("oit failed, exit status " || i)
end

procedure compile(prog, tf, links)
   local pf
   use {
      pf := Files.make_temp_filename("ieval", ".icn"),
      compile1(prog, pf, tf, links),
      Files.remove(pf)
   } | fail
   return lang.Prog.load(tf,, 0, 0)
end

procedure usage(opts)
   local u
   write("Usage: ieval [OPTIONS] [INPUT-FILES...]")
   write("Interactively evaluate expressions")
   options_help(opts)
   u := URL("http://objecticon.sourceforge.net/Ieval.html")
   write()
   writes("For more details, visit ")
   if FileStream.stdout.is_flowterm_tty() then
      write(Files.begin_link(u), u.str(), Files.end_link())
   else
      write(u.str())
   exit(0)
end

procedure main(a)
   local opts, prog, imports, links, main
   opts := options(a, [Opt("i", string, "PACKAGE#Import the given package(s).  Several packages may be comma-separated, or several -i options may be given",&yes),
                       Opt("l", string, "FILE#Link the given source file.  Several -l options may be given",&yes),
                       Opt("m",, "Expect a main procedure in one of the linked source files"),
                       Opt("wglob",, "If given, then assignments to global variables are allowed"),
                       Opt("s",, "Don't use console line editing (implicit on non-Unix platforms)"),
                       Opt("g",, "Use a gui interface rather than the console"),
                       Opt("a",, "In gui mode, actively show completions, rather than on the tab key"),
                       Opt("z",, "Don't read commands interactively, but exit after processing input files"),
                       Opt("hlim",integer_range(10),"LIM#Set the history limit for the line editor (default is 500, minimum is 10)"),
                       Opt("elim",integer_range(10),"LIM#Set the expression limit for evaluation (default is 35, minimum is 10)"),
                       Opt("llim",integer_range(0),"LIM#Set the gui interface's log area line limit (default is 600)")],
                       usage)
   main := if /opts["m"] then "main" else "ieval_main"
   imports := set()
   every insert(imports, !str2list(!\opts["i"]))
   links := \opts["l"] | []
   prog := create_prog(main, imports, links) | stop(&why)
   # Set progname so help_stop gives proper output.
   Prog.get_variable("&progname", prog) := &progname
   Prog.get_global(main, prog)(imports, a, opts)
end
