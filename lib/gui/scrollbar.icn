#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import lang, graphics, util

#
# Component representing the bar area
#
class BarArea(Component)
   public  
      bar_x,                   #             
      bar_y,                   #             
      bar_w,                   #             
      bar_h

   public override display()
      Gui.style.draw_raised_rectangle(self.cbwin, self.bar_x, self.bar_y, 
                                      self.bar_w, self.bar_h, 
                                      Gui.BORDER_WIDTH)
   end
end


#
# This class provides horizontal and vertical scroll bars.
#
# There are two ways to use a scroll bar.  The first way is to
# set a total_size (represented by the whole bar), a page_size
# (represented by the draggable button) and an increment_size
# (being the amount added/subtracted when the top/bottom
# button is pressed).  The value will then range from zero to
# (total_size - page_size) inclusive.  An initial value must
# be set with the `set_value()` method.  For example :-
# ~
#   vb := ScrollBar()
#   vb.set_pos("85%", "25%")      
#   vb.set_size(20, "40%")
#   vb.set_total_size(130)
#   vb.set_page_size(30)
#   vb.set_increment_size(1)
#   vb.set_value(0)
#   self.add(vb)
# ~
#
# Alternatively, a scroll bar can be used as a slider which
# ranges over a given range of values.  In this case, the
# range is set with `set_range()`.  It is still necessary to set
# the increment size and the initial value, as above, but
# page_size and total_size should not be set.
#
# Real numbers as opposed to integers can be used for the
# range settings if desired.
#
# For example :-
# ~
#   vb := ScrollBar()
#   vb.set_pos("85%", "25%")      
#   vb.set_size(20, "40%")
#   vb.set_range(2, 25)
#   vb.set_value(10)
#   vb.set_increment_size(1)
#   self.add(vb)
# ~
# An `Event.VALUE_CHANGED` event is fired whenever the value changes.
#
class ScrollBar(Component, HasOrientation, HasUseWheel)
   public 
      value,                   #             
      old_value,
      page_size,               #                 
      increment_size,          #                      
      wheel_factor,
      total_size,              #                  
      hi,                      #          
      lo,                      #          
      bar_down,                #                
      is_paging,               #
      bar_down_offset,         #                       
      bar_area,                #
      b1,                      #          
      b2,                      #          
      bar_pos,                 #  Orientation independent bar pos
      bar_size,                #                
      bar_area_pos,            #  Orientation independent bararea pos
      bar_area_size,           #                     
      old_bar_area_pos,
      old_bar_area_size,
      is_range_flag,           
      repeat_ticker,
      repeat_delay

   public static const
      DEFAULT_INNER_SIZE, BAR_INDENT, DEFAULT_WHEEL_FACTOR, MIN_BAR_SIZE, RANGE_BAR_SIZE

   private static init()
      DEFAULT_INNER_SIZE := env_scale("OI_SCROLLBAR_DEFAULT_INNER_SIZE") | scale(16)
      BAR_INDENT := env_scale_even("OI_SCROLLBAR_BAR_INDENT") | Gui.FINE_WIDTH
      DEFAULT_WHEEL_FACTOR := env_int("OI_SCROLLBAR_DEFAULT_WHEEL_FACTOR", 1) | 4
      MIN_BAR_SIZE := env_scale("OI_SCROLLBAR_MIN_BAR_SIZE") | scale(8)
      RANGE_BAR_SIZE := env_scale("OI_SCROLLBAR_RANGE_BAR_SIZE") | scale(24)
   end

   #
   # Set the total size which the scroll bar area represents.
   # :Parameters :
   # :  `x` - The total size
   #
   public set_total_size(x)
      # See notes as to why this is a good idea.
      if total_size ~=== x then {
         total_size := x
         reconfigure()
      }
      return self
   end

   #
   # Return the total size.
   #
   public get_total_size()
      return self.total_size
   end

   #
   # Set the size which the bar in the scroll bar area represents.
   # :Parameters :
   # :  `x` - The size.
   #
   public set_page_size(x)
      if page_size ~=== x then {
         if x <= 0 then
            runerr("Invalid page size", x)
         page_size := x
         reconfigure()
      }
      return self
   end

   #
   # Get the page size.
   #
   public get_page_size()
      return self.page_size
   end

   #
   # Get the value.
   # :Returns :
   # :  The value
   #
   public get_value()
      return self.value
   end

   #
   # Set the value representing the top of the bar in the scroll
   # bar.  The value is forced into range if it is not in range already.
   # :Parameters :
   # :  `x` - The value.
   #
   public set_value(x)
      if value ~=== x then {
         if is_live() then {
            move_value(x)
            set_pos_from_value()
         } else
            value := x
      }
      return self
   end

   #
   # Set the amount to increase the value by when one of the
   # buttons is pressed.
   # :Parameters :
   # :  `x` - The increment size.
   #
   public set_increment_size(x)
      self.increment_size := x
      return self
   end

   #
   # Set the range of the scroll bar.  The values may
   # be integer or real.
   # :Parameters :
   # :  `lo` - The lower bound
   # :  `hi` - The upper bound
   #
   public set_range(lo, hi)
      if self.lo ~=== lo | self.hi ~=== hi then {
         if lo >= hi then
            runerr("Invalid range")
         self.is_range_flag := &yes
         self.lo := lo
         self.hi := hi
         reconfigure()
      }
      return self
   end

   #
   # Set the wheel factor, being the number of increments to
   # move on a wheel press; by default it is `DEFAULT_WHEEL_FACTOR`
   #
   public set_wheel_factor(n)
      self.wheel_factor := n
      return self
   end

   #
   # Get the wheel_factor
   #
   public get_wheel_factor()
      return self.wheel_factor
   end

   private move_bar_pos(x)
      x <:= self.bar_area_pos
      x >:= self.bar_area_pos + self.bar_area_size - self.bar_size
      (self.bar_pos ~=== x) | fail
      self.bar_pos := x
      if /self.is_horizontal_flag then
         self.bar_area.bar_y := self.bar_pos
      else
         self.bar_area.bar_x := self.bar_pos        
      self.bar_area.invalidate()
   end

   private move_value(x)
      self.value := x
      self.value <:= self.lo
      self.value >:= self.hi
   end

   private set_pos_from_value()
      if self.hi ~= self.lo then
         self.move_bar_pos(self.bar_area_pos + integer(((self.value - self.lo) * 
                                                        (self.bar_area_size - self.bar_size)) / (self.hi - self.lo)))
      else
         self.move_bar_pos(self.bar_area_pos)
   end

   private set_value_from_pos()
      if self.bar_area_size ~= self.bar_size then
         move_value(self.lo + ((self.hi - self.lo) * (self.bar_pos - self.bar_area_pos)) / 
                    (self.bar_area_size - self.bar_size))
      else
         move_value(self.lo)
   end

   public override get_default_height()
      if \self.is_horizontal_flag then
         return DEFAULT_INNER_SIZE + border.get_total_height()
   end

   public override get_default_width()
      if /self.is_horizontal_flag then
         return DEFAULT_INNER_SIZE + border.get_total_width()
   end

   public handle_lpress(e)
      start_handle(e)
      if (self.bar_area.bar_x <= e.x < self.bar_area.bar_x + self.bar_area.bar_w) & 
         (self.bar_area.bar_y  <= e.y < self.bar_area.bar_y + self.bar_area.bar_h) then {
         #
         # Click on bar; set flag and save offset between top of bar and pointer position
         #
         self.bar_down := &yes
         if /self.is_horizontal_flag then
            self.bar_down_offset := e.y - self.bar_area.bar_y
         else
            self.bar_down_offset := e.x - self.bar_area.bar_x
      } else if (/self.is_horizontal_flag & (self.bar_area.y  <= e.y < self.bar_area.bar_y)) | 
         (self.bar_area.x  <= e.x < self.bar_area.bar_x) then {
         move_value(self.value - self.page_size)
         set_pos_from_value()
         start_paging(-1)
      } else  if (/self.is_horizontal_flag &
                  (self.bar_area.bar_y + self.bar_area.bar_h  <= e.y <  self.bar_area.y + self.bar_area.h)) | 
          (self.bar_area.bar_x + self.bar_area.bar_w  <= e.x <  self.bar_area.x + self.bar_area.w) then {
         move_value(self.value + self.page_size)
         set_pos_from_value()
         start_paging(1)
      }
      end_handle(e)
   end

   public handle_lrelease(e)
      start_handle(e)
      self.bar_down := &null
      stop_paging()
      end_handle(e)
   end

   private repeat_tick()
      repeat {
         if Prog.get_runtime_millis() > self.repeat_delay then {
            start_handle()
            move_value(self.value + self.is_paging * self.page_size)
            set_pos_from_value()
            end_handle()
         }
         repeat_ticker.sleep(Gui.REPEAT_RATE)
      }
   end

   public start_paging(n)
      self.is_paging := n
      self.repeat_delay := Prog.get_runtime_millis() + Gui.REPEAT_DELAY
      repeat_ticker.start()
   end

   public stop_paging()
      self.is_paging := &null
      repeat_ticker.stop()
   end

   public start_handle(e)
      old_value := value
   end

   public end_handle(e)
      if old_value ~=== value then
         fire(Event.VALUE_CHANGED, e)
   end

   public override handle_wheel_up(e)
      /self.bar_down | fail
      start_handle(e)
      move_value(self.value - self.wheel_factor * self.increment_size)
      set_pos_from_value()
      end_handle(e)
   end

   public override handle_wheel_down(e)
      /self.bar_down | fail
      start_handle(e)
      move_value(self.value + self.wheel_factor * self.increment_size)
      set_pos_from_value()
      end_handle(e)
   end

   public handle_button_up(e)
      start_handle(e)
      #
      # Button up clicked
      #
      move_value(self.value - self.increment_size)
      set_pos_from_value()
      end_handle(e)
   end

   public handle_button_down(e)
      start_handle(e)
      #
      # Button down clicked
      #
      move_value(self.value + self.increment_size)
      set_pos_from_value()
      end_handle(e)
   end

   public handle_ldrag(e)
      \self.bar_down | fail

      start_handle(e)
      #
      # Bar dragged; compute new position
      #
      if /self.is_horizontal_flag then
         move_bar_pos(e.y - self.bar_down_offset)
      else
         move_bar_pos(e.x - self.bar_down_offset)
      set_value_from_pos()
      end_handle(e)
   end

   public handle_interrupted()
      if bar_area.is_held(Mouse.LEFT_PRESS) then
         handle_lrelease()
   end

   public override display()
      border.draw_rect(self.cbwin, self)
      display_children()
   end

   private reconfigure()
      # Don't do anything if we haven't been positioned yet.
      is_live() | fail
      check_vals()
      calc_bar_size()
      set_pos_from_value()
      bar_area.invalidate()
   end

   # Check sensible values and set lo/hi for a non-range.
   private check_vals()
      if /self.is_range_flag then {
         #
         # Not a range; compute lo, hi
         #
         self.lo := 0
         self.hi := if self.total_size > self.page_size then
            self.total_size - self.page_size
         else
            0
      }
      # Ensure value in lo..hi range.
      move_value(self.value)
   end

   private calc_bar_size()
      if /self.is_range_flag then {
         #
         # If total <= page then we produce an immovable full size bar
         # with lo = hi = 0, set above in check_vals.
         #
         self.bar_size := if self.total_size > self.page_size then
            integer((self.bar_area_size * self.page_size) / self.total_size)
         else
            self.bar_area_size 
      } else {
         #
         # Range; set bar size to constant, but leave room if bar_area_size is small.
         #
         self.bar_size := RANGE_BAR_SIZE
         self.bar_size >:= self.bar_area_size - 8
      }
      #
      # Ensure bar size in range not less than MIN_BAR_SIZE, but must be within
      # bar_area_size.
      #
      self.bar_size <:= MIN_BAR_SIZE
      self.bar_size >:= self.bar_area_size

      if \self.is_range_flag then {
         #
         # For a slider, we still need the page size for clicks in the bar.
         #
         self.page_size := ((self.hi - self.lo) * self.bar_size) / (0 ~= self.bar_area_size) | 0
      }

      #
      # Set bar height/width according to orientation
      #
      if /self.is_horizontal_flag then
         self.bar_area.bar_h := self.bar_size
      else
         self.bar_area.bar_w := self.bar_size
   end

   public override initially()
      if /self.is_range_flag then {
         \self.total_size | runerr("Total size not set")
         \self.page_size | runerr("Page size not set")
      }
      \self.increment_size | runerr("Increment size not set")
      \self.value | runerr("Value not set")
      check_vals()
      if /self.is_horizontal_flag then {
         b1.set_paint(ImagePaint().set_cache("gui.ARROW_UP"))
         b2.set_paint(ImagePaint().set_cache("gui.ARROW_DOWN"))
      } else {
         b1.set_paint(ImagePaint().set_cache("gui.ARROW_LEFT"))
         b2.set_paint(ImagePaint().set_cache("gui.ARROW_RIGHT"))
      }
      Component.initially()
   end

   public override layout()
      if /self.is_horizontal_flag then {
         #
         # Set button positions
         #
         b1.x := self.x + border.get_l_inset()
         b1.y := self.y + border.get_t_inset()
         b1.w := self.w - border.get_total_width()
         b1.h := max(DEFAULT_INNER_SIZE, b1.get_preferred_height(b1.w))
         b2.x := b1.x 
         b2.h := max(DEFAULT_INNER_SIZE, b2.get_preferred_height(b1.w))
         b2.y := self.y + self.h - b2.h - border.get_b_inset()
         b2.w := b1.w

         #
         # Compute bar area dimensions
         #
         bar_area.x := b1.x + BAR_INDENT
         bar_area.y := b1.y + b1.h
         bar_area.w := b1.w - 2 * BAR_INDENT
         bar_area.h := b2.y - (b1.y + b1.h)

         self.bar_area.bar_x := self.bar_area.x
         self.bar_area_pos := self.bar_area.y
         self.bar_area.bar_w := self.bar_area.w
         self.bar_area_size := self.bar_area.h
      } else {
         b1.x := self.x + border.get_l_inset()
         b1.y := self.y + border.get_t_inset()
         b1.w := max(DEFAULT_INNER_SIZE, b1.get_preferred_width())
         b1.h := self.h - border.get_total_height()
         b2.w := max(DEFAULT_INNER_SIZE, b2.get_preferred_width())
         b2.x := self.x + self.w - b2.w - border.get_r_inset()
         b2.y := b1.y
         b2.h := b1.h

         bar_area.x := b1.x + b1.w
         bar_area.y := b1.y + BAR_INDENT
         bar_area.w := b2.x - (b1.x + b1.w)
         bar_area.h := b1.h - 2 * BAR_INDENT

         self.bar_area_pos := self.bar_area.x
         self.bar_area.bar_y := self.bar_area.y
         self.bar_area_size := self.bar_area.w
         self.bar_area.bar_h := self.bar_area.h
      }

      b1.layout()      
      b2.layout()      

      # This test avoids a cosmetic problem whereby the bar would move
      # slightly as its position is recalculated from the value.
      # There is no need for this calculation unless the bar area
      # has changed size/pos.
      #
      if old_bar_area_pos ~=== bar_area_pos |
         old_bar_area_size ~=== bar_area_size then
      {
         calc_bar_size()
         set_pos_from_value()
         old_bar_area_pos := bar_area_pos
         old_bar_area_size := bar_area_size
      }
   end

   public override shift(dx, dy)
      Component.shift(dx, dy)
      if /self.is_horizontal_flag then {
         self.bar_pos +:= dy
         self.bar_area_pos +:= dy
         self.old_bar_area_pos +:= dy
      } else {
         self.bar_pos +:= dx
         self.bar_area_pos +:= dx
         self.old_bar_area_pos +:= dx
      }
      self.bar_area.bar_x +:= dx
      self.bar_area.bar_y +:= dy
   end

   #
   # Succeed if the bar is at its topmost (or leftmost) position.
   #
   public at_top()
      if bar_pos = bar_area_pos then return
   end

   #
   # Succeed if the bar is at its bottommost (or rightmost) position.
   #
   public at_bottom()
      if bar_pos + bar_size = bar_area_pos + bar_area_size then return
   end

   public override finally()
      repeat_ticker.stop()
      old_bar_area_pos := old_bar_area_size := &null
      Component.finally()
   end

   public override new()
      Component.new()
      repeat_ticker := Dispatcher.new_task{repeat_tick()}
      self.b1 := IconButton().
         set_border(NullBorder()).
         connect(self.handle_button_up, Event.BUTTON_PRESS).
         connect(self.handle_button_up, Event.BUTTON_HELD).
         set_accepts_focus(&no)
      add(self.b1)
      self.b2 := IconButton().
         set_border(NullBorder()).
         connect(self.handle_button_down, Event.BUTTON_PRESS).
         connect(self.handle_button_down, Event.BUTTON_HELD).
         set_accepts_focus(&no)
      add(self.b2)
      self.bar_area := BarArea().
         connect(self.handle_lpress, Event.MOUSE_LEFT_PRESS).
         connect(self.handle_ldrag, Event.MOUSE_LEFT_DRAG).
         connect(self.handle_lrelease, Event.MOUSE_LEFT_RELEASE)
      connect(handle_interrupted, Event.INTERRUPTED)
      add(self.bar_area)
      self.wheel_factor := DEFAULT_WHEEL_FACTOR
      set_use_wheel(&yes)
      set_border(RaisedBorder())
      return
   end
end
