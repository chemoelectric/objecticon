package gui

import util, graphics, io

$load HOME "images/gui.Home24.gif"
$load NEW "images/gui.New24.gif"
$load REFRESH "images/gui.Refresh24.gif"
$load UP "images/gui.Up24.gif"

class ImageCache()
   public static 
      imap,
      path,
      names

   private static init()
      names := table()
      imap := table()
      path := []
      name_image("gui.Home24.gif", HOME)
      name_image("gui.New24.gif", NEW)
      name_image("gui.Refresh24.gif", REFRESH)
      name_image("gui.Up24.gif", UP)
      name_image("gui.BOX_UP", Icon.BOX_UP)
      name_image("gui.BOX_DOWN", Icon.BOX_DOWN)
      name_image("gui.DIAMOND_UP", Icon.DIAMOND_UP)
      name_image("gui.DIAMOND_DOWN", Icon.DIAMOND_DOWN)
      name_image("gui.ARROW_UP", Icon.ARROW_UP)
      name_image("gui.ARROW_DOWN", Icon.ARROW_DOWN)
      name_image("gui.ARROW_LEFT", Icon.ARROW_LEFT)
      name_image("gui.ARROW_RIGHT", Icon.ARROW_RIGHT)
      name_image("gui.TINY_ARROW_UP", Icon.TINY_ARROW_UP)
      name_image("gui.TINY_ARROW_DOWN", Icon.TINY_ARROW_DOWN)
   end

   public static name_image(name, data)
      insert(names, name, data)
   end

   public static add_dir(d)
      d := Files.get_path(d).canonical()
      # Ensure it isn't in the list twice.
      if d.str() == (!path).str() then
         return
      push(path, d)
   end

   #
   # Get the full file path where the given window was found and loaded from.
   #
   public static get_source(w)
      return \imap[w]
   end

   public static get(s, win)
      local f, w, key, data, bg, fg
      bg := if /win then
         "65535,65535,65535"
      else
         Window.color_value(win.get_bg())
      if data := \names[s] then {
         if data[1] == "(" then {
            fg := if /win then 
               "0,0,0"
            else
               Window.color_value(win.get_fg())
            key := fg || "/" || bg || "#" || s
            if w := \imap[key] then
               return w
            data := get_extended_image(win, data) | fail
         } else {
            key := bg || "#" || s
            if w := \imap[key] then
               return w
         }
         w := Window.open_image(data, win) | fail
         insert(imap, key, w)
         insert(imap, w, s)
         return w
      } else {
         every f := get_paths(s) do {
            key := bg || "#" || f
            if w := \imap[key] then
               return w
            if Files.stat(f).mode[1] == "-" then {
               w := Window.open_image(f, win) | fail
               insert(imap, key, w)
               insert(imap, w, f)
               return w
            }
         }
      }
      return error("Couldn't find on path:" || s)
   end

   public static get_paths(s)
      local p
      p := Files.get_path(s)
      if p.is_absolute() then
         return p.canonical().str()
      suspend (!path).append(p).str()
   end
   
   final private new()
   end
end

