package lang

import io, util, ipl.tables, ipl.scan, exception

#
# Convert the object to string, descending structures to the given depth.  See
# also `ObjectOutputStream`.
#
# :Parameters :
# :  `o` - The object to be converted.
#
procedure to_string(o, indent, always_structure, depth, ignore_object_output)
   local rs
   return use {
      rs := RamStream(),
      ObjectOutputStream(rs).
         set_indent(indent).
         set_always_structure(always_structure).
         set_depth(depth).
         set_ignore_object_output(ignore_object_output).
         show(o) & rs.str()
   }
end

#
# Like `to_string`, but send the output direct to `FileStream.stdout`.  See
# also `ObjectOutputStream`.
#
# :Parameters :
# :  `o` - The object to be output.
#
procedure to_stdout(o, indent, always_structure, depth, ignore_object_output)
   return ObjectOutputStream(FileStream.stdout).
      set_indent(indent).
      set_always_structure(always_structure).
      set_depth(depth).
      set_ignore_object_output(ignore_object_output).
      show(o)
end

#
# Like `to_string`, but send the output direct to `FileStream.stderr`.  See
# also `ObjectOutputStream`.
#
# :Parameters :
# :  `o` - The object to be output.
#
procedure to_stderr(o, indent, always_structure, depth, ignore_object_output)
   return ObjectOutputStream(FileStream.stderr).
      set_indent(indent).
      set_always_structure(always_structure).
      set_depth(depth).
      set_ignore_object_output(ignore_object_output).
      show(o)
end

# A class implements this interface in order to provide custom output
# for an ObjectOutputStream
#
abstract class ObjectOutput()
   private abstract object_output(oos)
end

# A class implements this interface to provide a custom implementation
# for the `clone` procedure.
#
abstract class ObjectClone()
   private abstract object_clone(seen)
end

# A class implements this interface to provide a custom implementation
# for the `hash` procedure.
#
abstract class ObjectHash()
   private abstract object_hash(depth)
end

# A class implements this interface to provide a custom implementation
# for the `equals` procedure.
#
# It is advisable when implementing this interface to also implement
# `ObjectHash`, so that the following relationship holds :-
# ~
#        equals(x, y)   =>    hash(x) = hash(y)
# ~
# This ensures that classes such as `datastruct.EqTable` work
# correctly.
#
abstract class ObjectEquals()
   private abstract object_equals(other, seen)
end

#
# This class can be used to output a human-readable image of an
# arbitrary icon object.
#
# Example :-
# ~
#    oo := ObjectOutputStream(FileStream.stdout)
#    oo.show(my_object)
#    oo.show(another_object)
# ~
#
# Note that most of the public methods in this class are intended for
# use by other classes which implement custom output (by having an
# `object_output` method).  Only the setter and `show` methods should
# be used by a client.
#
# For simpler procedure interfaces to this class, see `to_string`,
# `to_stdout` and `to_stderr`.
#
class ObjectOutputStream(Stream, HasUnderlyingStream)
   private readable
      depth,
      indent,
      level,
      ilevel
      
   private
      stuff,
      seen, 
      file,
      ignore_object_output_flag,
      always_structure_flag

   #
   # Reset everything and output a new object.
   #
   public show(o)
      self.level := 0
      self.ilevel := 0
      self.stuff := &null
      return use {
         self.seen := table(),
         try1{traverse(o)},
         self.seen := &null
      }
   end

   public override out(s)
      stuff := &yes
      return file.out(s) | throw(&why)
   end

   public override get_mode()
      return WRITE
   end

   public nl()
      if \stuff then {
         write()
         writes(repl(" ", indent * ilevel))
         stuff := &null
      }
      link
   end

   public iplus()
      ilevel +:= 1
      link
   end

   public iminus()
      ilevel -:= 1
      link
   end

   public traverse(o)
      local ty, s, i, e, sep, desc, def

      if s := member(seen, o) then
         return writes("ref ", s)

      ty := type(o)
      level +:= 1
      if /depth | (level <= depth) then
         desc := &yes

      case ty of {
         "record" : {
            s := ty || " " || Constructor.get_name(o) || "#" || serial(o)
            insert(seen, o, s)
            if /desc then 
               writes1(s)
            else if simple{!o} then {
               writes(s, "(")
               i := 1
               every s := Constructor.get_field_names(o) do {
                  if i > 1 then
                     writes1(";")
                  writes(s, "=")
                  traverse(o[i])
                  i +:= 1
               }
               writes1(")")
            } else {
               nl()
               writes(s, "(")
               iplus()
               i := 1
               every s := Constructor.get_field_names(o) do {
                  nl()
                  iplus()
                  writes(s, "=")
                  traverse(o[i])
                  iminus()
                  i +:= 1
               }
               iminus()
               nl()
               writes1(")")
            }
         }

         "object" : {
            s := type(o) || " " || Class.get_name(o) || "#" || serial(o)
            insert(seen, o, s)
            if /desc then
               writes1(s)
            else if /ignore_object_output_flag & Class.is_by_name(o, ObjectOutput) then
               o.object_output(self)
            else if simple{Class.getf(o, 1 to Class.get_n_instance_fields(o))} then {
               writes(s, "(")
               every i := 1 to Class.get_n_instance_fields(o) do {
                  if i > 1 then
                     writes1(";")
                  writes(Class.get_field_name(o, i), "=")
                  traverse(Class.getf(o, i))
                  i +:= 1
               }
               writes1(")")
            } else {
               nl()
               writes(s, "(")
               iplus()
               every i := 1 to Class.get_n_instance_fields(o) do {
                  nl()
                  writes(Class.get_field_name(o, i), "=")
                  iplus()
                  traverse(Class.getf(o, i))
                  iminus()
                  i +:= 1
               }
               iminus()
               nl()
               writes1(")")
            }
         }

         "set" : {
            s := ty || "#" || serial(o)
            insert(seen, o, s)
            if /desc then
               writes1(s)
            else if simple{!o} then {
               writes(s, "{")
               every e := !sort(o) do {
                  if \sep then
                     writes1(",")
                  traverse(e)
                  sep := &yes
               }
               writes1("}")
            } else {
               nl()
               writes(s, "{")
               iplus()
               every e := !sort(o) do {
                  if \sep then
                     writes1(",")
                  nl()
                  traverse(e)
                  sep := &yes
               }
               iminus()
               nl()
               writes1("}")
            }
         }

         "list" : {
            s := ty || "#" || serial(o)
            insert(seen, o, s)
            if /desc then
               writes1(s)
            else if simple{!o} then {
               writes(s, "[")
               every e := !o do {
                  if \sep then
                     writes1(",")
                  traverse(e)
                  sep := &yes
               }
               writes1("]")
            } else {
               nl()
               writes(s, "[")
               iplus()
               every e := !o do {
                  if \sep then
                     writes1(",")
                  nl()
                  traverse(e)
                  sep := &yes
               }
               iminus()
               nl()
               writes1("]")
            }
         }

         "table" : {
            s := ty || "#" || serial(o)
            insert(seen, o, s)
            if /desc then
               writes1(s)
            else {
               def := o[[]]
               if simple{\def} then {
                  writes1(s)
                  if \def then {
                     writes(";def=")
                     traverse(def)
                  }
               } else {
                  nl()
                  writes1(s)
                  if \def then {
                     writes1(";def=")
                     iplus()
                     traverse(def)
                     iminus()
                  }
               }

               if simple{keyval(o)} then {
                  writes1("{")
                  every e := !sort(o) do {
                     if \sep then
                        writes1(";")
                     traverse(e[1])
                     writes1("->")
                     traverse(e[2])
                     sep := &yes
                  }
                  writes1("}")
               } else {
                  writes1("{")
                  iplus()
                  every e := !sort(o) do {
                     nl()
                     traverse(e[1])
                     writes1("->")
                     iplus()
                     traverse(e[2])
                     iminus()
                  }
                  iminus()
                  nl()
                  writes1("}")
               }
            }
         }

         "methp" : {
            s := ty || "#" || serial(o)
            insert(seen, o, s)
            if /desc then 
               writes1(s)
            else if simple{Class.get_methp_object(o)} then {
               writes(s, "(")
               traverse(Class.get_methp_object(o))
               writes(",", image(Class.get_methp_proc(o)), ")")
            } else {
               nl()
               writes(s, "(")
               iplus()
               nl()
               traverse(Class.get_methp_object(o))
               writes1(",")
               nl()
               writes1(image(Class.get_methp_proc(o)))
               iminus()
               nl()
               writes1(")")
            }
         }

         "weakref" : {
            s := ty || "#" || serial(o)
            insert(seen, o, s)
            if /desc then
               writes1(s)
            else if e := weakrefval(o) then {
               if simple{e} then {
                  writes(s, "(")
                  traverse(e)
                  writes1(")")
               } else {
                  nl()
                  writes(s, "(")
                  iplus()
                  nl()
                  traverse(e)
                  iminus()
                  nl()
                  writes1(")")
               }
            } else
               writes(s, "()")
         }

         default : 
            writes1(image(o))
      }

      level -:= 1
      link
   end
   
   public object_start(o)
      return writes(type(o), " ", Class.get_name(o), "#", serial(o), "(")
   end

   public object_end(o)
      return writes1(")")
   end

   public object_string(o, s)
      object_start(o)
      writes1(\s)
      object_end(o)
      link
   end

   public object_selected(o, fields[])
      local s, sep
      if simple{Class.getf(o, !fields)} then {
         object_start(o)
         every s := !fields do {
            if \sep then
               writes1(";")
            writes(s, "=")
            traverse(Class.getf(o, s))
            sep := &yes
         }
         object_end(o)
      } else {
         nl()
         object_start(o)
         iplus()
         every s := !fields do {
            nl()
            writes(s, "=")
            iplus()
            traverse(Class.getf(o, s))
            iminus()
         }
         iminus()
         nl()
         object_end(o)
      }
      link
   end

   public simple(x)
      local e
      static s
      initial s := set("null", "yes", "string", "ucs", "cset", "integer", "class",
                       "real", "co-expression", "constructor", "procedure")
      if /indent then
         return
      # If always structure, then only an empty sequence is simple.
      if \always_structure_flag then
         return not(@x)
      if level = \depth then
         return
      while e := @x do
         member(seen, e) | member(s, type(e)) | fail
      return 
   end

   # When set to an integer, output is structured over many lines,
   # with the given value as an indent to show structure.  When null,
   # all output is on one line.
   #
   public set_indent(i)
      self.indent := i
      link
   end

   # The maximum depth into which strucutures are recursed; if null
   # then no limit.
   #
   public set_depth(i)
      self.depth := i
      link
   end

   # If set, then any custom `object_output` methods in objects are
   # ignored, and the default object output format is used instead.
   #
   public set_ignore_object_output(s)
      self.ignore_object_output_flag := need_flag(s)
      link
   end

   # When indent is set (ie output is over many lines and indented to
   # show structure), certain objects will still be written on one
   # line if they just contain simple elements like integers and
   # strings.  This flag forces even these objects to be written over
   # many lines.
   #
   public set_always_structure(s)
      self.always_structure_flag := need_flag(s)
      link
   end

   public override close()
      if \close_underlying_flag then
         file.close() | fail
      link
   end

   public new(file)
      /file := FileStream.stdout
      self.file := file
      file.can(Stream.WRITE) | runerr("ObjectOutputStream: stream not writable: ", file)
      return
   end
end

package class CloneMethp()
   private optional nothing()
end

#
# Clone the given object
#
procedure clone(o, seen)
   local e, ty, res, i

   /seen := table()

   if res := member(seen, o) then
      return res

   ty := type(o)

   case ty of {
      "object" : {
         if Class.is_by_name(o, ObjectClone) then {
            res := o.object_clone(seen)
            (classof(res) === classof(o)) | runerr("Invalid cloned object", res)
            insert(seen, o, res)
         } else {
            #
            # Create an instance
            #
            res := Class.create_raw_instance_of(classof(o))
            # The members of res may reference it...
            insert(seen, o, res)
            every i := 1 to Class.get_n_instance_fields(res) do
               Class.get(res, i) := clone(Class.get(o, i), seen)
            Class.complete_raw_instance(res)
         }
         return res
      }

      "record" : {
         res := classof(o)()
         insert(seen, o, res)
         every i := 1 to *o do
            res[i] := clone(o[i], seen)
         return res
      }

      "set" : {
         res := set()
         insert(seen, o, res)
         every insert(res, clone(!o, seen))
         return res
      }

      "list" : {
         res := []
         insert(seen, o, res)
         every put(res, clone(!o, seen))
         return res
      }

      "table" : {
         res := table(clone(o[[]], seen))
         insert(seen, o, res)
         every e := entries(o) do
            insert(res, clone(e.key, seen), clone(e.val, seen))
         return res
      }

      "methp" : {
         res := CloneMethp().nothing
         insert(seen, o, res)
         return Class.set_methp(res, clone(Class.get_methp_object(o), seen), Class.get_methp_proc(o))
      }

      default : 
         return o
   }
end

#
# Return a hash code for this object.  For any two objects for which `equals` indicates
# equality, the returned hash code should be the same.
#
procedure hash(x, depth)
   local n, i, l

   /depth := 2
   if depth = 0 then
      return 0
   
   case type(x) of {
      "object" : {
         if Class.is_by_name(x, ObjectHash) then
            n := x.object_hash(depth)
         else {
            l := n := Class.get_n_instance_fields(x)
            if depth > 1 then {
               every i := hash(Class.get(x, 1 to l) \ 10, depth - 1) do
                  n := 37 * iand(n, 16rffffff)  + i
            }
         }
      }

      "record" | "list" : {
         n := *x
         if depth > 1 then {
            every i := hash(!x \ 10, depth - 1) do
               n := 37 * iand(n, 16rffffff)  + i
         }
      }

      "set" : {
         n := *x
         if depth > 1 then
            every n +:= hash(!x, depth - 1)
      }

      "table" : {
         n := *x
         if depth > 1 then {
            n +:= hash(x[[]], depth - 1)
            every n +:= hash(key(x), depth - 1)
         }
      }

      "methp" :
         n := hash(Class.get_methp_object(x), depth - 1) +
                   hash(Class.get_methp_proc(x), depth - 1)

      default :
         n := Internal.hash(x)
   }
   return iand(n, 16r7fffffff)
end

#
# Compare this object with another by recursively comparing all
# members of the object.
#
procedure equals(x, y, seen)
   local t
   if x === y then
      return
   type(x) == type(y) | fail
   /seen := table()
   if member(member(seen, x), y) | member(member(seen, y), x) then
      return
   (t := member(seen, x)) | insert(seen, x, t := set())
   insert(t, y)
   if equals_impl(x, y, seen) then
      return
   delete(t, y)
end

package procedure equals_impl(x, y, seen)
   local i, mp
   case type(x) of {
      "object" : {
         if Class.is_by_name(x, ObjectEquals) then {
            # x has an object_equals method, so y must inherit the
            # same object_equals method as x.
            mp := x.object_equals
            succeed (Proc.get_defining_class(mp) === Class.get_field_defining_class(y, "object_equals")) &
               mp(y, seen)
         }
         classof(x) === classof(y) | fail
         every i := 1 to Class.get_n_instance_fields(x) do 
            equals(Class.get(x, i), Class.get(y, i), seen) | fail
         return
      }

      "record" : {
         *x = *y | fail
         classof(x) === classof(y) | fail
         every i := 1 to *x do
            equals(x[i], y[i], seen) | fail
         return
      }

      "list" : {
         *x = *y | fail
         every i := 1 to *x do
            equals(x[i], y[i], seen) | fail
         return
      }

      "set" : {
         *x = *y | fail
         return hash_and_check(x, y, seen)
      }

      "table" : {
         *x = *y | fail
         equals(x[[]], y[[]], seen) | fail
         return hash_and_check(entrylist(x), entrylist(y), seen)
      }

      "methp": {
         Class.get_methp_proc(x) === Class.get_methp_proc(y) | fail
         equals(Class.get_methp_object(x),
                Class.get_methp_object(y), seen) | fail
         return
      }

      default : {
         # Since x ~=== y, we just fail for all other types.
         fail
      }
   }
end

#
# Check that all elements of s2 are in s1, by using a table indexed on
# hash-codes.
#
procedure hash_and_check(s1, s2, seen)
   local t, e, i
   t := table()
   every e := !s1 do {
      i := hash(e)
      inserts(t, i, e)
   }
   every e := !s2 do
      in_bucket(e, member(t, hash(e)), seen) | fail
   return
end

#
# Search for element e in hash bucket l.  If found, the bucket element is
# removed, so that it is matched only once.
#
package procedure in_bucket(e, l, seen)
   local i
   every i := 1 to *l do {
      if equals(e, l[i], seen) then {
         delete(l, i)
         return
      }
   }
end

#
# This class has some static methods that give access to some useful internal
# interpreter functions.
#
final abstract class Internal()
   #
   # This method gives access to the internal ordering method used by
   # the interpreter, for example in the builtin `sort` function.  The
   # two values are compared and either `-1`, `0`, or `+1` is returned
   # depending on whether `x` is less than, equal to, or greater than
   # `y`, respectively.
   #
   public static native compare(x, y)

   #
   # This method gives access to the internal hash method used
   # by the interpreter, for example in implementing tables and sets.
   # It is distinct from the `lang.hash()` procedure.
   #
   public static native hash(x)

   #
   # Return the collating order number for `x`, which is a small integer
   # dependent on the type.
   #
   public static native order(x)
end

#
# Parent class for a class which returns self on clone (useful for
# immutable classes).
#
class SelfClone(ObjectClone)
   private final override object_clone()
      link
   end
end

#
# Parent class for a class which wishes to prevent copying of itself,
# either by clone or encode/decode.
#
class NoCopy(SelfClone, Unencodable)
end

#
# An implementation of object_output that avoids printing the
# internals of an object, and just produces the bare minimum output,
# such as "object mypackage.MyObject#3()"
#
class MinimalObjectOutput(ObjectOutput)
   private override object_output(oo)
      oo.object_string(self)
   end
end

#
# Given an global name, return the package element, or fail if there is none.
#
procedure extract_package(s)
   s ? if tab(backto('.',, 0) - 1) then
      return tab(1)
end

# This class just provides a simple constructor which initializes the
# instance fields in the order they were defined in the class, from
# the given parameters.  In other words, rather like a record
# constructor.
#
# Example :-
# ~
#    class Abc(New) public const a, b, c end
#    ...
#    x := Abc(1,2,3)  # Sets a,b,c to 1,2,3 respectively
# ~
class New()
   public new(a[])
      local i, v
      every i := 1 to Class.get_n_instance_fields(self) do {
         v := pop(a) | break
         Class.get(self, i) := v
      }
      return
   end
end

#
# Try to convert `x` to something which can be invoked.  This follows
# similar logic to that used in converting an expression for
# invocation (see the function general_call in invoke.r).
#
# :Parameters :
# :  `x` - the thing to convert
# :  `n` - the optional number of args for an operator.  If null, then
#          a valid operator name will be returned as a string; if 0 then
#          no operator names are recognized; if 1, 2 or 3 then only
#          an operator with that number of parameters will be recognized.
#
procedure callable(x, n)
   if type(x) == ("procedure" | "class" | "constructor" | "methp") then
      return x
   if x := integer(x) then
      return x
   if x := string(x) then {
      if x := Prog.get_named_global(x) | Prog.get_function(x) | Prog.get_keyword(x) then
         return x
      return if /n then
         # Null means any operator and return the name
         Prog.get_operator(x, 1 to 3) & x
      else
         # Otherwise match the number, or reject if n=0.
         Prog.get_operator(x, 0 < n)
   }
end
