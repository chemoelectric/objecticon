#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import lang, util, gui


#
# Constants defining resizing corner sizes.
$define RSW 12
$define RST 3

############################################################################
#
# Parent class for all components.
#
class CanvasComponent(CanvasObject)
   public 
   x_fixed,                 # Flags - is position/size fixed
   y_fixed,                 #
   w_fixed,                 #
   h_fixed,                 #
   event_handlers,          # List of event, handler pairs
   mx, my, mw, mh,          # Pos/size whilst being resized, in absolute values
   default_border,          # The border set in the Component's constructor
   border_opts

   public gen_cos()
      suspend \self.border_opts | \self.layout_delegate | \self.tooltip
   end

   #
   # An adjustment to add to the object's absolute x position,
   # depending upon its alignment.
   # 
   public get_x_alignment_offset()
      return case self.x_align of {
         "l" : 0
         "c" : self.w / 2
         "r" : self.w
      }
   end

   # 
   # As above, for the y value.
   #
   public get_y_alignment_offset()
      return case self.y_align of {
         "t" : 0
         "c" : self.h / 2
         "b" : self.h
      }
   end

   #
   # Return the list of event handlers
   #
   public get_event_handlers()
      return event_handlers
   end

   #
   # Generate the code into the Code object c.
   #
   public gen_code(c)
      local t, e
      c.line(name || " := " || self.class_name || "()")

      if \self.x_spec | \self.y_spec then {
         t := name || ".set_pos("
         if \self.x_spec then
            t ||:= image(self.x_spec)
         t ||:= ", "

         if \self.y_spec then
            t ||:= image(self.y_spec)

         t ||:= ")"
         c.line(t)
      }

      if \self.w_spec | \self.h_spec then {
         t := name || ".set_size("
         if \self.w_spec then
            t ||:= image(self.w_spec)
         if \self.h_spec then
            t ||:= ", " || image(self.h_spec)
         t ||:= ")"
         c.line(t)
      }

      if self.z ~= 0 then {
         c.line(name || ".set_z(" || self.z || ")")
      }

      if self.tab_ord ~= 0 then {
         c.line(name || ".set_tab_ord(" || self.tab_ord || ")")
      }

      #
      # Output alignment unless using default of "l", "t"
      #
      if not(self.x_align == "l" & self.y_align == "t") then
         c.line(name || ".set_align(" || image(self.x_align) || ", " || image(self.y_align) || ")")

      if \self.is_shaded_flag then
         c.line(name || ".set_is_shaded(\"t\")")

      every e := !sort(self.wattribs) do
         c.line(name || ".set_wattrib(" || image(e[1]) || ", " || image(e[2]) || ")")

      c.line(name || ".clear_constraints()")
      every e := !sort(self.constraints) do
         c.line(name || ".set_constraint(" || image(e[1]) || ", " || image(e[2]) || ")")

      if \self.tooltip then {
         self.tooltip.gen_code(c)
         c.line(name || ".set_tooltip(" || self.tooltip.name || ")")
      }

      if \self.accel then
         c.line(name || ".set_accel(" || image(self.accel) || ")")

      if self === self.parent_Canvas.initial_focus then
         c.line("self.set_focus(" || self.name || ".find_focus())")

      c.add_event_handlers(self.name, \self.event_handlers)

      if \self.layout_delegate then {
         self.layout_delegate.gen_code(c)
         c.line(name || ".set_layout(" || self.layout_delegate.name || ")")
      }

      if \self.border_opts then {
         self.border_opts.gen_code(c)
         c.line(name || ".set_border(" || self.border_opts.name || ")")
      }

      c.add_var(name, class_variable)
      c.add_import(self.import_name, self.class_name)
   end

   #
   # Copy the fields from self to c.
   #
   public dup_fields(c)
      cast(self,CanvasObject).dup_fields(c)
      c.x := self.x
      c.y := self.y
      c.w := self.w
      c.h := self.h
      c.x_fixed := self.x_fixed
      c.y_fixed := self.y_fixed
      c.w_fixed := self.w_fixed
      c.h_fixed := self.h_fixed
      c.x_spec := self.x_spec
      c.y_spec := self.y_spec
      c.w_spec := self.w_spec
      c.h_spec := self.h_spec
      c.x_align := self.x_align
      c.y_align := self.y_align
      c.z := self.z
      c.tab_ord := self.tab_ord
      c.is_shaded_flag := self.is_shaded_flag
      if /self.tooltip then
         c.tooltip := &null
      else
         c.tooltip := self.tooltip.dup()
      c.accel := self.accel
      c.wattribs := copy(self.wattribs)
      c.constraints := copy(self.constraints)
      c.event_handlers := lang.clone(\self.event_handlers)
      if /self.layout_delegate then
         c.layout_delegate := &null
      else
         c.set_layout(self.layout_delegate.dup())
      if /self.border_opts then
         c.set_border_opts(&null)
      else
         c.set_border_opts(self.border_opts.dup())
   end

   #
   # Return the I/O template.
   #
   public get_template()
      return cast(self,CanvasObject).get_template() ||| [
              ["X Fix", "x_fixed"],
              ["Y Fix", "y_fixed"],
              ["W Fix", "w_fixed"],
              ["H Fix", "h_fixed"],
              ["X Spec", "x_spec"],
              ["Y Spec", "y_spec"],
              ["W Spec", "w_spec"],
              ["H Spec", "h_spec"],
              ["X Align", "x_align"],
              ["Y Align", "y_align"],
              ["Z", "z"],
              ["Tab ord", "tab_ord"],
              ["Is shaded", "is_shaded_flag"],
              ["WAttribs", "wattribs"],
              ["Constraints", "constraints"],
              ["Tooltip", "tooltip"],
              ["Accel", "accel"],
              ["Layout delegate", "layout_delegate"],
              ["Border opts", "border_opts"],
              ["Event Handlers", "event_handlers"],
              ["Class Variable", "class_variable"],
              ["Parent Component", "parent"]
             ]
   end

   protected pre_decode()
      new()
   end

   protected post_decode()
      set_border_opts(self.border_opts)
   end

   public set_border_opts(o)
      self.border_opts := o
      if /o then
         self.border := self.default_border
      else
         self.border := o.create_visual_border()
   end

   #
   # Default minimum width for the object
   #
   public min_width()
      return 20
   end

   #
   # Default minimum height for the object
   #
   public min_height()
      return 20
   end

   #
   # Reset an object, ie finalize it and set it up again afresh.
   #
   public reset()
      self.finally()
      self.initially()
      self.layout()
   end

   #
   # Is obj inside this object?
   #
   public is_inside(obj)
      fail
   end

   #
   # Highlight the given object.
   #
   public do_highlight(W)
      local cw, i, r
      r := self.get_clip_rect() | fail
      cw := Clone(W, "linestyle=dashed")
      #Rectangle(cw, self.x - RST, self.y - RST, self.w + 2 * RST, self.h + 2 * RST)
      Clip(cw, r.x, r.y, r.w, r.h)
      WAttrib(cw, "linestyle=solid")
      if self === self.parent_Canvas.selected then
         WAttrib(cw, "fg=red")

      every i := 0 to RST - 1 do {
         DrawLine(cw, self.x + i, self.y + RSW, self.x + i, self.y + i, self.x + RSW, self.y + i)

         DrawLine(cw, self.x + self.w - 1 - RSW, self.y + i, self.x + self.w - 1 - i, self.y + i, self.x + self.w - 1 - i, self.y + RSW)

         DrawLine(cw, self.x + i, self.y + self.h - 1  - RSW, self.x + i, self.y + self.h - 1 - i, self.x + RSW, self.y + self.h - 1 - i)


         DrawLine(cw, self.x + self.w - 1 - RSW, self.y + self.h - 1 - i, self.x + self.w - 1 - i, self.y + self.h - 1 - i, self.x + self.w - 1 - i, self.y + self.h - 1 - RSW)

      }

      if *self.parent_Canvas.selections > 1 then {
         WAttrib(cw, "fg=blue")
         Clip(cw)
         FillCircle(cw, self.x + self.w, self.y, 8)
         WAttrib(cw, "fg=white", "font=serif,10")
         center_string(cw, self.x + self.w, self.y, 
                       keyof(self.parent_Canvas.selections, self))
      }

      Uncouple(cw)
   end

   #
   # Is the cursor on the resize corners?
   #
   public in_resize_region()
      if ((self.x <= &x < self.x + RSW) & (self.y <= &y < self.y + RST)) | ((self.x <= &x < self.x + RST) & (self.y <= &y < self.y + RSW)) then
         return 1       # Top left

      if ((self.x + self.w - RSW <= &x < self.x + self.w) & (self.y <= &y < self.y + RST)) | ((self.x + self.w - RST <= &x < self.x + self.w) & (self.y <= &y < self.y + RSW)) then
         return 2       # Top right

      if ((self.x <= &x < self.x + RSW) & (self.y + self.h - RST <= &y < self.y + self.h)) | ((self.x <= &x < self.x + RST) & (self.y + self.h - RSW <= &y < self.y + self.h)) then
         return 3       # Bottom left

      if ((self.x + self.w - RSW <= &x < self.x + self.w) & (self.y + self.h - RST <= &y < self.y + self.h)) | ((self.x + self.w - RST <= &x < self.x + self.w) & (self.y + self.h - RSW <= &y < self.y + self.h)) then
         return 4       # Bottom right

      fail
   end

   #
   # If the cursor is over the object, return it.  This will be over-ridden for
   # container subclasses.
   #
   public which_cursor_over()
      if ((self.x <= &x < self.x + self.w) & (self.y  <= &y < self.y + self.h)) then
         return self
   end

   #
   # Ensure pos and size are suitable for a component within a layout
   #
   public layout_safe()
      #
      # Set x and y to null - the layout will set them.
      #
      self.x_spec := self.y_spec := &null

      # We don't want % specs as width or heights in a managed
      # layout.
      if \self.w_spec & not(integer(self.w_spec)) then
         self.w_spec := self.w
      if \self.h_spec & not(integer(self.h_spec)) then
         self.h_spec := self.h
   end

   #
   # Place object c inside the container subclass
   #
   public place_inside(c)
      #
      # Add c to the object.
      #
      self.add(c)      

      if \self.layout_delegate then {
         #
         # Set x and y to null - the layout will set them.
         #
         c.x_spec := c.y_spec := &null

         # We don't want % specs as width or heights in a managed
         # layout.
         if \c.w_spec & not(integer(c.w_spec)) then
            c.w_spec := c.mw
         if \c.h_spec & not(integer(c.h_spec)) then
            c.h_spec := c.mh
      } else {
         #
         # Set c's x and y position specs
         #
         c.x_spec := c.get_x_alignment_offset() + c.mx - self.x
         c.y_spec := c.get_y_alignment_offset() + c.my - self.y
      }

      #
      # Reset c.
      #
      c.reset()
   end

   #
   # Called after a move or resize.
   #
   public still_inside(c)
      if \self.layout_delegate then {
         #
         # Set x and y to null - the layout will set them.
         #
         c.x_spec := c.y_spec := &null
      }
   end

   #
   # Succeed iff we're not in preview mode.
   #
   public in_ivib()
      return is(self.parent_dialog, CDialog)
   end

   #
   # Succeed iff we're in preview mode.
   #
   public in_preview()
      return not(in_ivib())
   end

   #
   # Open the configuration dialog box.
   #
   public defer dialog()

   public op_dialog()
      parent_Canvas.parent_dialog.show_dialog(self)
   end

   public op_delete()
      parent_Canvas.delete(self)
   end

   public op_save()
      parent_Canvas.component_save(self)
   end

   public op_load()
      parent_Canvas.component_load(self)
   end

   public op_cut()
      op_copy()
      op_delete()
   end

   public op_copy()
      parent_Canvas.parent_dialog.copy_to_clipboard(self)
   end

   public op_paste()
      parent_Canvas.component_paste(self)
   end

   public op_gridify()
      parent_Canvas.gridify(self)
   end

   public op_duplicate()
      parent_Canvas.duplicate_component(self)
   end

   public op_print_layout()
      self.layout_delegate.print_layout()
   end

   # Can children be added - default no
   public allows_add()
   end

   # Can it be selected in the canvas?
   public allows_selection()
      return self.is_unhidden()
   end

   # Can it be positioned? - default yes
   public allows_positioning()
      return 1
   end

   # Can it be copied? - default yes
   public allows_copy()
      return 1
   end

   # Can we set a default (null) width? - default yes if has a layout
   public allows_null_width()
      return \self.layout_delegate
   end

   # Can we set a default (null) height? - default yes if has a layout
   public allows_null_height()
      return \self.layout_delegate
   end

   public allows_delete()
      return 1
   end

   public create_menu()
      local m, i, c, cm, csm, key, fm

      m := Menu()
      i := TextMenuItem("label=Dialog")
      i.connect(self.op_dialog, Event.ACTION)
      m.add(i)

      if self.allows_add() & /self.layout_delegate then {
         i := TextMenuItem("label=Gridify")
         i.connect(self.op_gridify, Event.ACTION)
         m.add(i)
      }

      if \self.parent.layout_delegate then {
         c := self.constraints
         cm := Menu("label=Constraints")
         m.add(cm)

         csm := Menu("label=Position")
         cm.add(csm)
         if /to_flag(c["eol"]) then
            csm.add(SetConstraintItem(self, "eol", 1))
         else
            csm.add(RemoveConstraintItem(self, "eol"))

         if i := integer(c["tab"]) then {
            csm.add(SetConstraintItem(self, "tab", i + 1))
            if i = 1 then
               csm.add(RemoveConstraintItem(self, "tab"))
            else
               csm.add(SetConstraintItem(self, "tab", i - 1))
         } else
            csm.add(SetConstraintItem(self, "tab", 1))

         if i := integer(c["w"]) then {
            csm.add(SetConstraintItem(self, "w", i + 1))
            if i = 2 then
               csm.add(RemoveConstraintItem(self, "w"))
            else
               csm.add(SetConstraintItem(self, "w", i - 1))
         } else
            csm.add(SetConstraintItem(self, "w", 2))

         csm := Menu("label=X layout")
         cm.add(csm)
         if /to_flag(c["x_fill"]) then
            csm.add(SetConstraintItem(self, "x_fill", 1))
         else
            csm.add(RemoveConstraintItem(self, "x_fill"))
         case c["x_align"] of {
            Align.L : {
               csm.add(SetConstraintItem(self, "x_align", Align.C))
               csm.add(SetConstraintItem(self, "x_align", Align.R))
            } 
            Align.R : {
               csm.add(SetConstraintItem(self, "x_align", Align.L))
               csm.add(SetConstraintItem(self, "x_align", Align.C))
            }
            default : {
               csm.add(SetConstraintItem(self, "x_align", Align.L))
               csm.add(SetConstraintItem(self, "x_align", Align.R))
            }
         }            
         csm.add(SetConstraintItem(self, "x_weight", if real(c["x_weight"]) = 1.0 then 0.0 else 1.0))

         csm := Menu("label=Y layout")
         cm.add(csm)
         if /to_flag(c["y_fill"]) then
            csm.add(SetConstraintItem(self, "y_fill", 1))
         else
            csm.add(RemoveConstraintItem(self, "y_fill"))
         case c["y_align"] of {
            Align.T : {
               csm.add(SetConstraintItem(self, "y_align", Align.C))
               csm.add(SetConstraintItem(self, "y_align", Align.B))
            } 
            Align.B : {
               csm.add(SetConstraintItem(self, "y_align", Align.T))
               csm.add(SetConstraintItem(self, "y_align", Align.C))
            }
            default : {
               csm.add(SetConstraintItem(self, "y_align", Align.T))
               csm.add(SetConstraintItem(self, "y_align", Align.B))
            }
         }
         csm.add(SetConstraintItem(self, "y_weight", if real(c["y_weight"]) = 1.0 then 0.0 else 1.0))

         csm := Menu("label=Insets")
         cm.add(csm)
         every key := "l_inset"|"r_inset"|"t_inset"|"b_inset" do {
            if i := integer(c[key]) then
               csm.add(RemoveConstraintItem(self, key))
            else
               csm.add(SetConstraintItem(self, key, 0))
         }
      }

      # File sub-menu
      fm := Menu("label=File")
      if self.allows_copy() then {
         i := TextMenuItem("label=Save")
         i.connect(self.op_save, Event.ACTION)
         fm.add(i)
      }
      if self.allows_add() then {
         i := TextMenuItem("label=Load")
         i.connect(self.op_load, Event.ACTION)
         fm.add(i)
      }
      if *fm.children > 0 then
         m.add(fm)

      # Edit sub-menu
      fm := Menu("label=Edit")
      if self.allows_copy() then {
         i := TextMenuItem("label=Duplicate")
         i.connect(self.op_duplicate, Event.ACTION)
         fm.add(i)
      }
      if self.allows_copy() & self.allows_delete() then {
         i := TextMenuItem("label=Cut")
         i.connect(self.op_cut, Event.ACTION)
         fm.add(i)
      }
      if self.allows_copy() then {
         i := TextMenuItem("label=Copy")
         i.connect(self.op_copy, Event.ACTION)
         fm.add(i)
      }
      if self.allows_add() & Selection.has_target(Selection.CLIPBOARD,
                                                  Ivib.IVIB_COMPONENT_TARGET) then {
         i := TextMenuItem("label=Paste")
         i.connect(self.op_paste, Event.ACTION)
         fm.add(i)
      }
      if allows_delete() then {
         i := TextMenuItem("label=Delete")
         i.connect(self.op_delete, Event.ACTION)
         fm.add(i)
      }
      if *fm.children > 0 then
         m.add(fm)
      
      return m
   end

# WARN : parameterless initially method
   public new()
      class_variable := 1
      self.default_border := self.border
      return
   end
end


class SetConstraintItem(TextMenuItem)
   public obj, name, val
   public on_event()
      obj.parent_Canvas.op_set_constraint(obj, name, val)
   end

# WARN : parameterless initially method
   public new()
      cast(self,TextMenuItem).new()
      self.connect(self.on_event, Event.ACTION)
      self.set_label("Set " || name || " to " || image(val))
      return
   end
end


class RemoveConstraintItem(TextMenuItem)
   public obj, name
   public on_event()
      obj.parent_Canvas.op_remove_constraint(obj, name)
   end

# WARN : parameterless initially method
   public new()
      cast(self,TextMenuItem).new()
      self.connect(self.on_event, Event.ACTION)
      self.set_label("Remove " || name)
      return
   end
end





