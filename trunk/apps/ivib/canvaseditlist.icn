#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui


############################################################################
#
# Class for representing a EditList on the canvas.
#
class CanvasEditList(CanvasComponent,EditList)
   public 
      tmp, 
      filter_str

   #
   # Generate code into Code object c.
   #
   public gen_code(c)
      local s, t
      cast(self,CanvasComponent).gen_code(c)

      s := self.get_contents()
      t := \self.selection | 1
      c.line(name || ".set_selection_list(" || contents_string(self.selection_list) || ")")

      if s ~== self.selection_list[t] then
         c.line(name || ".set_contents(" || image(s) || ")")
      else if t ~= 1 then
         c.line(name || ".set_selection(" || self.selection || ")")

      if *\filter_str > 0 then
         c.line(name || ".set_filter(" || image(cset(self.filter_str)) || ")")
   end

   #
   # Duplicate object.
   #
   public dup()
      local c, s, t
      c := CanvasEditList()
      cast(self,CanvasComponent).dup_fields(c)

      s := self.get_contents()
      t := \self.selection | 1
      c.set_selection_list(copy(self.selection_list))
      if s ~== self.selection_list[t] then
         c.set_contents(s)
      else if t ~= 1 then
         c.set_selection(t)
      c.filter_str := self.filter_str

      return c
   end
      
   #
   # I/o template.  The tmp field is necessary to save/set the
   # contents of the tf (TextField) structure.
   #
   #
   # Return the I/O template.
   #
   public get_template()
      return cast(self,CanvasComponent).get_template() ||| 
         [["Contents", "tmp"],
          ["Selection", "selection"],
          ["Selection List", "selection_list"],
          ["Filter String", "filter_str"]
         ]
   end

   public pre_encode()
      cast(self,CanvasComponent).pre_encode()
      tmp := get_contents()
   end

   public post_decode()
      cast(self,CanvasComponent).post_decode()
      self.view.set_contents(tmp)
   end

   #
   # Open the configuration dialog box.
   #
   public dialog()
      return CanvasEditListDialog(self)
   end

   public allows_null_height()
      return 1
   end

   public allows_null_width()
      return 1
   end

   public new()
      cast(self,EditList).new()
      cast(self,CanvasComponent).new()
      filter_str := ""
      self.class_name := "EditList"
      self.import_name := "gui"
      self.name := "edit_list"
      return
   end
end

