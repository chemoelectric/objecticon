/*
 * rmswin.ri - Microsoft Windows-specific graphics interface code.
 *
 */

static wcp           alc_context      (wbp w);

static int setpatternbits(wbp w, int width, int height, int *bits);
static HFONT mkfont              (char *s);
static int sysTextWidth          (wbp w, char *s, int n);
static int sysFontHeight         (wbp w);
static int mswinsystem           (char *s);
static void UpdateCursorPos      (wsp ws, wcp wc);
static HDC CreateWinDC           (wbp);
static HDC CreatePixDC           (wbp, HDC);
static HBITMAP CreateBitmapFromData(char *data);
static void resizePixmap(wbp w, int width, int height);
static int devicecaps(wbp w, int i);
static void setclip(wbp w);
static void unsetclip(wbp w);

void SetDCPixelFormat(HDC h);
int alc_rgb(wbp w, SysColor rgb);
int numRealized;

#define PALCLR(c) (c | 0x2000000L)

int winInitialized = 0;
int BORDHEIGHT;
int BORDWIDTH;
int CLIENT_XOFF;
int CLIENT_YOFF;

/*
 * check for double-byte character set versions of Windows
 */
CPINFO cpinfo;
int MAXBYTESPERCHAR;

wclrp scp;
HPALETTE palette;
int numColors = 0;

char szAppName[] = "Icon";


/*
 * draw ops
 */
stringint drawops[] = {
   { 0, 16},
   {"and",              R2_MASKPEN},
   {"andInverted",      R2_MASKPENNOT},
   {"andReverse",       R2_MASKNOTPEN},
   {"clear",            R2_BLACK},
   {"copy",             R2_COPYPEN},
   {"copyInverted",     R2_NOTCOPYPEN},
   {"equiv",            R2_NOTXORPEN},
   {"invert",           R2_NOT},
   {"nand",             R2_NOTMASKPEN},
   {"noop",             R2_NOP},
   {"nor",              R2_NOTMERGEPEN},
   {"or",               R2_MERGEPEN},
   {"orInverted",       R2_MERGEPENNOT},
   {"orReverse",        R2_MERGENOTPEN},
   {"set",              R2_WHITE},
   {"xor",              R2_XORPEN},
};

/*
 * line types
 */
stringint siLineTypes[] = {
  {0, 6},
  {"dashdotted",        PS_DASHDOT},
  {"dashdotdotted",     PS_DASHDOTDOT},
  {"dashed",            PS_DOT},
  {"longdashed",        PS_DASH},
  {"solid",             PS_SOLID},
  {"striped",           PS_DOT}
};

HINSTANCE mswinInstance;
int ncmdShow;

int FoundIt, FoundNew;
HWND NewWin;
char *lookingfor;
struct WNDlist {
   HWND w;
   struct WNDlist *next;
   } * wlhead;

struct WNDlist *wlinsert(HWND w)
{
   struct WNDlist *x = malloc(sizeof (struct WNDlist));
   x->w = w;
   x->next = wlhead;
   wlhead = x;
   return x;
}

int wlsearch(HWND w)
{
   struct WNDlist *x;
   for(x=wlhead;x;x=x->next) if (x->w == w) return 1;
   return 0;
}

void wlfree()
{
   struct WNDlist *x = wlhead;
   while (wlhead) {
      x = wlhead->next;
      free(wlhead);
      wlhead = x;
      }
}

BOOL_CALLBACK myenumproc(HWND w, LPARAM l)
{
   wlinsert(w);
   return 1;
}

BOOL_CALLBACK myenumproc2(HWND w, LPARAM l)
{
   if (!wlsearch(w)) {
      FoundNew++;
      NewWin = w;
      }
   return 1;
}

char * strcasestr(char *haystack, char *needle)
{
   int len = strlen(needle);
   while (*haystack) {
      if (strncasecmp(haystack, needle, len) == 0) return haystack;
      haystack++;
      }
   return 0;
}

BOOL_CALLBACK myenumproc3(HWND w, LPARAM l)
{
   char s[64], s2[64];
   GetWindowText(w, s2, 63);
   /*
    * Conditions to find a window:
    * 1) wasn't in the list of windows already present when we launched.
    * 2) either contains the argv[0] program name, or
    *    was first window to appear after we called WinExec().
    */
   if (!wlsearch(w)) {
      FoundNew++;
      if ((strcasestr(s2, lookingfor) != NULL) || (NewWin && (NewWin == w))) {
         FoundIt++;
         }
      }
   return 1;
}

char *lookcmdname(char *buf, char *s)
{
  char *t = buf;
  while (*s) {
    *t++ = *s;
    if (*s == '\\') t = buf;
    s++;
    }
  *t++ = '\0';
  s = buf;
  while (*s) {
    if (*s == '.') *s = '\0';
    s++;
    }
  return buf;
}

int mswinsystem(char *s)
{
   int i, rv, j, background = 0;
   char *s2;
   char **argv;
   char cmd[256];
   int argc;


   if (s == NULL) return -1;
   for(i=0; ((s[i] == ' ') || (s[i] == '\t')) ;i++) ;
   if (s[i] == '\0') return -1;

   s2 = strdup(s + i);
   if (s2 == NULL) return -1;

   for(j=strlen(s2)-1; j > 0 && (s2[j] == ' ' || s2[j] == '\t'); j--)
      s2[j] = '\0';

   /*
    * if it is a "background task", launch using WinExec.
    */
   if ((j>0) && (s2[j] == '&')) {
      s2[j] = '\0';
      while (s2[--j] == ' ') s2[j] = '\0';

      i = WinExec(s2, SW_SHOW);
      if ( i >= 32 ) return 0;
      return -1;
      }

   /*
    * launch using spawnvp
    * and wait for _P_WAIT.  _P_WAIT's semantics do not seem to actually
    * work some of the time; the program is launched but we don't wait for it.
    * CmdParamToArgv() is called so as leave quoted arguments quoted, but
    * spawnvp's command name argument (redundant with argv[0]) must not
    * be quoted.
    */
      argc = CmdParamToArgv(s, &argv, 0);
      if (argv[0][0] == '\"') strcpy(cmd, argv[0]+1);
	else strcpy(cmd, argv[0]);
      if (cmd[strlen(cmd)-1] == '\"') cmd[strlen(cmd)-1] = '\0';
      rv = _spawnvp(_P_WAIT, cmd, argv);
      for(i=0; i<argc; i++) free(argv[i]);
      free(argv);
      return rv;
}


/*
 * wopen
 */
wbp wopen(char *display)
   {
   wbp w;
   wsp ws;
   wcp wc;
   char answer[256];
   int i, r;
   RECT rec;
   tended struct b_list *tlp;
   tended struct descrip attrrslt;
   HDC hdc, hdc2, hdc3;
   DWORD winstyles = 0;
   TEXTMETRIC	metrics;
   LOGPALETTE logpal[4]; /* really 1 + space for an extra palette entry */
   HBRUSH brush;
   HBITMAP oldpix, oldpix2;
   HFONT oldfont;

   if (! winInitialized++) {
      BORDWIDTH = FRAMEWIDTH * 2;
      BORDHEIGHT = TITLEHEIGHT + FRAMEHEIGHT * 2;
      CLIENT_XOFF = FRAMEWIDTH;
      CLIENT_YOFF = TITLEHEIGHT + FRAMEHEIGHT;
      GetCPInfo(CP_ACP, &cpinfo);
      MAXBYTESPERCHAR = cpinfo.MaxCharSize;
      }
   /*
    * allocate a binding, a window state, and a context
    */
   w = alcwbinding();

   GRFX_ALLOC(ws, _wstate);
   ws->listp = nulldesc;
   ws->cursorname = salloc("arrow");
   ws->curcursor = LoadCursor(NULL, IDC_ARROW);
   ws->minwidth = ws->minheight = 1;
   ws->maxwidth = ws->maxheight = INT_MAX;
   /*SETTITLEBAR(ws);*/
   GRFX_LINK(ws, wstates);

   w->window = ws;
   w->context = alc_context(w);
   ws = w->window;
   create_list(64, &ws->listp);
   ws->width = ws->height = 1;
   /*
    * set the title
    */
   ws->windowlabel = salloc(DEFAULT_WINDOW_LABEL);
   SETTOBEHIDDEN(ws);

   wc = w->context;

   if (ws->x < 0) ws->x = 0;
   if (ws->y < 0) ws->y = 0;

   /*
    * create the window
    */
/*   winstyles=(ISTITLEBAR(ws)?WS_OVERLAPPEDWINDOW:(WS_DLGFRAME|WS_THICKFRAME));*/
   winstyles=WS_OVERLAPPEDWINDOW;
/*
   winstyles |= WS_CLIPCHILDREN;
   if (!ISTOBEHIDDEN(ws))
      winstyles |= WS_VISIBLE;
*/
   ws->iconwin = CreateWindow( "oix", ws->windowlabel,
		   winstyles,
		   ws->x, ws->y,
		   ws->width == 0 ? 400 : ws->width + BORDWIDTH,
		   ws->height == 0 ? 400: ws->height + BORDHEIGHT,
		   NULL, NULL, mswinInstance, NULL);
   hdc = GetDC(ws->iconwin);
   if ((GetDeviceCaps(hdc, RASTERCAPS) & RC_PALETTE) && (numColors == 0)){
      /* This window is on a device that supports palettes */
      numColors = 2;
      logpal[0].palNumEntries = 2;
      logpal[0].palVersion = 0x300;
      logpal[0].palPalEntry[0].peFlags = 0;
      logpal[0].palPalEntry[0].peRed = 0;
      logpal[0].palPalEntry[0].peGreen = 0;
      logpal[0].palPalEntry[0].peBlue = 0;
      logpal[0].palPalEntry[1].peFlags = 0;
      logpal[0].palPalEntry[1].peRed = 255;
      logpal[0].palPalEntry[1].peGreen = 255;
      logpal[0].palPalEntry[1].peBlue = 255;
      palette = CreatePalette(logpal);
      if ((scp = malloc(2 * sizeof (struct wcolor))) == NULL) 
	 return 0;
      scp[0].c = RGB(0,0,0);
      scp[0].type = SHARED;
      strcpy(scp[0].name, "black");
      scp[1].c = RGB(255,255,255);
      scp[1].type = SHARED;
      strcpy(scp[1].name, "white");
      }
   oldfont = SelectObject(hdc, wc->font->font);
   GetTextMetrics(hdc, &metrics);
   wc->font->maxwidth = dc_maxcharwidth(hdc);
   SelectObject(hdc, oldfont);
   ReleaseDC(ws->iconwin, hdc);
   wc->font->ascent = metrics.tmAscent;
   wc->font->descent = metrics.tmDescent;
   /*   wc->font->maxwidth = metrics.tmMaxCharWidth; buggy */
   wc->font->height = metrics.tmHeight;

   /*
    * set the generic window's true default sizes
    */
   if (!ws->width || !ws->height) {
      if (!ws->width) ws->width = FWIDTH(w) * 80;
      if (!ws->height) ws->height = FHEIGHT(w) * 12;
      SetWindowPos(ws->iconwin, ws->iconwin,
		   ws->x,
		   ws->y,
		   ws->width + BORDWIDTH, ws->height + BORDHEIGHT,
		   SWP_NOZORDER);
      }
   if (!ws->pix) {
      hdc = GetDC(ws->iconwin);
      ws->pix = CreateCompatibleBitmap(hdc, ws->width, ws->height);
      ReleaseDC(ws->iconwin, hdc);
      }

   if (alc_rgb(w, wc->fg) == Failed) {
      return 0;
      }
   if (alc_rgb(w, wc->bg) == Failed) {
      return 0;
      }
   ws->pixwidth = ws->width;
   ws->pixheight = ws->height;
   ws->win = 0;

   /*BringWindowToTop(ws->win);*/
   /*
    * initialize the image with the background color
    */
   hdc = GetDC(ws->iconwin);
   hdc2 = CreateCompatibleDC(hdc);
   oldpix = SelectObject(hdc2, ws->pix);
   rec.left = rec.top = 0;
   rec.right = ws->width;
   rec.bottom = ws->height;
   if (palette) {
      SelectPalette(hdc, palette, FALSE);
      SelectPalette(hdc2, palette, FALSE);
      RealizePalette(hdc);
      RealizePalette(hdc2);
   }
   brush = CreateBrushIndirect(&(wc->bgbrush));
   FillRect(hdc2, &rec, brush);
   DeleteObject(brush);
   SelectObject(hdc2, oldpix);
   ReleaseDC(ws->iconwin, hdc);
   DeleteDC(hdc2);

   return w;
   }

int handle_config(wbp w, UINT msg, WPARAM wp, LPARAM lp)
   {
   int neww, newh;
   wsp ws = w->window;

   if (wp == SIZE_MINIMIZED) {
      if (ws->win) {
         SetWindowText(ws->win, ws->windowlabel);
         ws->win = NULL;
	 }
      return 1;
      }

   if (ws->win)
      SetWindowText(ws->win, ws->windowlabel);
   ws->win = ws->iconwin;

   neww = LOWORD(lp);
   newh = HIWORD(lp);

   /*
    * if it was not a resize, drop it
    */
   if ((ws->width == neww) && (ws->height == newh)) {
      return 1;
      }

   ws->width = neww;
   ws->height = newh;
   resizePixmap(w, ws->width, ws->height);
   if (!ISEXPOSED(ws)) {
      SETEXPOSED(ws);
      return 1;
      }
   qeventcode(w->window, WINDOWRESIZED);
   return 1;
   }


void handle_keypress(wbp wb, UINT msg, WPARAM wp, LPARAM lp, int meta)
   {
   wsp ws = wb->window;
   DWORD dw;
   int t;
   WORD x, y;
   struct descrip d;
   int fl = 0;
   static struct descrip curr_down;

   if (msg == WM_KEYUP)
      d = curr_down;     
   else if (msg == WM_CHAR || msg == WM_SYSCHAR) {
      StrLen(d) = 1;
      StrLoc(d) = &allchars[wp & 0xFF];
      curr_down = d;
      }
   else { /* WM_KEYDOWN or WM_SYSKEYDOWN */
      MakeInt(wp, &d);
      curr_down = d;
      }
   dw = GetMessagePos(); /* mouse location in SCREEN coordinates */
   x = LOWORD(dw) - ws->x - FRAMEWIDTH;
   y = HIWORD(dw) - ws->y - TITLEHEIGHT - (FRAMEHEIGHT-1);

   t = GetMessageTime();

   if (GetKeyState(VK_CONTROL) < 0)
       fl |= MOD_CTRL;
   if (GetKeyState(VK_SHIFT) < 0)
       fl |= MOD_SHIFT;
   if (meta)
       fl |= MOD_META;
   if (msg == WM_KEYUP)
        fl |= MOD_RELEASE;
   qevent(ws, &d, x, y, t, fl);
   }

void handle_wheel(wbp wb, UINT msg, WPARAM wp, LPARAM lp)
{
   wsp ws = wb->window;
   int t;
   WORD x, y;
   RECT r;
   int state = 0;
   int fl = 0;

   if (MK_LBUTTON & wp) state |= 1;
   if (MK_MBUTTON & wp) state |= 2;
   if (MK_RBUTTON & wp) state |= 4;

   /* Unlike normal mouse events, the co-ordinates are absolute, so
    * convert to relative.
    */
   GetWindowRect(ws->win, &r);
   x = LOWORD(lp) - (r.left + CLIENT_XOFF);
   y = HIWORD(lp) - (r.top + CLIENT_YOFF);

   t = GetMessageTime();

   if (MK_CONTROL & wp)
       fl |= MOD_CTRL;
   if (MK_SHIFT & wp)
       fl |= MOD_SHIFT;

   /*
    * We only get one MS event for a wheel movement, so call
    * qmouseevents twice, once with the button 4 or 5 going down and
    * again with it coming up.  This generates one icon event, on the
    * second qmouseevents call.
    */
   if ((long)wp > 0) {
       qmouseevents(ws, state|8, x, y, t, fl);
   } else {
       qmouseevents(ws, state|16, x, y, t, fl);
   }
   qmouseevents(ws, state, x, y, t, fl);
}

void handle_mouse(wbp wb, UINT msg, WPARAM wp, LPARAM lp)
{
   wsp ws = wb->window;
   int t;
   WORD x, y;
   int state = 0;
   int fl = 0;
   if (MK_LBUTTON & wp) state |= 1;
   if (MK_MBUTTON & wp) state |= 2;
   if (MK_RBUTTON & wp) state |= 4;

   x = LOWORD(lp);
   y = HIWORD(lp);
   t = GetMessageTime();

   if (MK_CONTROL & wp)
       fl |= MOD_CTRL;
   if (MK_SHIFT & wp)
       fl |= MOD_SHIFT;

   qmouseevents(ws, state, x, y, t, fl);
}

LRESULT_CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wp, LPARAM lp)
{
   HDC hdc, hdc2;
   PAINTSTRUCT ps;
   RECT rect;
   wbp wb = NULL;
   wsp ws = NULL;
   int n, i, imin, imax;

   /*
    * find a binding associated with the given window.
    */
   for (wb = wbndngs; wb; wb=wb->next) {
      ws = wb->window;

      if ((ws->win == hwnd) || (ws->iconwin == hwnd)) break;
      }
   if (msg == WM_QUIT) {
      wfreersc();
      }
   else if (!wb) {
      /* 
       * doesn't look like its for one of our windows, pass it to
       * DefWindowProc and hope for the best.
       */
      }
   else
   switch(msg) {
   case WM_PAINT:
      SETEXPOSED(wb->window);
      hdc = BeginPaint(hwnd, &ps);
      GetClientRect(hwnd, &rect);
      if (IsIconic(hwnd)) {
         HBRUSH hb = CreateBrushIndirect(&(wb->context->brush));
	 FrameRect(hdc, &rect, hb);
	 DeleteObject(hb);
	 DrawText(hdc, "oix", 3, &rect, DT_WORDBREAK);
	 }
      else {
         HBITMAP oldpix;
	 hdc2 = CreateCompatibleDC(hdc);
	 oldpix = SelectObject(hdc2, ws->pix);
	 BitBlt(hdc, rect.left, rect.top,
		rect.right - rect.left + 1, rect.bottom - rect.top + 1,
		hdc2, rect.left, rect.top, SRCCOPY);
         SelectObject(hdc2, oldpix);
	 DeleteDC(hdc2);
	 }
      EndPaint(hwnd, &ps);
      return 0;
   case WM_MOUSEMOVE:
      if (ws->curcursor)
         SetCursor(ws->curcursor);
      handle_mouse(wb,msg,wp,lp);
      return 0;
   case WM_MOUSEWHEEL:
      handle_wheel(wb,msg,wp,lp);
      return 0;
   case WM_LBUTTONDOWN: case WM_RBUTTONDOWN: case WM_MBUTTONDOWN:
   case WM_LBUTTONUP:   case WM_RBUTTONUP:   case WM_MBUTTONUP:
      handle_mouse(wb,msg,wp,lp);
      return 0;
   case WM_KEYUP:
      if (ws->inputmask & IM_KEY_RELEASE) handle_keypress(wb, msg, wp, lp, 0);
      return 0;
   case WM_KEYDOWN:
      switch (wp) { /* VK defn's from <winuser.h> */
      case VK_F1: case VK_F2: case VK_F3: case VK_F4:
      case VK_F5: case VK_F6: case VK_F7: case VK_F8:
      case VK_F9: case VK_F10: case VK_F11: case VK_F12:
      case VK_HOME: case VK_END: case VK_PRIOR: case VK_NEXT:
      case VK_LEFT: case VK_RIGHT: case VK_UP: case VK_DOWN:
      case VK_INSERT: case VK_SELECT: case VK_PRINT:
      case VK_EXECUTE: case VK_SNAPSHOT: case VK_HELP: case VK_SEPARATOR:
      case VK_CLEAR: case VK_PAUSE: case VK_SCROLL:
	 handle_keypress(wb, msg, wp, lp, 0);
	 return 0;
      case VK_DELETE:
	 handle_keypress(wb, WM_CHAR, '\177', lp, 0);
	 return 0;
      default:
         if (ws->inputmask & IM_KEY_RELEASE) {
            handle_keypress(wb, msg, wp, lp, 0);
            return 0;
            }
      }
      break;
   case WM_SYSKEYDOWN:
      switch (wp) {
      case VK_F1: case VK_F2: case VK_F3: /* alt-F4 terminates */
      case VK_F5: case VK_F6: case VK_F7: case VK_F8:
      case VK_F9: case VK_F10: case VK_F11: case VK_F12:
      case VK_HOME: case VK_END: case VK_PRIOR: case VK_NEXT:
      case VK_LEFT: case VK_RIGHT: case VK_UP: case VK_DOWN:
      case VK_INSERT: case VK_DELETE: case VK_SELECT: case VK_PRINT:
      case VK_EXECUTE: case VK_SNAPSHOT: case VK_HELP: case VK_SEPARATOR:
      case VK_CLEAR: case VK_PAUSE:
	 handle_keypress(wb, msg, wp, lp, 1);
	 return 0;
      default:
         if (ws->inputmask & IM_KEY_RELEASE) {
            handle_keypress(wb, msg, wp, lp, 0);
            return 0;
            }
	}
      break;
   case WM_CHAR:
      handle_keypress(wb, msg, wp, lp, 0);
      return 0;
   case WM_SYSCHAR:
      handle_keypress(wb, msg, wp, lp, 1);
      break;
   case WM_HSCROLL:
   case WM_VSCROLL:
      break;
   case WM_COMMAND:
      break;
   case WM_SIZE:
      if (hwnd == ws->win)
         handle_config(wb, msg, wp, lp);
      break;
   case WM_MOVE:
      /* x,y represents the position of the drawable area. Casting to
         short ensures -ve values are handle correctly */
      ws->x = (short)LOWORD(lp);
      ws->y = (short)HIWORD(lp); 
      break;
   case WM_ACTIVATE:
      break;
   case WM_GETMINMAXINFO: {
      MINMAXINFO *mmi = (MINMAXINFO *)lp;
      if (!wb->window->resizable) {
	 mmi->ptMinTrackSize.x = mmi->ptMaxTrackSize.x =
	    ws->width + BORDWIDTH;
	 mmi->ptMinTrackSize.y = mmi->ptMaxTrackSize.y =
	    ws->height + BORDHEIGHT;
	 }
      return 0;
      }
   case WM_KILLFOCUS:
      break;
   case WM_SETFOCUS:
      break;
   case WM_CLOSE: {
      qeventcode(ws, WINDOWCLOSED);
      return 0;
   }

   /* case WM_QUIT is handled prior to the switch*/
   case WM_DESTROY: {
      wbp tmp_wb, w = wb;
      struct wbind_list *wbl, *t, *b;

      if (ws->win == hwnd)
	 ws->win = NULL;
      if (ws->iconwin == hwnd)
	 ws->iconwin = NULL;

      if (ws->refcount > 0) {
          qeventcode(ws, WINDOWCLOSED);
         }
      else if (ws->refcount < 0) { /* window was closed by program */
         ws->refcount = -ws->refcount;
	 }
      }
      break;
   case MM_MCINOTIFY:
      mciSendCommand(LOWORD(lp), MCI_CLOSE, 0, (DWORD)NULL);
      break;
   }

   return DefWindowProc(hwnd, msg, wp, lp);
}

/*
 * wclose - make sure the window goes away - no questions asked
 */
void wclose(wbp w)
   {
   wsp ws = w->window;
   wbp tmp_wb;
   struct wbind_list *wbl, *t, *b;
   
   pollevent(w);

   if (ws->win && ws->refcount > 1) {
      /*
       * Decrement refcount and negate it to tell the window procedure
       * that we closed the window, not the user, so don't terminate.
       */
       /*RPP
      ws->refcount--;
      ws->refcount = -ws->refcount;
       */
      DestroyWindow(ws->win);
      while (ws->win)
	 pollevent(w);
      }
   }

void pollevent(wbp w)
   {
   MSG m;
   extern jmp_buf mark_sj;

   /* some while PeekMessage loops here, maybe one per window ? */
   while (PeekMessage(&m, NULL, 0, 0, PM_NOREMOVE)) {
      if (GetMessage(&m, NULL, 0, 0) == 0) longjmp(mark_sj, -1);
      TranslateMessage(&m);
      DispatchMessage(&m);
      }
   }

int ownselection(wbp w, char *selname)
{
    return Succeeded;
}

int requestselection(wbp w, char *selname, char *targetname)
{
    return Succeeded;
}

int sendselectionresponse(wbp w, word requestor, char *property, char *target, char *selection, word time, dptr data)
{
    return Succeeded;
}

int setcanvas(w,s)
wbp w;
char *s;
   {
   int cmd;
   wsp ws = w->window;
   HWND stdwin = ws->win;

   if (!strcmp(s, "iconic")) {
      cmd = SW_MINIMIZE;
      CLRTOBEHIDDEN(ws);
      }
   else if (!strcmp(s, "normal")) {
      cmd = SW_RESTORE;
      stdwin = ws->win = ws->iconwin;
      CLRTOBEHIDDEN(ws);
      }
   else if (!strcmp(s, "maximized")) {
      cmd = SW_SHOWMAXIMIZED;
      stdwin = ws->win = ws->iconwin;
      CLRTOBEHIDDEN(ws);
      }
   else if (!strcmp(s, "hidden")) {
      cmd = SW_HIDE;
      SETTOBEHIDDEN(ws);
      }
   else {
      return Failed;
      }
   if (stdwin)
      ShowWindow(stdwin, cmd);

   return Succeeded;
   }


int setwindowlabel(w, val)
wbp w;
char *val;
   {
   wsp ws = w->window;
   /*
    * plug in the new string
    */
   if (ws->windowlabel != NULL)
      free(ws->windowlabel);
   ws->windowlabel = salloc(val);

   /*
    * if we have to update, do it
    */
   if (ws->win && !IsIconic(ws->win))
      SetWindowText(ws->win, ws->windowlabel);
   return Succeeded;
   }


HFONT findfont(char *family, int size, int flags, int ansi)
{
   int charset, weight;
   char slant, spacing;

   if (size < 0) size = getdefaultfontsize(14);

   if (flags & FONTFLAG_MEDIUM)
      weight = FW_MEDIUM;
   else if ((flags & FONTFLAG_DEMI) && (flags & FONTFLAG_BOLD))
      weight = FW_DEMIBOLD;
   else if (flags & FONTFLAG_BOLD)
      weight = FW_BOLD;
   else if (flags & FONTFLAG_DEMI)
      weight = FW_SEMIBOLD;
   else if (flags & FONTFLAG_LIGHT)
      weight = FW_LIGHT;
   else
      weight = FW_DONTCARE;

   if (flags & FONTFLAG_ITALIC)
      slant = 1;
   else
      slant = 0;

   charset = (ansi && (MAXBYTESPERCHAR==1)) ? ANSI_CHARSET:DEFAULT_CHARSET;

   if (flags & FONTFLAG_PROPORTIONAL)
      spacing = VARIABLE_PITCH;
   else if (flags & FONTFLAG_MONO)
      spacing = FIXED_PITCH;
   else spacing = DEFAULT_PITCH;

   return CreateFont(size, 0, 0, 0, weight, slant, 0, 0, charset,
		OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY,
		spacing, family);
}

HFONT mkfont(char *s)
{
   int flags, size;
   char family[MAXFONTWORD];
   char *stdfam = NULL;
   HFONT hf = 0;

   if (parsefont(s, family, &flags, &size)) {
      /*
       * This is a legal Icon font spec.
       * Check first for special "standard" family names.
       */
      if (!strcmp(family, "mono") || !strcmp(family, "fixed")) {
	 stdfam = "Lucida Sans"; /* Lucida Console? */
	 flags |= FONTFLAG_MONO + FONTFLAG_SANS;
	 }
      else if (!strcmp(family, "typewriter")) {
	 stdfam = "Courier New"; /* was "courier" */
	 flags |= FONTFLAG_MONO + FONTFLAG_SERIF;
	 }
      else if (!strcmp(family, "sans")) {
	 stdfam = "Arial"; /* was "swiss" */
	 flags |= FONTFLAG_PROPORTIONAL + FONTFLAG_SANS;
	 }
      else if (!strcmp(family, "serif")) {
	 stdfam = "Times New Roman";
	 flags |= FONTFLAG_PROPORTIONAL + FONTFLAG_SERIF;
	 }
      else stdfam = NULL;
   
      if (stdfam) {
	 /*
	  * Standard name: first try preferred family, then generalize.
	  * ICONFONT can be NULL, in which case Windows chooses.
	  */
	 hf = findfont(stdfam, size, flags, 1);
	 if (hf == NULL)
	    hf = findfont(getenv("ICONFONT"), size, flags, 1);
	 }
      else {
	 /*
	  * Any other name: must match as specified.
	  */
	 hf = findfont(family, size, flags, 0);
	 }
      }
   return hf;
}

/*
 * Set the window's font by name.
 */
int setfont(w, s)
wbp w;
char *s;
   {
   wsp ws = w->window;
   wcp wc = w->context;
   HFONT hf, oldfont;
   TEXTMETRIC	metrics;
   HDC tmpdc;

   hf = mkfont(s);
   if (hf != NULL) {
      if (wc->font->font)
	 DeleteObject(wc->font->font);
      wc->font->font = hf;
      if (wc->font->name)
         free(wc->font->name);
      wc->font->name = salloc(s);

      tmpdc = GetDC(ws->iconwin);
      oldfont = SelectObject(tmpdc, hf);
      wc->font->maxwidth = dc_maxcharwidth(tmpdc);
      if (GetTextMetrics(tmpdc, &metrics) == 0) {
         /* gettextmetrics can fail; what should we do about it? */
         ;
         }
      SelectObject(tmpdc, oldfont);
      ReleaseDC(ws->iconwin, tmpdc);
      wc->font->ascent = metrics.tmAscent;
      wc->font->descent = metrics.tmDescent;
/*    wc->font->maxwidth = metrics.tmMaxCharWidth; unreliable due to MS bug */
      wc->font->height = metrics.tmHeight;
      return Succeeded;
      }
   return Failed;
   }

/*
 * rebind() - bind w's context to that of w2.
 */
int rebind(w, w2)
wbp w, w2;
   {
   wsp ws = w->window;
   /* decrement w->context->refcount?  increment w2->context->refcount? */
   w->context = w2->context;
   return Succeeded;
   }

static void setclip(w)
wbp w;
   {
   wcp wc = w->context;
   if (wc->cliprgn)
      DeleteObject(wc->cliprgn);
   if (wc->clipw >= 0)
      wc->cliprgn = CreateRectRgn(wc->clipx, wc->clipy,
				  wc->clipx + wc->clipw,
				  wc->clipy + wc->cliph);
   else
      wc->cliprgn = NULL;
   }

static void unsetclip(w)
wbp w;
   {
   wcp wc = w->context;
   if (wc->cliprgn)
      DeleteObject(wc->cliprgn);
   wc->cliprgn = NULL;
   }

 int lowerwindow(wbp w)
   {
   wsp ws = w->window;
   if (ws->win)
      SetWindowPos(ws->win, HWND_BOTTOM, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE);
   return Succeeded;
   }

int raisewindow(wbp w)
   {
   wsp ws = w->window;
   if (ws->win)
      SetWindowPos(ws->win, HWND_TOP, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE);
   return Succeeded;
   }


/*
 * convert an Icon linear color into an MS Windows color value
 */
SysColor mscolor(wbp w, int r, int g, int b)
{
   return RGB(r >> 8, g >> 8, b >> 8);
}

/*
 * Set the context's fill style by name.
 */
int setfillstyle(w, s)
wbp w;
char *s;
   {
   wcp wc = w->context;

   if (!strcmp(s, "solid")) {
      wc->brush.lbStyle = wc->fillstyle = BS_SOLID;
      wc->brush.lbColor = PALCLR(wc->fg);
      }
   else {
      if (!strcmp(s, "masked")) {
	 wc->brush.lbStyle = wc->fillstyle = BS_PATTERN;
	 wc->brush.lbColor = PALCLR(wc->fg);
	 wc->brush.lbHatch = (int)wc->pattern;
         wc->bkmode = TRANSPARENT;
	 }
      else if (!strcmp(s, "textured")) {
	 wc->brush.lbStyle = wc->fillstyle = BS_PATTERN;
	 wc->brush.lbColor = PALCLR(wc->fg);
	 wc->brush.lbHatch = (int)wc->pattern;
         wc->bkmode = OPAQUE;
	 }
      else {
	 return Failed;
	 }
      }
   return Succeeded;
   }



char *getfillstyle(wbp w)
{
    wcp wc = w->context;
    if (wc->fillstyle == BS_SOLID)
        return "solid";
    else if (wc->bkmode == TRANSPARENT)
        return "masked";
    else
        return "textured";
}

/*
 * Set the context's line style by name.
 */
int setlinestyle(w, s)
wbp w;
char *s;
   {
   wcp wc = w->context;
   int ltype;

   if ((ltype = stringint_str2int(siLineTypes, s)) < 0)
      return Failed;
   wc->pen.lopnStyle = ltype;
   resetfg(w);
   if(!strcmp(s, "striped")) wc->bkmode = OPAQUE;
   else wc->bkmode = TRANSPARENT;
   return Succeeded;
   }

/*
 * Set the context's line width
 */
int setlinewidth(wbp w, int linewid)
   {
   wcp wc = w->context;
   wc->pen.lopnWidth.x = wc->pen.lopnWidth.y =
      wc->bgpen.lopnWidth.x = wc->bgpen.lopnWidth.y = linewid;
   return Succeeded;
   }

int getlinewidth(wbp w)
{
    return w->context->pen.lopnWidth.x;
}

int getdepthDC(HDC dc)
{
   return GetDeviceCaps(dc, BITSPIXEL) * GetDeviceCaps(dc, PLANES);
}

int getdepth(wbp w, int *res)
{
   int i, j;
   STDLOCALS(w);
   i = GetDeviceCaps(pixdc, BITSPIXEL);
   j = GetDeviceCaps(pixdc, PLANES);
   FREE_STDLOCALS(w);
   *res = i * j;
   return Succeeded;
}

int devicecaps(wbp w, int i)
{
   int rv;
   STDLOCALS(w);
   rv = GetDeviceCaps(pixdc, i);
   FREE_STDLOCALS(w);
   return rv;
}

/*
 * Reset the context's foreground color to whatever it is supposed to be.
 */
int resetfg(w)
wbp w;
   {
   return setfg(w, w->context->fgname);
   }

int alc_rgb(wbp w, SysColor rgb)
{
   int i;
   wsp ws = w->window;
   HDC hdc;
   PALETTEENTRY pe;
   LOGPALETTE lp;
   if (palette) {
      for (i=0; i < numColors; i++) {
         if (rgb == scp[i].c && scp[i].type == SHARED) break;
	 }
      if (i == numColors) {
         numColors++;
	 if (ResizePalette(palette, numColors) == 0) {
	    numColors--;
	    return Failed;
            }
         scp = realloc(scp, numColors * sizeof(struct wcolor));
         if (scp == NULL) { numColors--; return Failed; }
	 scp[numColors - 1].c = rgb;
	 scp[numColors - 1].type = SHARED;
	 sprintf(scp[numColors - 1].name, "%d,%d,%d",
                 RED(rgb), GREEN(rgb), BLUE(rgb));
         lp.palNumEntries = 1;
	 lp.palVersion = 0x300;
	 lp.palPalEntry[0].peFlags = 0;
	 lp.palPalEntry[0].peRed = RED(rgb);
	 lp.palPalEntry[0].peGreen = GREEN(rgb);
	 lp.palPalEntry[0].peBlue = BLUE(rgb);
         SetPaletteEntries(palette, numColors - 1, 1, lp.palPalEntry);
	 hdc = GetDC(ws->iconwin);
	 SelectPalette(hdc, palette, FALSE);
	 RealizePalette(hdc);
	 ReleaseDC(ws->iconwin, hdc);
	 }
      }
   return Succeeded;
}

/*
 * Set the context's foreground color
 */
int setfg(wbp w, char *val)
{
    int r, g, b;
    wcp wc = w->context;
    if (!parseopaquecolor(val, &r, &g, &b))
        return Failed;

    wc->fg = mscolor(w, r, g, b);
    if (alc_rgb(w, wc->fg) == Failed) return Failed;
    if (!wc->fgname) wc->fgname = salloc(val);
    else if (strcmp(wc->fgname, val)) {
        free(wc->fgname);
        wc->fgname = salloc(val);
    }
    wc->brush.lbColor = PALCLR(wc->fg);
    wc->pen.lopnColor = wc->brush.lbColor;
    wc->brush.lbStyle = wc->fillstyle;
    if (wc->fillstyle == BS_PATTERN)
        wc->brush.lbHatch = (int)wc->pattern;
    return Succeeded;
}

/*
 * Set the window context's background color
 */
int setbg(wbp w, char *val)
{
    int r, g, b;
    wcp wc = w->context;
    if (!parseopaquecolor(val, &r, &g, &b))
        return Failed;

    wc->bg = mscolor(w, r, g, b);
    if (alc_rgb(w, wc->bg) == Failed) return Failed;
    if (!wc->bgname) wc->bgname = salloc(val);
    else if (strcmp(wc->bgname, val)) {
        free(wc->bgname);
        wc->bgname = salloc(val);
    }
    wc->bgpen.lopnColor = PALCLR(wc->bg);
    wc->bgbrush.lbStyle = BS_SOLID;
    wc->bgbrush.lbColor = PALCLR(wc->bg);
    return Succeeded;
}


/*
 * setpointer() - define a mouse pointer shape
 */
int setpointer(w, val)
wbp w;
char *val;
   {
   HCURSOR c;
   char *cval;
   if (!strcmp(val,"arrow")) cval = IDC_ARROW;
   else if (!strcmp(val,"cross")) cval = IDC_CROSS;
   else if (!strcmp(val,"ibeam")) cval = IDC_IBEAM;
   else if (!strcmp(val,"uparrow")) cval = IDC_UPARROW;
   else if (!strcmp(val,"wait")) cval = IDC_WAIT;
   else if (!strcmp(val,"starting")) cval = IDC_APPSTARTING;
   else if (!strcmp(val,"icon")) cval = IDC_ICON;
   else if (!strcmp(val,"size")) cval = IDC_SIZE;
   else if (!strcmp(val,"sizenesw")) cval = IDC_SIZENESW;
   else if (!strcmp(val,"sizens")) cval = IDC_SIZENS;
   else if (!strcmp(val,"sizenwse")) cval = IDC_SIZENWSE;
   else if (!strcmp(val,"sizewe")) cval = IDC_SIZEWE;
   else if (!strcmp(val,"no")) cval = IDC_NO;
   else {
      return Failed;
      }
   c = LoadCursor(NULL, cval);
   if (c == NULL) {
     return Failed;
     }
   w->window->curcursor = c;
   if (w->window->cursorname) free(w->window->cursorname);
   w->window->cursorname = salloc(val);
   if (! w->window->savedcursor)
      w->window->savedcursor = SetCursor(c);
   else (void) SetCursor(c);
   /* should restore savedcursor when pointer moves outside our window */
   return Succeeded;
   }

/*
 * setdrawop() - set the drawing operation
 */
int setdrawop(w, val)
    wbp w;
    char *val;
{
    int i;
    wcp wc = w->context;
    if ((i = stringint_str2int(drawops,val)) < 0)
       return Failed;
    wc->drawop = i;
    return Succeeded;
}

void togglefgbg(w)
wbp w;
   {
   SysColor tmp;
   LOGPEN tpen;
   LOGBRUSH tbrush;
   wcp wc = w->context;
   tmp = wc->fg;
   wc->fg = wc->bg;
   wc->bg = tmp;
   tpen = wc->pen;
   wc->pen = wc->bgpen;
   wc->bgpen = tpen;
   tbrush = wc->brush;
   wc->brush = wc->bgbrush;
   wc->bgbrush = tbrush;
   }


char *getwindowlabel(wbp w)
{
    return w->window->windowlabel;
}

/*
 * getpos() - update the window state's notion of its current position
 */
int getpos(w)
wbp w;
   {
   return Succeeded;
   }

char *getpattern(wbp w)
{
    if (w->context->patternname)
        return w->context->patternname;
    else 
        return "black";
}

char *getfg(wbp w)
{
    return w->context->fgname;
}

char *getbg(wbp w)
{
    return w->context->bgname;
}

char *getlinestyle(wbp w)
{
    wcp wc = w->context;
    char *ptr = stringint_int2str(siLineTypes, wc->pen.lopnStyle);
    if (ptr)
        return ptr;
    else 
        return "unknown";
}

char *getpointer(wbp w)
{
    return w->window->cursorname;
}

char *getdisplay(wbp w)
{
    return "MS Windows";
}

char *getdrawop(wbp w)
{
    char *s = stringint_int2str(drawops, w->context->drawop);
    if (s) 
        return s;
    else 
        return "unknown";
}


char *getcanvas(wbp w)
{
    wsp ws = w->window;
    if (ws->iconwin) {
        if (!IsWindowVisible(ws->iconwin)) return "hidden";
        else if (IsIconic(ws->iconwin)) return "iconic";
        else if (IsZoomed(ws->iconwin)) return "maximized";
        else return "normal";
    }
    else return "hidden";
}

/*
 * erase an area
 */
void erasearea(w,x,y,width,height)
wbp w;
int x, y, width, height;
   {
   HBRUSH hb, oldbrush, oldbrush2;
   XRectangle rect;
   STDLOCALS(w);
   hb = CreateBrushIndirect(&(wc->bgbrush));
   if (stdwin) oldbrush = SelectObject(stddc, hb);
   oldbrush2 = SelectObject(pixdc, hb);
   rect.left = x; rect.right = x + width;
   rect.top = y; rect.bottom = y + height;

   if (stdwin) FillRect(stddc, &rect, hb);
   FillRect(pixdc, &rect, hb);
   if (stdwin) SelectObject(stddc, oldbrush);
   SelectObject(pixdc, oldbrush2);
   DeleteObject(hb);
   FREE_STDLOCALS(w);
   }

/*
 * copy an area
 */
void copyarea(w,w2,x,y,width,height,x2,y2)
wbp w, w2;
int x, y, width, height, x2, y2;
   {
   int lpad, rpad, tpad, bpad;
   RECT r;
   HDC srcdc, srcpixdc;
   HBRUSH hb;
   wsp ws1 = w->window;
   HBITMAP oldpix;
   STDLOCALS(w2);
   /*
    * setup device contexts for area copy
    */
   SetROP2(pixdc, R2_COPYPEN);
   hb = CreateBrushIndirect(&(wc->bgbrush));
   if (stdwin)
      SetROP2(stddc, R2_COPYPEN);
   if (w2->window == w->window) {
      srcdc = pixdc;
      srcpixdc = pixdc;
      }
   else {
      srcdc = GetDC(w->window->iconwin);
      srcpixdc = CreateCompatibleDC(srcdc);
      SetROP2(srcpixdc, R2_COPYPEN);
      }
   oldpix = SelectObject(srcpixdc, w->window->pix);

   /*
    * copy area, write unavailable areas with bg color
    */
   if (x + width < 0 || y + height < 0 || x >= ws1->pixwidth || y >= ws1->pixheight) {
      /* source is entirely offscreen, just fill with background */
      r.left = x2; r.top = y2;
      r.right = x2 + width; r.bottom = y2 + height;
      if (stdwin)
         FillRect(stddc, &r, hb);
      FillRect(pixdc, &r, hb);
      }
   else {
	 /*
	  * Check for source partially offscreen, but copy first and
	  * fill later in case the source and destination overlap.
	  */
	 lpad = rpad = tpad = bpad = 0;
         if (x < 0) {			/* source extends past left edge */
	    lpad = -x;
            width -= lpad;
            x2 += lpad;
            x = 0;
            }
         if (x + width > ws1->pixwidth) {  /* source extends past right edge */
            rpad = x + width - ws1->pixwidth;
            width -= rpad;
            }
         if (y < 0) {			/* source extends above top edge */
	    tpad = -y;
            height -= tpad;
            y2 += tpad;
            y = 0;
            }
         if (y + height > ws1->pixheight) {  /* source extends below bottom */
            bpad = y + height - ws1->pixheight;
            height -= bpad;
            }
      if (stdwin)
         BitBlt(stddc, x2, y2, width, height, srcpixdc, x, y, SRCCOPY);
      BitBlt(pixdc, x2, y2, width, height, srcpixdc, x, y, SRCCOPY);

	 if (lpad > 0) {
            r.left = x2-lpad;
	    r.top = y2-tpad;
	    r.right = r.left + lpad;
	    r.bottom = r.top + tpad+height+bpad;
            if (stdwin)
               FillRect(stddc, &r, hb);
            FillRect(pixdc, &r, hb);
            }
	 if (rpad > 0) {
            r.left = x2+width;
	    r.top = y2-tpad;
	    r.right = r.left + rpad;
	    r.bottom = r.top + tpad+height+bpad;
            if (stdwin)
               FillRect(stddc, &r, hb);
            FillRect(pixdc, &r, hb);
	    }
	 if (tpad > 0) {
	    r.left = x2;
	    r.top = y2-tpad;
	    r.right = r.left + width;
	    r.bottom = r.top + tpad;
            if (stdwin)
               FillRect(stddc, &r, hb);
            FillRect(pixdc, &r, hb);
	    }
	 if (bpad > 0) {
	    r.left = x2;
	    r.top = y2+height;
	    r.right = r.left + width;
	    r.bottom = r.top + bpad;
            if (stdwin)
               FillRect(stddc, &r, hb);
            FillRect(pixdc, &r, hb);
	    }
      }

   /*
    * free resources
    */
   SelectObject(srcpixdc, oldpix);
   if (w2->window != w->window) {
      ReleaseDC(w->window->iconwin, srcdc);
      DeleteDC(srcpixdc);
      }
   DeleteObject(hb);
   FREE_STDLOCALS(w2);
   }


void captureimgdata(wbp w, int x, int y, struct imgdata *imd)
{
   wsp ws = w->window;
   int i, j;
   COLORREF *p, *crp;
   HDC stddc = GetDC(ws->iconwin), pixdc = CreateCompatibleDC(stddc);
   HBITMAP oldpix;

   if (palette) SelectPalette(pixdc, palette, FALSE);
   oldpix = SelectObject(pixdc, ws->pix);

   MemProtect(crp = malloc( imem->width * imem->height * sizeof(COLORREF)));
   p = crp;
   for(i = imem->y; i < imem->y + imem->height; i++)
       for(j = imem->x; j < imem->x + imem->width; j++)
           *p++ = GetPixel(pixdc, j, i);

   imd->format = IMGDATA_XRGB32;
   imd->data = (unsigned char *)crp;
   SelectObject(pixdc, oldpix);
   FREE_STDLOCALS(w);
}

void outputimgdata(wbp w, int x, int y, struct imgdata *imd)
{
   COLORREF *p;
   wsp ws = w->window;
   int i, j;
   HDC stddc = GetDC(ws->iconwin), pixdc = CreateCompatibleDC(stddc);
   HBITMAP oldpix;

   if (palette) SelectPalette(pixdc, palette, FALSE);
   oldpix = SelectObject(pixdc, ws->pix);

   p = (COLORREF *)imd->data;
   for(i = y; i < y + imd->height; i++)
      for(j = x; j < x + imd->width; j++)
         SetPixel(pixdc, j, i, *p++);

   /*
    * Copy it from the pixmap onto the screen.
    */
   if (ws->win){
      BitBlt(stddc, x, y, imd->width, imd->height, 
	     pixdc, x, y, SRCCOPY);
   }

   SelectObject(pixdc, oldpix);

   FREE_STDLOCALS(w);
}

int getimgdataformat(wbp w)
{
    return IMGDATA_XRGB32;
}

int  getdisplaysize  (wbp w, int *width, int *height)
{
    *width =  devicecaps(w, HORZRES);
    *height = devicecaps(w, VERTRES);
    return Succeeded;
}

int  querypointer(wbp w, int *x, int *y)
   {
   wsp ws = w->window;
   RECT r;
   if (ws->win) {
      XPoint pp;
      GetCursorPos(&pp);
      GetWindowRect(ws->win, &r);
      pp.x -= r.left + CLIENT_XOFF;
      pp.y -= r.top + CLIENT_YOFF;
      *x = pp.x;
      *y = pp.y;
      return Succeeded;
      }
   return Failed;
   }

int  queryrootpointer(wbp w, int *x, int *y)
{
    XPoint pp;
    GetCursorPos(&pp);
    *x = pp.x;
    *y = pp.y;
    return Succeeded;
}

/*
 * drawarcs() - assumes x and y are already fixed up for the bitmap
 */
void drawarc(wbp wb, int x, int y, int width, int height, double angle1, double angle2)
   {
   int i, halfwidth, halfheight, x1, y1, x2, y2, right, bottom;
   double a1_a2;
   HPEN hp, oldpen, oldpen2;
   STDLOCALS(wb);
   hp = CreatePenIndirect(&(wc->pen));
   if (stdwin) oldpen = SelectObject(stddc, hp);
   oldpen2 = SelectObject(pixdc, hp);
   halfwidth = width >> 1;
   halfheight = height >> 1;
   angle1 = -angle1 - angle2;
   a1_a2 = angle1 + angle2;
   x1 = x + halfwidth + (int)(halfwidth * cos(angle1));
   y1 = y + halfheight - (int)(halfheight * sin(angle1));
   x2 = x + halfwidth + (int)(halfwidth * cos(a1_a2));
   y2 = y + halfheight - (int)(halfheight * sin(a1_a2));
   right = x + width + 1;
   bottom = y + height + 1;
   if (ws->win)
       Arc(stddc, x, y, right, bottom, x1, y1, x2, y2);
   Arc(pixdc, x, y, right, bottom, x1, y1, x2, y2);
   if (stdwin) SelectObject(stddc, oldpen);
   SelectObject(pixdc, oldpen2);
   DeleteObject(hp);
   FREE_STDLOCALS(wb);
   return;
   }


/*
 * drawlines - Support routine for DrawLine
 */
void drawlines(wbinding *wb, XPoint *points, int npoints)
   {
   int i, diff, bheight;
   HPEN hp, oldpen, oldpen2;
   STDLOCALS(wb);
   hp = CreatePenIndirect(&(wc->pen));
   if (stdwin) {
      oldpen = SelectObject(stddc, hp);
      SetBkMode(stddc, wc->bkmode);
      Polyline(stddc, points, npoints);
      SelectObject(stddc, oldpen);
      }
   oldpen2 = SelectObject(pixdc, hp);
   SetBkMode(pixdc, wc->bkmode);
   Polyline(pixdc, points, npoints);
   SelectObject(pixdc, oldpen2);
   DeleteObject(hp);
   FREE_STDLOCALS(wb);
   return;
   }


/*
 * drawpoints() - 
 *  Parameters - the window binding for output, an array of points (assumed
 *               to be fixed up for bitmap) and the number of points
 */
void drawpoint(wbp wb, int x, int y)

{
    SysColor palfg;
    STDLOCALS(wb);
    palfg = PALCLR(wc->fg);
    if (stdwin) {
        SetPixel(stddc, x, y, palfg);
        SetPixel(pixdc, x, y, palfg);
    }
    else {
        SetPixel(pixdc, x, y, palfg);
    }
    FREE_STDLOCALS(wb);
}


/*
 * drawstring()
 */
void drawstring(wbinding *wb, int x, int y, char *s, int slen)
   {
   HFONT oldfont;
   STDLOCALS(wb);

   if (stdwin) {
      oldfont=SelectObject(stddc, wc->font->font);
      SetBkMode(stddc, TRANSPARENT);
      SetTextColor(stddc, PALCLR(wc->fg));
      SetBkColor(stddc, PALCLR(wc->bg));
      TextOut(stddc, x, y - ASCENT(wb), s, slen);
      SelectObject(stddc, oldfont);
      }
   oldfont=SelectObject(pixdc,wc->font->font);
   SetBkMode(pixdc, TRANSPARENT);
   SetTextColor(pixdc, PALCLR(wc->fg));
   SetBkColor(pixdc, PALCLR(wc->bg));
   TextOut(pixdc, x, y - ASCENT(wb), s, slen);
   SelectObject(pixdc, oldfont);
   FREE_STDLOCALS(wb);
   return;
   }

void drawutf8(wbp w, int x, int y, char *s, int slen, int nchars)
{
    drawstring(w, x, y, s, slen);
}

/*
 * fillarcs
 */
void fillarc(wbp wb, int x, int y, int width, int height, double angle1, double angle2)
   {
   int diff, bheight;
   HBRUSH hb, oldbrush, oldbrush2;
   POINT pts[3];
   HPEN hp, oldpen, oldpen2;
   STDLOCALS(wb);
   hp = CreatePenIndirect(&(wc->pen));
   if (stdwin) oldpen = SelectObject(stddc, hp);
   oldpen2 = SelectObject(pixdc, hp);
   hb = CreateBrushIndirect(&(wc->brush));
   if (stdwin) oldbrush = SelectObject(stddc, hb);
   oldbrush2 = SelectObject(pixdc, hb);
   SetTextColor(pixdc, PALCLR(wc->fg));
   if (stdwin) SetTextColor(stddc, PALCLR(wc->fg));
   SetBkColor(pixdc, PALCLR(wc->bg));
   if (stdwin) SetBkColor(stddc, PALCLR(wc->bg));
   if (stdwin) SetBkMode(stddc, wc->bkmode);
   SetBkMode(pixdc, wc->bkmode);
 
   if (angle2 >= 2 * Pi) {
       /*
        * from SDK reference: Ellipse() draws up to but not including
        * the right and bottom coordinates.  Add +1 to compensate.
        */
       if (stdwin) 
           Ellipse(stddc, x, y, 
                   x + width + 1, y + height + 1);
       Ellipse(pixdc, x, y, 
               x + width + 1, y + height + 1);
   }
   else {
       angle1 = -angle1 - angle2;
       pts[0].x = x + (width>>1);
       pts[0].y = y + (height>>1);
       pts[1].x = x + (width>>1) +
           (int)(((width + 1)>>1) * cos(angle1));
       pts[1].y = y + (height>>1) -
           (int)(((height )>>1) * sin(angle1));
       pts[2].x = x + (width>> 1) +
           (int)(((width + 1)>>1) * cos(angle1+angle2));
       pts[2].y = y + (height>>1) -
           (int)(((height )>>1) * sin(angle1+angle2));
       if (stdwin) {
           Pie(stddc, x, y,
               x + width + 1, y + height + 1,
               pts[1].x, pts[1].y, pts[2].x, pts[2].y);
       }
       Pie(pixdc, x, y,
           x + width + 1, y + height + 1,
           pts[1].x, pts[1].y, pts[2].x, pts[2].y);
   }
   if (stdwin) SelectObject(stddc, oldpen);
   SelectObject(pixdc, oldpen2);
   DeleteObject(hp);
   if (stdwin) SelectObject(stddc, oldbrush);
   SelectObject(pixdc, oldbrush2);
   DeleteObject(hb);
   FREE_STDLOCALS(wb);
   return;
   }

/*
 * fillrectangles
 */
void fillrectangle   (wbp wb, int x, int y, int width, int height)
   {
   int diff, bheight;
   HBRUSH hb, oldbrush, oldbrush2;
   HPEN hp, oldpen, oldpen2;
   HRGN hr; RECT r;
   STDLOCALS(wb);
   hp = CreatePenIndirect(&(wc->pen));
   if (stdwin) oldpen = SelectObject(stddc, hp);
   oldpen2 = SelectObject(pixdc, hp);
   hb = CreateBrushIndirect(&(wc->brush));
   if (stdwin) oldbrush = SelectObject(stddc, hb);
   oldbrush2 = SelectObject(pixdc, hb);
   SetTextColor(pixdc, PALCLR(wc->fg));
   if (stdwin) SetTextColor(stddc, PALCLR(wc->fg));
   SetBkColor(pixdc, PALCLR(wc->bg));
   if (stdwin) SetBkColor(stddc, PALCLR(wc->bg));
   if (stdwin) SetBkMode(stddc, wc->bkmode);
   SetBkMode(pixdc, wc->bkmode);
   r.left = x;
   r.top = y;
   r.right = x + width;
   r.bottom = y + height;
   /*
    * Used to use FillRect(pixdc, (recs+i), hb); (with +1 for
    * right & bottom coordinates) but it mystically didn't "stick"
    * to the backing pixmap, although it showed OK on the window itself.
    */
   hr = CreateRectRgnIndirect(&r);
   if (stdwin) FillRgn(stddc, hr, hb);
   FillRgn(pixdc, hr, hb);
   DeleteObject(hr);

   if (stdwin) SelectObject(stddc, oldpen);
   SelectObject(pixdc, oldpen2);
   DeleteObject(hp);
   if (stdwin) SelectObject(stddc, oldbrush);
   SelectObject(pixdc, oldbrush2);
   DeleteObject(hb);
   FREE_STDLOCALS(wb);
   return;
   }


/*
 * drawrectangles - draw nrecs # of rectangles in array recs to binding w
 */
void drawrectangle(wbp w, int x, int y, int width, int height)
   {
   LOGBRUSH lb;
   HBRUSH hb, oldbrush, oldbrush2;
   HPEN hp, oldpen, oldpen2;
   XPoint tmp[5];
   STDLOCALS(w);
   hp = CreatePenIndirect(&(wc->pen));
   lb.lbStyle = BS_NULL;
   hb = CreateBrushIndirect(&lb);
   SetBkMode(pixdc, wc->bkmode);
   oldpen2 = SelectObject(pixdc, hp);
   oldbrush2 = SelectObject(pixdc, hb);

   width += x;
   height += y;
   tmp[0].x = x;
   tmp[0].y = y;
   tmp[1].x = width-1;
   tmp[1].y = y;
   tmp[2].x = width-1;
   tmp[2].y = height-1;
   tmp[3].x = x;
   tmp[3].y = height-1;
   tmp[4].x = x;
   tmp[4].y = y;
   Polyline(pixdc, tmp, 5);

   SelectObject(pixdc, oldpen2);
   SelectObject(pixdc, oldbrush2);

   if (stdwin) {
      SetBkMode(stddc, wc->bkmode);
      oldpen = SelectObject(stddc, hp);
      oldbrush = SelectObject(stddc, hb);
      Rectangle(stddc, x, y, width, height);
      SelectObject(stddc, oldpen);
      SelectObject(stddc, oldbrush);
      }

   DeleteObject(hp);
   DeleteObject(hb);
   FREE_STDLOCALS(w);
   return;
   }

/*
 * fillpolygon
 */
void fillpolygon(wbp w, XPoint *pts, int npts)
   {
   HBRUSH hb, oldbrush;
   HPEN hp, oldpen, oldpen2;
   STDLOCALS(w);
   if (stdwin) SetBkMode(stddc, wc->bkmode);
   SetBkMode(pixdc, wc->bkmode);
   hp = CreatePenIndirect(&(wc->pen));
   if (stdwin) oldpen = SelectObject(stddc, hp);
   oldpen2 = SelectObject(pixdc, hp);
   hb = CreateBrushIndirect(&(wc->brush));
   if (stdwin) {
      oldbrush = SelectObject(stddc, hb);
      Polygon(stddc, pts, npts);
      SelectObject(stddc, oldbrush);
      }
   oldbrush = SelectObject(pixdc, hb);
   Polygon(pixdc, pts, npts);
   SelectObject(pixdc, oldbrush);
   DeleteObject(hb);
   if (stdwin) SelectObject(stddc, oldpen);
   SelectObject(pixdc, oldpen2);
   DeleteObject(hp);
   FREE_STDLOCALS(w);
   }

int NumWindows = 0;


/*
 * allocate a context.  Can't be called until w has a window.
 */
static wcp alc_context(w)
wbp w;
   {
   int i;
   wcp wc;
   wbinding tmp;

   GRFX_ALLOC(wc, _wcontext);
   wc->bkmode = OPAQUE;        /* at present, only used in line drawing */
   wc->fg = RGB(0,0,0);
   wc->bg = RGB(255,255,255);
   wc->fgname = salloc("black");
   wc->bgname = salloc("white");
   wc->pen.lopnStyle = PS_SOLID;
   wc->pen.lopnWidth.x = wc->pen.lopnWidth.y = 1;
   wc->pen.lopnColor = PALCLR(wc->fg);
   wc->bgpen.lopnStyle = PS_SOLID;
   wc->bgpen.lopnWidth.x = wc->bgpen.lopnWidth.y = 1;
   wc->bgpen.lopnColor = PALCLR(wc->bg);
   wc->fillstyle = BS_SOLID;
   wc->brush.lbStyle = BS_SOLID;
   wc->brush.lbColor = PALCLR(wc->fg);
   wc->bgbrush.lbStyle = BS_SOLID;
   wc->bgbrush.lbColor = PALCLR(wc->bg);
   wc->drawop = R2_COPYPEN;
   MemProtect(wc->font = calloc(1, sizeof (struct _wfont)));
   wc->font->name = salloc(getdefaultfont());
   wc->font->font = CreateFont(16,0,0,0,FW_NORMAL,0,0,0,
	 ((MAXBYTESPERCHAR==1)?ANSI_CHARSET:DEFAULT_CHARSET),
	 OUT_DEFAULT_PRECIS,CLIP_DEFAULT_PRECIS,
	 DEFAULT_QUALITY, FIXED_PITCH | FF_MODERN,
	 getenv("ICONFONT"));
   wc->font->maxwidth = 8; /* looks like a bug */
   tmp.window = w->window;
   tmp.context = wc;
   setfont(&tmp, getdefaultfont());
   wc->clipx = wc->clipy = 0;
   wc->clipw = wc->cliph = -1;

   GRFX_LINK(wc, wcntxts);
   return wc;
   }

/*
 * allocate a context, cloning attributes from an existing context
 */
wcp clonecontext(w)
wbp w;
   {
   wcp wc, wc2 = w->context;
   wsp ws = w->window;
   wbinding tmp;
   int i;

   GRFX_ALLOC(wc, _wcontext);

   /*
    * copy over some stuff
    */
   wc->clipx = wc2->clipx;
   wc->clipy = wc2->clipy;
   wc->clipw = wc2->clipw;
   wc->cliph = wc2->cliph;
   if (wc2->cliprgn)
      wc->cliprgn = CreateRectRgn(wc->clipx,wc->clipy,
			wc->clipx+wc->clipw,
			wc->clipy+wc->cliph);
   wc->dx = wc2->dx;
   wc->dy = wc2->dy;

   /*
    * clone needs to make a copy of the pattern
    *   if (wc2->pattern) {
    *      wc->pattern = copy+somehow(wc2->pattern);
    *      if (wc2->patternname)
    *         wc->patternname = salloc(wc2->patternname);
    *      }
    */

   wc->bkmode = wc2->bkmode;
   wc->fg = wc2->fg;
   wc->bg = wc2->bg;
   wc->fgname = salloc(wc2->fgname);
   wc->bgname = salloc(wc2->bgname);
   wc->pen = wc2->pen;
   wc->brush.lbColor = PALCLR(wc->fg);
   wc->bgpen = wc2->bgpen;
   wc->fillstyle = wc2->fillstyle;
   wc->brush.lbStyle = wc->fillstyle;
   wc->bgbrush.lbStyle = wc->fillstyle;
   wc->bgbrush.lbColor = PALCLR(wc->bg);
   wc->drawop = wc2->drawop;
   MemProtect(wc->font = calloc(1, sizeof (struct _wfont)));
   wc->font->name = salloc(getdefaultfont());
   wc->font->font = CreateFont(13,0,0,0,FW_NORMAL,0,0,0,
	 ((MAXBYTESPERCHAR==1)?ANSI_CHARSET:DEFAULT_CHARSET),
	 OUT_DEFAULT_PRECIS,CLIP_DEFAULT_PRECIS,
	 DEFAULT_QUALITY, FIXED_PITCH | FF_MODERN,
	 getenv("ICONFONT"));
   tmp.window = ws;
   tmp.context = wc;
   setfont(&tmp, wc2->font->name);  /*rpp:check*/


   GRFX_LINK(wc, wcntxts);
   return wc;
   }


/*
 * free a window state
 */
void freewindow(ws)
wsp ws;
   {
   int i;
   ws->refcount--;
   if(ws->refcount == 0) {
      if (ws->win) /* && IsWindowVisible(ws->win))*/
	 DestroyWindow(ws->win);
/*      ws->win = 0;*/
      if (ws->iconwin && ws->iconwin != ws->win) {
         if (IsWindowVisible(ws->iconwin))
	    DestroyWindow(ws->iconwin);
         else DestroyWindow(ws->iconwin);
	 }
/*      ws->iconwin = 0;*/
      if (ws->windowlabel) { free(ws->windowlabel); ws->windowlabel=0;}
      if (ws->pix)
	 DeleteObject(ws->pix);
      ws->pix = 0;
      if (ws->iconpix)
	 DeleteObject(ws->iconpix);
      ws->iconpix = 0;
      free(ws->cursorname);
      GRFX_UNLINK(ws, wstates);
      free(ws);
      }
   }

/*
 * free a window context
 */
void freecontext(wc)
wcp wc;
   {
   wc->refcount--;
   if(wc->refcount == 0) {
      if (wc->cliprgn)
	 DeleteObject(wc->cliprgn);
      wc->cliprgn = 0;
      if (wc->pattern)
	 DeleteObject(wc->pattern);
      wc->pattern = 0;
      if (wc->patternname)
	 free(wc->patternname);
      wc->patternname = 0;
      if (wc->fgname) free(wc->fgname);
      wc->fgname = 0;
      if (wc->bgname) free(wc->bgname);
      wc->bgname = 0;
      if (wc->font) {
	 if (wc->font->font)
	    DeleteObject(wc->font->font);
	 wc->font->font = 0;
	 if (wc->font->name)
	    free(wc->font->name);
	 wc->font->name = 0;
	 free(wc->font);
	 }
      wc->font = 0;
      GRFX_UNLINK(wc, wcntxts);
      free(wc);
      }
   }

int walert(wbp w, int volume)
   {
   MessageBeep(0);
   return Succeeded;
   }

/*
 * setpattern
 */
int setpattern(wbp w, char *name)
{
    int width, height, *rowdata;
    char *t;
    wcp wc = w->context;
   
    if (!parsepattern(name, &width, &height, &rowdata))
        return Failed; 
    if (w->window->iconwin != NULL)
        setpatternbits(w, width, height, rowdata);

    t = salloc(name);
    if (wc->patternname != NULL)
        free(wc->patternname);
    wc->patternname = t;

    return Succeeded;
}

/*
 * Create an 8x8 bitmap from some data
 */
HBITMAP CreateBitmapFromData(char *data)
{
   WORD *wBits;
   HBITMAP rv;
   int i;
   static BITMAP bitmap = { 0, 8, 8, 2, 1, 1};
   MemProtect(wBits = malloc(8 * sizeof(WORD)));
   for (i = 0; i < 8; i++)
      wBits[i] = data[i];
   bitmap.bmBits = (LPSTR) wBits;
   rv = CreateBitmapIndirect(&bitmap);
   free(wBits);
   return rv;
}


static int setpatternbits(w, width, height, rowdata)
wbp w;
int width;
int *rowdata;
int height;
   {
   int v;
   int i, j, k;
   HBITMAP p;
   char data[2 * MAX_PATTERN_HEIGHT];
   char *buf = data;
   wcp wc = w->context;

   if (width != height)
      return Failed;

   if (width == 8) {
      for(i = 0; i < height; i++) {
         v = rowdata[i];
	 *buf++ = reversebits(~v);
	 }
      }
   else if (width == 4) {
      for(k=0; k < 2; k++) /* do twice to get 8 rows */
          for(i = 0; i < height; i++) {
              v = widenbits(rowdata[i]);
              *buf++ = reversebits(~v);
          }
   }
   else return Failed;

   p = CreateBitmapFromData(data);
   if (wc->pattern)
      DeleteObject(wc->pattern);
   wc->pattern = p;
   if (wc->fillstyle == BS_PATTERN) {
      wc->brush.lbStyle = BS_PATTERN;
      wc->brush.lbColor = PALCLR(wc->fg);
      wc->brush.lbHatch = (int)p;
      }     
   return Succeeded;
   }

int widenbits(int c)
{
   int rv = c;
   if (c & 1) rv |= 16;
   if (c & 2) rv |= 32;
   if (c & 4) rv |= 64;
   if (c & 8) rv |= 128;
   return rv;
}

int reversebits(int c)
{
  int rv = 0;
  if (c & 1) rv |= 128;
  if (c & 2) rv |= 64;
  if (c & 4) rv |= 32;
  if (c & 8) rv |= 16;
  if (c & 16) rv |= 8;
  if (c & 32) rv |= 4;
  if (c & 64) rv |= 2;
  if (c & 128) rv |= 1;
  return rv;
}

int pixmap_init(w)
wbp w;
   {
   wsp ws = w->window;
   resizePixmap(w, ws->width, ws->height);
   return Succeeded;
   }


void doconfig(w, status)
    wbp w;
    int status;
{
    wsp ws = w->window;
    wcp wc = w->context;
    int wid = ws->width, ht = ws->height;
    int posx = ws->x, posy = ws->y;
    HDC hdc;
    HWND w_tmp;

    if (status & C_CLIP) {
        if (wc->clipw >= 0)
            setclip(w);
        else
            unsetclip(w);
    }

    if (status & (C_POS | C_SIZE | C_MINSIZE | C_MAXSIZE | C_RESIZE)) {
        resizePixmap(w, wid, ht);
        if (ws->win) {
            pollevent(w);
            switch (status & (C_POS|C_SIZE)) {
                case C_POS|C_SIZE: {
                    SetWindowPos(ws->win, ws->win, posx, posy,
                                 wid + BORDWIDTH, ht + BORDHEIGHT,
                                 SWP_NOZORDER|SWP_NOACTIVATE);
                    break;
                }
                case C_SIZE: {
                    SetWindowPos(ws->win, ws->win, 0, 0,
                                 wid + BORDWIDTH, ht + BORDHEIGHT,
                                 SWP_NOMOVE|SWP_NOZORDER|SWP_NOACTIVATE);
                    break;
                }
                case C_POS: {
                    SetWindowPos(ws->win, ws->win,
                                 posx,
                                 posy,
                                 0, 0, SWP_NOSIZE|SWP_NOZORDER|SWP_NOACTIVATE);
                    break;
                }
            }
        }
        else if (ws->iconwin) {
            switch (status & (C_POS|C_SIZE)) {
                case C_POS|C_SIZE: {
		   SetWindowPos(ws->iconwin, ws->iconwin,
				posx,
				posy,
                                wid + BORDWIDTH, ht + BORDHEIGHT,
				SWP_NOZORDER|SWP_NOACTIVATE);
		   break;
		}
                case C_SIZE: {
		   SetWindowPos(ws->iconwin, ws->iconwin, 0, 0,
                                wid + BORDWIDTH, ht + BORDHEIGHT,
                        	SWP_NOMOVE|SWP_NOZORDER|SWP_NOACTIVATE);
		   break;
		}
                case C_POS: {
		   SetWindowPos(ws->iconwin, ws->iconwin,
				posx,
				posy,
				0, 0, SWP_NOSIZE|SWP_NOZORDER|SWP_NOACTIVATE);
		}
	    }
        }
    }
}


int grabpointer(wbp w)
{
   return Failed;
}

int ungrabpointer(wbp w)
{
   return Failed;
}

void resizePixmap(wbp w, int width, int height)
   {
   HDC hdc, hdc2, hdc3;
   HBITMAP newpix, oldpix, oldpix2;
   HBRUSH hb;
   LOGBRUSH lb;
   XRectangle rect;
   wsp ws = w->window;
   wcp wc = w->context;
   int x = ws->pixwidth, y = ws->pixheight;

   if (ISEXPOSED(ws)) {
        if (ws->pixwidth >= width && ws->pixheight >= height) {
           return;
        }
      ws->pixheight = Max(ws->pixheight, height);
      ws->pixwidth = Max(ws->pixwidth, width);
      }
   else {
      ws->pixwidth = width;
      ws->pixheight = height;
      }
   hdc = GetDC(ws->iconwin);
   newpix = CreateCompatibleBitmap (hdc, ws->pixwidth, ws->pixheight);
   if (ws->pix) {
      hdc2 = CreateCompatibleDC(hdc);
      oldpix = SelectObject(hdc2, ws->pix);
      }
   hdc3 = CreateCompatibleDC(hdc);
   oldpix2 = SelectObject(hdc3, newpix);
   if (palette) {
      SelectPalette(hdc, palette, FALSE);
      if (ws->pix) SelectPalette(hdc2, palette, FALSE);
      SelectPalette(hdc3, palette, FALSE);
      RealizePalette(hdc);
      if (ws->pix) RealizePalette(hdc2);
      RealizePalette(hdc3);
      }
   lb.lbStyle = BS_SOLID;
   lb.lbColor = PALCLR(w->context->bg);
   hb = CreateBrushIndirect(&lb);
   /*
    * initialize the new pixmap, including areas not in the old pixmap.
    */
   rect.left = 0; rect.right = ws->pixwidth;
   rect.top = 0; rect.bottom = ws->pixheight;
   FillRect(hdc3, &rect, hb);
   if (ws->win) {
      FillRect(hdc, &rect, hb);
   }

   if (ws->pix) 
	 BitBlt(hdc3, 0, 0, x - 2, y - 1, hdc2, 0, 0, SRCCOPY);
   if (ws->win)
      BitBlt(hdc, 0, 0, ws->pixwidth, ws->pixheight, hdc3, 0, 0, SRCCOPY);
   SelectObject(hdc3, oldpix2);
   DeleteDC(hdc3);
   if (ws->pix) {
      SelectObject(hdc2, oldpix);
      DeleteDC(hdc2);
      }
   ReleaseDC(ws->iconwin, hdc);
   if (ws->pix) DeleteObject(ws->pix);
   DeleteObject(hb);
   ws->pix = newpix;
   }


/*
 * CreateWinDC - create a device context for drawing on the window
 *  In addition, select objects specified by flags.
 */
HDC CreateWinDC(wbp w)
   {
   wsp ws = w->window;
   wcp wc = w->context;
   HDC hdc = GetDC(ws->iconwin);
   if (numColors > 0) {
      SelectPalette(hdc, palette, FALSE);
/*      UnrealizeObject(palette); */
      RealizePalette(hdc);
      if (numRealized < numColors) {
         numRealized = numColors;
         if (RealizePalette(hdc) == 0) /* noop */;
         }
      }
   SetROP2(hdc, wc->drawop);
   if (wc->clipw >= 0){
      SelectClipRgn(hdc, wc->cliprgn);
      }


   return hdc;
   }

HDC CreatePixDC(wbp w, HDC hdc)
   {
   wsp ws = w->window;
   wcp wc = w->context;
   HBITMAP oldpix;
   HDC hdc2 = CreateCompatibleDC(hdc);
   if (numColors > 0) {
      SelectPalette(hdc2, palette, FALSE);
      RealizePalette(hdc2);
      }
   ws->theOldPix = SelectObject(hdc2, ws->pix);
   SetROP2(hdc2, wc->drawop);
   if (wc->clipw >= 0){
      SelectClipRgn(hdc2, wc->cliprgn);
      }
   return hdc2;
   }

int dc_maxcharwidth(HDC dc)
{
  int i, m = -1, x;
  char s[2];
  s[1] = '\0';
  for (i=0; i<256; i++) {
    s[0] = i;
    x = dc_textwidth(dc, s, 1);
    if (x > m) m = x;
  }
  return m;
}

/*
 * compute a text width for a current device context (typically pixdc)
 */
int dc_textwidth(HDC dc, char *s, int n)
{
   SIZE sz;
   /*
    * GetTextExtentPoint32(dc, s, n, &sz) gives incorrect behavior
    *  under Win32s
    */
   GetTextExtentPoint(dc, s, n, &sz);
   return (int)sz.cx;
}

int sysScrollWidth()
{
   return GetSystemMetrics(SM_CXVSCROLL);
}

int sysFontHeight(wbp w)
{
   TEXTMETRIC tm;
   int rv;
   wsp ws = w->window;
   HDC dc = GetDC(ws->iconwin);
   HFONT oldfont = SelectObject(dc, GetStockObject(SYSTEM_FIXED_FONT));
   GetTextMetrics(dc, &tm);
   SelectObject(dc, oldfont);
   ReleaseDC(ws->iconwin, dc);
   return tm.tmHeight + tm.tmExternalLeading;
}

int sysTextWidth(wbp w, char *s, int n)
{
   int rv;
   wsp ws = w->window;
   HDC dc = GetDC(ws->iconwin);
   HFONT oldfont;
   oldfont = SelectObject(dc, GetStockObject(SYSTEM_FIXED_FONT));
   rv = dc_textwidth(dc, s, n);
   SelectObject(dc, oldfont);
   ReleaseDC(ws->iconwin, dc);
   return rv;
}

int textwidth(wbp w, char *s, int n)
   {
   int rv;
   wsp ws = w->window;
   HDC stddc = GetDC(ws->iconwin);
   HFONT oldfont = SelectObject(stddc, w->context->font->font);
   rv = dc_textwidth(stddc, s, n);
   SelectObject(stddc, oldfont);
   ReleaseDC(ws->iconwin, stddc);
   return rv;
   }

int utf8width(wbp w, char *s, int n, int nchars)
{
    return textwidth(w, s, n);
}

int warppointer(w, x, y)
wbp w;
int x, y;
   {
   wsp ws = w->window;
   SetCursorPos(ws->x + x, ws->y + y);
   return Succeeded;
   }

/*
 * free all Windows resources allocated by this instantiation of iconx
 */
void wfreersc()
{
   wbp w;
   while (wbndngs != NULL) {
      w = wbndngs;
      wbndngs = wbndngs->next;
      free(w);
      }
   while (wstates != NULL) {
      wstates->refcount = 1;
      freewindow(wstates);
      }
   while (wcntxts != NULL) {
      wcntxts->refcount = 1;
      freecontext(wcntxts);
      }
   if (palette) {
      DeleteObject(palette);
      palette = 0;
      }
   if (scp) {
      free(scp);
      scp = 0;
      }
   if (wlhead)
      wlfree();
   mciSendCommand(MCI_ALL_DEVICE_ID, MCI_CLOSE, 0, (DWORD)NULL);
}

int  readimagefileimpl(char *filename, struct imgdata *imd) 
{
    return NoCvt;
}

int  writeimagefileimpl(char *filename, struct imgdata *imd)
{
    return NoCvt;
}

int  readimagedataimpl(dptr data, struct imgdata *imd)
{
    return NoCvt;
}

int settransientfor(wbp w, wbp other)
{
    return Failed;
}

int setwindowicon(wbp w, struct imgdata *imd)
{
    return Failed;
}
