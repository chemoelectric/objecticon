#
# $Id$
#

package mail

import util(error)

#
# Handles the base64 encoding of a message
#
class Base64Handler(EncodingHandler)
   public static const
      BASE64_STRING,
      BASE64_CSET, 
      BASE64_FIRST64

   private static init()
      BASE64_STRING := &ucase || &lcase || &digits || "+/"
      BASE64_CSET := &ucase ++ &lcase ++ &digits ++ '+/'
      BASE64_FIRST64 := &cset[1+:64]
   end

   public override can_handle(enc)
      succeed map(enc) == "base64"
   end

   public override decode_data(m, data)
      local s, t, w, x, y, z, res, pad

      # Transform the data by stripping out all non base64 encoding chars.
      t := ""
      pad := 0
      data ? {
         while tab(upto(BASE64_CSET)) do
            t ||:= tab(many(BASE64_CSET))
         while tab(upto('=')) do {
            s := tab(many('='))
            pad +:= *s
            t ||:= repl("\x00", *s)
         }
      }

      if (pad > 2) | (*t % 4 ~= 0) then 
         return error("Badly formatted Base64 data")

      t := map(t, BASE64_STRING, BASE64_FIRST64)

      res := ""
      t ? while ( w := ord(move(1)), x := ord(move(1)), y := ord(move(1)), z := ord(move(1)) ) do {
         res ||:= char( ior( ishift(w,2), ishift(x,-4) ) )
         res ||:= char( ior( iand(ishift(x,4),255), ishift(y,-2) ) )
         res ||:= char( ior( iand(ishift(y,6),255), z ) )
      }

      res[0 -: pad] := ""

      return res
   end

   public override encode_data(m, data)
      local i, j, k, pad, res, ll

      res := ""
      ll := 0

      pad := (3 - (*data % 3)) % 3

      data ||:= repl("\x00", pad)

      data ? while (i := ord(move(1)), j := ord(move(1)), k := ord(move(1))) do {
         res ||:= BASE64_STRING[ 1 + ishift(i,-2) ]
         res ||:= BASE64_STRING[ 1 + ior( ishift(iand(i,3),4), ishift(j,-4) ) ]
         res ||:= BASE64_STRING[ 1 + ior( ishift(iand(j,15),2), ishift(k,-6) ) ]
         res ||:= BASE64_STRING[ 1 + iand(k,63) ]
         ll +:= 1
         if ll = 19 then {
            res ||:= "\r\n"
            ll := 0
         }
      }
      res[ 0 -: pad ] := repl("=", pad)
      res ||:= "\r\n"

      return res
   end
end
