package gui

#
# Various helper procedures for building image strings.
#

package procedure mk_box_up(d, b)
   local s, i
   s := ""
   s ||:= repl("~", d)
   every i := 0 to b-1 do
      s ||:= "~" || repl("1", d - 2 - i) || repl("0", i) || "~"
   every 1 to d - (2 + 2 * b) do
      s ||:= "~" || repl("1", b) || repl("~",d - 2 - 2 * b) || repl("0", b) || "~"
   every i := b to 1 by -1 do
      s ||:= "~" || repl("1", i) || repl("0", d - 2 - i) || "~"
   s ||:= repl("~", d)
   return ImageStringInfo.from_parts(d,, "0=shadow;1=hilite;~=transparent", s).to_image_string()
end

package procedure mk_box_down(d, b)
   local s, i
   s := ""
   s ||:= repl("~", d)
   every i := 1 to b do
      s ||:= "~" || repl("0", d - 2 - i) || repl("1", i) || "~"
   s ||:= "~" || repl("0", b) || repl("~",d - 2 - 2 * b) || repl("1", b) || "~"
   every 1 to d - (2 + 2 + 2 * b) do
      s ||:= "~" || repl("0", b) || "~" || repl("b",d - 2 - 2 - 2 * b) || "~" || repl("1", b) || "~"
   s ||:= "~" || repl("0", b) || repl("~",d - 2 - 2 * b) || repl("1", b) || "~"
   every i := b - 1 to 0 by -1 do
      s ||:= "~" || repl("0", i) || repl("1", d - 2 - i) || "~"
   s ||:= repl("~", d)
   return ImageStringInfo.from_parts(d,, "b=black;0=shadow;1=hilite;~=transparent", s).to_image_string()
end

package procedure mk_diamond_up(d, b)
   local s, i, j, m
   s := ""
   every i := d / 2 to 0 by - 1 do {
      j := d - 2 * i
      m := if j > 2 * b then
         repl("1", b) || repl("~", j - 2 * b) || repl("1", b)
      else
         repl("1", j)
      m[1] := m[-1] := "3"
      s ||:= repl("~", i) || m || repl("~", i)
   }
   every i := 1 to d / 2 do {
      j := d - 2 * i
      m := if j > 2 * b then
         repl("0", b) || repl("~", j - 2 * b) || repl("0", b)
      else
         repl("0", j)
      m[1] := m[-1] := "2"
      s ||:= repl("~", i) || m || repl("~", i)
   }

   return ImageStringInfo.from_parts(d,, "0=shadow;1=hilite;2=shadow,0.5;3=hilite,0.5;~=transparent", s).to_image_string()
end

package procedure mk_diamond_down(d, b)
   local s, i, j, m
   s := ""
   every i := d / 2 to 0 by - 1 do {
      j := d - 2 * i
      m := if j = 2 * b + 1 then
         repl("0", b) || "~" || repl("0", b)
      else if j > 2 * b + 2 then
         repl("0", b) || "~" || repl("b", j - 2 * b - 2) || "~" || repl("0", b)
      else if j > 2 * b then
         repl("0", b) || repl("~", j - 2 * b) || repl("0", b)
      else
         repl("0", j)
      m[1] := m[-1] := "2"
      s ||:= repl("~", i) || m || repl("~", i)
   }
   every i := 1 to d / 2 do {
      j := d - 2 * i
      m := if j = 2 * b + 1 then
         repl("1", b) || "~" || repl("1", b)
      else if j > 2 * b + 2 then
         repl("1", b) || "~" || repl("b", j - 2 * b - 2) || "~" || repl("1", b)
      else if j > 2 * b then
         repl("1", b) || repl("~", j - 2 * b) || repl("1", b)
      else
         repl("1", j)
      m[1] := m[-1] := "3"
      s ||:= repl("~", i) || m || repl("~", i)
   }

   return ImageStringInfo.from_parts(d,, "b=black;0=shadow;1=hilite;2=shadow,0.5;3=hilite,0.5;~=transparent", s).to_image_string()
end

package procedure mk_v_arrow(d)
   local s, i, m, j
   s := ""
   every i := 1 to d by 2 do {
      m := repl("b", i)
      m[1] := m[-1] := "c"
      j := (d - i) / 2
      s ||:= repl("~", j) || m || repl("~", d - j - i)
   }
   return s
end

package procedure mk_arrow_up(d)
   return ImageStringInfo.from_parts(d,, "b=black;c=black 50%;~=transparent", mk_v_arrow(d)).to_image_string()
end

package procedure mk_arrow_down(d)
   return ImageStringInfo.from_parts(d,, "b=black;c=black 50%;~=transparent", reverse(mk_v_arrow(d))).to_image_string()
end

package procedure mk_h_arrow(d)
   local s, i, m
   s := ""
   every i := (1 to d by 2) | (d - 2 to 1 by -2) do {
      m := repl("b", i)
      m[1] := "c"
      s ||:= repl("~", d - i) || m
   }
   return s
end

package procedure mk_arrow_left(d)
   return ImageStringInfo.from_parts(d,, "b=black;c=black 50%;~=transparent", mk_h_arrow(d)).to_image_string()
end

package procedure mk_arrow_right(d)
   return ImageStringInfo.from_parts(d,, "b=black;c=black 50%;~=transparent", reverse(mk_h_arrow(d))).to_image_string()
end

package procedure mk_handle(d, b, fl)
   local s, i, j, k, t
   s := ""
   every 1 to b do
      s ||:= repl("b", d)
   every 1 to b do
      s ||:= repl("b", b) || repl("~", d - 2 * b) || repl("b", b)

   j := (d - 3 * b) / 2
   t := repl("b", b) || repl("~", j) || repl(if /fl then "b" else "~", b) || repl("~", d - 3 * b - j) || repl("b", b)

   k := (d - 5 * b) / 2
   every i := 1 to k do
      s ||:= t
   every 1 to b do
      s ||:= repl("b", b) || repl("~", b) || repl("b", d - 4 * b) || repl("~", b) || repl("b", b)
   every i := 1 to k do
      s ||:= t
   every 1 to b do
      s ||:= repl("b", b) || repl("~", d - 2 * b) || repl("b", b)
   every 1 to b do
      s ||:= repl("b", d)
   return ImageStringInfo.from_parts(d,, "b=black;~=transparent", s).to_image_string()
end

package procedure mk_dot(d)
   local s, i, j, m
   s := ""
   every i := (d / 2 to 0 by - 1) | (1 to d / 2) do {
      j := d - 2 * i
      m := repl("0", j)
      m[1] := m[-1] := "2"
      s ||:= repl("~", i) || m || repl("~", i)
   }
   return s
end

package procedure mk_v_grid(d, i)
   local s, t
   s := mk_dot(d)
   t := repl("~", d * i)
   s := s || t || s || t || s
   return ImageStringInfo.from_parts(d,, "0=shadow;2=shadow,0.5;~=transparent", s).to_image_string()
end

package procedure mk_h_grid(d, i)
   local r, s, t, u
   s := mk_dot(d)
   t := repl("~", i)
   u := ""
   s ? while r := move(d) do
      u ||:= r || t || r || t || r 
   return ImageStringInfo.from_parts(3 * d + 2 * i,, "0=shadow;2=shadow,0.5;~=transparent", u).to_image_string()
end
