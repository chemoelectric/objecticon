import 
   gui, 
   io,
   util,
   xml,
   graphics,
   posix,
   lang,
   http,
   net,
   ipl.options,
   ipl.browser,
   ipl.strings,
   ipl.lists

global opts

$load EXIT "rpp.EXIT_24.gif"
$load NEXT "rpp.NEXT_24.gif"
$load PREV "rpp.PREV_24.gif"
$load HOME "rpp.HOME_24.gif"
$load STOP "rpp.STOP_24.gif"
$load PASTE "rpp.PASTE_24.gif"
$load REFRESH "rpp.REFRESH_24.gif"
$load CLEAR "rpp.CLEAR_24.gif"

class Settings()
   public
      home_url,
      cache_size_mb,
      visited,
      visited_size,
      pool_size,
      destination_dir

   public new()
      home_url := URL(u"config:")
      cache_size_mb := 8
      pool_size := 6
      visited := []
      visited_size := 100
      destination_dir := "/tmp"
      return
   end
end

class VisitedEntry()
   public const
      url
   public
      title,
      last_time,
      times

   public new(url, title)
      self.url := url
      self.title := title
      self.last_time := Time()
      self.times := 1
      return
   end
end

class MessageLabel(Label)
   private
      want, keep

   public set(p, n)
      local t
      want := p
      if /keep then {
         /p := TextPaint("")
         set_paint(p)
         if \n then {
            keep := 1
            t := Dispatcher.new_task{{
               t.sleep(n)
               keep := &null
               set_paint(\want)
               t.revert()
            }}
            t.start()
         }
      }
   end
end

class PageMenu(DynamicMenu)
   public populate()
      local m
      if m := parent_component.parent_dialog.tabs.which_one.create_page_menu() then
         every add(!m.children)
   end
end

class BrowserDialog(Dialog)
   private readable
      settings,
      visited_set,
      pool,
      tabs,
      file_dialog,
      directory_dialog,
      downloads,
      page_menu

   public
      last_download_dir,
      last_file_dir
      
   private on_quit(ev)
      dispose()
   end

   private on_tab_changed(ev)
      update_grey()
   end

   private update_grey()
      if is(tabs.which_one, BrowserTab) then {
         page_menu.set_is_shaded(&no)
         tabs.which_one.browser.do_update_grey()
      } else
         page_menu.set_is_shaded(&yes)
   end

   public initially()
      cast(self,Dialog).initially()
      pool.initially()
   end

   public finally()
      cast(self,Dialog).finally()
      pool.finally()
   end

   public update_visited(url, title)
      local e, i, s
      if url.scheme == (u"cache" | u"config") then
         fail
      s := url.str()
      every i := 1 to *settings.visited do {
         e := settings.visited[i]
         # Don't use equals here since the ucs/string interaction may
         # give wrong results; eg on a redirection we get a URL
         # composed of string elements.
         if s == e.url.str() then {
            e.last_time := Time()
            e.title := title
            e.times +:= 1
            delete(settings.visited, i)
            push(settings.visited, e)
            return
         }
      }
      push(settings.visited, VisitedEntry(url, title))
      insert(visited_set, url.str())
      if *settings.visited > settings.visited_size then {
         e := pull(settings.visited)
         delete(visited_set, e.url.str())
      }
   end

   public new_tab(url, referer_url, sel)
      local bt
      bt := BrowserTab(url, referer_url, pool, tabs.which_one).
         set_is_hidden(&yes)
      tabs.
         add(bt, -1).
         do_layout().
         invalidate()
      if \sel then {
         tabs.set_which_one(bt)
         update_grey()
      }
      return bt
   end

   private on_new_tab(ev)
      new_tab(settings.home_url,, 1)
   end
   
   private list_visited()
      local s, e, n
      s := "<html><title>Visited</title>" || Browser.get_table_tag() || ""
      s ||:= "<tr><th align=left>Title</th><th align=right>Times&nbsp;</th><th>Last visit</th><th align=left>URL</th></tr>"
      every e := !settings.visited do {
         n := Browser.limit_text(\e.title, 200) | ""
         s ||:= "<tr><td nowrap>" || Browser.to_content(n) || "</td><td align=right>" || e.times || "&nbsp;</td><td>" || 
                e.last_time.format("MMM'&nbsp;'dd'&nbsp;'HH:mm") || "</td>" || Browser.mk_anchor_cell(e.url) || "</tr>"
      }
      s ||:= "</table></html>"
      return s
   end

   private list_all_cookies()
      local s, e
      s := "<html><title>Cookies</title>"
      every e := (!sort(pool.cookies))[1] do
         s ||:= "<a href=config:cookie?q=" || URL.cgi_encode(e) || ">" || e || "</a><br>"
      s ||:= "</html>"
      return s
   end

   private del_cookie(req)
      local t, t1, t2, k, path, name

      (t := req.url.extract_cgi_parameters() &
       k := member(t, "q")[1] &
       path := member(t, "path")[1] & 
       name :=  member(t, "name")[1]) | return error("Bad request")

      if t1 := member(pool.cookies, k) &
         t2 := member(t1, path) then
      {
         delete(t2, map(name))
         if *t2 = 0 then {
            delete(t1, path)
            if *t1 = 0 then
               delete(pool.cookies, k)            
         }
      }
      return list_cookie(req)
   end

   private del_cookies(req)
      local k
      (k := member(req.url.extract_cgi_parameters(), "q")[1]) | return error("Bad request")
      delete(pool.cookies, k)            
      return list_all_cookies()
   end

   private list_cookie(req)
      local k, s, t, path, ck
      (k := member(req.url.extract_cgi_parameters(), "q")[1]) | return error("Bad request")
      s := "<html><title>Cookies</title>"
      if t := member(pool.cookies, k) then {
         s ||:= "<a href=config:del_cookies?q=" || URL.cgi_encode(k) || ">Delete all</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=config:cookies>Back to list</a>"
         every path := key(t) do {
            every ck := !t[path] do {
               s ||:= "<hr><br><table>"
               s ||:= "<tr><td>Name&nbsp;&nbsp;</td><td>" || ck.name || "</td></tr>"
               s ||:= "<tr><td>Value&nbsp;&nbsp;</td><td>" || ck.value || "</td></tr>"
               s ||:= "<tr><td>Expires&nbsp;&nbsp;</td><td>" || (\ck.expires).to_rfc822() || "</td></tr>"
               s ||:= "<tr><td>Domain&nbsp;&nbsp;</td><td>" || \ck.domain || "</td></tr>"
               s ||:= "<tr><td>Path&nbsp;&nbsp;</td><td>" || \ck.path || "</td></tr>"
               s ||:= "<tr><td>Secure&nbsp;&nbsp;</td><td>" || \ck.secure || "</td></tr>"
               s ||:= "<tr><td>Comment&nbsp;&nbsp;</td><td>" || \ck.comment || "</td></tr>"
               s ||:= "<tr><td>Version&nbsp;&nbsp;</td><td>" || \ck.version || "</td></tr>"
               s ||:= "</table><br><a href=config:del_cookie?" || URL.make_cgi_string(table(, 
                                                                                            "q", k,
                                                                                            "path", ck.path,
                                                                                            "name", ck.name)) || 
                  ">Delete</a>"
            }
         }
      }
      s ||:= "</html>"
      return s
   end

   private edit_settings(req)
      local t, home, cn, vn, pn
      (t := req.url.extract_cgi_parameters() &
       home := member(t, "home")[1] &
       cn := member(t, "cache")[1] &
       vn := member(t, "vsize")[1] &
       pn := member(t, "psize")[1]) | return error("Bad request")

      settings.home_url := URL(ucs(home))
      settings.cache_size_mb := integer(cn)
      settings.visited_size := integer(vn)
      settings.pool_size := integer(pn)
      return config_main()
   end

   private config_main()
      return "<html><title>Config</title><a href=config:cookies >Edit cookies</a><p>_
              <a href=config:visited >Visited pages</a><p>_
              <a href=config:cache >Cache status</a><p>_
              <a href=config:workers >Worker pool status</a><p>_
              <fieldset><form method=get action=submit >_
                 <legend>Edit settings</legend>_
                 <table>_
                   <tr><td>Home page:</td><td><input type=text name=home value=" || xml_escape(settings.home_url.str(), ~(&letters++&digits)) || " size=50 /></td></tr>_
                   <tr><td>Cache size (MB):</td><td><input type=number min=1 step=1 name=cache value=" || settings.cache_size_mb || " size=50 /></td></tr>_
                   <tr><td>Visited list size:</td><td><input type=number min=10 step=1 name=vsize value=" || settings.visited_size || " size=50 /></td></tr>_
                   <tr><td>Worker pool size:</td><td><input type=number min=5 step=1 name=psize value=" || settings.pool_size || " size=50 /></td></tr>_
                 </table>_
                 <input type=submit />_
              </form></fieldset></html>"
   end

   private cache_status()
      return pool.cache.get_status()
   end

   private workers_status()
      return pool.get_status()
   end

   private do_delay(worker)
      local n
      (n := member(worker.req.url.extract_cgi_parameters(), "n")[1]) | return error("Bad request")
      worker.task.sleep(n)
      return "<html>Complete</html>"
   end

   private config_handler(worker)
      local req
      req := worker.req
      return case string(req.url.path) of {
         "": config_main()
         "delay": do_delay(worker)
         "visited": list_visited()
         "cookies": list_all_cookies()
         "cookie": list_cookie(req)
         "cache": cache_status()
         "workers": workers_status()
         "del_cookies": del_cookies(req)
         "del_cookie": del_cookie(req)
         "submit": edit_settings(req)
         default: error("Bad config request")
      }
   end

   private get_authentication(dom, realm)
      local d
      d := AuthenticationDialog(dom, realm)
      d.show_modal(self)
      return \d.result
   end

   public new(url, cookies, settings)
      local quit_menu_item, menu_bar, file_menu, bt, new_tab_item
      cast(self,Dialog).new()
      self.settings := settings
      self.visited_set := set()
      every insert(visited_set, (!settings.visited).url.str())
      pool := WorkerPool().
         set_cookies(cookies).
         set_cache(Cache(settings.cache_size_mb*1024*1024)).
         set_authentication_function(get_authentication).
         add_scheme_handler("config", config_handler)
      pool.set_user_agent(\opts["agent"])
      if \opts["l"] then
         pool.set_log_http(&yes)
      file_dialog := FileDialog().set_remember_size(&yes)
      directory_dialog := DirectoryDialog().set_remember_size(&yes)
      last_file_dir := last_download_dir := Files.getcwd()
      self.set_size(600, 650)
      self.set_resize(&yes)
      new_tab_item := TextMenuItem().
         connect(on_new_tab, Event.ACTION).
         set_paint_mid(TextPaint("New Tab"))
      quit_menu_item := TextMenuItem().
         connect(on_quit, Event.ACTION).
         set_paint_mid(TextPaint("Quit"))
      file_menu := Menu().
         set_accel("f").
         set_label("File").
         add(new_tab_item).
         add(quit_menu_item)
      page_menu := PageMenu().
         set_accel("p").
         set_label("Page")
      menu_bar := MenuBar().
         set_size("100").
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("l_inset", 0).
         set_constraint("r_inset", 0).
         set_constraint("t_inset", 0).
         set_constraint("b_inset", 0).
         set_constraint("x_fill", &yes).
         add(file_menu).
         add(page_menu)
      self.add(menu_bar)
      bt := BrowserTab(url,, pool)
      downloads := DownloadTab()
      tabs := TabSet().
         set_size("200", "150").
         clear_constraints().
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_constraint("l_inset", 0).
         set_constraint("r_inset", 0).
         set_constraint("t_inset", 0).
         set_constraint("b_inset", 0).
         add(bt).
         add(downloads).
         set_which_one(bt).
         connect(on_tab_changed, Event.SELECTION_CHANGED).
         set_no_click_focus(1)
      self.add(tabs)
      self.connect(self.on_quit, Event.WINDOW_CLOSE_BUTTON)
      self.set_layout(GridLayout().set_extra("cells"))
      self.set_focus(bt.search_field.find_focus())
      set_label("Browser")
      return
   end
end

class LogDialog(Dialog)
   public log

   public on_close_button(ev)
      dispose()
   end

   public new()
      local close_button
      cast(self,Dialog).new()
      set_label("Item log")
      set_resize(&yes)
      set_remember_size(&yes)
      log := EditableTextList().
         set_size(500, 269).
         set_constraint("eol", &yes).
         set_contents([""]).
         set_is_editable(&no)
      add(log)
      close_button := TextButton().
         connect(on_close_button, Event.ACTION).
         set_toggles(&no).
         set_paint(TextPaint("Close"))
      add(close_button)
      connect(on_close_button, Event.WINDOW_CLOSE_BUTTON)
      set_layout(GridLayout().set_extra("cells"))
      return
   end
end

class Download()
   private readable
      parent, req, resp, status, size, full_path, dialog, dest

   private log(s)
      dialog.log.log([&clock || u": " || Text.liberal_ucs(s)], 500)
   end

   private on_status(ev, src, type)
      local s
      s := type
      case type of {
         HttpClient.RETRYING_EVENT:  s ||:= ": " || &why
         NetClient.CONNECTING_EVENT: s ||:= " to " || src.server || ":" || src.port
      }
      log(s)
   end

   private got_data(r)
      local fname, n
      resp := r
      if \r.err then {
         log("Failed to download: " || r.err)
         status := "Failed"
      } else {
         fname := resp.fname
         if *fname = 0 then
            fname := "browser.out"
         full_path := if \dest then
            if Files.is_directory(dest) then
               Files.ensure_unique_filename(FilePath(dest).child(fname).canonical().str())
            else
               dest
         else
            Files.ensure_unique_filename(FilePath(parent.parent_dialog.settings.destination_dir).child(fname).canonical().str())

         if \r.data then {
            if Files.string_to_file(full_path, r.data) then {
               log("Result file:" || full_path || " (" || Format.numeric_to_string(*r.data, 0, ',') || " bytes)")
               status := "Done"
            } else {
               save_why{Files.remove(full_path)}
               log("Unable to create " || full_path || ": " || &why)
               status := "Failed"
            }
         } else {
            n := Files.stat(r.data_file).size | 0
            if Files.move(r.data_file, full_path) then {
               log("Result file:" || full_path || " (" || Format.numeric_to_string(n, 0, ',') || " bytes)")
               status := "Done"
            } else {
               save_why{every Files.remove(r.data_file | full_path)}
               log("Unable to move " || r.data_file || " to " || full_path || ": " || &why)
               status := "Failed"
            }
         }
      }
   end

   public get_status()
      local w, l
      if w := parent.parent_dialog.pool.get_worker(req) then {
         if l := (0 < w.length()) then {
            size := Format.numeric_to_string(l / 1048576.0, 1)
            status := "Downloading (" || ((w.read() * 100) / l) || "%)"
         } else {
            size := ""
            status := "Downloading (" || Format.numeric_to_string(w.read() / 1048576.0, 1) || "MB)"
         }
      }
      return [req.url.liberal_ucs(), size, status, self]
   end

   public retrying()
      self.status := "New"
      size := ""
      log("Retrying download")
   end

   public new(parent, url, referer, dest)
      self.parent := parent
      self.status := "New"
      self.dest := dest
      size := ""
      self.req := Req(self, url, referer, got_data, Worker.DOWNLOAD,, on_status)
      self.dialog := LogDialog()
      log("Log for " || url.str())
      return
   end
end

class DownloadTab(TabItem)
   private readable
      paste_url_button,
      destination_button,
      clear_done_button,
      search_field,
      message_label,
      ticker,
      dl,
      url_table

   private update_title()
      local s, n, e
      s := "Downloads"
      n := 0
      every e := !dl do {
         if not(e.status == ("Done" | "Failed")) then
            n +:= 1
      }         
      if n > 0 then
         s ||:= " (" || n || ")"
      set_paint(TextPaint(s))
   end

   private on_search_field(ev)
      local s, u
      s := search_field.get_contents()
      if *s = 0 then
         fail
      if u := URL(s) then
         download(u)
      else
         msg("Not a valid URL")
   end

   private handle_paste_response(target_type, data, e)
      if /data then
         fail
      data ?:= tab(upto('\r\n'))
      search_field.set_contents(Text.liberal_ucs(data))
      parent_dialog.set_focus(search_field.find_focus(e))
   end

   private on_paste_url(ev)
      parent_dialog.request_selection(Selection.CLIPBOARD, 
                                      ["text/uri-list", Selection.UTF8_STRING_TARGET, Selection.STRING_TARGET], 
                                      handle_paste_response, 
                                      ev)
   end

   private on_copy_urls(ev)
      local l
      l := []
      every put(l, (!url_table.table_content.object_get_gesture_selections())[-1].req.url)
      parent_dialog.own_selection(Selection.CLIPBOARD, URLSelectionOwner(l))
   end

   private on_copy_result(d)
      parent_dialog.own_selection(Selection.CLIPBOARD, 
                                  StaticTextSelectionOwner(d.full_path))
   end

   private on_delete(d)
      parent_dialog.pool.cancel(d)
      ldel1(dl, d)
      refresh()
   end

   private on_retry(d)
      d.retrying()
      parent_dialog.pool.start_worker(d.req)
      refresh()
   end

   public msg(s, n)
      message_label.set(AbbreviatedTextPaint(s), n)
   end

   public clear_msg()
      message_label.set()
   end

   private on_set_destination(ev)
      local d
      clear_msg()
      d := parent_dialog.directory_dialog
      d.set_directory(parent_dialog.settings.destination_dir).set_existing_file_mode(DirectoryDialog.REQUIRE).show_modal(parent_dialog)
      parent_dialog.settings.destination_dir := d.get_result()
   end

   private on_clear_done(ev)
      local i
      i := 1
      while i <= *dl do {
         if dl[i].status == ("Done" | "Failed") then
            delete(dl, i)
         else
            i +:= 1
      }
      refresh()
   end

   private refresh()
      ticker.interrupt()
   end

   private on_table_rpress(ev)
      local popup, menu, l, d

      clear_msg()

      # Ensure something is there to popup onto...
      url_table.get_line_under_pointer(ev) | fail
      l := url_table.table_content.object_get_gesture_selections() | fail

      menu := Menu()
      if *l = 1 then {
         d := l[1][-1]
         menu.add(TextMenuItem().
            set_label("Log...").
            connect(create d.dialog.show(parent_dialog), Event.ACTION))
         menu.add(TextMenuItem().
            set_label("Copy URL").
            connect(self.on_copy_urls, Event.ACTION))
         if \d.full_path then {
            menu.add(TextMenuItem().
               set_label("Copy result").
               connect(create on_copy_result(d), Event.ACTION))
         }
         if l[1][-1].status == "Failed" then
            menu.add(TextMenuItem().
               set_label("Retry").
               connect(create on_retry(d), Event.ACTION))
         menu.add(TextMenuItem().
               set_label("Delete").
               connect(create on_delete(d), Event.ACTION))
      } else {
         menu.add(TextMenuItem().
            set_label("Copy URLs").
            connect(self.on_copy_urls, Event.ACTION))
      }

      popup := PopupMenu()
      popup.popup(self, menu, ev.x, ev.y)
   end

   private tick()
      local l
      repeat {
         l := []
         every put(l, (!dl).get_status())
         equals(l, url_table.get_contents()) | {
            url_table.set_contents(l)
            update_title()
         }
         ticker.sleep(750)
      }
   end

   public initially()
      cast(self,TabItem).initially()
      ticker.start()
   end

   public finally()
      cast(self,TabItem).finally() 
      ticker.stop()
   end

   public download(url, referer, dest)
      local d
      d := Download(self, url, referer, dest)
      put(dl, d)
      parent_dialog.pool.start_worker(d.req)
      refresh()
   end

   public new()
      cast(self,TabItem).new()
      set_label_border(EmptyBorder().set_x_align(Align.L))
      setup()
      ticker := Dispatcher.new_task{tick()}
      dl := []
      update_title()
      return
   end

   private setup()
      local panel, border
      destination_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(TextPaint("Destination...")).
         connect(self.on_set_destination, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(ImagePaint().set_cache("gui.UP_24"))
      clear_done_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(TextPaint("Clear done")).
         connect(self.on_clear_done, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(ImagePaint().set_cache("rpp.CLEAR_24"))
      paste_url_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(TextPaint("Paste URL")).
         connect(self.on_paste_url, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(ImagePaint().set_cache("rpp.PASTE_24"))
      panel := Panel().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_align", Align.L).
         set_layout(GridLayout().set_doi(0).set_dii(2).set_extra("cells")).
         add(destination_button).
         add(clear_done_button).
         add(paste_url_button)
      self.add(panel)
      search_field := TextField().
         set_size("100").
         set_align(Align.C, Align.T).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         connect(self.on_search_field, Event.ACTION).
         set_contents(u"")
      self.add(search_field)
      url_table := Table().
         set_size("600", "258").
         set_select_mode(Select.MANY).
         set_constraint("eol", &yes).
         set_contents([]).
         add_column(ItemPaintTableColumn().set_label("URL").set_item_paint(AbbreviatedTextItemPaint())).
         add_column(TableColumn().set_label("MB").set_column_width(50).set_column_align(Align.R)).
         add_column(TableColumn().set_label("State").set_column_width(175))
      url_table.table_content.connect(self.on_table_rpress, Event.MOUSE_RIGHT_PRESS)
      self.add(url_table)
      border := CompoundBorder().
         set_outer(SunkenBorder()).
         set_inner(EmptyBorder().
            set_l_inset(3)).
         set_x_align(Align.L)
      message_label := MessageLabel().
         set_size("100").
         set_align(Align.L, Align.B).
         set_fg("red").
         clear_constraints().
         set_constraint("b_inset", 0).
         set_constraint("l_inset", 0).
         set_constraint("r_inset", 0).
         set_constraint("x_fill", &yes).
         set_border(border).
         set_paint(TextPaint(""))
      self.add(message_label)
      self.set_layout(GridLayout().set_extra("cells"))
   end
end

class URLList(SelectableScrollArea)
   public static const
      TITLE_FONT, URL_FONT

   private static init()
      TITLE_FONT := "sans"
      URL_FONT := "sans,-1"
   end
   
   public calculate_line_height()
      local W, v
      use {
         W := view.cbwin.clone().set_font(TITLE_FONT),
         {
            v := W.get_font_height()
            W.set_font(URL_FONT)
            v +:= W.get_font_height()
         }
      }
      return v
   end

   public calculate_subject_width()
      # A nominal minimum width; the width will be expanded by the
      # owning EditList to its own width, and then we use limit_text
      # to draw nicely in the allocated view.
      return 250
   end

   public draw_line_data(xp, yp, lh, i)
      local W
      use {
         W := view.cbwin.clone().set_font(TITLE_FONT),
         {
            draw_string_ex(W, 
                           xp + Gui.TEXT_INSET, 
                           yp, 
                           limit_text(W, \contents[i].title, view.w - 2 * Gui.TEXT_INSET))
            yp +:= W.get_font_height()
            W.set_font(URL_FONT).set_fg("blue")
            draw_string_ex(W, 
                           xp + Gui.TEXT_INSET, 
                           yp, 
                           limit_text(W, u"    " || contents[i].url.liberal_ucs(), view.w - 2 * Gui.TEXT_INSET))
         }
      }
   end
end

class URLEditList(EditList)
   private old_selection

   public create_popup()
      return URLList()
   end

   # These two methods are overridden to do nothing, effectively
   # making the list and the textfield independent, so that
   # changes/selection from one don't affect the other.
   public apply_selection(ev) end
   public synch_selection() end

   public start_change(e)
      self.old_selection := self.selection
   end

   public end_change(e)
      if self.old_selection ~=== self.selection then
         fire(Event.SELECTION_CHANGED, e)
   end
end

class BrowserTab(TabItem, BrowserUI)
   private readable
      browser,
      prev_button,
      message_label,
      close_button,
      search_field,
      next_button,
      stop_button,
      home_button,
      paste_url_button,
      refresh_button,
      title_tt,
      revert_tab

   private on_close_button(ev)
      local t, i
      (i := parent.get_index(\revert_tab)) | {
         i := parent.get_index(self)
         # There will always be a tab to the right of this one (it may be the download tab).
         if i > 1 then
            i -:= 1
         else
            i +:= 1
      }
      t := parent.children[i] | syserr("Couldn't find other tab")
      parent.
         remove(self).
         set_which_one(t).
         do_layout().
         invalidate()
   end

   public get_label_width()
      return 100
   end

   private on_next(ev)
      browser.do_next()
   end

   private on_prev(ev)
      browser.do_prev()
   end

   public link_left_clicked(url)
      browser.goto(url, browser.page_url)
   end

   public link_middle_clicked(url)
      parent_dialog.new_tab(url, browser.page_url)
   end

   private copy_link(url)
      parent_dialog.own_selection(Selection.CLIPBOARD, URLSelectionOwner([url]))
   end

   private copy_links(urls)
      parent_dialog.own_selection(Selection.CLIPBOARD, URLSelectionOwner(urls))
   end

   private download_links(urls, referer)
      every parent_dialog.downloads.download(!urls, referer)
   end

   private download_links_to_dir(urls, referer)
      local d, f
      d := parent_dialog.directory_dialog
      d.set_directory(parent_dialog.last_download_dir).set_existing_file_mode(DirectoryDialog.REQUIRE).show_modal(parent_dialog)
      f := d.get_result() | fail
      parent_dialog.last_download_dir := d.get_result()
      every parent_dialog.downloads.download(!urls, referer, f)
   end

   private copy_text(s)
      parent_dialog.own_selection(Selection.CLIPBOARD, StaticTextSelectionOwner(s))
   end

   private download(url, referer)
      parent_dialog.downloads.download(url, referer)
   end

   private download_to_file(url, referer)
      local d, f, d1, f1, full_path
      d := parent_dialog.file_dialog
      d1 := FilePath(parent_dialog.last_download_dir)
      f1 := ucs(url.get_decoded_path_last())
      if /f1 | *f1 = 0 | *f1 > 32 then
         f1 := u"browser.out"
      full_path := Files.ensure_unique_filename(d1.child(f1).canonical().str())
      d.set_path(full_path).set_existing_file_mode(FileDialog.WARN).show_modal(parent_dialog)
      f := d.get_result() | fail
      parent_dialog.last_download_dir := d.get_directory()
      parent_dialog.downloads.download(url, referer, f)
   end

   private download_to_dir(url, referer)
      local d, f
      d := parent_dialog.directory_dialog
      d.set_directory(parent_dialog.last_download_dir).set_existing_file_mode(DirectoryDialog.REQUIRE).show_modal(parent_dialog)
      f := d.get_result() | fail
      parent_dialog.last_download_dir := d.get_result()
      parent_dialog.downloads.download(url, referer, f)
   end

   private page_info()
      local s, url
      s := browser.get_page_info() | fail
      url := browser.get_cache().create_url(, s)
      parent_dialog.new_tab(url,, 1)
   end

   public create_page_menu()
      local m, s, l
      m := Menu()
      if \browser.page_url then {
         m.add(TextMenuItem().
               set_label("Copy page").
               connect(create copy_link(browser.page_url), Event.ACTION))
      }
      if \browser.page_data then {
         m.add(TextMenuItem().
               set_label("Save page...").
               connect(create do_save(browser.page_name, browser.page_data), Event.ACTION))
         m.add(TextMenuItem().
               set_label("Page info").
               connect(page_info, Event.ACTION))
      }

      if s := browser.get_current_text_selection() then {
         m.add(TextMenuItem().
               set_label("Copy text").
               connect(create copy_text(s), Event.ACTION))
      }
      if l := browser.get_current_links_selection() then {
         m.add(TextMenuItem().
               set_label("Copy links").
               connect(create copy_links(l), Event.ACTION))
         m.add(TextMenuItem().
               set_label("Download links").
               connect(create download_links(l, browser.page_url), Event.ACTION))
         m.add(TextMenuItem().
               set_label("Download links to dir...").
               connect(create download_links_to_dir(l, browser.page_url), Event.ACTION))
      }

      if *m.children > 0 then
         return m
   end

   private populate_link_menu(url, m)
      m.add(TextMenuItem().
            set_label("Copy link").
            connect(create copy_link(url), Event.ACTION))
      m.add(TextMenuItem().
            set_label("Download").
            connect(create download(url, browser.page_url), Event.ACTION))
      m.add(TextMenuItem().
            set_label("Download to file...").
            connect(create download_to_file(url, browser.page_url), Event.ACTION))
      m.add(TextMenuItem().
            set_label("Download to dir...").
            connect(create download_to_dir(url, browser.page_url), Event.ACTION))
   end

   public create_link_menu(url)
      local m
      m := Menu()
      populate_link_menu(url, m)
      return m
   end

   public create_image_menu(url, img_name, img_data, link_url)
      local m
      m := Menu()
      m.add(TextMenuItem().
            set_label("Copy image").
            connect(create copy_link(url), Event.ACTION))
      if \link_url then
         populate_link_menu(link_url, m)
      if \img_data then
         m.add(TextMenuItem().
               set_label("Save image...").
               connect(create do_save(img_name, img_data), Event.ACTION))
      return m
   end

   # Avoid a little glitch which happens when a button is greyed out
   # while held down, leaving it stuck like that, since it never gets the
   # release event.
   #
   private set_is_shaded_ex(b, v)
      if \v then
         b.clear_down()
      b.set_is_shaded(v)
   end

   public update_grey(gs)
      set_is_shaded_ex(prev_button, gs.prev)
      set_is_shaded_ex(next_button, gs.nxt)
      set_is_shaded_ex(refresh_button, gs.refresh)
      set_is_shaded_ex(stop_button, gs.stop)
   end

   private on_search_field_selection(ev)
      browser.do_jump(search_field.object_get_selection())
   end

   private on_search_field(ev)
      local s, u
      s := search_field.get_contents()
      if *s = 0 then
         fail
      if u := URL(s) then
         browser.goto(u)
      else
         browser.msg("Invalid url")
   end

   public msg(s, n)
      message_label.set(AbbreviatedTextPaint(s), n)
   end

   public clear_msg()
      message_label.set()
   end

   public browse_for_file()
      local d
      d := parent_dialog.file_dialog
      d.set_directory(parent_dialog.last_file_dir).set_files().set_existing_file_mode(FileDialog.REQUIRE).show_modal(parent_dialog)
      parent_dialog.last_file_dir := d.get_directory()
      return d.get_result()
   end

   private do_save(name, data)
      local s, d
      d := parent_dialog.file_dialog
      d.set_file(\name)
      d.set_directory(parent_dialog.last_file_dir).set_existing_file_mode(FileDialog.WARN).show_modal(parent_dialog)
      parent_dialog.last_file_dir := d.get_directory()
      if s := d.get_result() then {
         if Files.string_to_file(s, data) then
            browser.msg("Saved OK", 3000)
         else
            browser.msg(&why, 3000)
      }
   end

   public is_visited(url)
      return member(parent_dialog.visited_set, url.str())
   end

   public page_loaded()
      # Don't save pages that didn't load in the visited list.
      if \browser.page_data then
         parent_dialog.update_visited(browser.page_url, browser.page_title)
      search_field.
         set_contents(browser.curr_history_entry.url.liberal_ucs()).
         set_selection_list(lreverse(browser.history)).
         object_set_selection(browser.curr_history_entry)
      set_title(browser.page_title)
      parent_dialog.set_focus(browser.find_focus())
   end

   private set_title(s)
      /s := "Browser"
      set_paint(AbbreviatedTextPaint(fill_title(s)))
      title_tt := &null
      return self
   end

   # Simple fill function for the potentially multi-line title.
   private static fill_title(s)
      local l
      l := u""
      every l ||:= words(s) || u" "
      l[-1] := u""
      return l
   end

   private static split_string(s, f, n)
      local W, w, l, r
      use {
         W := Window().set_font(f),
         {
            r := u".cell\n.attr ia_x=l\n"
            l := u""
            every w := words(s) do {
               if *l > 0 then
                  l ||:= u" "
               l ||:= w
               if W.text_width(l) > n then {
                  r ||:= l || u"\n.br\n"
                  l := u""
               }
            }
            if *l > 0 then
               r ||:= l || u"\n.br\n"
         }
      }
      return r
   end

   public get_tab_tooltip()
      # Only produce a tab tooltip if the title will be limited.
      if cbwin.text_width(paint.str) <= tab_w - label_border.get_total_width() then
         fail
      /title_tt := split_string(paint.str, 
                                Gui.style.create_tooltip_label().get_wattrib("font"),
                                500)
      return title_tt
   end

   private on_stop(ev)
      browser.cancel()
   end

   private on_home(ev)
      browser.goto(parent_dialog.settings.home_url)
   end

   private handle_paste_response(target_type, data, e)
      if /data then
         fail
      data ?:= tab(upto('\r\n'))
      search_field.set_contents(Text.liberal_ucs(data))
      parent_dialog.set_focus(search_field.find_focus(e))
   end

   private on_paste_url(ev)
      parent_dialog.request_selection(Selection.CLIPBOARD, 
                                      ["text/uri-list", Selection.UTF8_STRING_TARGET, Selection.STRING_TARGET], 
                                      handle_paste_response, 
                                      ev)
   end

   private on_refresh(ev)
      browser.do_refresh()
   end

   public new(url, referer_url, pool, revert_tab)
      cast(self,TabItem).new()
      self.revert_tab := revert_tab
      set_label_border(EmptyBorder().set_x_align(Align.L))
      set_title()
      setup()
      browser.set_ui(self).set_worker_pool(pool)
      browser.goto(\url, referer_url)
      return
   end

   private setup()
      local panel, border
      close_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(TextPaint("Close")).
         set_accel("c").
         connect(self.on_close_button, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(ImagePaint().set_cache("rpp.EXIT_24"))
      home_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(TextPaint("Home")).
         set_accel("n").
         connect(self.on_home, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(ImagePaint().set_cache("rpp.HOME_24"))
      refresh_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(TextPaint("Refresh")).
         connect(self.on_refresh, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(ImagePaint().set_cache("rpp.REFRESH_24"))
      prev_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(TextPaint("Prev")).
         connect(self.on_prev, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(ImagePaint().set_cache("rpp.PREV_24"))
      next_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(TextPaint("Next")).
         connect(self.on_next, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(ImagePaint().set_cache("rpp.NEXT_24"))
      stop_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(TextPaint("Stop")).
         connect(self.on_stop, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(ImagePaint().set_cache("rpp.STOP_24"))
      paste_url_button := IconButton().
         set_align(Align.L, Align.C).
         clear_constraints().
         set_tooltip(TextPaint("Paste URL")).
         connect(self.on_paste_url, Event.ACTION).
         set_no_click_focus(&yes).
         set_toggles(&no).
         set_paint(ImagePaint().set_cache("rpp.PASTE_24"))
      panel := Panel().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_align", Align.L).
         set_layout(GridLayout().set_doi(0).set_dii(2).set_extra("cells")).
         add(close_button).
         add(home_button).
         add(refresh_button).
         add(prev_button).
         add(next_button).
         add(stop_button).
         add(paste_url_button)
      self.add(panel)
      search_field := URLEditList().
         set_selection_list([]).
         set_contents(u"").
         set_size("100").
         set_align(Align.C, Align.T).
         set_direction(Direction.DOWN).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         connect(self.on_search_field, Event.ACTION).
         connect(self.on_search_field_selection, Event.SELECTION_CHANGED)
      self.add(search_field)
      browser := Browser().
         set_size("651", "337").
         set_font("sans,9").
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0)
      self.add(browser)
      border := CompoundBorder().
         set_outer(SunkenBorder()).
         set_inner(EmptyBorder().
            set_l_inset(3)).
         set_x_align(Align.L)
      message_label := MessageLabel().
         set_size("100").
         set_align(Align.L, Align.B).
         set_fg("red").
         clear_constraints().
         set_constraint("b_inset", 0).
         set_constraint("l_inset", 0).
         set_constraint("r_inset", 0).
         set_constraint("x_fill", &yes).
         set_border(border).
         set_paint(TextPaint(""))
      self.add(message_label)
      self.set_layout(GridLayout().set_extra("cells"))
   end
end

procedure main(a)
   local d, url, cookies, t, bak, settings, sf, home
   opts := options(a, "-k: -l! -agent:")
   home := FilePath(Files.get_home())
   sf := home.child(".oibrowser").str()
   cookies := \opts["k"] | System.getenv("OICOOKIES") | home.child(".oicookies").str()
   t := decode(Files.file_to_string(cookies)) | table()
   settings := decode(Files.file_to_string(sf)) | Settings()
   /settings.pool_size := 6
   /settings.destination_dir := "/tmp"
   ImageCache.name_image("rpp.EXIT_24", EXIT)
   ImageCache.name_image("rpp.NEXT_24", NEXT)
   ImageCache.name_image("rpp.PREV_24", PREV)
   ImageCache.name_image("rpp.HOME_24", HOME)
   ImageCache.name_image("rpp.REFRESH_24", REFRESH)
   ImageCache.name_image("rpp.PASTE_24", PASTE)
   ImageCache.name_image("rpp.STOP_24", STOP)
   ImageCache.name_image("rpp.CLEAR_24", CLEAR)
   url := if *a = 0 then
      settings.home_url
   else
      URL(ucs(a[1])) | stop("Invalid url")
   d := BrowserDialog(url, t, settings)
   d.show_modal()
   # Save cookies
   bak := cookies || ".bak"
   Files.string_to_file(bak, encode(Cookie.expire_cookies(t))) | 
      stop("Couldn't encode to temp cookie file ", bak, ": ", &why)
   # Use rename not move to ensure it's atomic
   Files.rename(bak, cookies) | stop("Couldn't rename cookie file ", bak, ": ", &why)
   # Save settings
   Files.string_to_file(sf, encode(settings))
end
