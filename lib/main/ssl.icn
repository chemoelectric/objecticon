package ssl

import io, lang, util, ipl.scan

#
# Succeed if the ssl library is available, or fail and set `&why` if
# it isn't.
#
procedure ssl_available()
   succeed \SslStream.LOADED | error(SslStream.WHY)
end

#
# Extract the SSL_get_error value from `&why`, or fail if not found.
#
procedure ssl_error()
   &why ? {
      if tab(past("SSL_get_error:")) then
         return integer(tab(many(&digits)))
   }
end

#
# A very simple SSL stream, using the openssl library.
#
final class SslStream(Stream, HasCloseUnderlying, NoCopy)
   private
      ptr,
      other

   public static const
      ERROR_NONE,
      ERROR_SSL,
      ERROR_WANT_READ,
      ERROR_WANT_WRITE,
      ERROR_SYSCALL,
      ERROR_ZERO_RETURN,
      LOADED,
      WHY

   private static init()
      local t

      ERROR_NONE                 := 0
      ERROR_SSL                  := 1
      ERROR_WANT_READ            := 2
      ERROR_WANT_WRITE           := 3
      ERROR_SYSCALL              := 5
      ERROR_ZERO_RETURN          := 6

      if t := Files.find_native_lib("objecticonssllib") then {
         if Class.load_library(t) then
            LOADED := t
         else
            WHY := "Failed to load ssl library: " || &why
      } else
         WHY := "Ssl library not found on OI_NATIVE path"
   end

   public native connect()

   public native verify()

   #
   # Perform a shutdown on the connection; `full` is a flag; if set then
   # the shutdown will wait for a reply to the "close notify" from the
   # server.
   #
   public native shutdown(full)

   public override native in(n)

   public override native out(s)

   #
   # Close this connection, and if the close underlying flag has been
   # set, the underlying connection.  Note that `shutdown()` is not
   # called on the connection.
   #
   public override close()
      local f
      close_impl() | (f := &why)
      if \close_underlying_flag then
         other.close() | (/f := &why)
      link error_if(f)
   end

   private native close_impl()

   public override get_mode()
      return other.get_mode()
   end

   private static native new_impl(other, host)

   #
   # Create a new SslStream.
   #
   # :Parameters :
   # :  `other` - an already connected `SocketStream` over which the connection
   #              will operate
   # :Parameters :
   # :  `host` - the name of the host corresponding to the connection
   public new(other, host)
      ssl_available() | fail
      ptr := new_impl(other, host) | fail
      self.other := other
      return
   end
end
