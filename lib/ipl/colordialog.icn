package ipl.colorgui

import
   gui, graphics, ipl.graphics

class ColorRectangle(Component)
   private c

   public display()
      self.cbwin.set_fg(c)
      self.cbwin.fill_rectangle(self.x, self.y, self.w, self.h)
   end

   public set_color(c)
      self.c := c
      invalidate()
      return self
   end
end

class ColorDialog(Dialog)
   private
      blue,
      red,
      green,
      rgb_label,
      hue,
      light,
      saturation,
      hls_label,
      colr,
      res,
      okay_button,
      cancel_button

   private copy_rgb_label()
      own_selection(Selection.CLIPBOARD, StaticTextSelectionOwner(rgb_label.paint.str))
   end

   private on_rgb_label(ev)
      local pm, pm_menu
      pm_menu := Menu()
      pm_menu.add(TextMenuItem().set_label("Copy").connect(copy_rgb_label, Event.ACTION))
      pm := PopupMenu()
      pm.popup(self, pm_menu, ev.x, ev.y)
   end

   public new(v)
      local l
      cast(self,Dialog).new()
      self.setup()
      if l := Window.parse_color(\v) then {
         red.set_value(l[1])
         green.set_value(l[2])
         blue.set_value(l[3])
      }
      update_rgb()
      rgb_label.connect(on_rgb_label, Event.MOUSE_RIGHT_PRESS)
      return
   end

   private update_rgb()
      local c, hls
      c := red.get_value() || "," || green.get_value() || "," || blue.get_value()
      colr.set_color(c)
      rgb_label.set_label(c)
      hls := rgb2hls(color2rgb(c))
      hue.set_value(integer(hls.h))
      light.set_value(integer(hls.l * 100))
      saturation.set_value(integer(hls.s * 100))
      hls_label.set_label(hue.get_value() || ":" || light.get_value() || ":" || saturation.get_value())
   end

   private update_hls()
      local rgb, l
      hls_label.set_label(hue.get_value() || ":" || light.get_value() || ":" || saturation.get_value())
      rgb := rgb2color(hls2rgb(hls(hue.get_value(), light.get_value()/100.0, saturation.get_value()/100.0)))
      colr.set_color(rgb)
      l := Window.parse_color(rgb)
      rgb_label.set_label(l[1] || "," || l[2] || "," || l[3])
      red.set_value(l[1])
      green.set_value(l[2])
      blue.set_value(l[3])
   end

   private on_blue(ev)
      update_rgb()   
   end

   private on_green(ev)
      update_rgb()   
   end

   private on_red(ev)
      update_rgb()   
   end

   private on_hue(ev)
      update_hls()
   end

   private on_light(ev)
      update_hls()
   end

   private on_saturation(ev)
      update_hls()
   end

   private on_cancel_button(ev)
      dispose()
   end

   private on_okay_button(ev)
      self.res := rgb_label.paint.str
      self.dispose()
   end

   public get_result()
      return \res
   end

   private setup()
      local paint_2, panel_2, label_2, layout_4, paint_4, layout_1, paint_1, paint_9, panel_1, label_1, border_2, layout_6, paint_10, layout_3, paint_3, panel_3, border_content_1, border_content_2, border_1, layout_5, layout_2
      self.set_label("Select color")
      self.set_size(397, 320)
      paint_2 := TextPaint("RGB")
      label_1 := Label().
         set_pos("286", "248").
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_paint(paint_2)
      red := Slider().
         set_size("169", "20").
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         connect(self.on_red, Event.VALUE_CHANGED).
         set_range(0, 65535).
         set_value(0).
         set_increment_size(1024).
         set_is_horizontal(&yes)
      green := Slider().
         set_size("169", "20").
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         connect(self.on_green, Event.VALUE_CHANGED).
         set_range(0, 65535).
         set_value(0).
         set_increment_size(1024).
         set_is_horizontal(&yes)
      blue := Slider().
         set_size("169", "20").
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         connect(self.on_blue, Event.VALUE_CHANGED).
         set_range(0, 65535).
         set_value(0).
         set_increment_size(1024).
         set_is_horizontal(&yes)
      paint_1 := TextPaint("Label")
      rgb_label := Label().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_paint(paint_1)
      layout_1 := GridLayout().
         set_extra("cells")
      border_content_1 := Component().
         clear_constraints().
         set_layout(layout_1).
         add(red).
         add(green).
         add(blue).
         add(rgb_label)
      border_1 := Border().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_title(label_1).
         set_content(border_content_1)
      paint_4 := TextPaint("HLS")
      label_2 := Label().
         set_pos("406", "228").
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_paint(paint_4)
      hue := Slider().
         set_size(169).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         connect(self.on_hue, Event.VALUE_CHANGED).
         set_range(0, 360).
         set_value(0).
         set_increment_size(10).
         set_is_horizontal(&yes)
      light := Slider().
         set_size("100").
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         connect(self.on_light, Event.VALUE_CHANGED).
         set_range(0, 100).
         set_value(0).
         set_increment_size(5).
         set_is_horizontal(&yes)
      saturation := Slider().
         set_size("100").
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         connect(self.on_saturation, Event.VALUE_CHANGED).
         set_range(0, 100).
         set_value(0).
         set_increment_size(1).
         set_is_horizontal(&yes)
      paint_3 := TextPaint("Label")
      hls_label := Label().
         clear_constraints().
         set_constraint("x_align", Align.L).
         set_constraint("x_fill", &yes).
         set_paint(paint_3)
      layout_2 := GridLayout().
         set_extra("cells")
      border_content_2 := Component().
         clear_constraints().
         set_layout(layout_2).
         add(hue).
         add(light).
         add(saturation).
         add(hls_label)
      border_2 := Border().
         clear_constraints().
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_title(label_2).
         set_content(border_content_2)
      layout_5 := GridLayout().
         set_doi(0).
         set_extra("cells")
      panel_2 := Panel().
         clear_constraints().
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_layout(layout_5).
         add(border_1).
         add(border_2)
      self.add(panel_2)
      colr := ColorRectangle().
         set_size("136", "134").
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0)
      paint_9 := TextPaint("Okay")
      okay_button := TextButton().
         set_align(Align.L, Align.B).
         clear_constraints().
         connect(self.on_okay_button, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_9)
      paint_10 := TextPaint("Cancel")
      cancel_button := TextButton().
         set_align(Align.L, Align.B).
         clear_constraints().
         connect(self.on_cancel_button, Event.ACTION).
         set_toggles(&no).
         set_paint(paint_10)
      layout_6 := GridLayout().
         set_doi(0).
         set_extra("cells")
      panel_3 := Panel().
         clear_constraints().
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_layout(layout_6).
         add(okay_button).
         add(cancel_button)
      layout_4 := GridLayout().
         set_doi(0).
         set_extra("cells")
      panel_1 := Panel().
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_layout(layout_4).
         add(colr).
         add(panel_3)
      self.add(panel_1)
      layout_3 := GridLayout().
         set_extra("cells")
      self.set_layout(layout_3)
   end
end

### Ivib-v2 layout: layouts/$.layout
