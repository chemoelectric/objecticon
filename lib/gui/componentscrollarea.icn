#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import util, graphics

class ComponentScrollAreaView(Component)
   public
      inner, 
      inner_w,
      inner_h

   public override initially()
      \self.inner | runerr("No inner component specified")
      Component.initially()
   end

   public scrolled()
      inner.shift(self.x - parent.get_area_x() - inner.x,
                  self.y - parent.get_area_y() - inner.y)
   end

   public override layout()
      inner.x := self.x - parent.get_area_x()
      inner.y := self.y - parent.get_area_y()
      inner.w := inner_w
      inner.h := inner_h
      inner.layout()
   end

   public size_inner()
      inner_w := max(inner.get_preferred_width(), parent.predict_view_width(parent.w, parent.vsb))
      inner_h := max(inner.get_preferred_height(inner_w), parent.predict_view_height(parent.h, parent.hsb))
   end

   public set_inner(inner)
      remove(\self.inner)
      self.inner := inner
      add(inner)
      link
   end
end


#
# This class allows an arbitrary Component to be placed within 
# the ScrollArea.  The component is set with the `set_inner()`
# method.
#
class ComponentScrollArea(ScrollArea)
   private readable
      reset_layouts_on_size_inner_flag
      
   public set_inner(inner)
      view.set_inner(inner)
      link
   end

   # This resets the layouts when the view's `size_inner` is called by
   # `layout`.  This is useful if some of the inner components alter
   # their preferred size when the surrounding component's size
   # changes (eg `TextDisplay` with "width" line splitting).  By
   # resetting the layout, the preferred widths are recalculated
   # before `inner` is laid out.
   #
   public set_reset_layouts_on_size_inner(s)
      self.reset_layouts_on_size_inner_flag := need_flag(s)
      link
   end

   public override layout()
      local i, t1, t2
      every i := 0 to 3 do {
         t1 := self.hsb
         t2 := self.vsb
         if \reset_layouts_on_size_inner_flag then
            reset_all_layouts()
         view.size_inner()
         invalidate_subject_width()
         invalidate_subject_height()
         ScrollArea.layout()
         if i > 0 & ((self.hsb === t1 & self.vsb === t2) | (\self.hsb & \self.vsb)) then
            break
      }
   end

   public override get_default_subject_height(dw)
      return view.inner.get_preferred_height(dw)
   end

   public override get_default_subject_width()
      return view.inner.get_preferred_width()
   end

   public override calculate_subject_width()
      return view.inner_w 
   end

   public override calculate_subject_height()
      return view.inner_h
   end

   public override refresh()
      view.scrolled()
      view.invalidate()
   end

   public override create_vsb()
      return ScrollBar().
         set_increment_size(scale(10))
   end

   public override create_hsb()
      return ScrollBar().
         set_increment_size(scale(10))
   end

   # Given a component with co-ordinates based on the parent dialog, return
   # a Rect with co-ordinates based on the scroll view area.
   public convert_to_area(c)
      return Rect(c.x - view.inner.x,
                  c.y - view.inner.y,
                  c.w,
                  c.h)
   end

   # Overridden to hide wheel up and wheel down events from the child
   # components, if this scrollarea is consuming wheel events itself.
   # This prevents ugly conflicts with two things scrolling at once.
   #
   public override build_point_chain(l, e)
      # Only hide events if \e.processing; this means that crossing events, setting the pointer and so on
      # work correctly.
      if \wheel_listeners & \vsb & \e.processing & member(Mouse.WHEEL, e.code) then
         fail
      ScrollArea.build_point_chain(l, e)
   end

   public override create_view()
      return ComponentScrollAreaView()
   end
end
