package ssl

import io, lang, util

# Succeed if the ssl library is available, or fail and set &why if
# it isn't.
#
procedure ssl_available()
   succeed \SslStream.LOADED | error(SslStream.WHY)
end

#
# A very simple SSL stream, using the openssl library.
#
final class SslStream(Stream, HasCloseUnderlying, NoCopy)
   private
      ptr,
      other

   public static const LOADED, WHY

   private static init()
      local t
      if t := Files.find_native_lib("objecticonssllib") then {
         if Class.load_library(t) then
            LOADED := t
         else
            WHY := "Failed to load ssl library: " || &why
      } else
         WHY := "Ssl library not found on OI_NATIVE path"
   end

   public native connect()

   public native verify()

   public native shutdown()

   public override native in(n)

   public override native out(s)

   public override close()
      local f
      close_impl() | (f := &why)
      if \close_underlying_flag then
         other.close() | (/f := &why)
      return if /f then self else error(f)
   end

   private native close_impl()

   public override get_mode()
      return other.get_mode()
   end

   private static native new_impl(other, host)

   #
   # Create a new SslStream.
   #
   # :Parameters :
   # :  `other` - an already connected `SocketStream` over which the connection
   #              will operate
   # :Parameters :
   # :  `host` - the name of the host corresponding to the connection
   public new(other, host)
      ssl_available() | fail
      ptr := new_impl(other, host) | fail
      self.other := other
      return
   end
end
