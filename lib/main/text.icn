package lang

import util(need_string, need_cset, need_ucs)

final abstract class Text()
   # Generate the ranges in a cset, as a sequence of from-to pairs.
   #
   public static native get_ord_range(c)

   # Produce a cset consisting of characters in the range x[1]-x[2],
   # x[3]-x[4] etc.  A list of ranges may also be passed as a
   # parameter.
   #
   # Fails and sets &why if any of the code point numbers is invalid.
   #
   public static native create_cset(x[])

   # Succeed if the cset c contains the code point x, returning its
   # index in the cset
   #
   public static native has_ord(c, x)

   # Produce a string containing the utf-8 sequence of chars for
   # character i.
   #
   public static native utf8_seq(i)

   # Caseless string comparator function.  This works just like
   # Internal.compare (so no conversions are done), but uses caseless
   # text comparison.
   #
   public static native caseless_compare(s1, s2)

   # A caseless string comparator function with consistent ordering
   # amongst items which compare caselessly equal, so that for example
   # abc, aBc, ABC are always sorted in the same order.  No
   # conversions are done, so different types are never mixed.
   #
   public static native consistent_compare(s1, s2)

   # Succeed if all the chars in x are in cset y.
   #
   public static subset(x, y)
      local c
      y := need_cset(y)
      every c := ord(x) do
         Text.has_ord(y, c) | fail
      return
   end

   # Given an initial character, return the number of characters
   # making up a valid utf8 sequence beginning with that character, or
   # fail if it is not a valid initial character.
   #
   public static get_utf8_seq_len(ch)
      static utf8_seq_len_arr
      initial utf8_seq_len_arr := [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                                   1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                                   1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                                   1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                                   1,1,1,1,1,1,1,,,,,,,,,,,,,,,,,,
                                   ,,,,,,,,,,,,,,,,,,,,,
                                   ,,,,,,,,,,,,,,,,,,,,,
                                   ,,,,,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
                                   2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,
                                   5,5,5,5,6,6,,]
      return \utf8_seq_len_arr[ord(ch)\1 + 1]
   end

   # A more liberal way of parsing a utf-8 string than the builtin
   # `ucs` function.  Any errors in the input result in the substitute
   # character (by default U+FFFD) being put into the resulting
   # string.
   # :Parameters :
   # :  `s` - the string to parse into a ucs
   # :  `subst` - the substitute character
   public static liberal_ucs(s, subst)
      local t, n
      if s := ucs(s) then
         return s
      s := need_string(s)
      subst := need_string(\subst) | "\uFFFD"
      t := ""
      s ? repeat {
         t ||:= tab(many(&ascii))
         if pos(0) then
            return ucs(t)
         (n := get_utf8_seq_len(&subject[&pos]) & t ||:= string(ucs(move(n)))) | {
            t ||:= subst
            move(1)
         }
      }
   end

   #
   # Convert an ISO-8859-1 string to ucs
   #
   public static iso_8859_1_to_ucs(s)
      local t, ch
      s := need_string(s)
      t := ""
      s ? repeat {
         t ||:= tab(many(&ascii))
         ch := ord(move(1)) | return ucs(t)
         t ||:= Text.utf8_seq(ch)
      }
   end

   #
   # Convert a ucs to ISO-8859-1 string; characters out of range are
   # represented by the subst string (default "?").
   #
   public static ucs_to_iso_8859_1(s, subst)
      local t, ch
      s := need_ucs(s)
      /subst := "?"
      t := ""
      s ? repeat {
         t ||:= string(tab(many(&ascii)))
         ch := ord(move(1)) | return t
         t ||:= char(ch) | subst
      }
   end

   # Given a cset `c`, produce another cset containing those characters in 
   # positions `i`:`j`.
   #
   public static native slice(c, i, j)

   # Succeed iff `s` is a string composed of ascii characters.  No
   # conversions are performed.
   #
   public static native is_ascii_string(s)
end
