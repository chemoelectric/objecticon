package gui

import lang, util

#
# An `ItemPaint` is an object which can be used in a component which
# needs to display many pieces of data in a similar way (for example
# the nodes in a tree or the rows in a table column.  An single
# instance of `ItemPaint` is used to give size information about each
# piece data, and to draw it.
#
abstract class ItemPaint()
   #
   # Initialize the instance
   # :Parameters :
   # :  `c` - The owning `Component`
   public initially(c)
   end

   # Return the width of the given data.  Implementing this method is
   # not necessary if `get_constant_width` is overridden instead.
   #
   # :Parameters :
   # :  `W` - The window to use for text metrics
   # :  `data` - The data item
   #
   public optional get_width(W, data)

   # Return the height of the given data.  Implementing this method is
   # not necessary if `get_constant_height` is overridden instead.
   #
   # :Parameters :
   # :  `W` - The window to use for text metrics
   # :  `data` - The data item
   #
   public optional get_height(W, data)

   # Return the size of the given data, as a `Size` instance.
   # :Parameters :
   # :  `W` - The window to use for text metrics
   # :  `data` - The data item
   #
   public abstract get_size(W, data)

   # Draw the given data item
   # :Parameters :
   # :  `W` - The window to draw into
   # :  `data` - The data item
   # :  `x` - The x position
   # :  `y` - The y position
   # :  `w` - The available output width
   # :  `h` - The available output height
   public abstract draw(W, data, x, y, w, h)

   # This method should be implemented if it is known that all data
   # items will have the same width.
   # :Parameters :
   # :  `W` - The window to use for text metrics
   #
   public get_constant_width(W)
   end

   # This method should be implemented if it is known that all data
   # items will have the same height.
   # :Parameters :
   # :  `W` - The window to use for text metrics
   #
   public get_constant_height(W)
   end

   # Convenient method to draw at a given point with size limit; just calls `draw`.
   # :Parameters :
   # :  `W` - The window to draw into
   # :  `data` - The data item
   # :  `p` - The `Rect`, giving the point to draw at, and the
   #          height/width limitation.
   public draw_rect(W, data, r)
      self.draw(W, data, r.x, r.y, r.w, r.h)
   end

   # Cleanup any resources used by this instance.
   public finally()
   end
end

# An `ItemPaint` in which each piece of data is an instance of
# `Paint`.
#
class PaintAdapter(ItemPaint)
   public override get_width(W, data)
      return data.w
   end

   public override get_height(W, data)
      return data.h
   end

   public override get_size(W, data)
      return data
   end

   public override draw(W, data, x, y, w, h)
      data.draw(W, x, y, w, h)
   end
end

# A simple `ItemPaint` in which each piece of data is a string.
#
class TextItemPaint(ItemPaint)
   public override get_width(W, data)
      return W.text_width(detab(data))
   end

   public override get_constant_height(W)
      return W.get_line_height()
   end

   public override get_size(W, data)
      return Size(W.text_width(detab(data)), W.get_line_height())
   end

   public override draw(W, data, x, y)
      W.draw_string(x, y + W.get_line_ascent(), detab(data))
   end
end

# A simple `ItemPaint` in which each piece of data is a string.  If
# the string is limited when output, then a truncated string ending in
# "..." is output.
#
class AbbreviatedTextItemPaint(ItemPaint)
   public override get_width(W, data)
      return W.text_width(detab(data))
   end

   public override get_constant_height(W)
      return W.get_line_height()
   end

   public override get_size(W, data)
      return Size(W.text_width(detab(data)), W.get_line_height())
   end

   public override draw(W, data, x, y, w)
      W.draw_string(x, y + W.get_line_ascent(), limit_text(W, detab(data), w))
   end
end

# A parent class for `ItemPaint`s which wish to calculate sizes and
# draw with a cloned window.
#
abstract class WithCloneItemPaint(ItemPaint)
   private cw, wt, ct

   # This method must be implemented to create the cloned window
   # :Parameters :
   # :  `W` - the base window to clone from
   protected abstract make_clone(W)

   protected get_clone(W, ignore_clip)
      local cc, f
      if W === wt then {
         if /ignore_clip then {
            cc := W.get_clip()
            equals(ct, cc) | (f := &yes)
         }
      } else {
         cc := W.get_clip()
         f := &yes
      }
      if \f then {
         wt := W
         ct := cc
         (\cw).close()
         cw := make_clone(W)
      }
      return cw
   end

   public override finally()
      (\cw).close()
      wt := ct := cw := &null
   end
end

# An `ItemPaint` which draws text using a cloned window.  It must be
# subclassed in order to provide the `make_clone` method.
#
abstract class AttributedTextItemPaint(WithCloneItemPaint)
   public override get_width(W, data)
      return get_clone(W, &yes).text_width(detab(data))
   end

   public override get_constant_height(W)
      return get_clone(W, &yes).get_line_height()
   end

   public override get_size(W, data)
      W := get_clone(W, &yes)
      return Size(W.text_width(detab(data)), W.get_line_height())
   end

   public override draw(W, data, x, y)
      W := get_clone(W)
      W.draw_string(x, y + W.get_line_ascent(), detab(data))
   end
end

# An `ItemPaint` in which each piece of data is a Pixels instance.
#
class PixelsItemPaint(ItemPaint)
   public override get_width(W, data)
      return data.get_width()
   end

   public override get_height(W, data)
      return data.get_height()
   end

   public override get_size(W, data)
      return Size(data.get_width(), data.get_height())
   end

   public override draw(W, data, x, y)
      W.draw_image(x, y, data)
   end
end

# An `ItemPaint` in which each piece of data is a window containing an
# image to be copied to the destination.  It is the responsibility of
# the user to initialize and dispose of the windows.
#
class ImageWindowItemPaint(ItemPaint)
   public override get_width(W, data)
      return data.get_width()
   end

   public override get_height(W, data)
      return data.get_height()
   end

   public override get_size(W, data)
      return Size(data.get_width(), data.get_height())
   end

   public override draw(W, data, x, y)
      data.copy_to(,,,, W, x, y)
   end
end

# An `ItemPaint` in which each piece of data is a key to be given to
# `ImageCache.get`.  The resulting image is then copied to the
# destination.
#
class ImageCacheItemPaint(ItemPaint)
   public override get_width(W, data)
      return ImageCache.get(data, W).get_width() | 0
   end

   public override get_height(W, data)
      return ImageCache.get(data, W).get_height() | 0
   end

   public override get_size(W, data)
      local i
      return if i := ImageCache.get(data, W) then
         Size(i.get_width(), i.get_height())
      else
         Size(0, 0)
   end

   public override draw(W, data, x, y)
      ImageCache.get(data, W).copy_to(,,,, W, x, y)
   end
end

# An `ItemPaint` which wraps another `ItemPaint`.  Each item of data
# is mapped using a provided function before being passed to the other
# instance.
#
class MapItemPaint(ItemPaint)
   public const
      other, f

   public override initially(c)
      other.initially(c)
   end

   public override get_width(W, data)
      return other.get_width(W, f(data))
   end

   public override get_height(W, data)
      return other.get_height(W, f(data))
   end

   public override get_size(W, data)
      return other.get_size(W, f(data))
   end

   public override draw(W, data, x, y, w, h)
      return other.draw(W, f(data), x, y, w, h)
   end

   public override get_constant_width(W)
      return other.get_constant_width(W)
   end

   public override get_constant_height(W)
      return other.get_constant_height(W)
   end

   public override finally()
      other.finally()
   end

   # Create a new instance with the given `ItemPaint` to wrap, and
   # map function `f`.
   public new(other, f)
      self.other := other
      self.f := need_callable(f)
      return
   end
end
