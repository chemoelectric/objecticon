#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui


############################################################################
#
#
#
class CanvasSizerDialog(CanvasComponentDialog)
   public 
      lo,
      hi,
      lo_flag,
      hi_flag

   public validate_input()
      local lo_val, hi_val

      if lo_flag.is_checked() then
         lo_val := integer(lo.get_contents()) | return alert_error(self, "Lo is not integer")
      if hi_flag.is_checked() then
         hi_val := integer(hi.get_contents()) | return alert_error(self, "Hi is not integer")
      if \lo_val & \hi_val then
         lo_val < hi_val | return alert_error(self, "Lo must be less than hi")
      return cast(self,CanvasComponentDialog).validate_input()
   end

   public set_vals()
      local lo_val, hi_val

      if lo_flag.is_checked() then
         lo_val := integer(lo.get_contents())
      if hi_flag.is_checked() then
         hi_val := integer(hi.get_contents())

      cast(self,CanvasComponentDialog).set_vals()

      c.set_range(lo_val, hi_val)
   end

   public on_hi_flag(ev)
      hi.toggle_is_shaded()
   end

   public on_lo_flag(ev)
      lo.toggle_is_shaded()
   end

   public setup()
      local p

      cast(self,CanvasComponentDialog).setup()

      p := TabItem()
      p.set_layout(GridLayout("extra=borders"))
      add_tab_at_front(p)
      p.set_label("General")

      lo_flag := CheckBox()
      lo_flag.connect(self.on_lo_flag, Event.ACTION)
      lo_flag.set_toggles("t")
      lo_flag.set_label("Low")
      p.add(lo_flag)
      lo := TextField("c:eol")
      lo.set_size(100)
      lo.set_contents("")
      p.add(lo)

      hi_flag := CheckBox()
      hi_flag.connect(self.on_hi_flag, Event.ACTION)
      hi_flag.set_toggles("t")
      hi_flag.set_label("High")
      p.add(hi_flag)
      hi := TextField("c:eol")
      hi.set_size(100)
      hi.set_contents("")
      p.add(hi)

      lo.set_filter(&digits)
      hi.set_filter(&digits)

      if /c.lo then {
         lo.set_is_shaded("t")
      } else {
         lo_flag.set_is_checked("t")
         lo.set_contents(c.lo)
      }

      if /c.hi then {
         hi.set_is_shaded("t")
      } else {
         hi_flag.set_is_checked("t")
         hi.set_contents(c.hi)
      }
   end
end


