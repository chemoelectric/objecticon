#summary Describes the unicode support in Object Icon
<wiki:toc max_depth="3" />
= Introduction =

This page describes the Unicode support in Object Icon.  This provides an additional string type, which behaves like a conventional string, but can contain any unicode character.  Csets have also been enhanced in Object Icon.

= The `ucs` type =

`ucs` (standing for Unicode character string) is a new builtin type, whose behaviour closely mirrors that of the conventional Icon string.  It operates by providing a wrapper around a conventional conventional Icon string, which must be in utf-8 format.  This has several advantages, and only one serious disadvantage, namely that a utf-8 string is not randomly accessible, in the sense that one cannot say where the representation for unicode character `i` begins.  To alleviate this disadvantage, the `ucs` type maintains an index of offsets into the utf-8 string to make random access faster.  The size of the index is only a few percent of the total allocation for the `ucs` object.

== utf-8 escape sequences ==

Two new escape sequences are provided to represent the utf-8 character sequences of unicode characters.  These are `\u`, which is followed by up to 4 hex digits, and `\U`, which is followed by up to six hex digits.  Each expands to between one and four characters, depending on the unicode character concerned.  So, for example, the line
{{{
   write(image("\u0001*\u00ff*\u1234*\U10ffff"))
}}}
writes
{{{
   "\x01*\xc3\xbf*\xe1\x88\xb4*\xf4\x8f\xbf\xbf"
}}}
Note that this is still just an ordinary string, rather than a `ucs` string.

== Creating a `ucs` string ==

A `ucs` string can be created at compile-time, as a literal, or at runtime, via the builtin `ucs` function.  To create a literal, prefix a `u` to an ordinary string literal, which must be valid utf-8; for example :-
{{{
   s := u"\u0001*\u00ff*\u1234*\U10ffff"
}}}
To use `ucs`, just call it like any other function.
{{{
   s := ucs(x)
}}}
The parameter to `ucs` must be something which can be converted to a string which must be valid utf-8 (otherwise `ucs` fails).  Note that all plain ascii strings (ie, those with only characters less than 128) are in utf-8 format.  

== Operations on `ucs` strings ==

The `ucs` type supports all of the familiar string operations, with the same semantics as the conventional string type.

String operations which take two parameters can usually mix `string` and `ucs` types, although some care is needed.  The general rule is: if either parameter is a `ucs`, then the other parameter must be convertible to a `ucs`.  For example, consider string catenation.  The expression
{{{
   "abc" || u"\u1234"
}}}
is valid, and has the result `u"abc\u1234"`, because `"abc"` is valid utf8 and hence convertible to a `ucs`.  However, the expression
{{{
   "\xff" || u"\u1234"
}}}
is invalid and will cause a runtime error because `"\xff"` is not valid utf8, and hence cannot be converted to a `ucs`.

== Csets ==

In Icon, csets can only represent characters in the range 0 to 255.  Object icon extends this range to cover all possible unicode characters (0 up to 0x10FFFF).

The `\u` and `\U` escape sequences can be used to specify characters greater than 255.  For example
{{{
   '\x01\xff\u1234\U10ffff'
}}}
specifies a cset with four characters.  You can also specify a range of characters by using a hyphen.  Thus `'a-zA-Z'` has the lower and upper case characters, `'0-9'` has the digits, and so on.  A new keyword, `&uset`, contains all of the possible characters and is equivalent to `'\x00-\U10ffff'`.

Generating the elements of a cset with `!` will produce one-character strings for those elements less than 256, and one-character `ucs` strings for those elements greater than or equal to 256.  So for example the expression
{{{
   !'\x01\xff\u1234\U10ffff'
}}}
produces the following four results
{{{
"\x01"
"\xff"
u"\u1234"
u"\U10ffff"
}}}

Indexing a cset will produce either a normal string or a `ucs` string, depending on whether any of the elements in the range are greater than or equal to 256.  For example the expression
{{{
   '\x01\xff\u1234\U10ffff'[1:1 to 5]
}}}
produces the following results
{{{
""
"\x01"
"\x01\xff"
u"\x01\u00ff\u1234"
u"\x01\u00ff\u1234\U10ffff"
}}}

The builtin `ord()` function can be used to access the numerical values of some or all of the characters in a cset (see below for a full explanation of `ord`).

== Conversions ==

== Builtin functions ==

=== ord() ===

=== uchar() ===

=== text() ===

