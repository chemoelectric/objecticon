#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui


############################################################################
#
# Class for representing a TextList on the canvas.
#
class CanvasTextList(CanvasComponent,TextList)
   public override min_height()
      # need a smart calculation font height + borders + scrollbar
      # for now based on constants in gui.icn, guiconst.icn we go with
      # 14 + 8*2 + 22
      return 52
   end
 
   public override min_width()
      # need a smart calculation font height + borders + scrollbar
      # for now based on constants in gui.icn, guiconst.icn we go with
      # 14 + 5*2 + 22
      return 46
   end

   #
   # Generate code into Code object c.
   #
   public override gen_code(c)
      CanvasComponent.gen_code(c)
      c.chain("set_select_mode(" || c.select_str(self.select_mode) || ")")
      c.add_import("gui", "Select")
      c.chain("set_contents(" || contents_string(self.contents) || ")")
   end

   #
   # Duplicate object.
   #
   public override dup()
      local c
      c := CanvasTextList()
      CanvasComponent.dup_fields(c)
      c.select_mode := self.select_mode
      c.set_contents(copy(self.contents))
      return c
   end

   #
   # Return the I/O template.
   #
   public override get_template()
      suspend CanvasComponent.get_template() |
         ["Select Mode", "select_mode"] |
         ["Contents", "contents"]
   end

   public override post_decode()
      CanvasComponent.post_decode()
      # This constraints the cursor; if the list is non-empty changing
      # it from &null to 1.
      contents_changed()
   end

   #
   # Open the configuration dialog box.
   #
   public override dialog()
      return CanvasTextListDialog(self)
   end

   public override allows_null_height()
      return
   end

   public override allows_null_width()
      return
   end

   public override new()
      TextList.new()
      CanvasComponent.new()
      self.class_name := "TextList"
      self.import_name := "gui"
      self.name := "text_list"
      return
   end
end




