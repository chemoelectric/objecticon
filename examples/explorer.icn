import gui, ipl.filegui, ipl.sort, io, util, graphics

#
# A very simple filesystem explorer with a tree and a table.
#
class Explorer(Dialog)
   public tree, 
      tbl,
      bits_col,
      date_col,
      file_col,
      size_col

   #
   # Given a TreeNode n, get the full file path it represents by traversing
   # up the tree structure to the root.
   #
   public get_full_path(n)
      local l
      l := []
      repeat {
         push(l, n.get_label().name)
         n := n.get_parent()
         if n === tree.get_root_node() then
            break
      }
      return FilePath(l).str()
   end

   #
   # Invoked when a sub-tree is expanded (ie: the little + is
   # clicked).  An expansion event also includes contractions
   # too.
   #
   public handle_tree_expansion()
      local n

      n := tree.get_last_expanded()
      #
      # Check whether it was an expansion or a contraction.  If
      # an expansion, load the subtree and refresh the tree.
      #
      if n.is_expanded() then {
         load_subtree(n)
         tree.tree_structure_changed()
      }
   end

   #
   # Invoked when a row in the tree is selected (or de-selected).
   #
   public handle_tree_selection()
      local n

      #
      # If we have something selected, load the table.  We may not
      # have something selected if the user contracted the parent
      # node of the selected node.
      #
      if n := tree.object_get_selections()[1] then {
         load_table(n)
      }
   end

   #
   # Given a TreeNode n, load its children with the sub-directories.
   #
   public load_subtree(n)
      local s, r1, l, e

      s := get_full_path(n)

      l := get_directory_list(s)[1]
      qsort(l, Files.name_cmp)
      n.clear_children()
      every e := !l do {
         r1 := TreeNode().set_always_expandable(&yes)
         r1.set_label(e)
         n.add(r1)
      }
   end

   private fmt_time(t)
      local now
      now := Time.get_system_seconds()
      return if now - t > 180 * 86400 then
         Time(t + Time.SYSTEM_BASE_OFFSET).format("  NNN dd  yyyy")
      else
         Time(t + Time.SYSTEM_BASE_OFFSET).format("  NNN dd HH:mm")
   end

   #
   # Given a TreeNode n, load the table with the sub-files and
   # sub-directories.
   #
   public load_table(n)
      local s, l, t, el, cl, c

      s := get_full_path(n)

      t := get_directory_list(s) | fail
      t := qsort(t[1] ||| t[2], Files.name_cmp)

      l := []
      every el := !t do {
         cl := []
         every c := !tbl.get_columns() do {
            case c of {
               file_col: put(cl, el)
               bits_col: put(cl, el.lstat.mode_str)
               date_col: put(cl, fmt_time(el.lstat.mtime))
               size_col: put(cl, Format.numeric_to_string(el.lstat.size, 0, ','))

            }
         }
         put(l, cl)
      }

      tbl.set_contents(l)
      if is_live() then
         tbl.goto_pos(1, 0)
   end

   #
   # Catch Alt-q to close the dialog.
   #
   public quit_check(ev)
      if ev.code === "q" & \ev.meta then
         dispose()
   end

   #
   # Read a directory.
   #
   public get_directory_list(s)
      local e, dir_list, file_list, l
      if not(l := Files.ucs_list(s, ListEntryWithIcon)) then
         return [[],[]]
      dir_list := []
      file_list := []
      every e := !l do {
         if not(Files.is_hidden(e.name) | Files.is_relative_dir(e.name)) then {
            if e.stat.mode_str[1] == "d" then
               put(dir_list, e)
            else
               put(file_list, e)
         }
      }
      return [dir_list, file_list]
   end

   public component_setup()
      local root_node, split, w, bw, p, d, c

      set_size(scale(900),scale(600)).set_resize(&yes).set_label("Explorer")
      connect(self.dispose, Event.WINDOW_CLOSE_BUTTON)
      connect(self.quit_check, Event.ICON)

      set_layout(GridLayout())

      p := scale(2)
      tree := ItemPaintTree().
         set_size(scale(250),scale(420)).
         set_select_mode("one").
         set_fixed_col_w(IconFilesItemPaint.ICON_SIZE + 2 * p).
         set_item_paint(IconFilesItemPaint()).
         set_item_border(EmptyBorder().
                            set_insets(p, Gui.TEXT_INSET, 0, 0).
                            set_x_align(Align.L)).
         connect(self.handle_tree_expansion, Event.TREE_NODE_EXPANSION).
         connect(self.handle_tree_selection, Event.SELECTION_CHANGED)

      bw := TableColumn().border.get_total_width()
      use {
         w := Window(),
         tbl := Table().
            set_size(scale(470),scale(420)).
            set_select_mode("none").
            set_draggable_columns(&yes).
            add_column(file_col := ItemPaintTableColumn().
                          set_label("File").
                          set_item_paint(IconFilesItemPaint()).
                          set_item_border(EmptyBorder().             # Set a border to align with the button text
                                             set_insets(Gui.TEXT_INSET,0,0,0).
                                             set_x_align(Align.L))).
            add_column(size_col := TableColumn().set_label("Size").set_column_width(bw + w.text_width("000,000,000,000")).set_column_align("r")).
            add_column(date_col := TableColumn().set_label("Date").set_column_width(bw + w.text_width("  MMM 00 00:00"))).
            add_column(bits_col := TableColumn().set_label("Bits").set_column_width(bw + w.text_width("drwxrwxrwx  ")))
      }

      split := Split().set_left(tree).set_right(tbl).set_min(scale(50), scale(50))
      add(split)

      #
      # Initialize the tree data structure.
      #
      root_node := TreeNode()
      every d := Files.get_roots() do
         root_node.add(TreeNode().
                          set_label(ListEntryWithIcon(ucs(d), Files.lstat(d), Files.stat(d))).
                          set_always_expandable(&yes))
      tree.set_root_node(root_node).set_show_root(&no)
      if *root_node.children = 1 then {
         c := root_node.children[1]
         load_subtree(c)
         c.set_expanded(&yes)
         tree.object_set_selections([c])
         load_table(c)
      }
   end
end

procedure main()
   local d
   d := Explorer()
   d.show_modal()
end
