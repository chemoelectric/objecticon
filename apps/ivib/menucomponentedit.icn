#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui, lang

############################################################################
#
#
#
class MenuComponentEdit(Dialog)
   public 
      c,
      label,                   # Dialog title
      tabset,
      code_tab,
      other_tab,
      event_flag,
      event_method,
      shaded,                  #
      decorative,
      accel_flag,              # Accel on/off
      accel_tf,
      tooltip_field,           # PaintField - tooltip
      okay_result

   public on_accel_flag()
      accel_tf.toggle_is_shaded()
   end

   #
   # Get result flag
   #
   public get_okay_result()
      return self.okay_result
   end

   public on_event_flag()
      event_method.toggle_is_shaded()
      if not(event_method.is_shaded()) & *event_method.get_contents() = 0 then
         event_method.set_contents("on_" || code_tab.name.get_contents())
   end

   #
   # Add the tab to the TabSet
   #
   public add_tab(t) 
      tabset.add(t)
   end

   #
   # Add the tab to the TabSet, as the first item
   #
   public add_tab_at_front(t) 
      tabset.add(t, 1)
   end

   public on_cancel()
      self.dispose()
   end

   public validate_input()
      code_tab.validate_input() | fail
      return
   end

   public on_okay()
      self.validate_input() | fail
      self.set_vals()
      self.okay_result := 1
      self.dispose()
   end

   public setup()
      local oc
      Class.get_name(c) ? {
         ="Canvas"
         label := tab(0) || " Setup"
      }
      self.set_label(label)

      set_layout(GridLayout())

      tabset := TabSet().set_constraint("eol", &yes)
      add(tabset)

      code_tab := CodeTab(c)
      tabset.add(code_tab)

      other_tab := TabItem().set_label("Other")
      other_tab.set_layout(GridLayout().set_extra("borders"))
      tabset.add(other_tab)

      event_flag := CheckBox()
      event_flag.connect(self.on_event_flag, Event.ACTION)
      event_flag.set_label("Event handler")
      other_tab.add(event_flag)

      event_method := TextField().set_constraint("eol", &yes)
      event_method.set_size(120)
      other_tab.add(event_method)

      if /c.event_method then
         event_method.set_is_shaded(&yes)
      else  {
         event_flag.set_is_checked(&yes)
         event_method.set_contents(c.event_method)
      }

      shaded := CheckBox().set_constraint("eol", &yes)
      shaded.set_label("Is shaded")
      if \c.is_shaded_flag then
         shaded.set_is_checked(&yes)
      other_tab.add(shaded)

      decorative := CheckBox().set_constraint("eol", &yes)
      decorative.set_label("Is decorative")
      if \c.is_decorative_flag then
         decorative.set_is_checked(&yes)
      other_tab.add(decorative)

      accel_flag := CheckBox()
      accel_flag.connect(self.on_accel_flag, Event.ACTION)
      accel_flag.set_label("Set Accelerator")
      other_tab.add(accel_flag)

      accel_tf := TextField().set_constraint("eol", &yes)
      accel_tf.set_size(100)
      other_tab.add(accel_tf)

      if /c.accel then
         accel_tf.set_is_shaded(&yes)
      else  {
         accel_flag.set_is_checked(&yes)
         accel_tf.set_contents(c.accel)
      }

      tooltip_field := PaintField().set_constraint("eol", &yes).set_constraint("w", 2).set_title(Label().set_label("Tooltip"))
      other_tab.add(tooltip_field)
      tooltip_field.set_contents(c.tooltip)

      oc := OkCancel()
      oc.listen(self)
      self.add(oc)
   end

   public set_vals()
      code_tab.set_vals()
      c.event_method := if event_flag.is_checked() then event_method.get_contents() else &null
      c.is_shaded_flag := shaded.get_status()
      c.is_decorative_flag := decorative.get_status()
      c.accel := if accel_flag.is_checked() then accel_tf.get_contents() else &null
      c.tooltip := tooltip_field.get_contents()
   end

   public new(c)
      Dialog.new()
      self.c := c
      setup()
      return
   end
end


