#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import xml, ipl.options, io, lang

procedure main(a)
   local p, fmt, t, e, s, d, eh

   p := XmlParser()

   eh := XmlErrorHandler()
   eh.connect(p)

   fmt := XmlFormatter()

   t := options(a, [Opt("u",,"Input is UTF-8"),
                    Opt("g",,"Show global names"),
                    Opt("nc",,"Don't preserve comments"),
                    Opt("nv",,"Don't validate"),
                    Opt("fnw",,"Format output with no whitespace"),
                    Opt("fi",integer,"Format output with given indent"),
                    Opt("ftt",,"Format output with text trim"),
                    Opt("far",,"Format output as read"),
                    Opt("er",,"Resolve all URLs to the empty string")],
                    "Usage: testxml [OPTIONS] [FILE...]")

   if \t["nv"] then
      p.set_validate(&no)

   if \t["er"] then
      p.set_resolver(EmptyResolver())

   if \t["nc"] then
      p.set_preserve_comments(&no)

   if /t["g"] then
      p.set_do_namespaces(&no)

   #
   # Setup formatter options
   #
   if \t["fnw"] then
      fmt.set_no_whitespace(&yes)
   if \t["ftt"] then
      fmt.set_text_trim(&yes)
   if \t["far"] then
      fmt.set_as_read(&yes)
   fmt.set_indent(\t["fi"])


   every e := !a do {
      s := Files.file_to_string(e) | stop("Couldn't open ", e, ": ", &why)
      if \t["u"] then
         s := ucs(s) | stop("Couldn't convert to UTF-8")

      write("--- Parsing ", e)
      if d := p.parse(s, FilePath(e).canonical().to_url()) then {
         write("--- Parsing complete.  Document was well-formed")
         write("--- Formatted input")
         fmt.format(d)
         write("--- Document structure")
         to_stdout(d, 3)
         d.show_entities()
         d.show_element_declarations()
         d.show_notation_declarations()
         d.show_attribute_lists()
         d.show_id_attributes()
      } else {
         write("--- Parsing failed: ", &why)
      }
   }
end
