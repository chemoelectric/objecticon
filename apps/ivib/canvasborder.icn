#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui, util

$define INSIDE_BOX 30

############################################################################
#
# Class for representing a Border on the canvas.
#
class CanvasBorder(CanvasComponent,Border)
   #
   # Generate code into Code object c.
   #
   public override gen_code(c)
      if \self.title then
         self.title.gen_code(c)
      self.content.gen_code(c)
      CanvasComponent.gen_code(c)
      if self.internal_align ~== Align.L then
         c.chain("set_internal_align(" || c.align_str(self.internal_align) || ")")
      if \self.title then
         c.chain("set_title(" || self.title.name || ")")
      c.chain("set_content(" || self.content.name || ")")
   end

   public override post_decode()
      local e, c
      if /self.content then {
         # Fix an old-style Border, where there is no content object.

         # Create a content object.
         c := CanvasBorderContent()
         c.set_parent_Canvas(self.parent_Canvas)
         c.rename()

         # Move everything but the title into the content.
         every e := !copy(self.children) do {
            if e ~=== self.title then {
               remove(e)
               c.add(e)
            }
         }

         # Add the content
         self.set_content(c)

         # Transfer any layout to the content.
         #self.content.set_layout(self.layout_delegate)
         #Component.set_layout()
         #write("POST:children")
         #every c := !children do
         #   write("\t",image(c))
         #write("POST:content children")
         #every c := !content.children do
         #   write("\t",image(c))
      }
      CanvasComponent.post_decode()
   end

   #
   # Duplicate object.
   #
   public override dup()
      local c
      c := CanvasBorder()
      CanvasComponent.dup_fields(c)
      c.set_content(self.content.dup())
      c.set_title((\self.title).dup())
      c.internal_align := self.internal_align
      return c
   end

   public override remove(c)
      if c === self.title then
         self.title := &null
      return Component.remove(c)
   end

   public override place_inside(c)
      if (self.x + self.w - INSIDE_BOX <= c.mx < self.x + self.w) & 
         (self.y + self.h - INSIDE_BOX <= c.my < self.y + self.h) & /title then 
      {
         set_title(c)
         c.reset()
      }
   end

   #
   # Return the I/O template.
   #
   public override get_template()
      suspend CanvasComponent.get_template() |
         ["Internal Alignment", "internal_align"] |
         ["Children", "children"] |
         ["Title Obj", "title"] |
         ["Content", "content"]
   end

   #
   # Open the configuration dialog box.
   #
   public override dialog()
      return CanvasBorderDialog(self)
   end

   #
   # Overrides CanvasComponent.which_cursor_over() 
   #
   public override which_cursor_over(e)
      local o
      CanvasComponent.which_cursor_over(e) | fail
      if in_resize_region(e) then
         return self
      if o := (\self.title | self.content).which_cursor_over(e) then
         return o
      return self
   end

   #
   # Overrides Border.display()
   #
   public override display()
      local cw
      Border.display()
      if in_ivib() then {
         use {
            cw := self.cbwin.clone().set_masked_pattern("diagonal"),
            cw.draw_rectangle(self.x + self.w - INSIDE_BOX, self.y + self.h - INSIDE_BOX, INSIDE_BOX - Gui.BORDER_WIDTH, INSIDE_BOX- Gui.BORDER_WIDTH)
         }
      }
   end

   #
   # Overrides CanvasComponent.inside()
   #
   public override is_inside(c)
      local o
      if c === self then
         fail
      if o := (\self.title).is_inside(c) then
         return o
      if ((self.x + self.w - INSIDE_BOX <= c.mx < self.x + self.w) & (self.y + self.h - INSIDE_BOX <= c.my < self.y + self.h) & /title) then
         return self
      if o := self.content.is_inside(c) then
         return o
   end

   public override allows_null_width()
      return self.content.allows_null_width()
   end

   public override allows_null_height()
      return self.content.allows_null_height()
   end

   public override gen_cos()
      suspend CanvasComponent.gen_cos() | self.content | \self.title
   end

   public override new()
      Border.new()
      CanvasComponent.new()
      self.class_name := "Border"
      self.import_name := "gui"
      self.name := "border"
      return
   end
end

class CanvasBorderContent(CanvasComponent,Component)
   #
   # Generate code into Code object c.
   #
   public override gen_code(c)
      every (!self.children).gen_code(c)
      CanvasComponent.gen_code(c)
      every c.chain("add(" || (!self.children).name || ")")
   end

   #
   # Return the I/O template.
   #
   public override get_template()
      suspend CanvasComponent.get_template() | ["Children", "children"]
   end

   #
   # Duplicate object.
   #
   public override dup()
      local c
      c := CanvasBorderContent()
      CanvasComponent.dup_fields(c)
      every c.add((!self.children).dup())
      return c
   end

   #
   # Overrides CanvasComponent.is_inside()
   #
   public override is_inside(c)
      local e, o
      every e := back(self.z_children) do
         if o := e.is_inside(c) then
            return o
      if (self.x <= c.mx < self.x + self.w) & (self.y <= c.my < self.y + self.h) then
         return self
   end

   #
   # Overrides CanvasComponent.which_cursor_over() 
   #
   public override which_cursor_over(e)
      local t, o
      every t := back(self.z_children) do
         if o := t.which_cursor_over(e) then
            return o
   end

   public override allows_selection()
   end

   public override allows_positioning()
   end

   public override allows_add()
      return 1
   end

   public override allows_copy()
   end

   public override allows_delete()
   end

   #
   # Open the configuration dialog box.
   #
   public override dialog()
      return CanvasBorderContentDialog(self)
   end

   public override gen_cos()
     suspend CanvasComponent.gen_cos() | !self.children
   end

   public override new()
      Component.new()
      CanvasComponent.new()
      self.set_show_layout(&yes)
      self.class_name := "Component"
      self.import_name := "gui"
      self.name := "border_content"
      return
   end
end

class CanvasBorderContentDialog(CanvasComponentDialog)
   public override validate_input()
      #
      # We must have a default size if the parent has no absolute size.
      #
      if (/c.parent.w_spec | /c.parent.h_spec) & /c.layout_delegate then
         return alert_error(self, "The border content must have a layout manager set.")

      CanvasComponentDialog.validate_input() | fail 
      return
   end
end



