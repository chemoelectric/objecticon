############################################################################
#
#	File:     wopen.icn
#
#	Subject:  Procedures for graphics input/output
#
#	Authors:  Gregg M. Townsend and Ralph E. Griswold
#
#	Date:     July 26, 1999
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#	These procedures provide window input and output using "W" names as
#	substitutes for standard input and output functions.
#
#	WDone(), WQuit(), QuitCheck(), and QuitEvents() incorporate knowledge
#	of the Icon standard set of "quit" events, currently the letters
#	"q" or "Q".  The procedures themselves are trivial.
#
#	WQuit() consumes unread window events and succeeds if a quit event
#	is seen.  It does not wait.  WDone() waits until a quit event is read,
#	then exits the program.  QuitCheck(ev) calls exit() if its parameter
#	is a quit event; QuitCheck can be used with the vidget package as a
#	default event handler.  QuitEvents() generates the standard set of
#	quit events.
#
#	ZDone() is a zooming version of WDone().  If the window is resized
#	while waiting for a quit event, its contents are zoomed to fill the
#	new size.  Zooming to a multiple of the original size can also be
#	accomplished by typing a nonzero digit into the window.
#
#	Subwindow(W, x, y, w, h) produces a subwindow by creating and
#	reconfiguring a clone of the given window.  The original window
#	is not modified.  In the clone, which is returned, clipping
#	bounds are set by the given rectangle and the origin is
#	set at the rectangle's upper left corner.
#
############################################################################
#
#  Requires:  Version 9 graphics
#
############################################################################

package ipl.graphics

import
   graphics(Window),
   util(Time, toggle_flag)


procedure QuitEvents()
   suspend !"qQ" | Window.CLOSE_BUTTON
end


procedure QuitCheck(ev)
   if ev === QuitEvents() then
      exit()
   return
end


procedure WQuit(win)
   local e
   while e := win.event() do
      if e[1] === QuitEvents() then
         return win
   fail
end

#
# Get the next event from `win`, waiting if necessary. `timeout` gives
# the max time to wait; if omitted wait forever.
#
procedure WEvent(win, timeout)
   local e, lim
   lim := \timeout + Time.get_system_millis()
   until e := win.event() do {
      if \lim < Time.get_system_millis() then
         fail
      delay(50)
   }
   return e
end

#
# A helpful procedure to delay for the given time, whilst processing
# window events from `win`, and checking for quit events (see
# `QuitEvent()`).  If the user presses "p", then the program pauses
# until "p" is pressed again.
#
procedure WDelay(win, time)
   local e, lim, pause
   lim := time + Time.get_system_millis()
   repeat {
      while e := win.event() do {
         QuitCheck(e[1])
         if e[1] === "p" & e[5] = 0 then
            pause := toggle_flag(pause)
      }
      if /pause & (lim < Time.get_system_millis()) then
         return
      delay(50)
   }
end

procedure WDone(win)
   until WEvent(win)[1] === QuitEvents()
   exit()
end


#  ZDone(win) -- like WDone(), but zoom window if resized while waiting

procedure ZDone(win)
   local org, e, w, h, ww, hh, x0, y0

   x0 := -win.get_dx()
   y0 := -win.get_dy()
   w := win.get_width()
   h := win.get_height()
   org := Window().set_size(w, h) | WDone()
   win.copy_to(x0, y0,,, org)
   win.set_resize(&yes)
   while e := WEvent(win)[1] do case e of {
      QuitEvents():
         exit()
      Window.RESIZE:
         Zoom(org, win, , , , , x0, y0)
      !"123456789": {
         ww := e * w
         hh := e * h
         win.set_size(ww, hh)
         Zoom(org, win, , , , , x0, y0, ww, hh)
         }
      }
end

procedure SubWindow(win, x, y, w, h)
   /x := -win.get_dx()
   /y := -win.get_dy()
   /w := win.get_width() - (x + win.get_dx())
   /h := win.get_height() - (y + win.get_dy())

   if w < 0 then
      x -:= (w := -w)
   if h < 0 then
      y -:= (h := -h)

   win := win.clone().set_dx(win.get_dx() + x).set_dy(win.get_dy() + y)
   win.clip( 0, 0, w, h)
   return win
end
