#summary Describes the io package

= Introduction =

This page gives an overview of the `io` package, which provides Object Icon's object-oriented replacement to Icon's builtin `File` type.

= Details =

The central class in the `io` package is `Stream`.  This class models a file-like object which can have some or all of the following operations :-
 * input
 * output
 * seek and tell
 * truncation

The `io` package also provides some procedures which emulate the old Icon builtin functions which the package replaces (`write`, `open`, etc).

= File I/O =

The class `FileStream` provides conventional filesystem I/O.  To open a new `FileStream`, use the static `open` method :-
{{{
   f := FileStream.open("test.txt", ior(FileOpt.WRONLY, 
                                        FileOpt.TRUNC, 
                                        FileOpt.CREAT)) | stop(&why)
   f.write("some text")
   f.close()
}}}
The second parameter is made up by taking some constants from the `FileOpt` class and or-ing them together.  These constants match the constants used in the underlying Posix `open` system call, except that their names lack the "O" prefix.  So in the above example the `open` call is logically equivalent to the C call
{{{
   f = open("test.txt", O_WRONLY | O_TRUNC | O_CREAT);
}}}

As an alternative to using `FileStream` directly, the `open` procedure can be used to open a file, as follows :-
{{{
   f := open("test.txt", "w") | stop(&why)
   f.write("some text")
   f.close()
}}}
`open` emulates the traditional Icon builtin function of the same name.  It also returns a different type of `Stream` - rather than a `FileStream`, it returns a `BufferStream` wrapping a `FileStream`.  This provides better performance than a raw `FileStream` because it tends to read or write data to the underlying filesystem in larger chunks.

== Standard input and output ==
Standard input and output, and error output, are available via the following static constants.
 * `FileStream.stdin` - standard input
 * `FileStream.stdout` - standard output
 * `FileStream.stderr` - standard error output
These are all `FileStream` instances, and are hence unbuffered.  If you intend to read or write a large amount of data to one of these streams, performance will be improved by using a `BufferStream` wrapper.  For example, consider the following program to count lines :-
{{{
import io

procedure main()
   local n
   n := 0
   while read() do
      n +:= 1
   write("n=", n)
end
}}}
On my system this takes about 2.4 seconds to read a 47000-line file.  The following simple change reduces the run time to only 0.45 seconds :-
{{{
import io

procedure main()
   local n, f
   n := 0
   f := BufferStream("other=",FileStream.stdin)
   while f.read() do
      n +:= 1
   write("n=", n)
end
}}}
