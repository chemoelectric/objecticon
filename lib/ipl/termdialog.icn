package ipl.termdialog

import
   gui, io, graphics, util, undo, ipl.vt, xdg, 
$ifndef _PLAN9
      ipl.childwait,
$endif
      ipl.io, posix

class TermTextField(CompleteField)
   public keeps(e)
      return
   end

   protected do_request()
      return (\parent.complete_function)(contents, cursor)
   end
end

package record Save(text, undo)

class TermDialog(Dialog, LineBasedOutputStream, VtUI)
   private readable
      input,
      history_limit,
      history,
      history_start_no,
      hpos,
      hmod,
      text,
      need_crnl,
      complete_function,
      line

$ifdef _PLAN9
   public static launch_prog(de, file, line)
      local pid, cmd
      pid := System.fork(ior(ForkOpt.RFPROC, ForkOpt.RFFDG, ForkOpt.RFNAMEG, ForkOpt.RFENVG,
                             ForkOpt.RFNOTEG, ForkOpt.RFREND, ForkOpt.RFNOWAIT)) | fail
      if pid > 0 then {
         # Parent
         return
      }

      # Unmount our window directories in /n.  If we didn't do this,
      # and since we are copying the namespace, this would prevent
      # these windows closing until the launched application closes.
      Files.unmount_windows()

      # Set the working directory for the child process
      Files.chdir(\de.path | Files.get_home())
      # Get the command to run.
      cmd := de.subst_file(Format.rc_escape(file), line)
      null_stdio()
      Files.bulk_close()
      System.exec("/bin/rc", ["-c", "exec " || cmd]) | stop(&why)
      syserr("Not reached")
   end
$else
   public static launch_prog(de, file, line)
      local pid, cmd
      pid := System.fork() | fail
      if pid > 0 then {
         # Parent
         ChildWait.add_pid(pid)
         return
      }
      # Set the working directory for the child process
      Files.chdir(\de.path | Files.get_home())
      # Get the command to run.
      cmd := de.subst_file(Format.shell_escape(file), line)
      System.setpgid()
      null_stdio()
      Files.bulk_close()
      System.exec("/bin/sh", ["-c", "exec " || cmd]) | stop(&why)
      syserr("Not reached")
   end
$endif

   public link_left_clicked(url)
      local file, line, de
      case string(url.scheme) of {
         "text": input.insert_string(ucs(url.get_decoded_path()))
         "file": {
            file := ucs(Files.url_to_file(url)) | fail
            line := integer(url.extract_cgi_parameters()["line"][1])
            if de := Mime.gen_desktop_entries_for_file(FilePath(file).get(-1)) then
               launch_prog(de, file, line)
         }
      }
   end

   public link_middle_clicked(url)
      input.insert_string(get_url_text(url) || u" ")
   end

   private copy_text(s)
      own_selection(Selection.CLIPBOARD, StaticTextSelectionOwner(s))
   end

   private copy_url(url)
      own_selection(Selection.CLIPBOARD, URLSelectionOwner([url]))
   end 

   private static get_url_text(url)
      return case string(url.scheme) of {
         "text": ucs(url.get_decoded_path())
         "file": ucs(Files.url_to_file(url))
      }
   end

   public create_link_menu(url)
      local m, s
      m := Menu()
      if s := get_url_text(url) then
         m.add(TextMenuItem().
               set_label("Copy").
               connect(create copy_text(s), Event.ACTION))
      m.add(TextMenuItem().
            set_label("Copy URL").
            connect(create copy_url(url), Event.ACTION))
      return m
   end

   public create_context_menu()
      local m
      m := Menu()
      if text.get_current_text_selection() then {
         m.add(TextMenuItem().
               set_label("Copy").
               connect(text.handle_copy, Event.ACTION))
      }
      m. add(TextMenuItem().
             set_label("Select all").
             connect(text.handle_select_all, Event.ACTION)).
         add(MenuSeparator()).
         add(TextMenuItem().
             set_label("Clear").
             connect(create clear_text(), Event.ACTION)).
         add(TextMenuItem().
             set_label("Quit").
             set_label_right("^Q").
             connect(create dispose(), Event.ACTION))
      return m.tidy()
   end

   public quieten_cursor()
   end

   public send_tty(s)
   end

   public vt_size_changed(cols, rows)
   end

   public msg(s, n)
   end

   public search_msg(s)
   end

   # Clear the log area.
   #
   public clear_text()
      text.input("\e[9J\e[2J\e[H")
      need_crnl := &no
      return self
   end

   protected write_line_impl(s)
      is_live() | return error("TermDialog not live")
      if \need_crnl then
         text.input("\r\n")
      text.
         input(s).
         goto_bottom()
      need_crnl := &yes
      return
   end

   # Set the limit in lines for the text area log.
   #
   public set_log_limit(n)
      text.set_history_size(n)
      return self
   end

   # Set a function to generate completions when the tab key is
   # pressed.  The function is given subject and cursor position, and
   # should return a list of `gui.CompleteElement` instances.
   #
   public set_complete_function(f)
      self.complete_function := f
      return self
   end

   # Set the limit in lines for the command history.
   #
   public set_history_limit(n)
      self.history_limit := n
      limit_history()
      reset_term()
      return self
   end

   # Set the history list.
   #
   public set_history(l)
      self.history := l
      self.history_start_no := 1
      limit_history()
      reset_term()
      return self
   end

   public set_popup_on_tab(s)
      input.set_popup_on_tab(check_flag(s))
      return self
   end

   # Return the history list.
   #
   public get_history()
      return .history
   end

   # Return the given history number line.
   #
   public get_history_item(n)
      return .history[0 < n - history_start_no + 1]
   end

   # Get the history number of the first entry in the history.
   #
   public get_history_start_no()
      return .history_start_no
   end

   private goto_hist(n)
      local d
      (1 <= n <= *history + 1) | fail
      if input.undo_manager.get_last() then {
         insert(hmod, hpos, Save(input.get_contents(), input.undo_manager))
         # Set a new instance since set_contents will clear the manager
         input.set_undo_manager(UndoManager())
      }
      hpos := n
      if d := member(hmod, hpos) then {
         input.
            set_contents(d.text).
            set_undo_manager(d.undo)
      } else
         input.set_contents(history[hpos] | u"")
   end

   private get_mod_hist(n)
      return member(hmod, n).text | history[n]
   end

   private move_hist(n)
      goto_hist(hpos + n)
   end

   private limit_history()
      while *history > \history_limit do {
         pop(history)
         history_start_no +:= 1
      }
   end

   public component_setup()
      reset_term()
   end

   public end_dialog()
   end

   public init_dialog()
      text.input("\e[?25l")
   end

   public get_term_width()
      return (text.predict_view_width(text.w, &yes) - 2 * Gui.TEXT_INSET) / text.cbwin.text_width("m")
   end

   public new()
      Dialog.new()
      LineBasedOutputStream.new()
      hmod := table()
      history := []
      history_start_no := 1
      self.setup()
      text.
         set_ui(self).
         set_accepts_focus(&no).
         set_history_size(600)
      return
   end

   private reset_term()
      input.keep_closed()
      hpos := *history + 1
      clear(hmod)
      input.set_contents(u"")
   end

   private on_input(ev)
      if input.was_applied(ev) then
         fail
      line := input.get_contents()
      if *line > 0 then {
         put(history, line)
         limit_history()
      }
      reset_term()
      fire(Event.ACTION, ev)
   end
   
   private handle_key_up(e)
      if /input.popup then
         move_hist(-1)
   end

   private handle_key_down(e)
      if /input.popup then
         move_hist(1)
   end

   private handle_key_page_up(e)
      if /input.popup then
         text.handle_pgup(e)
   end

   private handle_key_page_down(e)
      if /input.popup then
         text.handle_pgdn(e)
   end

   private handle_history_recall()
      input.keep_closed()
      goto_hist(integer(input.get_contents()) - history_start_no + 1)
   end

   private handle_history_search(dir)
      local i, s, c, curr
      input.keep_closed()
      c := input.cursor
      curr := input.get_contents()
      s := curr[1:c]
      every i := if dir > 0 then (hpos + 1 to *history) | (1 to hpos - 1)
                            else (hpos - 1 to 1 by -1) | (*history to hpos + 1 by -1) do {
         if match(s, curr ~== get_mod_hist(i)) then {
            goto_hist(i)
            input.set_cursor(c)
            return
         }
      }
   end

   private on_input_key(ev)
      case ev.code of {
         Key.UP : handle_key_up(ev)
         Key.DOWN : handle_key_down(ev)
         Key.PGUP : handle_key_page_up(ev)
         Key.PGDN : handle_key_page_down(ev)
         "\^p": handle_history_recall()
         "\^r": handle_history_search(-1)
         "\^t": handle_history_search(1)
         "\^g": reset_term()
      }
   end

   private on_close_button(ev)
      dispose()
   end

   private on_icon_event(ev)
      if ev.code === "\^q" then 
         dispose()
   end

   private setup()
      local layout_1
      self.set_resize(&yes)
      self.set_size(scale(735), scale(510))
      text := Vt().
         set_size(scale(465), scale(256)).
         clear_constraints().
         set_constraint(Grid.EOL, &yes).
         set_constraint(Grid.X_FILL, &yes).
         set_constraint(Grid.X_WEIGHT, 1.0).
         set_constraint(Grid.Y_FILL, &yes).
         set_constraint(Grid.Y_WEIGHT, 1.0)
      self.add(text)
      input := TermTextField().
         set_size(scale(458)).
         clear_constraints().
         set_constraint(Grid.X_ALIGN, Align.L).
         set_constraint(Grid.X_FILL, &yes).
         set_constraint(Grid.X_WEIGHT, 1.0).
         connect(self.on_input, Event.ACTION).
         connect(self.on_input_key, Event.KEY_PRESS).
         set_contents(u"")
      self.add(input)
      self.connect(self.on_close_button, Event.WINDOW_CLOSE_BUTTON)
      self.connect(self.on_icon_event, Event.ICON)
      layout_1 := GridLayout().
         set_extra("cells")
      self.set_layout(layout_1)
      self.set_focus(input.find_focus())
   end
end

### Ivib-v2 layout: layouts/$.layout
