package ipl.test

#
# Some functions used by the programs in the test directory.
#

import io, lang, ipl.pdco, util

procedure imagex(o)
   return unserial(image(o))
end

procedure unserial(s)
   local t
   t := ""
   s ? {
      while t ||:= tab(upto('#') + 1) do {
         if tab(many(&digits)) then
            t ||:= "*"
      }
      return t || tab(0)
   }
end

procedure to_stringx(o)
   return unserial(to_string(o))
end

procedure pr_seq(s, e)
   local t
   writes(@s, ": {")
   t := ""
   while writes(t, imagex(@e)) do
      t := ", "
   write("}")
end

procedure pr_seq2(s, e)
   local t
   &why := ""
   writes(@s, ": {")
   t := ""
   while writes(t, imagex(@e)) do
      t := ", "
   if *&why > 0 then
      write("} &why=", image(&why))
   else
      write("}")
end

procedure yes_no(s, e)
   local x
   writes(@s, ": ")
   if x := @e then
      write("yes")
   else 
      write("no")
   return \x
end

procedure try(s, e)
   local x
   writes(@s, ": ")
   &handler := &current
   errorclear()
   if x := @e then
      write("Succeeded with ", imagex(x))
   else {
      if &errortext then
         write("Error ", &errornumber|-1)
      else
         write("Failed")
   }
   &handler := &null
   return \x
end

procedure print(s, e)
   local o
   writes(@s, ": ")
   if o := @e then
      write(imagex(o))
   else
      write("Failed")
   return o
end

procedure pr_type(s, e)
   local o
   writes(@s, ": ")
   if o := @e then
      write(type(o))
   else
      write("Failed")
   return o
end

procedure pr_seq_type(s, e)
   local x, t
   writes(@s, ": {")
   x := set()
   while insert(x, type(@e))
   t := ""
   every writes(t, !sort(x)) do
      t := ", "
   write("}")
end

procedure pr_seq_type2(s, e)
   local x, t
   &why := ""
   writes(@s, ": {")
   x := set()
   while insert(x, type(@e))
   t := ""
   every writes(t, !sort(x)) do
      t := ", "
   if *&why > 0 then
      write("} &why=", image(&why))
   else
      write("}")
end

procedure require(s, e)
   return @e | stop(s)
end

procedure cmp_seq(s, e1, e2)
   local x1
   writes(@s, ": ")
   while x1 := @e1 do {
      unless x1 === @e2 then {
         write("different")
         fail
      }
   }
   if @e2 then {
      write("different")
      fail
   } else {
      write("same")
      return
   }
end

procedure init_serial()
   local e
   repeat {
      e := create {}
      if serial(e) = 100 then break
   }
   repeat {
      e := []
      if serial(e) = 100 then break
   }
end

global seed

# random number generator
procedure rand(i)
   static a, c, f

   initial {
      /seed := 0
      a := 1103515245
      c := 453816694
      f := 4.65661286e-10
      }

   case type(i) of {
      "list" | "record" | "string" | "ucs" | "cset": 
         return i[rand(0 < *i)]
      "table" | "set" :
         return Index{ !i, rand(0 < *i) }
      default: {
         i := need_integer(i, 0)
         seed := iand(a * seed + c, 16r7fffffff)
         return if i = 0 then f * seed else integer(i * f * seed) + 1
      }
   }
end
