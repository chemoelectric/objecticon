#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import graphics, io, ipl.pdco

#
# Helper class to wrap an X11 display connection file descriptor.
#
package class EventStream(DescStream)
   public new(fd)
      setup(fd, 0)
      return
   end
end

#
#
# This class handles Icon events, dispatching them to
# the appropriate dialog.  It also controls any active Tasks,
# activating them between events as and when appropriate.
#
final abstract class Dispatcher()
   public static const 
      dialogs,
      scheduler

   private static
      poll_list,
      poll_task

   private static const
      BLOCKED_ALLOW,
      BLOCKED_QUIET,
      REPEATING

   private static init()
      BLOCKED_ALLOW := Selection.EVENTS ++ set(Window.INVOKE_LATER, Window.FOCUS_IN, Window.FOCUS_OUT,
                                               Window.RESIZE, Window.STATE, Window.MOVE)
      BLOCKED_QUIET := set(Mouse.RELEASE, Mouse.MOVEMENT) ++ Mouse.CROSSING
      REPEATING := Mouse.DRAG_OR_MOVEMENT ++ set(Window.RESIZE, Window.STATE, Window.MOVE)
      dialogs := set()
      scheduler := Scheduler(Gui.IDLE_SLEEP)
      poll_task := new_task{ poller() }
      poll_list := []
   end
   
   private static poller()
      repeat
         poll_task.poll(poll_list)
   end

   private static setup_poll_task()
      if (*poll_list = 0) | (scheduler.poll_timeout = 0) then
         poll_task.stop()
      else
         poll_task.start().notify()
   end

   private static setup_poll_list()
      local fd
      poll_list := ipl.pdco.List{ (fd := Unique{ (!dialogs).cbwin.get_fd() },
                                   EventStream(fd) | Poll.IN) }
      setup_poll_task()
   end

   #
   # Indicate whether the `Dispatcher`'s `Scheduler` should use a poll
   # timeout or not. `fl` is a flag value, with `&yes` indicating a
   # timeout should be used (the default initial setting).  If a poll
   # timeout is not used, then `work()` will never sleep.
   #
   public static use_poll_timeout(fl)
      scheduler.set_poll_timeout(if /fl then 0 else Gui.IDLE_SLEEP)
      setup_poll_task()
      link
   end

   #
   # Add a dialog
   #
   public static add_dialog(d)
      insert(dialogs, d)
      setup_poll_list()
      link
   end

   #
   # Delete a dialog
   #
   public static remove_dialog(d)
      delete(dialogs, d)
      setup_poll_list()
      link
   end

   #
   # Try to do some work, succeeding if something was done, failing if it wasn't.
   #
   public static work()
      return do_event() | do_validate() | do_scheduler()
   end

   #
   # Loop until dialog r is closed processing events and `Task`s.  If r
   # is omitted, then loop until there are no open dialogs.
   #
   public static message_loop(r)
      if /r then {
         while *dialogs > 0 do
            work_or_sleep()
      } else {
         while \r.win do
            work_or_sleep()
      }
      link
   end

   #
   # This is similar to the normal `message_loop` method, but instead
   # of returning only when there are no dialogs open, this method
   # will also return when it first finds it has no work to do,
   # allowing the caller to undertake some activity before calling it
   # again.  When using this method, it is best to configure the
   # `Dispatcher`'s scheduler so that it does not sleep in poll, (with
   # `use_poll_timeout`(&no)).  This prevents `work` from ever
   # sleeping.
   #
   public static service(r)
      if /r then {
         while *dialogs > 0 &
            work()
      } else {
         while \r.win &
            work()
      }
      link
   end

   #
   # A further variant of the message loop which never returns.  Even
   # when there are no dialogs open, `Task`s continue to be activated.
   #
   public static message_loop_forever()
      repeat
         work_or_sleep()
   end

   #
   # Convenient method to call work(), and if no work is done, to
   # sleep for the idle period, possibly adjusted downwards to account
   # for any sleeping or polling `Task`s.
   #
   public static work_or_sleep()
      work() | delay(scheduler.calc_sleep(Gui.IDLE_SLEEP))
      link
   end

   public static do_event()
      local d, bag, e, v
      every d := !dialogs do {
         if e := d.win.peek() then {
            /bag := []
            if /d.is_blocked_flag then
               put(bag, d)
            else {
               # Consume all blocked events, or until a BLOCKED_ALLOW
               # event is encountered.
               repeat {
                  if member(BLOCKED_ALLOW, e) then {
                     put(bag, d)
                     break
                  }
                  # Discard and maybe beep in the window.
                  member(BLOCKED_QUIET, e) | d.win.alert()
                  d.win.event()
                  e := d.win.peek() | break
               }
            }
         }
      }
      if d := ?\bag then {
         v := d.win.event()
         # Discard unwanted repeating events.
         if member(REPEATING, v[1]) then {
            while d.win.peek() === v[1] do
               v := d.win.event()
         }
         d.process_event(v)
         return
      }
   end

   public static do_validate()
      local d, bag
      every d := !dialogs do {
         if d.needs_validate() then {
            /bag := []
            put(bag, d)
         }
      }
      if d := ?\bag then {
         d.validate()
         return
      }
   end

   public static do_scheduler()
      return scheduler.work()
   end

   #
   # Return a list of unblocked dialogs.
   #
   public static list_unblocked()
      local d, res

      res := []
      every d := !dialogs do
         if /d.is_blocked_flag then
            put(res, d)

      return res
   end

   #
   # Generate any (unblocked) dialogs which are instances of
   # the given class.  If the parameter is omitted, all unblocked
   # dialogs are generated.
   #
   public static find_dialog(cl)
      local d
      every d := !dialogs do {
         if /d.is_blocked_flag & 
            (/cl | is(d, cl)) then
             suspend d
      }
   end

   #
   # Helpful method to create a new `Task` using the `Dispatcher`'s
   # `Scheduler`.
   #
   public static new_task(e, v)
      return Task(scheduler, e, v)
   end

   #
   # Return the `Scheduler`'s current task (if any).
   #
   public static get_curr_task()
      return \scheduler.curr_task
   end
end
