#
# $Id: sets.icn 3945 2013-02-22 20:36:44Z r.parlett $
#

package datastruct

import lang, util, ipl.pdco-(List)

#
# This is a common superclass for a list-like data structure.
#
# A subclass must implement different optional methods depending on
# its capability mode, as follows :-
#
#  * `INSERT` - `insert()`
#  * `DELETE` - `delete()`
#
# There are several other abstract methods which all classes must of
# course implement; see also `ListImpl1` and `ListImpl2`.
#
abstract class List(HasMode, ObjectOutput, ObjectHash, ObjectEquals)
   public static const
      # An empty list instance
      EMPTY_LIST,
      # Constant indicating modifiable capability
      MODIFY,
      # Constant indicating insert capability
      INSERT,
      # Constant indicating delete capability
      DELETE

   private static init()
      EMPTY_LIST := EmptyList()
      MODIFY := 1
      INSERT := 2
      DELETE := 4
   end

   #
   # Insert a new element `x` at position `i`.  Fails if `i` is
   # invalid; otherwise succeeds and returns `self`.  Only implemented
   # with INSERT capability.
   #
   public optional insert(i, x)
   
   #
   # Delete element at position `i` from the list.  Fails if `i` is
   # invalid; otherwise succeeds and returns `self`.  Only implemented
   # with DELETE capability.
   #
   public optional delete(i)

   #
   # Return the member at position `i`.  If the list has MODIFY
   # capability, a variable is returned, otherwise a value is
   # returned.
   #
   public abstract at(i)

   #
   # Remove and return an element from the left end of list.
   #
   public get()
      return 1(.at(1), delete(1))
   end

   #
   # Remove and return an element from the right end of the list.
   #
   public pull()
      return 1(.at(-1), delete(-1))
   end

   #
   # Push an element onto the left end of the list.
   #
   public push(x)
      return insert(1, x)
   end

   #
   # Push an element onto the right end of the list.
   #
   public put(x)
      return insert(0, x)
   end

   #
   # Generate the members.  If the list has MODIFY capability,
   # variables are generated, otherwise values are generated.
   #
   public gen()
      suspend gen_from(1)
   end

   #
   # Generate the members, starting with the element at index `i`.
   # If the list has MODIFY capability, variables are generated,
   # otherwise values are generated.
   #
   public abstract gen_from(i)

   #
   # Generate the members in reverse order.  If the list has MODIFY
   # capability, variables are generated, otherwise values are
   # generated.
   #
   public back()
      suspend back_from(0)
   end

   #
   # Generate the members in reverse order, starting with the element
   # before index `i` (thus generating the elements in the range 1:i).
   # If the list has MODIFY capability, variables are generated,
   # otherwise values are generated.
   #
   public abstract back_from(i)

   #
   # Return the size of the list.
   #
   public abstract size()

   #
   # Clear the list of all elements. Always succeeds and returns
   # `self`.  Only implemented with DELETE capability.
   #
   public clear()
      while delete(1)
      link
   end

   #
   # Generate the indices i such that at(i) === x
   #
   public keyof(x)
      suspend Positions{ gen(), x }
   end

   #
   # Return an icon list of the elements.
   #
   public list()
      return ipl.pdco.List{ gen() }
   end

   #
   # Return an icon list of the elements in the range i:j
   #
   public slice(i, j)
      local s
      s := cvslice(i, j, size()) | fail
      return ipl.pdco.List{ gen_from(s.lo) \ (s.hi - s.lo) }
   end

   #
   # Succeed iff the size is zero.
   #
   public empty()
      succeed size() = 0
   end

   #
   # Return a random value (cf ?l for a list).  If the list has MODIFY
   # capability, a variable is returned, otherwise a value is
   # returned.
   #
   public random()
      return at(?(0 < size()))
   end

   #
   # Custom equals mirrors the `equals()` behaviour for builtin lists.
   #
   private override object_equals(other, seen)
      local e, x
      other.size() = size() | fail
      e := create other.gen()
      every x := gen() do
         equals(x, @e, seen) | fail
      return not @e
   end

   #
   # Custom hash mirrors the `hash()` behaviour for builtin lists.
   #
   private override object_hash(depth)
      local n, i
      n := size()
      if depth > 1 then
         every i := hash(gen() \ 10, depth - 1) do
            n := 37 * iand(n, 16rffffff)  + i
      return n
   end

   #
   # Output object
   #
   private override object_output(oo)
      local e, sep
      if oo.simple{gen()} then {
         oo.object_start(self)
         every e := gen() do {
            if \sep then
               oo.writes1(",")
            oo.traverse(e)
            sep := &yes
         }
         oo.object_end(self)
      } else {
         oo.nl().
            object_start(self).
            iplus()
         every e := gen() do {
            if \sep then
               oo.writes1(",")
            oo.nl().
               traverse(e)
            sep := &yes
         }
         oo.iminus().
            nl().
            object_end(self)
      }
   end
end

#
# A helpful abstract class for a list, which wishes to implement the
# generator methods (`gen_from()` and `back_from()`) in terms of
# `at()`.
#
abstract class ListImpl1(List)
   public override gen_from(i)
      i := cvpos_item(i, size()) | fail
      repeat {
         suspend at(i)
         if i < size() then
            i +:= 1
         else
            fail
      }
   end

   public override back_from(i)
      i := need_integer(i)
      i := cvpos_item(i - 1, size()) | fail
      while i > 0 do {
         suspend at(i)
         i := min(i - 1, size())
      }
   end
end

#
# A helpful abstract class for a list which wishes to implement `at()`
# in terms of `gen()`.
#
abstract class ListImpl2(List)
   public override at(i)
      return Index{ gen(), cvpos_item(i, size()) }
   end
end

#
# This list wraps another list to provide an unmodifiable view of it.
#
class UnmodifiableList(List)
   protected const
      l

   public override at(i)
      return .l.at(i)
   end

   public override gen_from(i)
      suspend .l.gen_from(i)
   end

   public override back_from(i)
      suspend .l.back_from(i)
   end

   public override size()
      return l.size()
   end

   public override random()
      return .l.random()
   end

   public override get_mode()
      return 0
   end

   public new(l)
      self.l := need_instance(l, List)
      return
   end
end

#
# A `List` that is just a wrapper around a builtin list
#
class BuiltinList(ListImpl1)
   private const
      l

   public override insert(i, x)
      link default.insert(l, i, x)
   end

   public override delete(i)
      link default.delete(l, i)
   end

   public override at(i)
      return l[i]
   end

   public override get()
      return default.get(l)
   end

   public override pull()
      return default.pull(l)
   end

   public override push(x)
      default.push(l, x)
      link
   end

   public override put(x)
      default.put(l, x)
      link
   end

   public override keyof(x)
      suspend default.keyof(l, x)
   end

   public override gen()
      suspend !l
   end

   public override back()
      suspend default.back(l)
   end

   public override slice(i, j)
      return l[i:j]
   end

   public override size()
      return *l
   end

   public override random()
      return ?l
   end

   public override clear()
      default.clear(l)
      link
   end

   public override get_mode()
      return MODIFY + INSERT + DELETE
   end

   public new(l)
      self.l := need_list(\l) | []
      return
   end
end

#
# An empty list.  An instance of this class is `List.EMPTY_LIST`.
#
class EmptyList(ListImpl1)
   public override at(i)
   end

   public override size()
      return 0
   end

   public override get_mode()
      return 0
   end
end

#
# A node in a `LinkedList`.
#
package class LinkedListNode()
   public
      nxt, val

   public new(nxt, val)
      self.nxt := nxt
      self.val := val
      return
   end
end

#
# A `List` implementation based on a simple linked list.  Note some of
# the operations which suspend values may behave differently from the
# builtin list if the list is concurrently modified.
#
class LinkedList(List)
   private
      nhead

   public override insert(i, x)
      local n
      i := need_integer(i)
      if i <= 0 then
         i := cvpos(i, size()) | fail
      if i = 1 then
         nhead := LinkedListNode(nhead, x)
      else {
         n := node(i - 1) | fail
         n.nxt := LinkedListNode(n.nxt, x)
      }
      link
   end

   public override delete(i)
      local n
      i := need_integer(i)
      if i <= 0 then
         i := cvpos_item(i, size()) | fail
      if i = 1 then
         nhead := (\nhead).nxt | fail
      else {
         n := node(i - 1) | fail
         n.nxt := (\n.nxt).nxt | fail
      }
      link
   end

   public override at(i)
      return node(i).val
   end

   public override empty()
      return /nhead
   end

   public override pull()
      local v, n
      \nhead | fail
      if /nhead.nxt then {
         v := nhead.val
         nhead := &null
      } else {
         n := nhead
         while \n.nxt.nxt do
            n := n.nxt
         v := n.nxt.val
         n.nxt := &null
      }
      return v
   end

   public override gen_from(i)
      local n
      n := node(i) | fail
      repeat {
         suspend n.val
         n := \n.nxt | fail
      }
   end

   public override back_from(i)
      local n
      i := need_integer(i)
      n := node(i - 1) | fail
      repeat {
         suspend n.val
         n := before(n) | fail
      }
   end

   private before(n)
      local t
      t := nhead
      while \t do {
         if t.nxt === n then
            return t
         t := t.nxt
      }
   end

   public override size()
      return Length{ gen() }
   end

   public override clear()
      nhead := &null
      link
   end

   public override get_mode()
      return MODIFY + INSERT + DELETE
   end

   #
   # Return the head value of the list, or fail if the list is empty.
   #
   public head()
      return (\nhead).val
   end

   #
   # Set the head of the list (ie its first value), or fail if this
   # list is empty.
   #
   public set_head(x)
      link ((\nhead).val := x)
   end

   #
   # Return the tail of the list, or fail if the list is empty.
   #
   public tail()
      return from_node((\nhead).nxt)
   end

   #
   # Set the tail of the list to share the elements of the list
   # `other`, or fail if this list is empty.
   #
   public set_tail(other)
      need_instance(other, LinkedList)
      link ((\nhead).nxt := other.nhead)
   end

   #
   # Set the tail of the list to the empty list (leaving just one
   # element), or fail if this list is empty.
   #
   public clear_tail()
      link ((\nhead).nxt := &null)
   end

   #
   # Set this list to share the same elements as `other`.
   #
   public set_list(other)
      need_instance(other, LinkedList)
      nhead := other.nhead
      link
   end

   #
   # Return a new list which shares the elements of this list from
   # (and including) element `i`.
   #
   public from(i)
      return from_node(node(i))
   end

   #
   # Succeed iff this list shares the same elements as list `other`.
   #
   public same(other)
      succeed nhead === other.nhead
   end

   #
   # Return the node containing element `i`, or fail if `i` is out of
   # range.
   #
   private node(i)
      local n
      i := need_integer(i)
      if i <= 0 then
         i := cvpos_item(i, size()) | fail
      n := nhead
      while \n & i > 1 do {
         n := n.nxt
         i -:= 1
      }
      return \n
   end

   #
   # Create an instance given a `LinkedListNode` as the list's head node.
   #
   private static from_node(n)
      local i
      i := Class.create_instance()
      i.nhead := n
      return i
   end

   #
   # Create an instance and add each of the given entries.
   #
   public new(entries[])
      every nhead := LinkedListNode(nhead, default.back(entries))
      return
   end
end

#
# A node in a `DoublyLinkedList`.
#
class DoublyLinkedListNode()
   package
      nxt,        # The next node, or &null if this node was unlinked.
      prev        # The previous node, or &null if this node was unlinked.
   public
      val         # The value associated with this node.

   #
   # Create and insert a new node immediately before this node, with
   # value `x`.  The new node is returned.
   #
   public insert_before(x)
      need_linked()
      prev.nxt := prev := DoublyLinkedListNode(prev, self, x)
      return .prev
   end

   #
   # Create and insert a new node immediately after this node, with
   # value `x`.  The new node is returned.
   #
   public insert_after(x)
      need_linked()
      return nxt.insert_before(x)
   end

   #
   # Given a `DoublyLinkedList`, adopt all of its nodes into this
   # list, inserting them before this node.  Afterwards, `other` will
   # be empty.
   #
   public splice_before(other)
      need_linked()
      need_instance(other, DoublyLinkedList)
      unless other.empty() then {
         prev.nxt := other.sentinel.nxt
         other.sentinel.nxt.prev := prev
         prev := other.sentinel.prev
         other.sentinel.prev.nxt := self
         other.clear()
      }
      link
   end

   #
   # Given a `DoublyLinkedList`, adopt all of its nodes into this
   # list, inserting them after this node.  Afterwards, `other` will
   # be empty.
   #
   public splice_after(other)
      need_linked()
      nxt.splice_before(other)
      link
   end

   #
   # Remove this node from its list, by unlinking it from its adjacent
   # nodes.
   #
   # After a node has been unlinked it cannot be used for further
   # insert, unlink, or splice operations, and any attempt to do so
   # will cause a runtime error.  (See also `is_linked`).
   #
   # Example :-
   # ~
   #   l := DoublyLinkedList(99)
   #   r := l.node(1)
   #   r.unlink()
   #   # l is now empty, r unlinked.
   #   r.insert_after(100)      # runtime error
   # ~
   #
   public unlink()
      need_linked()
      prev.nxt := nxt
      nxt.prev := prev
      prev := nxt := &null
      link
   end

   #
   # Check if this node is "linked" (hasn't been unlinked), signalling
   # a runtime error otherwise.
   #
   public need_linked()
      is_linked() | runerr("Node has been unlinked", self)
      link
   end

   #
   # Succeed iff this node is "linked" (meaning it hasn't been
   # unlinked).
   #
   public is_linked()
      succeed \prev
   end

   #
   # Return the previous node, or fail if there is none.
   #
   public get_prev()
      unless is(prev, DoublyLinkedListSentinel) then
         return .\prev
   end

   #
   # Return the next node, or fail if there is none.
   #
   public get_next()
      unless is(nxt, DoublyLinkedListSentinel) then
         return .\nxt
   end

   #
   # Generate this node and all subsequent nodes.
   #
   public gen()
      local n
      n := self
      repeat {
         suspend n
         n := n.get_next() | fail
      }
   end

   #
   # Generate this node and all previous nodes.
   #
   public back()
      local n
      n := self
      repeat {
         suspend n
         n := n.get_prev() | fail
      }
   end

   #
   # Move along the list `i` places; positive means towards the tail,
   # negative means towards the head.  Returns the node at that
   # position, or fail if either end of the list is encountered.
   #
   public move(i)
      local n
      i := need_integer(i)
      n := self
      if i > 0 then {
         every 1 to i do
            n := n.get_next() | fail
      } else {
         every 1 to -i do
            n := n.get_prev() | fail
      }
      return n
   end

   #
   # This method combines a `move` and a `unlink`.  First, `move(i)`
   # is performed, and the result is noted.  Then the `unlink` is
   # peformed.  The result of the `move` is returned; if the `move`
   # failed, then this method fails, but the `unlink` is carried out
   # regardless.
   #
   # This gives a convenient way to iterate over the list and unlink
   # selected nodes.
   #
   # Examples :-
   # ~
   #   l := DoublyLinkedList(10,20,30,40,50,60,70)
   #   r := l.node(4)
   #   r.val     # 40
   #   r := r.move_unlink(1) # move 1 right, then unlink
   #   # Now l is (10,20,30,50,60,70)
   #   r.val     # 50
   #
   #   l := DoublyLinkedList(3,10,20,3,3,30,3,40,50,60,70,3)
   #   # Delete all the 3's from the list.
   #   r := l.node(1)
   #   while r := if r.val = 3 then r.move_unlink(1) else r.move(1)
   #   # Now l is (10,20,30,40,50,60,70)
   # ~
   #
   public move_unlink(i)
      local t
      t := move(i)
      unlink()
      return \t
   end

   package new(prev, nxt, val)
      self.prev := prev
      self.nxt := nxt
      self.val := val
      return
   end
end

package class DoublyLinkedListSentinel(DoublyLinkedListNode)
end

#
# A `List` implementation based on a doubly linked list.  Note some of
# the operations which suspend values may behave differently from the
# builtin list if the list is concurrently modified.
#
class DoublyLinkedList(List)
   package const
      sentinel

   public override insert(i, x)
      link new_node(i, x)
   end

   #
   # This is like `insert()`, but returns the new node that has been
   # inserted.
   #
   public new_node(i, x)
      link node_after(i).insert_before(x)
   end

   public override empty()
      succeed sentinel.nxt === sentinel
   end

   public override clear()
      sentinel.nxt := sentinel.prev := sentinel
      link
   end

   #
   # Insert the contents of another `DoublyLinkedList` at position
   # `i`.  Afterwards, `other` is empty.  It is not permissible to
   # splice a list into itself.
   #
   # Example :-
   # ~
   #   l := DoublyLinkedList(10,20,30,40)
   #   m := DoublyLinkedList(96,97,98) 
   #   l.splice(3, m)
   #   # Now l is (10,20,96,97,98,30,40)
   #   # and m is empty.
   # ~
   #
   public splice(i, other)
      link node_after(i).splice_before(other)
   end

   public override delete(i)
      link node(i).unlink()
   end

   public override at(i)
      return node(i).val
   end

   public override size()
      return Length{ node(1).gen() }
   end

   public override gen_from(i)
      suspend node(i).gen().val
   end

   public override back_from(i)
      suspend node(i - 1).back().val
   end

   #
   # Given a (positive) index i and a known list size, adjust i to an
   # equivalent negative index, if that would make lookup using
   # `node()` faster.
   #
   public static adjust_index(i, sz)
     if i > sz / 2 then
         i +:= -sz - 1
      return i
   end

   #
   # Remove the elements in the range `i:j` and return them as another
   # `DoublyLinkedList` instance.
   #
   # Example :-
   # ~
   #   l := DoublyLinkedList(10,20,30,40,50,60,70)
   #   m := l.extract(2, 5)
   #   # Now l is (10,50,60,70)
   #   # and m is (20,30,40)
   # ~
   #
   public extract(i, j)
      local s, sz
      s := cvslice(i, j, sz := size()) | fail
      return if s.hi = s.lo then
         DoublyLinkedList()
      else
         from_nodes(node(adjust_index(s.lo, sz)),
                    node(adjust_index(s.hi - 1, sz)))
   end

   #
   # Return the list index position of the given node, or fail if it
   # is not in the list.
   #
   public node_index(n)
      need_node(n)
      return Positions{ node(1).gen(), n }
   end

   #
   # Return the list index position of the given node, counting
   # downwards from the tail (index -1), or fail if it is not in the
   # list.
   #
   public rev_node_index(n)
      need_node(n)
      return -Positions{ node(-1).back(), n }
   end

   #
   # Check that `x` is a "linked" `DoublyLinkedListNode` instance,
   # signalling a runtime error otherwise.
   #
   public static need_node(x)
      return need_instance(x, DoublyLinkedListNode).need_linked()
   end

   #
   # Check nodes `h` forward to `t` form a sub-list, signalling a
   # runtime error otherwise.
   #
   public static need_sublist(h, t)
      need_node(h)
      need_node(t)
      unless h.gen() === t then
         runerr("Nodes don't form a sublist")
      return
   end

   #
   # Given two nodes `h` and `t`, forming a sub-list with `h` equal to
   # or coming before `t`, extract that sub-list from its current list
   # and return it as a new `DoublyLinkedList`, with `h` and `t`
   # forming the new list's head and tail node respectively.
   #
   public static extract_nodes(h, t)
      need_sublist(h, t)
      return from_nodes(h, t)
   end

   #
   # This is like `extract_nodes`, but foregoes any check of the
   # mentioned sub-list requirement, and is thus a constant-time
   # operation.
   #
   # Cautionary note: if the sub-list requirement is not satisifed,
   # then corrupted lists will result.
   #
   public static unsafe_extract_nodes(h, t)
      return from_nodes(need_node(h), need_node(t))
   end

   private static from_nodes(h, t)
      local i
      i := Class.create_raw_instance()
      h.prev.nxt := t.nxt
      t.nxt.prev := h.prev
      i.sentinel := DoublyLinkedListSentinel(t, h)
      t.nxt := h.prev := i.sentinel
      return Class.complete_raw_instance(i)
   end

   public override get_mode()
      return MODIFY + INSERT + DELETE
   end

   private node_after(i)
      i := need_integer(i)
      return if i = 0 | (i = 1 & empty()) then
         sentinel
      else
         node(i)
   end

   #
   # Return the node containing element `i`, or fail if `i` is out of
   # range.
   #
   public node(i)
      return sentinel ~=== sentinel.move(i)
   end

   #
   # Create an instance and add each of the given entries.
   #
   public new(entries[])
      sentinel := DoublyLinkedListSentinel()
      clear()
      every insert(1, default.back(entries))
      return
   end
end

# A convenient equivalent to wrapping a BuiltinList in an
# UnmodifiableList.
#
class UnmodifiableBuiltinList(ListImpl1)
   private const
      l

   public override at(i)
      return .l[i]
   end

   public override keyof(x)
      suspend default.keyof(l, x)
   end

   public override gen()
      suspend .!l
   end

   public override back()
      suspend .default.back(l)
   end

   public override slice(i, j)
      return l[i:j]
   end

   public override size()
      return *l
   end

   public override random()
      return .?l
   end

   public override get_mode()
      return 0
   end

   public new(l)
      self.l := need_list(l)
      return
   end
end

#
# This class provides a view of a sublist of another `List`.  No data is
# stored directly in this list.
#
# The indices specified in the constructor use Icon list slice
# semantics, and may be zero or negative.  The indices remain
# constant, and the actual range into the underlying list is
# calculated dynamically.  Should this become out-of-range, then the
# sub-list's size is zero, and insert and delete operations fail.
#
# Example :-
# ~
#   ll := LinkedList(1,2,3,4,5)
#   # A view of the elements 3:0 of ll (3, 4, 5)
#   s := SubList(ll, 3, 0)
#   # After this s is (3, 4, 5, 99); note how the length is now 4.
#   s.put(99)
# ~
#
class SubList(List)
   private const other, lo, hi

   public override insert(i, x)
      local s
      s := cvslice() | fail
      i := cvpos(i, s.hi - s.lo) | fail
      link other.insert(i + s.lo - 1, x)
   end

   public override delete(i)
      local s
      s := cvslice() | fail
      i := cvpos_item(i, s.hi - s.lo) | fail
      link other.delete(i + s.lo - 1)
   end

   public override at(i)
      local s
      s := cvslice() | fail
      i := cvpos_item(i, s.hi - s.lo) | fail
      return other.at(i + s.lo - 1)
   end

   public override size()
      local s
      return if s := cvslice() then
         s.hi - s.lo
      else
         0
   end

   public override gen_from(i)
      local s
      s := cvslice() | fail
      i := cvpos_item(i, s.hi - s.lo) | fail
      i +:= s.lo - 1
      suspend other.gen_from(i) \ (s.hi - i)
   end

   public override back_from(i)
      local s
      s := cvslice() | fail
      i := cvpos(i, s.hi - s.lo) | fail
      i +:= s.lo - 1
      suspend other.back_from(i) \ (i - s.lo)
   end

   private cvslice()
      return util.cvslice(lo, hi, other.size())
   end

   public override get_mode()
      return other.mode()
   end

   #
   # Create a new instance using `other` as the underlying list, and
   # `lo` and `hi` as the slice to view.
   #
   public new(other, lo, hi)
      self.other := need_instance(other, List)
      self.lo := need_integer(lo)
      self.hi := need_integer(hi)
      return
   end
end
