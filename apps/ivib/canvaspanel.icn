#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui


############################################################################
#
# Class for representing a Panel on the canvas.
#
class CanvasPanel(CanvasComponent,Panel)
   #
   # Generate code into Code object c.
   #
   public override gen_code(c)
      every (!self.children).gen_code(c)
      CanvasComponent.gen_code(c)
      every c.chain("add(" || (!self.children).name || ")")
   end

   #
   # Duplicate object.
   #
   public override dup(pc)
      local c
      c := CanvasPanel()
      CanvasComponent.dup_fields(c)
      every c.add((!self.children).dup())
      return c
   end

   #
   # Return the I/O template.
   #
   public override get_template()
      suspend CanvasComponent.get_template() | ["Children", "children"]
   end

   #
   # Overrides CanvasComponent.is_inside()
   #
   public override is_inside(c)
      local e, o
      if c === self then
         fail
      every e := back(self.z_children) do
         if o := e.is_inside(c) then
            return o
      if (self.x <= c.mx < self.x + self.w) & (self.y <= c.my < self.y + self.h) then
         link
   end

   #
   # Overrides CanvasComponent.which_cursor_over() 
   #
   public override which_cursor_over(e)
      local t, o
      CanvasComponent.which_cursor_over(e) | fail
      if in_resize_region(e) then
         link
      every t := back(self.z_children) do
         if o := t.which_cursor_over(e) then
            return o
      link
   end

   #
   # Open the configuration dialog box.
   #
   public override dialog()
      return CanvasPanelDialog(self)
   end

   public override display()
      if in_preview() then
         Panel.display()
      else {
         center_string(self.cbwin, self.x + self.w / 2, self.y + 10, "<Panel>")
         display_children()
         self.cbwin.draw_rectangle(self.x, self.y, self.w, self.h)
      }
   end

   public override allows_add()
      return 1
   end

   public override gen_cos()
      suspend CanvasComponent.gen_cos() | !self.children
   end

   public override new()
      Panel.new()
      CanvasComponent.new()
      self.set_show_layout(&yes)
      self.class_name := "Panel"
      self.import_name := "gui"
      self.name := "panel"
      return
   end
end

