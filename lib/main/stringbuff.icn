#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package util

import io

#
# This class is a way around Icon's inefficiency in concatenating long
# strings.  It creates a list of strings which it then concatenates all at
# once in a loop which takes advantage of an Icon optimization.
#
# It also functions as an output-only {Stream}.
#
class StringBuff(Stream)
   private 
      buff

   #
   # Add the string to the buffer list.
   #
   public add(s)
      put(buff, s)
   end

   public out(s)
      put(buff, s)
      return *s
   end

   public writes(a[])
      every put(buff, !a)
      return
   end

   public truncate(len)
      local s
      s := get_string()
      if len > *s then
         s ||:= repl("\0", len - *s)
      else
         s := s[1:len + 1]
      buff := [s]
      return
   end

   public get_mode()
      return "wt"
   end

   public close()
      return
   end

   #
   # Get the string catenation of the strings in the buffer.
   # @param sep  A separator to add between the strings (default is the empty
   # @           string.
   #
   public get_string(sep)
      local s
      s := ""
      /sep := ""
      every s ||:= !buff || sep
      return s
   end

   #
   # Discard the last element of the buffer if it equals the given string.
   #
   public drop_last(s)
      if buff[-1] == s then
         pull(buff)
   end

   public new()
      buff := []
      return
   end
end

      

