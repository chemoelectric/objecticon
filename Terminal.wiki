#summary terminal - an experimental terminal program

= terminal =
This page provides some notes about one of the programs in the `examples` directory, namely `terminal`.  It is an experimental replacement for terminal emulator programs like `xterm` and `konsole`.  It also has some features found in file manager programs like `dolphin` and `nautilus`.

= Toolbar =
The various items in the toolbar should be mostly self-explanatory.

http://objecticon.googlecode.com/svn/wiki/terminal-toolbar.png

Going from left to right, we have the close tab button, the goto home directory button, go up one level button and refresh directory button.

Then comes buttons to go backward and forward in the history, and to display the history as a drop-down list (the egg timer icon).

Next is the "columns focus" button, which is a toggle button.  When set, it allows the list to take the keyboard focus.  The cursor keys can then be used to navigate, and the return key used to "open" the currently selected item (equivalent to left-clicking).

The drop-down edit list is a filter, which restricts the files on view in the list.  The contents of the drop-down provides a convenient list of file extensions in the current directory.  The filter resets to "*" (display all) whenever the directory is changed.

The three buttons to the right of the filter drop-down are used to control the sort used in the list, which is by default alphabetic in descending order.  The small arrow in the corner of the button indicates which sort is in use, and whether it is ascending or descending.  Clicking on the button with the arrow toggles the order between ascending and descending, whilst clicking on one of the other buttons sets the sort to the corresponding button, leaving the order unchanged.

Next to the sort buttons comes the favourites button.  This is a list of directories, which can be edited via the "Favourite dirs..." item in the File menu.

Finally, to the right of that comes the file trail.  This shows the current directory.  Clicking on one of the file names in the trail changes the directory.  Also, clicking on one of the slash separators pops up the list of directories for that location.  Selecting from one goes to that directory.  The following image shows that in action :-

http://objecticon.googlecode.com/svn/wiki/terminal-trail.png

= Escape sequences =
There are two special escape sequences recognised by the terminal, as follows.
== The link escape sequence ==
This takes the form
{{{
\e[!"url"Lvisible-text\e[!L
}}}
where `\e` is the escape character (ascii 27), `url` is a URL, (with the normal percent encoding), and `visible-text` is the text which appears on the screen to represent the clickable URL.  In fact, the above actually represents two separate escape sequences; the second comes after the `visible-text`, in order to denote its endpoint.  If you're familiar with HTML, then you will see the similarity with an anchor tag.  The first escape sequence mirrors the opening `<A HREF=URL>` tag, the second is the counterpart of the closing `</A>` tag, and the text in between fulfils the same role as `visible-text`.

Most URLs in these escape sequences will be `file` URLs, but as explained below, other types of URLs, including custom ones, are allowed too.  These can be particularly useful when they are placed in simple "favourites" files which, when printed to the terminal, provide a selection of clickable links to launch applications, open new tabs, and so on.

Some examples of a link escape sequences are :-
{{{
\e[!"file:///some/file/or/other.txt?line=120"LA file with an associated line number\e[!L
\e[!"http://www.google.com"LA link to google\e[!L
\e[!"launch:konqueror"LOpen konqueror\e[!L
}}}

== The popup escape sequence ==
This escape sequence is used to provide a more friendly and usable name completion system.  The sequence takes the form :-
{{{
\e[!"k1";"i1";"k2";"i2";"k3";"i3",....,"kn","in"P
}}}
In other words, there are `n` pairs of string parameters.  All parameters are URL encoded.  On receipt of this escape sequence, the terminal pops up a list, showing each of the `k` parameters.  When one is selected, its corresponding `i` parameter is sent to the output, as though it had been typed.

Unlike the link escape sequence, this sequence only really makes sense when it is generated by a program.
= The termlinks-extras programs =


= URL schemes =
== file: ==
A file URL has the following syntax :-
{{{
file://[host]/path[?line=line-no]
}}}
If the `path` (which includes the `/` to its left), is a directory then clicking on the link sends a `cd` command to the shell process in order to change its current working directory.

Otherwise, the file associations database is searched to find an application to launch to view the file.  If found, then the application is launched by forking a new process.

The optional `host` element is just used to check whether the URL refers to a file on the host running the terminal program.  If not, then there is no point trying to launch an application for it, and an error message is shown in the message bar.

The `line-no` is passed to the application if its desktop entry file contains an entry `ExecLine=...`, as opposed to the normal `Exec=...`.  The `ExecLine` string may contain an escape sequence `%L` into which the line number is substituted.  Both the `ExecLine` entry and the `%L` escape are entirely non-standard unfortunately, so you must create your own `.desktop` file in order to make use of them.  An example which I use to launch `emacs` is :-
{{{
[Desktop Entry]
Version=1.0
Encoding=UTF-8
Name=GNU Emacs
GenericName=Text Editor
Comment=View and edit files
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;application/json;
Exec=emacs %F
ExecLine=emacs +%L %F
Icon=emacs
Type=Application
Terminal=false
Categories=Utility;Development;TextEditor;
InitialPreference=20
}}}
This is placed in my `~/.local/share/applications` directory.  The effect of launching this desktop entry file with the URL
{{{
file:///home/rparlett/prog.c?line=124
}}}
is then to launch the program
{{{
emacs +124 /home/rparlett/prog.c
}}}
== launch: ==
A launch URL has the following syntax :-
{{{
launch:command-string[?wd=working-dir]
}}}
Both `command-string` and `working-dir` portions are URL encoded.  When clicked, a launch URL forks a new process, sets its current directory to `working-dir` (or the user's home directory if `working-dir` was omitted), and then runs `command-string`, which may include bash shell syntax.

An example of a launch URL is :-
{{{
launch:qemu-system-x86_64 -hda ubuntu.img -m 3G -vga vmware?wd=/mnt/disk/qemu-stuff
}}}
== text: ==
A text URL has the following syntax :-
{{{
text:string
}}}
The `string` is URL encoded.  The effect of clicking on such a link is simply to send the string to the input of the forked shell process.  In other words, the effect is the same as if the string had been typed at the keyboard.

An example might be :-
{{{
text:hello world
}}}
If we were to click on a link with this URL, then "hello world" would be sent to the shell process, which would then echo it back so it appeared on the screen (unless it was running a command at the time).
== run: ==
A text URL has the following syntax :-
{{{
run:command-string
}}}
The `command-string` is URL encoded.  The effect of clicking on such a link is, like a text URL, simply to send the string to the input of the forked shell process, with a carriage return appended, causing the command to be run (unless the shell process is doing something else).

An example :-
{{{
run:ps -a
}}}
Clicking on a link with this URL would run the command "ps -a".

Note that the difference between a launch URL and a run URL is that a launch URL forks a new process which runs independently of the shell, whilst run just sends the command string to the shell for execution as though it had been typed at the keyboard.
== tab: ==
A tab URL enables new tabs to be opened and configured when it is clicked.  It has the following syntax :-
{{{
tab:arg1[;arg2][;arg3]...
}}}
Each "argument" is URL encoded.  Each argument is either a directory name, which opens a new tab with that directory as a starting point, or a string beginning with ":" which configures the tab just opened.  These configuration options are the same as described in the section below on command line options.  An empty string argument just opens a new tab, without setting its directory.  If any configuration options come before a directory argument, then they apply to the currently selected tab.

An example of a tab URL is :-
{{{
tab:/mnt/disk/films;:reorient;:sort-date;:sort-date;:select
}}}

When clicked, this URL opens a new tab, changes its directory to `/mnt/disk/films`, toggles the orientation of the split, sets the sort to ascending date order, and selects the tab.
== Other URL schemes ==
All other URL schemes are handled by looking up the desktop entry matching the mime type `x-scheme-handler/[scheme]`.  The matching application is then launched in a forked process.
= Command line options =
`terminal` accepts the following command-line options :-

 * *-x* The location of the termlinks extras bin directory; by default `termlinks-extras/bin` in your home directory.  This directory is added to the front of the `PATH` variable.
 * *-nx* Don't add any termlinks extras directory to the `PATH`.  The `-x` option is ignored.
 * *-v* Provide some verbose output (useful for debugging).
 * *-h* Set the history scrollback size.
 * *-hs* Start each tab by default with a horizontal rather than a vertical split.
 * *-tfg* The foreground colour of the terminal.
 * *-tbg* The backround colour of the terminal.
 * *-trevfg* The reverse-mode foreground colour of the terminal, by default simply the terminal background.
 * *-trevbg* The reverse-mode background colour of the terminal, by default simply the terminal foreground.
 * *-tfont* The terminal font.  This must be a monospace font.  By default, "fixed" at the default font size.

In addition to these options, one or more tabs can be configured on the command line.  Passing a directory name as an argument will add a new tab with that directory as a starting point.  Passing a string beginning with ":" will configure the tab.  The following configuration options are allowed :-

 * *:minimize* Minimize the space for the terminal, so the files list takes all the space.
 * *:maximize* Maximize the space for the terminal, so the files list is not visible.
 * *:normal-size* Return to normal split between file list and terminal.
 * *:list-focus* Allow keyboard focus in the file list.
 * *:reorient or :re-orient* Toggle the orientation of the file list/terminal split.
 * *:sort-name* Sort the file list by name, or if the file list is already sorted by name, toggle the sort order.
 * *:sort-date* As `sort-name`, but sort by date.
 * *:sort-size* As `sort-name`, but sort by size.
 * *:show-name-only* Show only the name in the file list.
 * *:show-date* Show name and date in the file list.
 * *:show-size* Show name and size in the file list.
 * *:mix-entries* Toggle whether or not to mix directories and files together in the list.
 * *:show-hidden* Toggle whether or not to show hidden files and directories in the list.
 * *:sort-dirs* Toggle whether or not to sort the directory portion of the list in the same way as the files (by default, the directories are always sorted by name).
 * *:select* Make this tab the selected tab.

For example, the following example starts the program with four tabs with various options :-
{{{
terminal ~ \
         ~/objecticon \
         /mnt/disk/Documents :reorient :sort-date :sort-date :mix-entries \
         /mnt/disk/Music :reorient :sort-date :sort-date
}}}

Note how in the last two tabs `:sort-date` is given twice in order to give ascending date sort (ie newest at the top).
