package ipl.lambda

import
   ipl.callable(callable)

global _a, _l

#
# This is a class for making lambda-style functions.  For example:
#   f := Lambda.make{ _a[1] + 100 }
# sets f to be a function returning its first argument plus 100.  Note
# that args are passed to the function via a global variable _a, since
# icon syntax allows no other way.  Further, although the function can
# use any variables in scope, it cannot declare any itself.  To simulate
# local variables, another global, _l, can be used.  It can be set
# to any value.
# 
# Other examples:-
#   # Return the sum of the arguments, eg f(1,2,3) -> 6
#   # - note that _l must be dereferenced, otherwise the caller sees the
#   #   value before the function is called.
#   f := Lambda.make{{ _l := 0; every _l +:= !_a ; ._l }}
#
class Lambda()
   private e

   private f(a[])
      local ta, tl
      ta := _a
      _a := a
      tl := _l
      _l := &null
      suspend 1(!e, _a :=: ta, _l :=: tl) do {
         _a :=: ta
         _l :=: tl
      }
      _a := ta
      _l := tl
   end

   public static make(e)
      return Lambda(e).f
   end

   private new(e)
      self.e := e
      return
   end
end

#
# Shorthand for {Lambda.make}
#
procedure lambda(e)
   return Lambda.make(e)
end

#
# Partial application to function f, prepending l to the arguments.
#
procedure lpartial(f, l[])
   return lambda{f!(l ||| _a)}
end

#
# Partial application to function f, appending l to the arguments.
#
procedure rpartial(f, l[])
   return lambda{f!(_a ||| l)}
end

#
# Compose functions f and g
#
procedure compose(f, g)
   return lambda{f(g!_a)}
end

# Convenient function to get the named binary operator, partially
# applied with x, using lpartial.  For example lpb("*", 2) returns a
# function which doubles its argument.
#
procedure lpb(s, x)
   return lpartial(callable(s, 2), x)
end

# Convenient function to get the named binary operator, partially
# applied with x, using rpartial.  For example rpb("/", 2) returns a
# function which halves its argument.
#
procedure rpb(s, x)
   return rpartial(callable(s, 2), x)
end
