#
# $Id$
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui

import util, graphics

#
# This class implements a Text label.  The default width and 
# height are determined by dimensions of text
#
class Label(Component)
   public 
      linked_accel,
      menu_on_rpress_flag,     # Show context menu on mouse right press event?
      paint

   #
   # Set the label.
   # :Parameters :
   # :  `x` - The label.
   #
   public set_label(x)
      set_paint(paint_for_string(x))
      link
   end

   #
   # Set an image for the label
   # :Parameters :
   # :  `x` - The image to be displayed
   #
   public set_image(x)
      set_paint(ImagePaint().set_image(x))
      link
   end

   public set_paint(p)
      local key
      if is_initialized() then {
         (\self.paint).finally()
         self.paint := p
         key := (\linked_accel).accel
         self.paint.initially(self, key)
         self.invalidate()
      } else
         self.paint := p
      link
   end

   #
   # Link this label to a component; the label will be displayed
   # with the component's accelerator key underlined.
   #
   public set_linked_accel(c)
      self.linked_accel := c
      link
   end

   #
   # Show the context menu on mouse right press?  Note that this
   # assumes that the `paint` is a `TextPaint`; if it is not, then
   # `copy_label()` below should be overridden.
   #
   public set_menu_on_rpress(s)
      self.menu_on_rpress_flag := need_flag(s)
      link
   end

   public override initially()
      local key
      \self.paint | runerr("No label specified")
      Component.initially()
      key := (\linked_accel).accel
      paint.initially(self, key)
   end

   public override finally()
      Component.finally()
      paint.finally()
   end

   public override get_default_width()
      return paint.w + border.get_total_width()
   end

   public override get_default_height()
      return paint.h + border.get_total_height()
   end

   public override display()
      paint.draw_rect(self.cbwin, border.float(self, paint))
      border.draw_rect(self.cbwin, self)
      if self.has_focus() & self.is_unshaded() then
         border.draw_focus_rect(self.cbwin, self)
   end

   public copy_label()
      parent_dialog.own_selection(Selection.CLIPBOARD, StaticTextSelectionOwner(paint.str))
   end

   public create_context_menu(e)
      return Menu().
         add(TextMenuItem().set_label("Copy").connect(copy_label, Event.ACTION))
   end

   public handle_rpress(e)
      local m, pm
      if \menu_on_rpress_flag &
         m := create_context_menu(e) then 
      {
         pm := PopupMenu()
         pm.popup(self, m, e.x, e.y)
      }
   end

   public override new()
      Component.new()
      set_constraint("x_align", Align.L)
      set_border(NullBorder().set_align(Align.L, Align.C))
      connect(self.handle_rpress, Event.MOUSE_RIGHT_PRESS)
      return
   end
end


