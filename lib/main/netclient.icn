#
# $Id$
#

package net

$ifdef _PLAN9
import 
   util, 
   io,
   ipl.scan
$else
import 
   util, 
   io,
   ssl,
   posix,
   ipl.scan
$endif

#
# Common base class for a client class which holds a connection to a
# server and communicates using CRLF-terminated lines.
#
class NetClient(Connectable, HasTask)
   public static const 
      CONNECTING_EVENT,
      CONNECTED_EVENT,
      CLOSED_EVENT,
      WRITING_STRING_EVENT,
      WRITING_LINE_EVENT,
      READ_LINE_EVENT,
      READ_STRING_EVENT
   
   private static init()
      CONNECTING_EVENT := "Connecting"
      CONNECTED_EVENT := "Connected"
      CLOSED_EVENT := "Closed"
      WRITING_STRING_EVENT := "Writing string"
      WRITING_LINE_EVENT := "Writing line"
      READ_LINE_EVENT := "Read line"
      READ_STRING_EVENT := "Read string"
   end

   private readable
      path,
      server,
      port,
      timeout,
      ssl_flag,
      ssl_verify_flag

   private
      connection,
      ssl_connection,
      sbuff

   # 
   # Fail and set the error code, and close the connection.
   #
   protected error_and_close_connection(a)
      error(a)
      close_connection()
   end

   # Set the timeout in ms to use.  If {&null}, then no timeout will
   # be used.
   #
   public set_timeout(timeout)
      self.timeout := timeout
      return self
   end

   private do_poll(for)
      return choose_poll([connection, for], timeout)
   end

$ifdef _PLAN9
   #
   # Open the connection.
   #
   protected open_connection()
      local addr
      close_connection()
      fire(CONNECTING_EVENT)
      if \ssl_flag then
         return error("SSL not supported")
      addr := "tcp!" || server || "!" || port
      connection := NetStream.dial_first(addr, timeout, task) | return error("Couldn't connect to " || addr || ": " || &why)
      connection := NonBlockStream(connection,, 1048576, 1048576).
         set_write_on_close(NonBlockStream.DISCARD) | 
      {
         close_connection()
         return error("Couldn't create NonBlockStream: " || &why)
      }
      sbuff := ""
      fire(CONNECTED_EVENT)
      return self
   end
$else
   private dns_query_impl()
      return SocketStream.dns_query_4(server)
   end

   private dns_bg_query(p)
      local r
      if r := dns_query_impl() then
         p.send(r)
      else
         p.send(&why)
   end

   private dns_query()
      local p, v
      if /task then
         return dns_query_impl()
      p := Process{dns_bg_query(p)}.set_task(task)
      p.start() | fail
      if v := p.poll() then {
         p.close()
         return if type(v) == "list" then
            v
         else
            error(v)
      } else
         # poll() failed, meaning we were interrupted.  We don't want
         # to call close(), which would hang whilst p exited, so we
         # call stop() which kills it first.
         p.stop()
   end

   #
   # Open the connection.
   #
   protected open_connection()
      local r, domain, addr, msg_addr, ip

      close_connection()
      fire(CONNECTING_EVENT)

      if \server then {
         ip := dns_query()[1] | fail
         if upto('.', ip) then {
            domain := ProtocolFormat.INET
            addr := "inet:" || ip || ":" || port
         } else {
            domain := ProtocolFormat.INET6
            addr := "inet6:[" || ip || "]:" || port
         }
         msg_addr := server || " (" || addr || ")"
      } else if \path then {
         domain := ProtocolFormat.UNIX
         msg_addr := addr := "unix:" || path
      } else
         runerr("Neither server/port nor path set")

      connection := SocketStream(domain)
      connection.flag(FileOpt.NONBLOCK) | {
         close_connection()
         return error("Couldn't put socket in non-blocking mode: " || &why)
      }

      connection.connect(addr) | {
         if errno() = Errno.EINPROGRESS then {
            r := do_poll(Poll.OUT) | {
               close_connection()
               return error("Couldn't connect to " || msg_addr || ": " || &why)
            }
            if /r then {
               close_connection()
               return error("Couldn't connect to " || msg_addr || ": timeout")
            }
            DescStream.poll_out_test(r[1]) | {
               close_connection()
               return error("Couldn't connect to " || msg_addr || ": socket error")
            }
         } else {
            close_connection()
            return error("Couldn't connect to " || msg_addr || ": " || &why)
         }
      }
      if \ssl_flag then {
         ssl_connection := SslStream(connection, server) | {
            close_connection()
            return error("Couldn't create SslStream: " || &why)
         }
         until ssl_connection.connect() do {
            ssl_maybe_poll() | {
               close_connection()
               return error("Couldn't perform SSL connection: " || &why)
            }
         }
         if \ssl_verify_flag then {
            ssl_connection.verify() | {
               close_connection()
               return error("Couldn't verify SSL connection: " || &why)
            }
         }
      }

      sbuff := ""
      fire(CONNECTED_EVENT)
      return self
   end
$endif

   # After an error to an ssl function, check if it is because the
   # ssl layer needs to read/write from the underlying connection.
   # If so, poll the connection and return (so the ssl call can be
   # retried); otherwise fail.
   private ssl_maybe_poll()
      local err, r
      # Extract the ssl error no.
      &why ? {
         if tab(past("error:")) then
            err := integer(tab(many(&digits)))
      }
      case err of {
         2 : {  # SSL_ERROR_WANT_READ
            r := do_poll(Poll.IN) | return error("Receive poll failed: " || &why)
            if /r then return error("Receive failed (timeout)")
            DescStream.poll_in_test(r[1]) | return error("Receive failed (socket error)")
            return
         }
         3 : {  # SSL_ERROR_WANT_WRITE 
            r := do_poll(Poll.OUT) | return error("Send poll failed: " || &why)
            if /r then return error("Send failed (timeout)")
            DescStream.poll_out_test(r[1]) | return error("Send failed (socket error)")
            return
         }
      }
   end

   #
   # Close the connection
   #
   protected close_connection()
      local f
      if \ssl_connection then {
         ssl_connection.close() | (f := &why)
         connection.close() | (f := &why)
         ssl_connection := connection := &null
         fire(CLOSED_EVENT)
      } else if \connection then {
         connection.close() | (f := &why)
         connection := &null
         fire(CLOSED_EVENT)
      }
      return if /f then self else error(f)
   end

   public close()
      return close_connection()
   end

   #
   # Set the path to use (implies using PF_UNIX socket domain)
   #
   public set_path(s)
      path := s
      return self
   end

   #
   # Set the server to use (implies using PF_INET socket domain)
   #
   public set_server(s)
      server := s
      return self
   end

   #
   # Set the port
   #
   public set_port(n)
      port := n
      return self
   end

   #
   # Low-level write on the connection. 
   #
   private send(s)
      local i, r
      s := string(s) | runerr(103, s)
      if \ssl_connection then {
         while *s > 0 do {
            if i := ssl_connection.out(s) then
               s := s[i+1 : 0]
            else
               ssl_maybe_poll() | fail
         }
      } else {
         while *s > 0 do {
            r := do_poll(Poll.OUT) | return error("Send poll failed: " || &why)
            if /r then return error("Send failed (timeout)")
            DescStream.poll_out_test(r[1]) | return error("Send failed (socket error)")
            i := connection.out(s) | fail
            s := s[i+1 : 0]
         }
      }
      return self
   end

   #
   # Low-level read on the connection. 
   #
   private recv(len)
      local r, s
      if \ssl_connection then {
         repeat {
            if s := ssl_connection.in(len) then
               return s
            ssl_maybe_poll() | fail
         }
      } else {
         r := do_poll(Poll.IN) | return error("Receive poll failed: " || &why)
         if /r then return error("Receive failed (timeout)")
         DescStream.poll_in_test(r[1]) | return error("Receive failed (socket error)")
         return connection.in(len)
      }
   end

   #
   # Write the given string to the connection.
   #
   protected write_str(s)
      fire(WRITING_STRING_EVENT, s)
      return send(s)
   end

   #
   # Write a single line to the connection, appending CRLF to the output stream.
   # 
   protected write_line(s)
      /s := ""
      fire(WRITING_LINE_EVENT, s)
      return send(s || "\r\n") 
   end

   #
   # Write several lines in one go, but firing separate events for each line.
   #
   protected write_lines(l)
      local s
      s := ""
      every s ||:= (!l) || "\r\n"
      every fire(WRITING_LINE_EVENT, !l)
      return send(s)
   end

   #
   # Read a single line from the connection, and return it.  Returns {&null} on eof.
   #
   protected read_line()
      local line, s

      repeat {
         #
         # Look for a line and if found return it.
         #
         sbuff ? {
            if line := tab(find("\r\n")) then {
               move(2)
               sbuff := tab(0)
               fire(READ_LINE_EVENT, line)
               return line
            }
         }
         s := recv(1048576) | fail
         if /s then {
            if *sbuff = 0 then
               return
            line := sbuff
            sbuff := ""
            fire(READ_LINE_EVENT, line)
            return line
         }
         sbuff ||:= s
      }
   end

   #
   # This method is the same as {read_line}, except that on end of
   # file it fails, setting {&why}, rather than returning {&null}.
   #
   protected expect_line()
      local s
      s := read_line() | fail
      return \s | error("Unexpected eof")
   end

   #
   # Read up to len bytes on the connection, returning {&null} on eof.
   #
   protected read_str(len)
      local t
      #
      # Use the line buffer if it has anything in it.
      #
      if *sbuff > 0 then {
         sbuff ? {
            t := move(len) | tab(0)
            sbuff := tab(0)
         }
      } else {
         t := recv(len) | fail
         if /t then
            return
      }
      fire(READ_STRING_EVENT, t)
      return t
   end

   # This method is the same as {read_str}, except that on end of file
   # it fails, setting {&why}, rather than returning {&null}.
   #
   protected expect_str(len)
      local s
      s := read_str(len) | fail
      return \s | error("Unexpected eof")
   end

   protected is_connected()
      if \self.connection then
         return
   end

   #
   # A flag value.  When set, indicate that the connection should be wrapped in
   # an SslStream.
   #
   public set_ssl(s)
      self.ssl_flag := check_flag(s)
      return self
   end

   #
   # A flag value.  When set, indicate that the remote host's identity should be
   # verified.  By default, this flag is on.
   #
   public set_ssl_verify(s)
      self.ssl_verify_flag := check_flag(s)
      return self
   end

   protected new()
      Connectable.new()
      sbuff := ""
      ssl_verify_flag := &yes
      return
   end
end
