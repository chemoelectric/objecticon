############################################################################
#
#	File:     columnize.icn
#
#	Subject:  Procedures to arrange data into columns
#
#	Author:   Robert J. Alexander
#
#	Date:     June 15, 1990
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#  columnize() -- Arrange data into columns.
#
#  Procedure to arrange a number of data items into multiple columns.
#  Items are arranged in column-wise order, that is, the sequence runs
#  down the first column, then down the second, etc.
#
#  This procedure goes to great lengths to print the items in as few
#  vertical lines as possible.
#
############################################################################

package ipl.columnize

import ipl.pdco

# Result record for `columnize`
record ColumnizeResult(rows, cols, width)

# A helpful function to take a list of strings and columnize them into
# generated lines using `columnize`.  Widths are taken to be simple
# string lengths.
#
# :Parameters :
# :  `l` - a list of strings
# :  `screen_width` - the total width available in characters
# :  `gutter` - the desired space between columns, default 2 characters
# : `rowwise` - a flag indicating whether output will be left to right
#               (flag set), or top to bottom (flag unset).
# :  `cvt` - an optional function to apply to an input string just
#            before it is added to the output.  It is given the `l` and
#            an index into `l`.
# 
procedure columnize_gen(l, screen_width, gutter, rowwise, cvt)
   local cr, s, i, j, k
   /gutter := 2
   /cvt := proc("[]", 2)
   cr := columnize(List{*!l}, screen_width, gutter, rowwise)
   every i := 1 to cr.rows do {
      s := ""
      every j := seq() do {
         if /rowwise then {
            k := i + cr.rows * (j - 1)
            s ||:= cvt(l, k)
            # Check for end-of-line
            (k + cr.rows <= *l) | break
         } else {
            k := (i - 1) * cr.cols + j 
            s ||:= cvt(l, k)
            (k < *l & j < cr.cols) | break
         }
         # Not end of line, so add padding
         s ||:= repl(" ", cr.width[j] + gutter - *l[k])
      }
      suspend s
   }
end

# Columnize a list of items given their widths.  A `ColumnizeResult`
# record is returned, giving the dimensions of the output as well as a
# list of the column widths.
#
# :Parameters :
# :  `l` - a list of item widths
# :  `screen_width` - the total width available
# :  `gutter` - the desired space between columns
# : `rowwise` - a flag indicating whether output will be left to right
#               (flag set), or top to bottom (flag unset).
#
procedure columnize(l, screen_width, gutter, rowwise)
   local cols, rows, w, mean, est, widths, mx
   mx := MaxNN{!l}
   if *l >= 2 & mx < screen_width then {
      /gutter := 2
      mean := Sum{!l} / *l
      est := 2 * screen_width / (mean + gutter)
      est >:= *l
      every cols := est to 2 by -1 do {
         if rows := compute_rows(l, cols, rowwise) then {
            widths := calc_widths(l, rows, cols, rowwise)
            w := gutter * (cols - 1) + Sum{!widths}
            if w <= screen_width then
               return ColumnizeResult(rows, cols, widths)
         }
      }
   }
   return ColumnizeResult(*l, 1, [mx])
end

package procedure compute_rows(l, cols, rowwise)
   local rows

   if cols < 2 then
      return *l

   rows := *l / cols
   if *l % cols ~= 0 then
      rows +:= 1

   # For column-wise orientation, check if the end of the first row is
   # in range... if not then these dimensions don't fit (eg 49 in 8
   # columns doesn't fit - the last column would be empty).
   if /rowwise & rows * (cols-1) >= *l then
      fail

   return rows
end

package procedure calc_widths(l, rows, cols, rowwise)
   local w, i, e
   w := list(cols, 0)
   i := 0
   if /rowwise then {
      every e := !l do {
         w[i / rows + 1] <:= e
         i +:= 1
      }
   } else {
      every e := !l do {
         w[i % cols + 1] <:= e
         i +:= 1
      }
   }
   return w
end
