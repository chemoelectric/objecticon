import gui, io, ipl.sort, util, graphics, ipl.filegui

class TTExplorer(Dialog)
   public
      bits_col,
      date_col,
      file_col,
      size_col,
      tt,
      tree

   #
   # Given a Node n, get the full file path it represents by traversing
   # up the tree structure to the root.
   #
   public get_full_path(n)
      local l
      l := []
      repeat {
         push(l, n.get_label().name)
         n := n.get_parent()
         if n === tree.get_root_node() then
            break
      }
      return FilePath.from_list(l).str()
   end

   #
   # Invoked when a sub-tree is expanded (ie: the little + is
   # clicked).  An expansion event also includes contractions
   # too.
   #
   public handle_tree_expansion()
      local n

      n := tree.get_last_expanded()
      #
      # Check whether it was an expansion or a contraction.  If
      # an expansion, load the subtree and refresh the tree.
      #
      if n.is_expanded() then {
         load_subtree(n)
         tree.tree_structure_changed()
      }
   end

   private fmt_time(t)
      local now
      now := Time.get_system_seconds()
      return if now - t > 180 * 86400 then
         Time(t + Time.SYSTEM_BASE_OFFSET).format("  NNN dd  yyyy")
      else
         Time(t + Time.SYSTEM_BASE_OFFSET).format("  NNN dd HH:mm")
   end

   #
   # Given a Node n, load its children with the sub-directories.
   #
   public load_subtree(n)
      local s, e, r1, l, t, c
      s := get_full_path(n)
      l := get_directory_list(s)
      n.clear_children()
      every e := !!l do {
         r1 := TreeTableNode()
         r1.set_label(e)
         if e.stat.mode_str[1] == "d" then
            r1.set_always_expandable(&yes)
         t := []
         every c := !tt.get_columns() do {
            case c of {
               bits_col: put(t, e.lstat.mode_str)
               date_col: put(t, fmt_time(e.lstat.mtime))
               size_col: put(t, Format.numeric_to_string(e.lstat.size, 0, ','))
            }
         }
         r1.set_contents(t)
         n.add(r1)
      }
   end

   #
   # Read a directory.
   #
   public get_directory_list(s)
      local e, dir_list, file_list, l
      if not(l := Files.ucs_list(s, ListEntryWithIcon)) then
         return [[],[]]
      dir_list := []
      file_list := []
      every e := !l do {
         if not(Files.is_hidden(e.name) | Files.is_relative_dir(e.name)) then {
            if e.stat.mode_str[1] == "d" then
               put(dir_list, e)
            else
               put(file_list, e)
         }
      }
      return [qsort(dir_list, Files.name_cmp),
              qsort(file_list, Files.name_cmp)]
   end

   public component_setup()
      local root_node, w, bw, p, d, c
      self.setup()
      tt.set_draggable_columns(&yes)
      tree := tt.get_table_content()
      p := scale(2)
      tree.
         set_fixed_col_w(IconFilesItemPaint.ICON_SIZE + 2 * p).
         set_item_paint(IconFilesItemPaint()).
         set_item_border(EmptyBorder().
                            set_insets(p, Gui.TEXT_INSET, 0, 0).
                            set_x_align(Align.L)).
         connect(self.handle_tree_expansion, Event.TREE_NODE_EXPANSION)

      bw := TableColumn().border.get_total_width()
      set_size(scale(800), scale(600))
      use {
         w := Window(),
         {
            size_col.set_column_width(bw + w.text_width("000,000,000,000"))
            date_col.set_column_width(bw + w.text_width("  MMM 00 00:00"))
            bits_col.set_column_width(bw + w.text_width("drwxrwxrwx  "))
         }
      }

      root_node := TreeTableNode()
      every d := Files.get_roots() do
         root_node.add(TreeTableNode().
                            set_label(ListEntryWithIcon(ucs(d), Files.lstat(d), Files.stat(d))).
                            set_always_expandable(&yes))
      tt.table_content.set_root_node(root_node).set_show_root(&no)
      if *root_node.children = 1 then {
         c := root_node.children[1]
         load_subtree(c)
         c.set_expanded(&yes)
      }
   end

   private on_close_button(ev)
      dispose()
   end

   private setup()
      local paint_2, layout_1, paint_1, paint, paint_3
      self.set_resize(&yes)
      paint := TextPaint("File")
      file_col := TableColumn().
         set_paint(paint).
         set_column_align(Align.L)
      paint_1 := TextPaint("Size")
      size_col := TableColumn().
         set_paint(paint_1).
         set_column_align(Align.R).
         set_column_width(scale(75))
      paint_2 := TextPaint("Date")
      date_col := TableColumn().
         set_paint(paint_2).
         set_column_align(Align.L).
         set_column_width(scale(100))
      paint_3 := TextPaint("Bits")
      bits_col := TableColumn().
         set_paint(paint_3).
         set_column_align(Align.L).
         set_column_width(scale(100))
      tt := ItemPaintTreeTable().
         set_size(scale(475), scale(265)).
         set_align(Align.C, Align.T).
         clear_constraints().
         set_constraint("eol", &yes).
         set_constraint("x_fill", &yes).
         set_constraint("x_weight", 1.0).
         set_constraint("y_fill", &yes).
         set_constraint("y_weight", 1.0).
         set_select_mode(Select.ONE).
         set_contents([]).
         add_column(file_col).
         add_column(size_col).
         add_column(date_col).
         add_column(bits_col)
      self.add(tt)
      self.connect(self.on_close_button, Event.WINDOW_CLOSE_BUTTON)
      layout_1 := GridLayout().
         set_extra("cells")
      self.set_layout(layout_1)
   end
end

procedure main()
   local d
   d := TTExplorer()
   d.show_modal()
end

### Ivib-v2 layout: layouts/$.layout
